
Main_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08011dd0  08011dd0  00021dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124e8  080124e8  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080124e8  080124e8  000224e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124f0  080124f0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124f0  080124f0  000224f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124f4  080124f4  000224f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080124f8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          00005000  200001e8  200001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200051e8  200051e8  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f2ee  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d54  00000000  00000000  0004f549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a88  00000000  00000000  000542a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001460  00000000  00000000  00055d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007961  00000000  00000000  00057188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002211a  00000000  00000000  0005eae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7499  00000000  00000000  00080c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008418  00000000  00000000  0016809c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001704b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011db8 	.word	0x08011db8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08011db8 	.word	0x08011db8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <encoder_Init>:
#include "stdbool.h"
#include "stdlib.h"


void encoder_Init(Encoder_t *enc,TIM_HandleTypeDef *htim, uint16_t pulPerRev, float deltaT)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	ed87 0a00 	vstr	s0, [r7]
 8000f54:	80fb      	strh	r3, [r7, #6]
	enc->htim = htim;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = pulPerRev;
 8000f5c:	88fa      	ldrh	r2, [r7, #6]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	611a      	str	r2, [r3, #16]
	enc->deltaT = deltaT;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <encoder_ResetCount>:
		return enc->Degree;
	}
	return 0;
}
void encoder_ResetCount(Encoder_t *enc)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
	enc->count_X4 = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
	enc->vel_Pre = 0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
	enc->vel_Real = 0;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
	enc->Distance = 0;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <encoder_GetFloatingDis>:
{
	enc->Radius = R;
}

float encoder_GetFloatingDis(Encoder_t *enc)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	enc->Distance += abs((int16_t)__HAL_TIM_GET_COUNTER(enc->htim));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bfb8      	it	lt
 8000fc4:	425b      	neglt	r3, r3
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	441a      	add	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
	return enc->Distance;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000fea:	eeb0 0a67 	vmov.f32	s0, s15
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <MotorDC_Init>:
 * @param pwmMode The PWM mode to be used for the motor.
 * @param channel1 The channel number for the first PWM output.
 * @param channel2 The channel number for the second PWM output.
 */
void MotorDC_Init(MotorDC *dcMotor, TIM_HandleTypeDef *htim, PWM_Mode pwmMode, uint32_t channel1, uint32_t channel2)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	80fb      	strh	r3, [r7, #6]
	dcMotor->Channel1 = channel1;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	609a      	str	r2, [r3, #8]
	dcMotor->Channel2 = channel2;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]
	dcMotor->invPWM = pwmMode;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	88fa      	ldrh	r2, [r7, #6]
 8001018:	809a      	strh	r2, [r3, #4]
	dcMotor->timDC = htim;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <MotorDC_Drive>:

void MotorDC_Drive(MotorDC *dcMotor, int32_t speedInput)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	uint16_t invPWM = dcMotor->invPWM;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	81fb      	strh	r3, [r7, #14]
	uint32_t pwm = abs(speedInput);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	60bb      	str	r3, [r7, #8]
	switch (dcMotor->invPWM) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d004      	beq.n	8001058 <MotorDC_Drive+0x2c>
 800104e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001052:	f000 8097 	beq.w	8001184 <MotorDC_Drive+0x158>
			if (speedInput < 0)
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
		break;
	}
}
 8001056:	e13d      	b.n	80012d4 <MotorDC_Drive+0x2a8>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, 0);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d105      	bne.n	800106c <MotorDC_Drive+0x40>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
 800106a:	e018      	b.n	800109e <MotorDC_Drive+0x72>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b04      	cmp	r3, #4
 8001072:	d105      	bne.n	8001080 <MotorDC_Drive+0x54>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	2300      	movs	r3, #0
 800107c:	6393      	str	r3, [r2, #56]	; 0x38
 800107e:	e00e      	b.n	800109e <MotorDC_Drive+0x72>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b08      	cmp	r3, #8
 8001086:	d105      	bne.n	8001094 <MotorDC_Drive+0x68>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	2300      	movs	r3, #0
 8001090:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001092:	e004      	b.n	800109e <MotorDC_Drive+0x72>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	2300      	movs	r3, #0
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, 0);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d105      	bne.n	80010b2 <MotorDC_Drive+0x86>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
 80010b0:	e018      	b.n	80010e4 <MotorDC_Drive+0xb8>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d105      	bne.n	80010c6 <MotorDC_Drive+0x9a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	6393      	str	r3, [r2, #56]	; 0x38
 80010c4:	e00e      	b.n	80010e4 <MotorDC_Drive+0xb8>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d105      	bne.n	80010da <MotorDC_Drive+0xae>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2300      	movs	r3, #0
 80010d6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010d8:	e004      	b.n	80010e4 <MotorDC_Drive+0xb8>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da23      	bge.n	8001132 <MotorDC_Drive+0x106>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <MotorDC_Drive+0xd2>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80010fc:	e0e7      	b.n	80012ce <MotorDC_Drive+0x2a2>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b04      	cmp	r3, #4
 8001104:	d105      	bne.n	8001112 <MotorDC_Drive+0xe6>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	6393      	str	r3, [r2, #56]	; 0x38
 8001110:	e037      	b.n	8001182 <MotorDC_Drive+0x156>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b08      	cmp	r3, #8
 8001118:	d105      	bne.n	8001126 <MotorDC_Drive+0xfa>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001124:	e02d      	b.n	8001182 <MotorDC_Drive+0x156>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001130:	e0cd      	b.n	80012ce <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	f340 80ca 	ble.w	80012ce <MotorDC_Drive+0x2a2>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <MotorDC_Drive+0x122>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800114c:	e0bf      	b.n	80012ce <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d105      	bne.n	8001162 <MotorDC_Drive+0x136>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001160:	e0b5      	b.n	80012ce <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2b08      	cmp	r3, #8
 8001168:	d105      	bne.n	8001176 <MotorDC_Drive+0x14a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001174:	e0ab      	b.n	80012ce <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001180:	e0a5      	b.n	80012ce <MotorDC_Drive+0x2a2>
 8001182:	e0a4      	b.n	80012ce <MotorDC_Drive+0x2a2>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d105      	bne.n	8001198 <MotorDC_Drive+0x16c>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	89fa      	ldrh	r2, [r7, #14]
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
 8001196:	e018      	b.n	80011ca <MotorDC_Drive+0x19e>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d105      	bne.n	80011ac <MotorDC_Drive+0x180>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	6393      	str	r3, [r2, #56]	; 0x38
 80011aa:	e00e      	b.n	80011ca <MotorDC_Drive+0x19e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d105      	bne.n	80011c0 <MotorDC_Drive+0x194>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011be:	e004      	b.n	80011ca <MotorDC_Drive+0x19e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d105      	bne.n	80011de <MotorDC_Drive+0x1b2>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	89fa      	ldrh	r2, [r7, #14]
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
 80011dc:	e018      	b.n	8001210 <MotorDC_Drive+0x1e4>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d105      	bne.n	80011f2 <MotorDC_Drive+0x1c6>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	6393      	str	r3, [r2, #56]	; 0x38
 80011f0:	e00e      	b.n	8001210 <MotorDC_Drive+0x1e4>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d105      	bne.n	8001206 <MotorDC_Drive+0x1da>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001204:	e004      	b.n	8001210 <MotorDC_Drive+0x1e4>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	da2b      	bge.n	800126e <MotorDC_Drive+0x242>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d107      	bne.n	800122e <MotorDC_Drive+0x202>
 800121e:	89f9      	ldrh	r1, [r7, #14]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	1a8a      	subs	r2, r1, r2
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800122c:	e051      	b.n	80012d2 <MotorDC_Drive+0x2a6>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b04      	cmp	r3, #4
 8001234:	d107      	bne.n	8001246 <MotorDC_Drive+0x21a>
 8001236:	89f9      	ldrh	r1, [r7, #14]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	6393      	str	r3, [r2, #56]	; 0x38
 8001244:	e042      	b.n	80012cc <MotorDC_Drive+0x2a0>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b08      	cmp	r3, #8
 800124c:	d107      	bne.n	800125e <MotorDC_Drive+0x232>
 800124e:	89f9      	ldrh	r1, [r7, #14]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1acb      	subs	r3, r1, r3
 800125a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800125c:	e036      	b.n	80012cc <MotorDC_Drive+0x2a0>
 800125e:	89f9      	ldrh	r1, [r7, #14]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1acb      	subs	r3, r1, r3
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800126c:	e031      	b.n	80012d2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	dd2e      	ble.n	80012d2 <MotorDC_Drive+0x2a6>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <MotorDC_Drive+0x260>
 800127c:	89f9      	ldrh	r1, [r7, #14]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	1a8a      	subs	r2, r1, r2
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800128a:	e022      	b.n	80012d2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b04      	cmp	r3, #4
 8001292:	d107      	bne.n	80012a4 <MotorDC_Drive+0x278>
 8001294:	89f9      	ldrh	r1, [r7, #14]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1acb      	subs	r3, r1, r3
 80012a0:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80012a2:	e016      	b.n	80012d2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d107      	bne.n	80012bc <MotorDC_Drive+0x290>
 80012ac:	89f9      	ldrh	r1, [r7, #14]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1acb      	subs	r3, r1, r3
 80012b8:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80012ba:	e00a      	b.n	80012d2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80012bc:	89f9      	ldrh	r1, [r7, #14]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1acb      	subs	r3, r1, r3
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80012ca:	e002      	b.n	80012d2 <MotorDC_Drive+0x2a6>
 80012cc:	e001      	b.n	80012d2 <MotorDC_Drive+0x2a6>
		break;
 80012ce:	bf00      	nop
 80012d0:	e000      	b.n	80012d4 <MotorDC_Drive+0x2a8>
		break;
 80012d2:	bf00      	nop
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <startPutBall>:
extern TIM_HandleTypeDef htim5;
PutParam_t putBall;
GetParam_t getBall;

void startPutBall(uint8_t state)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]

	MotorDC_Init(&putBall.mdc, &htim3, MOTOR_PWM_INVERSE, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80012ea:	2304      	movs	r3, #4
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f4:	4976      	ldr	r1, [pc, #472]	; (80014d0 <startPutBall+0x1f0>)
 80012f6:	4877      	ldr	r0, [pc, #476]	; (80014d4 <startPutBall+0x1f4>)
 80012f8:	f7ff fe7e 	bl	8000ff8 <MotorDC_Init>
	MotorDC_Init(&getBall.mdc, &htim5, MOTOR_PWM_NORMAL, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80012fc:	2304      	movs	r3, #4
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	2200      	movs	r2, #0
 8001304:	4974      	ldr	r1, [pc, #464]	; (80014d8 <startPutBall+0x1f8>)
 8001306:	4875      	ldr	r0, [pc, #468]	; (80014dc <startPutBall+0x1fc>)
 8001308:	f7ff fe76 	bl	8000ff8 <MotorDC_Init>
	encoder_Init(&putBall.enc, &htim2, 19200, 0.001);
 800130c:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80014e0 <startPutBall+0x200>
 8001310:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001314:	4973      	ldr	r1, [pc, #460]	; (80014e4 <startPutBall+0x204>)
 8001316:	4874      	ldr	r0, [pc, #464]	; (80014e8 <startPutBall+0x208>)
 8001318:	f7ff fe14 	bl	8000f44 <encoder_Init>
	if(state == 0)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d123      	bne.n	800136a <startPutBall+0x8a>
	{
		putBall.count += 1;
 8001322:	4b71      	ldr	r3, [pc, #452]	; (80014e8 <startPutBall+0x208>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	3301      	adds	r3, #1
 8001328:	4a6f      	ldr	r2, [pc, #444]	; (80014e8 <startPutBall+0x208>)
 800132a:	6593      	str	r3, [r2, #88]	; 0x58
		putBall.StopPutFlag = 0;
 800132c:	4b6e      	ldr	r3, [pc, #440]	; (80014e8 <startPutBall+0x208>)
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if(putBall.count < 50)
 8001334:	4b6c      	ldr	r3, [pc, #432]	; (80014e8 <startPutBall+0x208>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	2b31      	cmp	r3, #49	; 0x31
 800133a:	dc09      	bgt.n	8001350 <startPutBall+0x70>
		{
			MotorDC_Drive(&putBall.mdc, -200);
 800133c:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8001340:	4864      	ldr	r0, [pc, #400]	; (80014d4 <startPutBall+0x1f4>)
 8001342:	f7ff fe73 	bl	800102c <MotorDC_Drive>
			putBall.flag = 0;
 8001346:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <startPutBall+0x208>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800134e:	e007      	b.n	8001360 <startPutBall+0x80>
		}
		else
		{
			MotorDC_Drive(&putBall.mdc, 0);
 8001350:	2100      	movs	r1, #0
 8001352:	4860      	ldr	r0, [pc, #384]	; (80014d4 <startPutBall+0x1f4>)
 8001354:	f7ff fe6a 	bl	800102c <MotorDC_Drive>
			putBall.flag = 1;
 8001358:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <startPutBall+0x208>)
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		MotorDC_Drive(&getBall.mdc, -1000);
 8001360:	4962      	ldr	r1, [pc, #392]	; (80014ec <startPutBall+0x20c>)
 8001362:	485e      	ldr	r0, [pc, #376]	; (80014dc <startPutBall+0x1fc>)
 8001364:	f7ff fe62 	bl	800102c <MotorDC_Drive>
		}else{
			MotorDC_Drive(&putBall.mdc, -200);
			MotorDC_Drive(&getBall.mdc, -1000);
		}
	}
}
 8001368:	e0ae      	b.n	80014c8 <startPutBall+0x1e8>
	else if(state == 1)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d145      	bne.n	80013fc <startPutBall+0x11c>
		putBall.count = 0;
 8001370:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <startPutBall+0x208>)
 8001372:	2200      	movs	r2, #0
 8001374:	659a      	str	r2, [r3, #88]	; 0x58
		putBall.flag = 0;
 8001376:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <startPutBall+0x208>)
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		putBall.accel.vel_controller = 0;
 800137e:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <startPutBall+0x208>)
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	645a      	str	r2, [r3, #68]	; 0x44
		getBall.accel.vel_controller = 0;
 8001386:	4b5a      	ldr	r3, [pc, #360]	; (80014f0 <startPutBall+0x210>)
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
		if(putBall.StopPutFlag == 0)
 800138e:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <startPutBall+0x208>)
 8001390:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001394:	2b00      	cmp	r3, #0
 8001396:	d116      	bne.n	80013c6 <startPutBall+0xe6>
			if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin))
 8001398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800139c:	4855      	ldr	r0, [pc, #340]	; (80014f4 <startPutBall+0x214>)
 800139e:	f006 fdb3 	bl	8007f08 <HAL_GPIO_ReadPin>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00e      	beq.n	80013c6 <startPutBall+0xe6>
				osDelay(5);
 80013a8:	2005      	movs	r0, #5
 80013aa:	f009 fff0 	bl	800b38e <osDelay>
				if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin)){
 80013ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b2:	4850      	ldr	r0, [pc, #320]	; (80014f4 <startPutBall+0x214>)
 80013b4:	f006 fda8 	bl	8007f08 <HAL_GPIO_ReadPin>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <startPutBall+0xe6>
					putBall.StopPutFlag = 1;
 80013be:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <startPutBall+0x208>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if (putBall.StopPutFlag)
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <startPutBall+0x208>)
 80013c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <startPutBall+0x108>
			MotorDC_Drive(&putBall.mdc, 0);
 80013d0:	2100      	movs	r1, #0
 80013d2:	4840      	ldr	r0, [pc, #256]	; (80014d4 <startPutBall+0x1f4>)
 80013d4:	f7ff fe2a 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, 0);
 80013d8:	2100      	movs	r1, #0
 80013da:	4840      	ldr	r0, [pc, #256]	; (80014dc <startPutBall+0x1fc>)
 80013dc:	f7ff fe26 	bl	800102c <MotorDC_Drive>
			encoder_ResetCount(&putBall.enc);
 80013e0:	4841      	ldr	r0, [pc, #260]	; (80014e8 <startPutBall+0x208>)
 80013e2:	f7ff fdc7 	bl	8000f74 <encoder_ResetCount>
}
 80013e6:	e06f      	b.n	80014c8 <startPutBall+0x1e8>
			MotorDC_Drive(&putBall.mdc, 400);
 80013e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80013ec:	4839      	ldr	r0, [pc, #228]	; (80014d4 <startPutBall+0x1f4>)
 80013ee:	f7ff fe1d 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, -1000);
 80013f2:	493e      	ldr	r1, [pc, #248]	; (80014ec <startPutBall+0x20c>)
 80013f4:	4839      	ldr	r0, [pc, #228]	; (80014dc <startPutBall+0x1fc>)
 80013f6:	f7ff fe19 	bl	800102c <MotorDC_Drive>
}
 80013fa:	e065      	b.n	80014c8 <startPutBall+0x1e8>
	else if(state == 2)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d11f      	bne.n	8001442 <startPutBall+0x162>
		putBall.StopPutFlag = 0;
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <startPutBall+0x208>)
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		putBall.count += 1;
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <startPutBall+0x208>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	3301      	adds	r3, #1
 8001410:	4a35      	ldr	r2, [pc, #212]	; (80014e8 <startPutBall+0x208>)
 8001412:	6593      	str	r3, [r2, #88]	; 0x58
		if (putBall.count<25)
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <startPutBall+0x208>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	2b18      	cmp	r3, #24
 800141a:	dc09      	bgt.n	8001430 <startPutBall+0x150>
			MotorDC_Drive(&putBall.mdc,400);
 800141c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001420:	482c      	ldr	r0, [pc, #176]	; (80014d4 <startPutBall+0x1f4>)
 8001422:	f7ff fe03 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, -1000);
 8001426:	4931      	ldr	r1, [pc, #196]	; (80014ec <startPutBall+0x20c>)
 8001428:	482c      	ldr	r0, [pc, #176]	; (80014dc <startPutBall+0x1fc>)
 800142a:	f7ff fdff 	bl	800102c <MotorDC_Drive>
}
 800142e:	e04b      	b.n	80014c8 <startPutBall+0x1e8>
			MotorDC_Drive(&putBall.mdc,0);
 8001430:	2100      	movs	r1, #0
 8001432:	4828      	ldr	r0, [pc, #160]	; (80014d4 <startPutBall+0x1f4>)
 8001434:	f7ff fdfa 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, 0);
 8001438:	2100      	movs	r1, #0
 800143a:	4828      	ldr	r0, [pc, #160]	; (80014dc <startPutBall+0x1fc>)
 800143c:	f7ff fdf6 	bl	800102c <MotorDC_Drive>
}
 8001440:	e042      	b.n	80014c8 <startPutBall+0x1e8>
	else if(state == 3)
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d13f      	bne.n	80014c8 <startPutBall+0x1e8>
		putBall.count = 0;
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <startPutBall+0x208>)
 800144a:	2200      	movs	r2, #0
 800144c:	659a      	str	r2, [r3, #88]	; 0x58
		putBall.flag = 0;
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <startPutBall+0x208>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		putBall.accel.vel_controller = 0;
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <startPutBall+0x208>)
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	645a      	str	r2, [r3, #68]	; 0x44
		getBall.accel.vel_controller = 0;
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <startPutBall+0x210>)
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	645a      	str	r2, [r3, #68]	; 0x44
		if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin))
 8001466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800146a:	4822      	ldr	r0, [pc, #136]	; (80014f4 <startPutBall+0x214>)
 800146c:	f006 fd4c 	bl	8007f08 <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00e      	beq.n	8001494 <startPutBall+0x1b4>
			osDelay(5);
 8001476:	2005      	movs	r0, #5
 8001478:	f009 ff89 	bl	800b38e <osDelay>
			if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin)){
 800147c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001480:	481c      	ldr	r0, [pc, #112]	; (80014f4 <startPutBall+0x214>)
 8001482:	f006 fd41 	bl	8007f08 <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <startPutBall+0x1b4>
				putBall.StopPutFlag = 1;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <startPutBall+0x208>)
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if (putBall.StopPutFlag)
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <startPutBall+0x208>)
 8001496:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <startPutBall+0x1d6>
			MotorDC_Drive(&putBall.mdc, 0);
 800149e:	2100      	movs	r1, #0
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <startPutBall+0x1f4>)
 80014a2:	f7ff fdc3 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, 0);
 80014a6:	2100      	movs	r1, #0
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <startPutBall+0x1fc>)
 80014aa:	f7ff fdbf 	bl	800102c <MotorDC_Drive>
			encoder_ResetCount(&putBall.enc);
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <startPutBall+0x208>)
 80014b0:	f7ff fd60 	bl	8000f74 <encoder_ResetCount>
}
 80014b4:	e008      	b.n	80014c8 <startPutBall+0x1e8>
			MotorDC_Drive(&putBall.mdc, -200);
 80014b6:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <startPutBall+0x1f4>)
 80014bc:	f7ff fdb6 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, -1000);
 80014c0:	490a      	ldr	r1, [pc, #40]	; (80014ec <startPutBall+0x20c>)
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <startPutBall+0x1fc>)
 80014c4:	f7ff fdb2 	bl	800102c <MotorDC_Drive>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000748 	.word	0x20000748
 80014d4:	20000234 	.word	0x20000234
 80014d8:	200007d8 	.word	0x200007d8
 80014dc:	20000290 	.word	0x20000290
 80014e0:	3a83126f 	.word	0x3a83126f
 80014e4:	20000700 	.word	0x20000700
 80014e8:	20000204 	.word	0x20000204
 80014ec:	fffffc18 	.word	0xfffffc18
 80014f0:	20000260 	.word	0x20000260
 80014f4:	40021000 	.word	0x40021000

080014f8 <PutBall_getFlag>:

uint8_t PutBall_getFlag()
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	return putBall.flag;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <PutBall_getFlag+0x14>)
 80014fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000204 	.word	0x20000204

08001510 <modulo360>:
 *  Created on: Oct 12, 2023
 *      Author: Admin
 */

#include "AngleOptimizer.h"
float modulo360(float Angle){
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	ed87 0a01 	vstr	s0, [r7, #4]
	int Result = (int)Angle/360.0;
 800151a:	edd7 7a01 	vldr	s15, [r7, #4]
 800151e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001522:	ee17 0a90 	vmov	r0, s15
 8001526:	f7fe fffd 	bl	8000524 <__aeabi_i2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <modulo360+0x78>)
 8001530:	f7ff f98c 	bl	800084c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fb0c 	bl	8000b58 <__aeabi_d2iz>
 8001540:	4603      	mov	r3, r0
 8001542:	60fb      	str	r3, [r7, #12]
	return Angle-Result*360.0;
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7fe ffff 	bl	8000548 <__aeabi_f2d>
 800154a:	4604      	mov	r4, r0
 800154c:	460d      	mov	r5, r1
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7fe ffe8 	bl	8000524 <__aeabi_i2d>
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <modulo360+0x78>)
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fe8f 	bl	8000288 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb19 	bl	8000ba8 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	ee07 3a90 	vmov	s15, r3
}
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bdb0      	pop	{r4, r5, r7, pc}
 8001586:	bf00      	nop
 8001588:	40768000 	.word	0x40768000

0800158c <absf>:

float absf(float num)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	ed87 0a01 	vstr	s0, [r7, #4]
	if (num>=0)return num;
 8001596:	edd7 7a01 	vldr	s15, [r7, #4]
 800159a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	db02      	blt.n	80015aa <absf+0x1e>
 80015a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a8:	e003      	b.n	80015b2 <absf+0x26>
	else return num*-1;
 80015aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ae:	eef1 7a67 	vneg.f32	s15, s15
}
 80015b2:	eeb0 0a67 	vmov.f32	s0, s15
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <angopt_Cal>:
	swer_SetOptAngle(ID, opt);
}


void angopt_Cal(ModuleID ID,float input)
{
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	ed2d 8b02 	vpush	{d8}
 80015c6:	b099      	sub	sp, #100	; 0x64
 80015c8:	af0a      	add	r7, sp, #40	; 0x28
 80015ca:	4603      	mov	r3, r0
 80015cc:	ed87 0a00 	vstr	s0, [r7]
 80015d0:	71fb      	strb	r3, [r7, #7]
	Angle_Opt_Param opt = swer_GetOptAngle(ID);
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	79fa      	ldrb	r2, [r7, #7]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fed8 	bl	8002390 <swer_GetOptAngle>
#define outputAngle 	opt.outputAngle
#define preAngle 		opt.preAngle
#define calInput		opt.calInput
#define preCal			opt.preCal
#define deltaCal		opt.deltaCal
	if(input != preAngle){
 80015e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015e4:	ed97 7a00 	vldr	s14, [r7]
 80015e8:	eeb4 7a67 	vcmp.f32	s14, s15
 80015ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f0:	f000 80d7 	beq.w	80017a2 <angopt_Cal+0x1e2>
		calInput = input;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	61fb      	str	r3, [r7, #28]

		if((currentAngle>=0)&&(calInput<0))
 80015f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001604:	db0f      	blt.n	8001626 <angopt_Cal+0x66>
 8001606:	edd7 7a07 	vldr	s15, [r7, #28]
 800160a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	d508      	bpl.n	8001626 <angopt_Cal+0x66>
		{
			calInput+=360;
 8001614:	edd7 7a07 	vldr	s15, [r7, #28]
 8001618:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80017b0 <angopt_Cal+0x1f0>
 800161c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001620:	edc7 7a07 	vstr	s15, [r7, #28]
 8001624:	e015      	b.n	8001652 <angopt_Cal+0x92>
		}
		else if ((currentAngle<0)&&(calInput>0))
 8001626:	edd7 7a03 	vldr	s15, [r7, #12]
 800162a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d50e      	bpl.n	8001652 <angopt_Cal+0x92>
 8001634:	edd7 7a07 	vldr	s15, [r7, #28]
 8001638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	dd07      	ble.n	8001652 <angopt_Cal+0x92>
		{
			calInput-=360;
 8001642:	edd7 7a07 	vldr	s15, [r7, #28]
 8001646:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80017b0 <angopt_Cal+0x1f0>
 800164a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800164e:	edc7 7a07 	vstr	s15, [r7, #28]
		}

		deltaAngle = calInput - modulo360(currentAngle);
 8001652:	ed97 8a07 	vldr	s16, [r7, #28]
 8001656:	edd7 7a03 	vldr	s15, [r7, #12]
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	f7ff ff57 	bl	8001510 <modulo360>
 8001662:	eef0 7a40 	vmov.f32	s15, s0
 8001666:	ee78 7a67 	vsub.f32	s15, s16, s15
 800166a:	edc7 7a04 	vstr	s15, [r7, #16]

		if(deltaAngle>180)
 800166e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001672:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80017b4 <angopt_Cal+0x1f4>
 8001676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	dd08      	ble.n	8001692 <angopt_Cal+0xd2>
		{
			deltaAngle+=-360;
 8001680:	edd7 7a04 	vldr	s15, [r7, #16]
 8001684:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80017b0 <angopt_Cal+0x1f0>
 8001688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800168c:	edc7 7a04 	vstr	s15, [r7, #16]
 8001690:	e010      	b.n	80016b4 <angopt_Cal+0xf4>
		}
		else if(deltaAngle<-180)
 8001692:	edd7 7a04 	vldr	s15, [r7, #16]
 8001696:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80017b8 <angopt_Cal+0x1f8>
 800169a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	d507      	bpl.n	80016b4 <angopt_Cal+0xf4>
		{
			deltaAngle+=360;
 80016a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80017b0 <angopt_Cal+0x1f0>
 80016ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016b0:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		if((deltaAngle<=90)&&(deltaAngle>=-90))deltaAngle = deltaAngle;
 80016b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80017bc <angopt_Cal+0x1fc>
 80016bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	d80b      	bhi.n	80016de <angopt_Cal+0x11e>
 80016c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ca:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80017c0 <angopt_Cal+0x200>
 80016ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d6:	db02      	blt.n	80016de <angopt_Cal+0x11e>
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	e034      	b.n	8001748 <angopt_Cal+0x188>
		else if ((deltaAngle>90)&&(deltaAngle<=180))deltaAngle += -180.0;
 80016de:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80017bc <angopt_Cal+0x1fc>
 80016e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	dd11      	ble.n	8001714 <angopt_Cal+0x154>
 80016f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80017b4 <angopt_Cal+0x1f4>
 80016f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	d808      	bhi.n	8001714 <angopt_Cal+0x154>
 8001702:	edd7 7a04 	vldr	s15, [r7, #16]
 8001706:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80017b4 <angopt_Cal+0x1f4>
 800170a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800170e:	edc7 7a04 	vstr	s15, [r7, #16]
 8001712:	e019      	b.n	8001748 <angopt_Cal+0x188>
		else if ((deltaAngle<-90)&&(deltaAngle>=-180))deltaAngle += 180.0;
 8001714:	edd7 7a04 	vldr	s15, [r7, #16]
 8001718:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80017c0 <angopt_Cal+0x200>
 800171c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	d510      	bpl.n	8001748 <angopt_Cal+0x188>
 8001726:	edd7 7a04 	vldr	s15, [r7, #16]
 800172a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80017b8 <angopt_Cal+0x1f8>
 800172e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	db07      	blt.n	8001748 <angopt_Cal+0x188>
 8001738:	edd7 7a04 	vldr	s15, [r7, #16]
 800173c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80017b4 <angopt_Cal+0x1f4>
 8001740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001744:	edc7 7a04 	vstr	s15, [r7, #16]

		preAngle = input;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	61bb      	str	r3, [r7, #24]
		preCal = calInput;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	623b      	str	r3, [r7, #32]
		currentAngle += deltaAngle;
 8001750:	ed97 7a03 	vldr	s14, [r7, #12]
 8001754:	edd7 7a04 	vldr	s15, [r7, #16]
 8001758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175c:	edc7 7a03 	vstr	s15, [r7, #12]
		if(currentAngle>=1080) currentAngle-=360;
 8001760:	edd7 7a03 	vldr	s15, [r7, #12]
 8001764:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80017c4 <angopt_Cal+0x204>
 8001768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	db07      	blt.n	8001782 <angopt_Cal+0x1c2>
 8001772:	edd7 7a03 	vldr	s15, [r7, #12]
 8001776:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80017b0 <angopt_Cal+0x1f0>
 800177a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800177e:	edc7 7a03 	vstr	s15, [r7, #12]
		swer_SetOptAngle(ID, opt);
 8001782:	79fe      	ldrb	r6, [r7, #7]
 8001784:	466d      	mov	r5, sp
 8001786:	f107 0414 	add.w	r4, r7, #20
 800178a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	602b      	str	r3, [r5, #0]
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179c:	4630      	mov	r0, r6
 800179e:	f000 fdd5 	bl	800234c <swer_SetOptAngle>
	}
}
 80017a2:	bf00      	nop
 80017a4:	373c      	adds	r7, #60	; 0x3c
 80017a6:	46bd      	mov	sp, r7
 80017a8:	ecbd 8b02 	vpop	{d8}
 80017ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	43b40000 	.word	0x43b40000
 80017b4:	43340000 	.word	0x43340000
 80017b8:	c3340000 	.word	0xc3340000
 80017bc:	42b40000 	.word	0x42b40000
 80017c0:	c2b40000 	.word	0xc2b40000
 80017c4:	44870000 	.word	0x44870000

080017c8 <invkine_CalWheelVector>:
#include "main.h"
int Count;
extern TIM_HandleTypeDef htim10;
InverseKinematicProcedure InvCalcStep = 0;

void invkine_CalWheelVector(ModuleID ID, float u, float v, float r){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80017d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80017d8:	ed87 1a00 	vstr	s2, [r7]
 80017dc:	73fb      	strb	r3, [r7, #15]
	pVectorCalXY pVectXY = swer_GetFuncHandle(ID);
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fdf1 	bl	80023c8 <swer_GetFuncHandle>
 80017e6:	6178      	str	r0, [r7, #20]
	pVectXY(u,v,r);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	ed97 1a00 	vldr	s2, [r7]
 80017ee:	edd7 0a01 	vldr	s1, [r7, #4]
 80017f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80017f6:	4798      	blx	r3
}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <invkine_CalOptAngle>:

void invkine_CalOptAngle(ModuleID ID){
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	WheelVector vect = swer_GetWheelVector(ID);
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fd77 	bl	8002300 <swer_GetWheelVector>
 8001812:	eef0 6a40 	vmov.f32	s13, s0
 8001816:	eeb0 7a60 	vmov.f32	s14, s1
 800181a:	eef0 7a41 	vmov.f32	s15, s2
 800181e:	edc7 6a02 	vstr	s13, [r7, #8]
 8001822:	ed87 7a03 	vstr	s14, [r7, #12]
 8001826:	edc7 7a04 	vstr	s15, [r7, #16]
//	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
//	angopt.Case1 = angopt_QuadrantCheckInput(vect.wheelVelX,vect.wheelVelY);
//	swer_SetOptAngle(ID, angopt);

	//------------------------------------------------------------------
	float rawAngle = atan2(vect.wheelVelY,vect.wheelVelX)*180.0/M_PI;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe8b 	bl	8000548 <__aeabi_f2d>
 8001832:	4604      	mov	r4, r0
 8001834:	460d      	mov	r5, r1
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe85 	bl	8000548 <__aeabi_f2d>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	ec43 2b11 	vmov	d1, r2, r3
 8001846:	ec45 4b10 	vmov	d0, r4, r5
 800184a:	f00e f8d3 	bl	800f9f4 <atan2>
 800184e:	ec51 0b10 	vmov	r0, r1, d0
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <invkine_CalOptAngle+0xa0>)
 8001858:	f7fe fece 	bl	80005f8 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	a30c      	add	r3, pc, #48	; (adr r3, 8001898 <invkine_CalOptAngle+0x98>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe ffef 	bl	800084c <__aeabi_ddiv>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f7ff f997 	bl	8000ba8 <__aeabi_d2f>
 800187a:	4603      	mov	r3, r0
 800187c:	617b      	str	r3, [r7, #20]
	angopt_Cal(ID, rawAngle);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	ed97 0a05 	vldr	s0, [r7, #20]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fe9b 	bl	80015c0 <angopt_Cal>
	//------------------------------------------------------------------

}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bdb0      	pop	{r4, r5, r7, pc}
 8001892:	bf00      	nop
 8001894:	f3af 8000 	nop.w
 8001898:	54442d18 	.word	0x54442d18
 800189c:	400921fb 	.word	0x400921fb
 80018a0:	40668000 	.word	0x40668000
 80018a4:	00000000 	.word	0x00000000

080018a8 <invkine_CalSpeedVectorControl>:

float invkine_CalSpeedVectorControl(ModuleID ID)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
	float temp;
	WheelVector vect = swer_GetWheelVector(ID);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fd23 	bl	8002300 <swer_GetWheelVector>
 80018ba:	eef0 6a40 	vmov.f32	s13, s0
 80018be:	eeb0 7a60 	vmov.f32	s14, s1
 80018c2:	eef0 7a41 	vmov.f32	s15, s2
 80018c6:	edc7 6a02 	vstr	s13, [r7, #8]
 80018ca:	ed87 7a03 	vstr	s14, [r7, #12]
 80018ce:	edc7 7a04 	vstr	s15, [r7, #16]
//	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
//	angopt_QuadRantCheckOutput(ID,angopt.currentAngle*M_PI/180);
	temp = (60.0/(ROBOT_WHEEL_RADIUS_METER*2.0*M_PI)) * (sqrt(pow(vect.wheelVelX,2) + pow(vect.wheelVelY,2))) ;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe37 	bl	8000548 <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001958 <invkine_CalSpeedVectorControl+0xb0>
 80018e2:	ec43 2b10 	vmov	d0, r2, r3
 80018e6:	f00e f887 	bl	800f9f8 <pow>
 80018ea:	ec55 4b10 	vmov	r4, r5, d0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe29 	bl	8000548 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001958 <invkine_CalSpeedVectorControl+0xb0>
 80018fe:	ec43 2b10 	vmov	d0, r2, r3
 8001902:	f00e f879 	bl	800f9f8 <pow>
 8001906:	ec53 2b10 	vmov	r2, r3, d0
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f7fe fcbd 	bl	800028c <__adddf3>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	ec43 2b17 	vmov	d7, r2, r3
 800191a:	eeb0 0a47 	vmov.f32	s0, s14
 800191e:	eef0 0a67 	vmov.f32	s1, s15
 8001922:	f00e f8d9 	bl	800fad8 <sqrt>
 8001926:	ec51 0b10 	vmov	r0, r1, d0
 800192a:	a30d      	add	r3, pc, #52	; (adr r3, 8001960 <invkine_CalSpeedVectorControl+0xb8>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fe62 	bl	80005f8 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f934 	bl	8000ba8 <__aeabi_d2f>
 8001940:	4603      	mov	r3, r0
 8001942:	617b      	str	r3, [r7, #20]
	return temp;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	ee07 3a90 	vmov	s15, r3
}
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bdb0      	pop	{r4, r5, r7, pc}
 8001954:	f3af 8000 	nop.w
 8001958:	00000000 	.word	0x00000000
 800195c:	40000000 	.word	0x40000000
 8001960:	644967bf 	.word	0x644967bf
 8001964:	406a869c 	.word	0x406a869c

08001968 <invkine_Implementation>:

HAL_StatusTypeDef  invkine_Implementation(ModuleID ID, float u, float v, float r,void (*ptnCpltCallback)(ModuleID,float, float))
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	ed87 0a04 	vstr	s0, [r7, #16]
 8001974:	edc7 0a03 	vstr	s1, [r7, #12]
 8001978:	ed87 1a02 	vstr	s2, [r7, #8]
 800197c:	6079      	str	r1, [r7, #4]
 800197e:	75fb      	strb	r3, [r7, #23]
	static float velocity = 0;
	invkine_CalWheelVector(ID, u, v, r);
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	ed97 1a02 	vldr	s2, [r7, #8]
 8001986:	edd7 0a03 	vldr	s1, [r7, #12]
 800198a:	ed97 0a04 	vldr	s0, [r7, #16]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff1a 	bl	80017c8 <invkine_CalWheelVector>
	WheelVector vect = swer_GetWheelVector(ID);
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fcb2 	bl	8002300 <swer_GetWheelVector>
 800199c:	eef0 6a40 	vmov.f32	s13, s0
 80019a0:	eeb0 7a60 	vmov.f32	s14, s1
 80019a4:	eef0 7a41 	vmov.f32	s15, s2
 80019a8:	edc7 6a06 	vstr	s13, [r7, #24]
 80019ac:	ed87 7a07 	vstr	s14, [r7, #28]
 80019b0:	edc7 7a08 	vstr	s15, [r7, #32]
	float rawAngle = atan2(vect.wheelVelY,vect.wheelVelX)*180.0/M_PI;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fdc6 	bl	8000548 <__aeabi_f2d>
 80019bc:	4604      	mov	r4, r0
 80019be:	460d      	mov	r5, r1
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdc0 	bl	8000548 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	ec43 2b11 	vmov	d1, r2, r3
 80019d0:	ec45 4b10 	vmov	d0, r4, r5
 80019d4:	f00e f80e 	bl	800f9f4 <atan2>
 80019d8:	ec51 0b10 	vmov	r0, r1, d0
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <invkine_Implementation+0x168>)
 80019e2:	f7fe fe09 	bl	80005f8 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	a336      	add	r3, pc, #216	; (adr r3, 8001ac8 <invkine_Implementation+0x160>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe ff2a 	bl	800084c <__aeabi_ddiv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f8d2 	bl	8000ba8 <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
	if(u == 0&&v==0&&r==0)__NOP();
 8001a08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d10f      	bne.n	8001a36 <invkine_Implementation+0xce>
 8001a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d108      	bne.n	8001a36 <invkine_Implementation+0xce>
 8001a24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	d101      	bne.n	8001a36 <invkine_Implementation+0xce>
 8001a32:	bf00      	nop
 8001a34:	e003      	b.n	8001a3e <invkine_Implementation+0xd6>
	else invkine_CalOptAngle(ID);
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fee1 	bl	8001800 <invkine_CalOptAngle>
	velocity = invkine_CalSpeedVectorControl(ID);
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff31 	bl	80018a8 <invkine_CalSpeedVectorControl>
 8001a46:	eef0 7a40 	vmov.f32	s15, s0
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <invkine_Implementation+0x16c>)
 8001a4c:	edc3 7a00 	vstr	s15, [r3]
	if(u == 0&&v==0&&r==0)rawAngle= vect.PreAngle;
 8001a50:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	d10f      	bne.n	8001a7e <invkine_Implementation+0x116>
 8001a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d108      	bne.n	8001a7e <invkine_Implementation+0x116>
 8001a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	d101      	bne.n	8001a7e <invkine_Implementation+0x116>
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
	ptnCpltCallback(ID,velocity,rawAngle);
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <invkine_Implementation+0x16c>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	7dfa      	ldrb	r2, [r7, #23]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	4610      	mov	r0, r2
 8001a92:	4798      	blx	r3
	vect.PreAngle = rawAngle;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	623b      	str	r3, [r7, #32]
	swer_SetWheelVector(ID,vect);
 8001a98:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	eeb0 0a66 	vmov.f32	s0, s13
 8001aaa:	eef0 0a47 	vmov.f32	s1, s14
 8001aae:	eeb0 1a67 	vmov.f32	s2, s15
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fc00 	bl	80022b8 <swer_SetWheelVector>
	return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	54442d18 	.word	0x54442d18
 8001acc:	400921fb 	.word	0x400921fb
 8001ad0:	40668000 	.word	0x40668000
 8001ad4:	200002b8 	.word	0x200002b8

08001ad8 <trajecPlan_Cal>:
	pd->u = pd->uP + pd->uD;
	if(pd->u > pd->uAbove)pd->u = pd->uAbove;
	else if (pd->u < pd->uBelow)pd->u = pd->uBelow;
}

void trajecPlan_Cal(trajec_Param *trajec){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	trajec->a0 = trajec->P0;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69da      	ldr	r2, [r3, #28]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	605a      	str	r2, [r3, #4]
	trajec->a1 = trajec->v0;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
	trajec->a2 = (3/(trajec->tf*trajec->tf))*(trajec->Pf - trajec->P0) - (2/trajec->tf)*trajec->v0 - (1/trajec->tf)*trajec->vf;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b00:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	edd3 6a08 	vldr	s13, [r3, #32]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b22:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b26:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001b42:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	edc3 7a03 	vstr	s15, [r3, #12]
	trajec->a3 = (-2/(trajec->tf*trajec->tf*trajec->tf))*(trajec->Pf - trajec->P0) + (1/(trajec->tf*trajec->tf))*(trajec->vf + trajec->v0);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b74:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 8001b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ba4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bb4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	edc3 7a04 	vstr	s15, [r3, #16]

	if (trajec->t > trajec->tf) trajec->t = trajec->tf;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	dd03      	ble.n	8001be4 <trajecPlan_Cal+0x10c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	601a      	str	r2, [r3, #0]

	trajec->xTrajec = trajec->a0 + trajec->a1*trajec->t + trajec->a2*trajec->t*trajec->t + trajec->a3*trajec->t*trajec->t*trajec->t;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	edd3 7a00 	vldr	s15, [r3]
 8001c0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	edc3 7a05 	vstr	s15, [r3, #20]
	trajec->xdottraject = trajec->a1 + 2*trajec->a2*trajec->t + 3* trajec->a3*trajec->t*trajec->t;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c56:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c6e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001c72:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	edc3 7a06 	vstr	s15, [r3, #24]

	if(trajec->Pf == trajec->P0){
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	ed93 7a08 	vldr	s14, [r3, #32]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ca0:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	d107      	bne.n	8001cba <trajecPlan_Cal+0x1e2>
		trajec->xTrajec = trajec->Pf;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1a      	ldr	r2, [r3, #32]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	615a      	str	r2, [r3, #20]
		trajec->xdottraject = 0;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]
	}
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <trajecPlan_SetParam>:

void trajecPlan_SetParam(trajec_Param *trajec,float P0,float Pf,float tf,float v0,float vf)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b087      	sub	sp, #28
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6178      	str	r0, [r7, #20]
 8001cce:	ed87 0a04 	vstr	s0, [r7, #16]
 8001cd2:	edc7 0a03 	vstr	s1, [r7, #12]
 8001cd6:	ed87 1a02 	vstr	s2, [r7, #8]
 8001cda:	edc7 1a01 	vstr	s3, [r7, #4]
 8001cde:	ed87 2a00 	vstr	s4, [r7]
	trajec -> t = 0;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
	trajec -> P0 = P0;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	61da      	str	r2, [r3, #28]
	trajec -> Pf = Pf;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	621a      	str	r2, [r3, #32]
	trajec -> tf = tf;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24
	trajec -> v0 = v0;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28
	trajec -> vf = vf;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d08:	bf00      	nop
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <swer0_CalVector>:
#define DY3	-0.09428
#define DY1	-0.09428
#define DY2	0.18856

SwerveModuleParam swerParam[MAX_MODULE];
void swer0_CalVector(float u, float v, float r){
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d1e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d22:	ed87 1a01 	vstr	s2, [r7, #4]
	__NOP();
 8001d26:	bf00      	nop
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	0000      	movs	r0, r0
	...

08001d38 <swer1_CalVector>:
//	float alpha = (225)*M_PI/180;
//	vct.wheelVelX = cos(alpha)*(u + ROBOT_WIDTH_METER*r) - sin(alpha)*(v + ROBOT_LENGHT_METER*r);
//	vct.wheelVelY = sin(alpha)*(u + ROBOT_WIDTH_METER*r) + cos(alpha)*(v + ROBOT_LENGHT_METER*r);
//	swer_SetWheelVector(MODULE_ID_4, vct);
//}
void swer1_CalVector(float u, float v, float r){
 8001d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d3c:	b088      	sub	sp, #32
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d44:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d48:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = 180*M_PI/180;
 8001d4c:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <swer1_CalVector+0x1b8>)
 8001d4e:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY1*r) - sin(alpha)*(v + DX1*r);
 8001d50:	69f8      	ldr	r0, [r7, #28]
 8001d52:	f7fe fbf9 	bl	8000548 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	ec43 2b10 	vmov	d0, r2, r3
 8001d5e:	f00d fee7 	bl	800fb30 <cos>
 8001d62:	ec59 8b10 	vmov	r8, r9, d0
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7fe fbee 	bl	8000548 <__aeabi_f2d>
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	460d      	mov	r5, r1
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7fe fbe9 	bl	8000548 <__aeabi_f2d>
 8001d76:	a35a      	add	r3, pc, #360	; (adr r3, 8001ee0 <swer1_CalVector+0x1a8>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc3c 	bl	80005f8 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4620      	mov	r0, r4
 8001d86:	4629      	mov	r1, r5
 8001d88:	f7fe fa80 	bl	800028c <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4640      	mov	r0, r8
 8001d92:	4649      	mov	r1, r9
 8001d94:	f7fe fc30 	bl	80005f8 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4690      	mov	r8, r2
 8001d9e:	4699      	mov	r9, r3
 8001da0:	69f8      	ldr	r0, [r7, #28]
 8001da2:	f7fe fbd1 	bl	8000548 <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	ec43 2b10 	vmov	d0, r2, r3
 8001dae:	f00d ff13 	bl	800fbd8 <sin>
 8001db2:	ec5b ab10 	vmov	sl, fp, d0
 8001db6:	68b8      	ldr	r0, [r7, #8]
 8001db8:	f7fe fbc6 	bl	8000548 <__aeabi_f2d>
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	460d      	mov	r5, r1
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7fe fbc1 	bl	8000548 <__aeabi_f2d>
 8001dc6:	a348      	add	r3, pc, #288	; (adr r3, 8001ee8 <swer1_CalVector+0x1b0>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fc14 	bl	80005f8 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	f7fe fa58 	bl	800028c <__adddf3>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4650      	mov	r0, sl
 8001de2:	4659      	mov	r1, fp
 8001de4:	f7fe fc08 	bl	80005f8 <__aeabi_dmul>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4640      	mov	r0, r8
 8001dee:	4649      	mov	r1, r9
 8001df0:	f7fe fa4a 	bl	8000288 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7fe fed4 	bl	8000ba8 <__aeabi_d2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	613b      	str	r3, [r7, #16]
	vct.wheelVelY = sin(alpha)*(u - DY1*r) + cos(alpha)*(v + DX1*r);
 8001e04:	69f8      	ldr	r0, [r7, #28]
 8001e06:	f7fe fb9f 	bl	8000548 <__aeabi_f2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ec43 2b10 	vmov	d0, r2, r3
 8001e12:	f00d fee1 	bl	800fbd8 <sin>
 8001e16:	ec59 8b10 	vmov	r8, r9, d0
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7fe fb94 	bl	8000548 <__aeabi_f2d>
 8001e20:	4604      	mov	r4, r0
 8001e22:	460d      	mov	r5, r1
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7fe fb8f 	bl	8000548 <__aeabi_f2d>
 8001e2a:	a32d      	add	r3, pc, #180	; (adr r3, 8001ee0 <swer1_CalVector+0x1a8>)
 8001e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e30:	f7fe fbe2 	bl	80005f8 <__aeabi_dmul>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4620      	mov	r0, r4
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	f7fe fa26 	bl	800028c <__adddf3>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4640      	mov	r0, r8
 8001e46:	4649      	mov	r1, r9
 8001e48:	f7fe fbd6 	bl	80005f8 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4690      	mov	r8, r2
 8001e52:	4699      	mov	r9, r3
 8001e54:	69f8      	ldr	r0, [r7, #28]
 8001e56:	f7fe fb77 	bl	8000548 <__aeabi_f2d>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	ec43 2b10 	vmov	d0, r2, r3
 8001e62:	f00d fe65 	bl	800fb30 <cos>
 8001e66:	ec5b ab10 	vmov	sl, fp, d0
 8001e6a:	68b8      	ldr	r0, [r7, #8]
 8001e6c:	f7fe fb6c 	bl	8000548 <__aeabi_f2d>
 8001e70:	4604      	mov	r4, r0
 8001e72:	460d      	mov	r5, r1
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7fe fb67 	bl	8000548 <__aeabi_f2d>
 8001e7a:	a31b      	add	r3, pc, #108	; (adr r3, 8001ee8 <swer1_CalVector+0x1b0>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fbba 	bl	80005f8 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4620      	mov	r0, r4
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	f7fe f9fe 	bl	800028c <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4650      	mov	r0, sl
 8001e96:	4659      	mov	r1, fp
 8001e98:	f7fe fbae 	bl	80005f8 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4640      	mov	r0, r8
 8001ea2:	4649      	mov	r1, r9
 8001ea4:	f7fe f9f2 	bl	800028c <__adddf3>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f7fe fe7a 	bl	8000ba8 <__aeabi_d2f>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	617b      	str	r3, [r7, #20]
	swer_SetWheelVector(MODULE_ID_1, vct);
 8001eb8:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ebc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ec0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ec4:	eeb0 0a66 	vmov.f32	s0, s13
 8001ec8:	eef0 0a47 	vmov.f32	s1, s14
 8001ecc:	eeb0 1a67 	vmov.f32	s2, s15
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f000 f9f1 	bl	80022b8 <swer_SetWheelVector>
}
 8001ed6:	bf00      	nop
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ee0:	ecaab8a6 	.word	0xecaab8a6
 8001ee4:	3fb822bb 	.word	0x3fb822bb
 8001ee8:	f1800a7c 	.word	0xf1800a7c
 8001eec:	bfd21a0c 	.word	0xbfd21a0c
 8001ef0:	40490fdb 	.word	0x40490fdb
 8001ef4:	00000000 	.word	0x00000000

08001ef8 <swer2_CalVector>:

void swer2_CalVector(float u, float v, float r){
 8001ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001efc:	b088      	sub	sp, #32
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f04:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f08:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = -90*M_PI/180;
 8001f0c:	4b62      	ldr	r3, [pc, #392]	; (8002098 <swer2_CalVector+0x1a0>)
 8001f0e:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY2*r) - sin(alpha)*(v + DX2*r);
 8001f10:	69f8      	ldr	r0, [r7, #28]
 8001f12:	f7fe fb19 	bl	8000548 <__aeabi_f2d>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	ec43 2b10 	vmov	d0, r2, r3
 8001f1e:	f00d fe07 	bl	800fb30 <cos>
 8001f22:	ec59 8b10 	vmov	r8, r9, d0
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7fe fb0e 	bl	8000548 <__aeabi_f2d>
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	460d      	mov	r5, r1
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe fb09 	bl	8000548 <__aeabi_f2d>
 8001f36:	a356      	add	r3, pc, #344	; (adr r3, 8002090 <swer2_CalVector+0x198>)
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	f7fe fb5c 	bl	80005f8 <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4620      	mov	r0, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7fe f99e 	bl	8000288 <__aeabi_dsub>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4640      	mov	r0, r8
 8001f52:	4649      	mov	r1, r9
 8001f54:	f7fe fb50 	bl	80005f8 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4614      	mov	r4, r2
 8001f5e:	461d      	mov	r5, r3
 8001f60:	69f8      	ldr	r0, [r7, #28]
 8001f62:	f7fe faf1 	bl	8000548 <__aeabi_f2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	ec43 2b10 	vmov	d0, r2, r3
 8001f6e:	f00d fe33 	bl	800fbd8 <sin>
 8001f72:	ec59 8b10 	vmov	r8, r9, d0
 8001f76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f7a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800209c <swer2_CalVector+0x1a4>
 8001f7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8a:	ee17 0a90 	vmov	r0, s15
 8001f8e:	f7fe fadb 	bl	8000548 <__aeabi_f2d>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4640      	mov	r0, r8
 8001f98:	4649      	mov	r1, r9
 8001f9a:	f7fe fb2d 	bl	80005f8 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	f7fe f96f 	bl	8000288 <__aeabi_dsub>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7fe fdf9 	bl	8000ba8 <__aeabi_d2f>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	613b      	str	r3, [r7, #16]
	vct.wheelVelY = sin(alpha)*(u - DY2*r) + cos(alpha)*(v + DX2*r);
 8001fba:	69f8      	ldr	r0, [r7, #28]
 8001fbc:	f7fe fac4 	bl	8000548 <__aeabi_f2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	ec43 2b10 	vmov	d0, r2, r3
 8001fc8:	f00d fe06 	bl	800fbd8 <sin>
 8001fcc:	ec59 8b10 	vmov	r8, r9, d0
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7fe fab9 	bl	8000548 <__aeabi_f2d>
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	460d      	mov	r5, r1
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fab4 	bl	8000548 <__aeabi_f2d>
 8001fe0:	a32b      	add	r3, pc, #172	; (adr r3, 8002090 <swer2_CalVector+0x198>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe fb07 	bl	80005f8 <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4620      	mov	r0, r4
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	f7fe f949 	bl	8000288 <__aeabi_dsub>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4640      	mov	r0, r8
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	f7fe fafb 	bl	80005f8 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	69f8      	ldr	r0, [r7, #28]
 800200c:	f7fe fa9c 	bl	8000548 <__aeabi_f2d>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	ec43 2b10 	vmov	d0, r2, r3
 8002018:	f00d fd8a 	bl	800fb30 <cos>
 800201c:	ec59 8b10 	vmov	r8, r9, d0
 8002020:	edd7 7a01 	vldr	s15, [r7, #4]
 8002024:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800209c <swer2_CalVector+0x1a4>
 8002028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800202c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002034:	ee17 0a90 	vmov	r0, s15
 8002038:	f7fe fa86 	bl	8000548 <__aeabi_f2d>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4640      	mov	r0, r8
 8002042:	4649      	mov	r1, r9
 8002044:	f7fe fad8 	bl	80005f8 <__aeabi_dmul>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4620      	mov	r0, r4
 800204e:	4629      	mov	r1, r5
 8002050:	f7fe f91c 	bl	800028c <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f7fe fda4 	bl	8000ba8 <__aeabi_d2f>
 8002060:	4603      	mov	r3, r0
 8002062:	617b      	str	r3, [r7, #20]
	swer_SetWheelVector(MODULE_ID_2, vct);
 8002064:	edd7 6a04 	vldr	s13, [r7, #16]
 8002068:	ed97 7a05 	vldr	s14, [r7, #20]
 800206c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002070:	eeb0 0a66 	vmov.f32	s0, s13
 8002074:	eef0 0a47 	vmov.f32	s1, s14
 8002078:	eeb0 1a67 	vmov.f32	s2, s15
 800207c:	2002      	movs	r0, #2
 800207e:	f000 f91b 	bl	80022b8 <swer_SetWheelVector>
}
 8002082:	bf00      	nop
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800208c:	f3af 8000 	nop.w
 8002090:	ecaab8a6 	.word	0xecaab8a6
 8002094:	3fc822bb 	.word	0x3fc822bb
 8002098:	bfc90fdb 	.word	0xbfc90fdb
 800209c:	00000000 	.word	0x00000000

080020a0 <swer3_CalVector>:

void swer3_CalVector(float u, float v, float r){
 80020a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a4:	b088      	sub	sp, #32
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	ed87 0a03 	vstr	s0, [r7, #12]
 80020ac:	edc7 0a02 	vstr	s1, [r7, #8]
 80020b0:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = 180*M_PI/180;
 80020b4:	4b68      	ldr	r3, [pc, #416]	; (8002258 <swer3_CalVector+0x1b8>)
 80020b6:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY3*r) - sin(alpha)*(v + DX3*r);
 80020b8:	69f8      	ldr	r0, [r7, #28]
 80020ba:	f7fe fa45 	bl	8000548 <__aeabi_f2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	ec43 2b10 	vmov	d0, r2, r3
 80020c6:	f00d fd33 	bl	800fb30 <cos>
 80020ca:	ec59 8b10 	vmov	r8, r9, d0
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f7fe fa3a 	bl	8000548 <__aeabi_f2d>
 80020d4:	4604      	mov	r4, r0
 80020d6:	460d      	mov	r5, r1
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7fe fa35 	bl	8000548 <__aeabi_f2d>
 80020de:	a35a      	add	r3, pc, #360	; (adr r3, 8002248 <swer3_CalVector+0x1a8>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	f7fe fa88 	bl	80005f8 <__aeabi_dmul>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4620      	mov	r0, r4
 80020ee:	4629      	mov	r1, r5
 80020f0:	f7fe f8cc 	bl	800028c <__adddf3>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4640      	mov	r0, r8
 80020fa:	4649      	mov	r1, r9
 80020fc:	f7fe fa7c 	bl	80005f8 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4690      	mov	r8, r2
 8002106:	4699      	mov	r9, r3
 8002108:	69f8      	ldr	r0, [r7, #28]
 800210a:	f7fe fa1d 	bl	8000548 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	ec43 2b10 	vmov	d0, r2, r3
 8002116:	f00d fd5f 	bl	800fbd8 <sin>
 800211a:	ec5b ab10 	vmov	sl, fp, d0
 800211e:	68b8      	ldr	r0, [r7, #8]
 8002120:	f7fe fa12 	bl	8000548 <__aeabi_f2d>
 8002124:	4604      	mov	r4, r0
 8002126:	460d      	mov	r5, r1
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe fa0d 	bl	8000548 <__aeabi_f2d>
 800212e:	a348      	add	r3, pc, #288	; (adr r3, 8002250 <swer3_CalVector+0x1b0>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa60 	bl	80005f8 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f8a4 	bl	800028c <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4650      	mov	r0, sl
 800214a:	4659      	mov	r1, fp
 800214c:	f7fe fa54 	bl	80005f8 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f896 	bl	8000288 <__aeabi_dsub>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f7fe fd20 	bl	8000ba8 <__aeabi_d2f>
 8002168:	4603      	mov	r3, r0
 800216a:	613b      	str	r3, [r7, #16]
	vct.wheelVelY = sin(alpha)*(u - DY3*r) + cos(alpha)*(v + DX3*r);
 800216c:	69f8      	ldr	r0, [r7, #28]
 800216e:	f7fe f9eb 	bl	8000548 <__aeabi_f2d>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	ec43 2b10 	vmov	d0, r2, r3
 800217a:	f00d fd2d 	bl	800fbd8 <sin>
 800217e:	ec59 8b10 	vmov	r8, r9, d0
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f7fe f9e0 	bl	8000548 <__aeabi_f2d>
 8002188:	4604      	mov	r4, r0
 800218a:	460d      	mov	r5, r1
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7fe f9db 	bl	8000548 <__aeabi_f2d>
 8002192:	a32d      	add	r3, pc, #180	; (adr r3, 8002248 <swer3_CalVector+0x1a8>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe fa2e 	bl	80005f8 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4620      	mov	r0, r4
 80021a2:	4629      	mov	r1, r5
 80021a4:	f7fe f872 	bl	800028c <__adddf3>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4640      	mov	r0, r8
 80021ae:	4649      	mov	r1, r9
 80021b0:	f7fe fa22 	bl	80005f8 <__aeabi_dmul>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4690      	mov	r8, r2
 80021ba:	4699      	mov	r9, r3
 80021bc:	69f8      	ldr	r0, [r7, #28]
 80021be:	f7fe f9c3 	bl	8000548 <__aeabi_f2d>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	ec43 2b10 	vmov	d0, r2, r3
 80021ca:	f00d fcb1 	bl	800fb30 <cos>
 80021ce:	ec5b ab10 	vmov	sl, fp, d0
 80021d2:	68b8      	ldr	r0, [r7, #8]
 80021d4:	f7fe f9b8 	bl	8000548 <__aeabi_f2d>
 80021d8:	4604      	mov	r4, r0
 80021da:	460d      	mov	r5, r1
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7fe f9b3 	bl	8000548 <__aeabi_f2d>
 80021e2:	a31b      	add	r3, pc, #108	; (adr r3, 8002250 <swer3_CalVector+0x1b0>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe fa06 	bl	80005f8 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4620      	mov	r0, r4
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fe f84a 	bl	800028c <__adddf3>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4650      	mov	r0, sl
 80021fe:	4659      	mov	r1, fp
 8002200:	f7fe f9fa 	bl	80005f8 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4640      	mov	r0, r8
 800220a:	4649      	mov	r1, r9
 800220c:	f7fe f83e 	bl	800028c <__adddf3>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f7fe fcc6 	bl	8000ba8 <__aeabi_d2f>
 800221c:	4603      	mov	r3, r0
 800221e:	617b      	str	r3, [r7, #20]
	swer_SetWheelVector(MODULE_ID_3, vct);
 8002220:	edd7 6a04 	vldr	s13, [r7, #16]
 8002224:	ed97 7a05 	vldr	s14, [r7, #20]
 8002228:	edd7 7a06 	vldr	s15, [r7, #24]
 800222c:	eeb0 0a66 	vmov.f32	s0, s13
 8002230:	eef0 0a47 	vmov.f32	s1, s14
 8002234:	eeb0 1a67 	vmov.f32	s2, s15
 8002238:	2003      	movs	r0, #3
 800223a:	f000 f83d 	bl	80022b8 <swer_SetWheelVector>
}
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002248:	ecaab8a6 	.word	0xecaab8a6
 800224c:	3fb822bb 	.word	0x3fb822bb
 8002250:	f1800a7c 	.word	0xf1800a7c
 8002254:	3fd21a0c 	.word	0x3fd21a0c
 8002258:	40490fdb 	.word	0x40490fdb

0800225c <swer_Init>:

void swer_Init(){
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
	swerParam[0].pVctXY = &swer0_CalVector;
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <swer_Init+0x48>)
 8002262:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <swer_Init+0x4c>)
 8002264:	63da      	str	r2, [r3, #60]	; 0x3c
	swerParam[MODULE_ID_1].pVctXY = &swer1_CalVector;
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <swer_Init+0x48>)
 8002268:	4a10      	ldr	r2, [pc, #64]	; (80022ac <swer_Init+0x50>)
 800226a:	67da      	str	r2, [r3, #124]	; 0x7c
	swerParam[MODULE_ID_2].pVctXY = &swer2_CalVector;
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <swer_Init+0x48>)
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <swer_Init+0x54>)
 8002270:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	swerParam[MODULE_ID_3].pVctXY = &swer3_CalVector;
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <swer_Init+0x48>)
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <swer_Init+0x58>)
 8002278:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	swerParam[MODULE_ID_1].angleOpt.direct =
	swerParam[MODULE_ID_2].angleOpt.direct =
	swerParam[MODULE_ID_3].angleOpt.direct = 1;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <swer_Init+0x48>)
 800227e:	2201      	movs	r2, #1
 8002280:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <swer_Init+0x48>)
 8002286:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
	swerParam[MODULE_ID_2].angleOpt.direct =
 800228a:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <swer_Init+0x48>)
 800228c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <swer_Init+0x48>)
 8002292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	swerParam[MODULE_ID_1].angleOpt.direct =
 8002296:	4a03      	ldr	r2, [pc, #12]	; (80022a4 <swer_Init+0x48>)
 8002298:	6413      	str	r3, [r2, #64]	; 0x40

}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	200002bc 	.word	0x200002bc
 80022a8:	08001d15 	.word	0x08001d15
 80022ac:	08001d39 	.word	0x08001d39
 80022b0:	08001ef9 	.word	0x08001ef9
 80022b4:	080020a1 	.word	0x080020a1

080022b8 <swer_SetWheelVector>:


void swer_SetWheelVector(ModuleID ID,WheelVector vct){swerParam[ID].vct = vct;}
 80022b8:	b490      	push	{r4, r7}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	eef0 6a40 	vmov.f32	s13, s0
 80022c4:	eeb0 7a60 	vmov.f32	s14, s1
 80022c8:	eef0 7a41 	vmov.f32	s15, s2
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	edc7 6a00 	vstr	s13, [r7]
 80022d2:	ed87 7a01 	vstr	s14, [r7, #4]
 80022d6:	edc7 7a02 	vstr	s15, [r7, #8]
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <swer_SetWheelVector+0x44>)
 80022de:	019b      	lsls	r3, r3, #6
 80022e0:	4413      	add	r3, r2
 80022e2:	3330      	adds	r3, #48	; 0x30
 80022e4:	461c      	mov	r4, r3
 80022e6:	463b      	mov	r3, r7
 80022e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc90      	pop	{r4, r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	200002bc 	.word	0x200002bc

08002300 <swer_GetWheelVector>:
WheelVector swer_GetWheelVector(ModuleID ID){return swerParam[ID].vct;}
 8002300:	b480      	push	{r7}
 8002302:	b08b      	sub	sp, #44	; 0x2c
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	75fb      	strb	r3, [r7, #23]
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <swer_GetWheelVector+0x48>)
 800230e:	019b      	lsls	r3, r3, #6
 8002310:	4413      	add	r3, r2
 8002312:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	ca07      	ldmia	r2, {r0, r1, r2}
 800231c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002320:	69f9      	ldr	r1, [r7, #28]
 8002322:	6a3a      	ldr	r2, [r7, #32]
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	ee06 1a90 	vmov	s13, r1
 800232a:	ee07 2a10 	vmov	s14, r2
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eeb0 0a66 	vmov.f32	s0, s13
 8002336:	eef0 0a47 	vmov.f32	s1, s14
 800233a:	eeb0 1a67 	vmov.f32	s2, s15
 800233e:	372c      	adds	r7, #44	; 0x2c
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	200002bc 	.word	0x200002bc

0800234c <swer_SetOptAngle>:
void swer_SetOptAngle(ModuleID ID,Angle_Opt_Param angleOpt){swerParam[ID].angleOpt = angleOpt;}
 800234c:	b084      	sub	sp, #16
 800234e:	b4b0      	push	{r4, r5, r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	4604      	mov	r4, r0
 8002356:	f107 001c 	add.w	r0, r7, #28
 800235a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800235e:	4623      	mov	r3, r4
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	4a09      	ldr	r2, [pc, #36]	; (800238c <swer_SetOptAngle+0x40>)
 8002366:	019b      	lsls	r3, r3, #6
 8002368:	4413      	add	r3, r2
 800236a:	461d      	mov	r5, r3
 800236c:	f107 041c 	add.w	r4, r7, #28
 8002370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002378:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800237c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bcb0      	pop	{r4, r5, r7}
 8002388:	b004      	add	sp, #16
 800238a:	4770      	bx	lr
 800238c:	200002bc 	.word	0x200002bc

08002390 <swer_GetOptAngle>:
Angle_Opt_Param swer_GetOptAngle(ModuleID ID){return swerParam[ID].angleOpt;}
 8002390:	b4b0      	push	{r4, r5, r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <swer_GetOptAngle+0x34>)
 80023a2:	019b      	lsls	r3, r3, #6
 80023a4:	4413      	add	r3, r2
 80023a6:	460c      	mov	r4, r1
 80023a8:	461d      	mov	r5, r3
 80023aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bcb0      	pop	{r4, r5, r7}
 80023c2:	4770      	bx	lr
 80023c4:	200002bc 	.word	0x200002bc

080023c8 <swer_GetFuncHandle>:
pVectorCalXY swer_GetFuncHandle(ModuleID ID){return *swerParam[ID].pVctXY;}
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	4a05      	ldr	r2, [pc, #20]	; (80023ec <swer_GetFuncHandle+0x24>)
 80023d6:	019b      	lsls	r3, r3, #6
 80023d8:	4413      	add	r3, r2
 80023da:	333c      	adds	r3, #60	; 0x3c
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	200002bc 	.word	0x200002bc

080023f0 <canctrl_RxHeaderGetModeID>:
#define TARGET_FLAG_GROUP canEvent
void canctrl_SetFlag(CAN_MODE_ID e){SETFLAG(TARGET_FLAG_GROUP,e);}
bool canctrl_CheckFlag(CAN_MODE_ID e){return CHECKFLAG(TARGET_FLAG_GROUP,e);}
void canctrl_ClearFlag(CAN_MODE_ID e){CLEARFLAG(TARGET_FLAG_GROUP,e);}
uint32_t canctrl_GetEvent(){return canEvent;}
CAN_MODE_ID canctrl_RxHeaderGetModeID(){return rxHeader.StdId & 0x0f;}
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <canctrl_RxHeaderGetModeID+0x1c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200003e0 	.word	0x200003e0

08002410 <canctrl_SetTargetDevice>:
void canctrl_SetTargetDevice(CAN_DEVICE_ID dev){ canctrl_SetID(dev << CAN_DEVICE_POS);}
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f86c 	bl	80024fc <canctrl_SetID>
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <canctrl_GetRxHeader>:
CAN_RxHeaderTypeDef canctrl_GetRxHeader(){return rxHeader;}
 800242c:	b4b0      	push	{r4, r5, r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a07      	ldr	r2, [pc, #28]	; (8002454 <canctrl_GetRxHeader+0x28>)
 8002438:	461c      	mov	r4, r3
 800243a:	4615      	mov	r5, r2
 800243c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800243e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002440:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002444:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bcb0      	pop	{r4, r5, r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	200003e0 	.word	0x200003e0

08002458 <canctrl_RTR_SetToData>:
void canctrl_RTR_SetToData(){txHeader.RTR = CAN_RTR_DATA;}
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <canctrl_RTR_SetToData+0x14>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	200003c8 	.word	0x200003c8

08002470 <canctrl_RTR_TxRequest>:
void canctrl_RTR_SetToRemote(){txHeader.RTR = CAN_RTR_REMOTE;}

HAL_StatusTypeDef canctrl_RTR_TxRequest(CAN_HandleTypeDef *can, CAN_DEVICE_ID targetID, CAN_MODE_ID modeID)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
 800247c:	4613      	mov	r3, r2
 800247e:	70bb      	strb	r3, [r7, #2]
	if(!can) return HAL_ERROR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <canctrl_RTR_TxRequest+0x1a>
 8002486:	2301      	movs	r3, #1
 8002488:	e02d      	b.n	80024e6 <canctrl_RTR_TxRequest+0x76>
	if(!HAL_CAN_GetTxMailboxesFreeLevel(can)) return HAL_BUSY;
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f004 fb0d 	bl	8006aaa <HAL_CAN_GetTxMailboxesFreeLevel>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <canctrl_RTR_TxRequest+0x2a>
 8002496:	2302      	movs	r3, #2
 8002498:	e025      	b.n	80024e6 <canctrl_RTR_TxRequest+0x76>
	HAL_StatusTypeDef err = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
	txHeader.DLC = 0;
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <canctrl_RTR_TxRequest+0x80>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
	txHeader.RTR = CAN_RTR_REMOTE;
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <canctrl_RTR_TxRequest+0x80>)
 80024a6:	2202      	movs	r2, #2
 80024a8:	60da      	str	r2, [r3, #12]
	txHeader.StdId = modeID;
 80024aa:	78bb      	ldrb	r3, [r7, #2]
 80024ac:	4a10      	ldr	r2, [pc, #64]	; (80024f0 <canctrl_RTR_TxRequest+0x80>)
 80024ae:	6013      	str	r3, [r2, #0]
	txHeader.IDE = CAN_ID_STD;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <canctrl_RTR_TxRequest+0x80>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
	if(targetID) canctrl_SetTargetDevice(targetID);
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <canctrl_RTR_TxRequest+0x54>
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ffa6 	bl	8002410 <canctrl_SetTargetDevice>
	err = HAL_CAN_AddTxMessage(can, &txHeader, txData, txMailBox);
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <canctrl_RTR_TxRequest+0x84>)
 80024c6:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <canctrl_RTR_TxRequest+0x88>)
 80024c8:	4909      	ldr	r1, [pc, #36]	; (80024f0 <canctrl_RTR_TxRequest+0x80>)
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f004 fa12 	bl	80068f4 <HAL_CAN_AddTxMessage>
 80024d0:	4603      	mov	r3, r0
 80024d2:	73fb      	strb	r3, [r7, #15]
	memset(txData,0,sizeof(txData));
 80024d4:	2208      	movs	r2, #8
 80024d6:	2100      	movs	r1, #0
 80024d8:	4807      	ldr	r0, [pc, #28]	; (80024f8 <canctrl_RTR_TxRequest+0x88>)
 80024da:	f00b f932 	bl	800d742 <memset>
	txHeader.StdId = 0;
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <canctrl_RTR_TxRequest+0x80>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
	return err;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200003c8 	.word	0x200003c8
 80024f4:	200003bc 	.word	0x200003bc
 80024f8:	200003fc 	.word	0x200003fc

080024fc <canctrl_SetID>:

HAL_StatusTypeDef canctrl_SetID(uint32_t ID){
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	if(ID > 0x7ff) return HAL_ERROR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800250a:	d301      	bcc.n	8002510 <canctrl_SetID+0x14>
 800250c:	2301      	movs	r3, #1
 800250e:	e006      	b.n	800251e <canctrl_SetID+0x22>
	txHeader.StdId |= ID;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <canctrl_SetID+0x30>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4313      	orrs	r3, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <canctrl_SetID+0x30>)
 800251a:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	200003c8 	.word	0x200003c8

08002530 <canctrl_PutMessage>:


HAL_StatusTypeDef canctrl_PutMessage(void* data,size_t dataSize)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
	memset(txData,0,sizeof(txData));
 800253a:	2208      	movs	r2, #8
 800253c:	2100      	movs	r1, #0
 800253e:	4809      	ldr	r0, [pc, #36]	; (8002564 <canctrl_PutMessage+0x34>)
 8002540:	f00b f8ff 	bl	800d742 <memset>
	if(dataSize <= 8) txHeader.DLC = dataSize;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b08      	cmp	r3, #8
 8002548:	d802      	bhi.n	8002550 <canctrl_PutMessage+0x20>
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <canctrl_PutMessage+0x38>)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	6113      	str	r3, [r2, #16]
	memcpy(txData,data,sizeof(txData));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <canctrl_PutMessage+0x34>)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6810      	ldr	r0, [r2, #0]
 8002556:	6851      	ldr	r1, [r2, #4]
 8002558:	c303      	stmia	r3!, {r0, r1}
	return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200003fc 	.word	0x200003fc
 8002568:	200003c8 	.word	0x200003c8

0800256c <canctrl_GetMessage>:

HAL_StatusTypeDef canctrl_GetMessage(void *data, size_t sizeOfDataType){
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	if(rxHeader.DLC != sizeOfDataType) return HAL_ERROR;
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <canctrl_GetMessage+0x2c>)
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <canctrl_GetMessage+0x18>
 8002580:	2301      	movs	r3, #1
 8002582:	e005      	b.n	8002590 <canctrl_GetMessage+0x24>
	memcpy(data,rxData,sizeOfDataType);
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	4905      	ldr	r1, [pc, #20]	; (800259c <canctrl_GetMessage+0x30>)
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f00b f9b8 	bl	800d8fe <memcpy>
	return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200003e0 	.word	0x200003e0
 800259c:	20000404 	.word	0x20000404

080025a0 <canctrl_Send>:
	} else return HAL_BUSY;
}


HAL_StatusTypeDef canctrl_Send(CAN_HandleTypeDef *can, CAN_DEVICE_ID targetID)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]

	if(!txHeader.DLC && !can) return HAL_ERROR;
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <canctrl_Send+0x74>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <canctrl_Send+0x1e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <canctrl_Send+0x1e>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e026      	b.n	800260c <canctrl_Send+0x6c>
	if(!HAL_CAN_GetTxMailboxesFreeLevel(can)) return HAL_BUSY;
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f004 fa73 	bl	8006aaa <HAL_CAN_GetTxMailboxesFreeLevel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <canctrl_Send+0x2e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e01e      	b.n	800260c <canctrl_Send+0x6c>
	HAL_StatusTypeDef err = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
	txHeader.IDE = CAN_ID_STD;
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <canctrl_Send+0x74>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
	canctrl_RTR_SetToData();
 80025d8:	f7ff ff3e 	bl	8002458 <canctrl_RTR_SetToData>
	if(targetID) canctrl_SetTargetDevice(targetID);
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <canctrl_Send+0x4a>
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff13 	bl	8002410 <canctrl_SetTargetDevice>
	err = HAL_CAN_AddTxMessage(can, &txHeader, txData, txMailBox);
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <canctrl_Send+0x78>)
 80025ec:	4a0b      	ldr	r2, [pc, #44]	; (800261c <canctrl_Send+0x7c>)
 80025ee:	4909      	ldr	r1, [pc, #36]	; (8002614 <canctrl_Send+0x74>)
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f004 f97f 	bl	80068f4 <HAL_CAN_AddTxMessage>
 80025f6:	4603      	mov	r3, r0
 80025f8:	73fb      	strb	r3, [r7, #15]
	txHeader.StdId = 0;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <canctrl_Send+0x74>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
	memset(txData,0,sizeof(txData));
 8002600:	2208      	movs	r2, #8
 8002602:	2100      	movs	r1, #0
 8002604:	4805      	ldr	r0, [pc, #20]	; (800261c <canctrl_Send+0x7c>)
 8002606:	f00b f89c 	bl	800d742 <memset>
	return err;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200003c8 	.word	0x200003c8
 8002618:	200003bc 	.word	0x200003bc
 800261c:	200003fc 	.word	0x200003fc

08002620 <canctrl_Receive_2>:
	checkEventFromRxHeader();
	return HAL_OK;
}

CAN_MODE_ID canctrl_Receive_2(CAN_HandleTypeDef *can, uint32_t FIFO)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
	HAL_CAN_GetRxMessage(can, FIFO, &rxHeader, rxData);
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <canctrl_Receive_2+0x24>)
 800262c:	4a06      	ldr	r2, [pc, #24]	; (8002648 <canctrl_Receive_2+0x28>)
 800262e:	6839      	ldr	r1, [r7, #0]
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f004 fa6f 	bl	8006b14 <HAL_CAN_GetRxMessage>
	return canctrl_RxHeaderGetModeID();
 8002636:	f7ff fedb 	bl	80023f0 <canctrl_RxHeaderGetModeID>
 800263a:	4603      	mov	r3, r0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000404 	.word	0x20000404
 8002648:	200003e0 	.word	0x200003e0

0800264c <canctrl_Filter_Mask16>:
										uint16_t lowID,
										uint16_t maskHigh,
										uint16_t maskLow,
										uint32_t filBank,
										uint32_t FIFO)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08e      	sub	sp, #56	; 0x38
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	4608      	mov	r0, r1
 8002656:	4611      	mov	r1, r2
 8002658:	461a      	mov	r2, r3
 800265a:	4603      	mov	r3, r0
 800265c:	817b      	strh	r3, [r7, #10]
 800265e:	460b      	mov	r3, r1
 8002660:	813b      	strh	r3, [r7, #8]
 8002662:	4613      	mov	r3, r2
 8002664:	80fb      	strh	r3, [r7, #6]
	CAN_FilterTypeDef canFilCfg;
	canFilCfg.FilterActivation = CAN_FILTER_ENABLE;
 8002666:	2301      	movs	r3, #1
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
	canFilCfg.FilterBank = filBank;
 800266a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
	canFilCfg.FilterFIFOAssignment = FIFO;
 800266e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002670:	623b      	str	r3, [r7, #32]
	canFilCfg.FilterIdLow = 		lowID;
 8002672:	893b      	ldrh	r3, [r7, #8]
 8002674:	617b      	str	r3, [r7, #20]
	canFilCfg.FilterIdHigh = 		highID;
 8002676:	897b      	ldrh	r3, [r7, #10]
 8002678:	613b      	str	r3, [r7, #16]
	canFilCfg.FilterMaskIdLow = 	maskLow;
 800267a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800267e:	61fb      	str	r3, [r7, #28]
	canFilCfg.FilterMaskIdHigh = 	maskHigh;
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	61bb      	str	r3, [r7, #24]
	canFilCfg.FilterMode = CAN_FILTERMODE_IDMASK;
 8002684:	2300      	movs	r3, #0
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilCfg.FilterScale = CAN_FILTERSCALE_16BIT;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
	canFilCfg.SlaveStartFilterBank = 13;
 800268c:	230d      	movs	r3, #13
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
	return HAL_CAN_ConfigFilter(can, &canFilCfg);
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	4619      	mov	r1, r3
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f004 f808 	bl	80066ac <HAL_CAN_ConfigFilter>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3738      	adds	r7, #56	; 0x38
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <canfunc_SetBoolValue>:
	bool bVal = temp - 1;
	return bVal;
}

void canfunc_SetBoolValue(bool bVal, CAN_MODE_ID modeID)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	460a      	mov	r2, r1
 80026b0:	71fb      	strb	r3, [r7, #7]
 80026b2:	4613      	mov	r3, r2
 80026b4:	71bb      	strb	r3, [r7, #6]
	if(modeID != CANCTRL_MODE_TEST
 80026b6:	79bb      	ldrb	r3, [r7, #6]
 80026b8:	2b0b      	cmp	r3, #11
 80026ba:	d00b      	beq.n	80026d4 <canfunc_SetBoolValue+0x2e>
	&& modeID != CANCTRL_MODE_PID_BLDC_BREAKPROTECTION
 80026bc:	79bb      	ldrb	r3, [r7, #6]
 80026be:	2b0a      	cmp	r3, #10
 80026c0:	d008      	beq.n	80026d4 <canfunc_SetBoolValue+0x2e>
	&& modeID != CANCTRL_MODE_SET_HOME
 80026c2:	79bb      	ldrb	r3, [r7, #6]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d005      	beq.n	80026d4 <canfunc_SetBoolValue+0x2e>
	&& modeID != CANCTRL_MODE_MOTOR_BLDC_BRAKE
 80026c8:	79bb      	ldrb	r3, [r7, #6]
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d002      	beq.n	80026d4 <canfunc_SetBoolValue+0x2e>
	&& modeID != CANCTRL_MODE_UNTANGLE_WIRE
 80026ce:	79bb      	ldrb	r3, [r7, #6]
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d10e      	bne.n	80026f2 <canfunc_SetBoolValue+0x4c>
	) return;
	canctrl_SetID(modeID);
 80026d4:	79bb      	ldrb	r3, [r7, #6]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff10 	bl	80024fc <canctrl_SetID>
	uint8_t temp = (uint8_t)bVal + 1;
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	3301      	adds	r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	73fb      	strb	r3, [r7, #15]
	canctrl_PutMessage((void*)&temp, 1);
 80026e4:	f107 030f 	add.w	r3, r7, #15
 80026e8:	2101      	movs	r1, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff20 	bl	8002530 <canctrl_PutMessage>
 80026f0:	e000      	b.n	80026f4 <canfunc_SetBoolValue+0x4e>
	) return;
 80026f2:	bf00      	nop
}
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <canfunc_MotorPutSpeedAndAngle>:
	if(canctrl_GetMessage(&encBLDC,sizeof(encBLDC))!= HAL_OK) while(1);
	return encBLDC;
}

void canfunc_MotorPutSpeedAndAngle(CAN_SpeedBLDC_AngleDC speedAngle)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	463b      	mov	r3, r7
 8002702:	e883 0003 	stmia.w	r3, {r0, r1}
	canctrl_SetID(CANCTRL_MODE_MOTOR_SPEED_ANGLE);
 8002706:	2002      	movs	r0, #2
 8002708:	f7ff fef8 	bl	80024fc <canctrl_SetID>
	canctrl_PutMessage((void*)&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC));
 800270c:	463b      	mov	r3, r7
 800270e:	2108      	movs	r1, #8
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff0d 	bl	8002530 <canctrl_PutMessage>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <canfunc_MotorGetSpeedAndAngle>:

CAN_SpeedBLDC_AngleDC canfunc_MotorGetSpeedAndAngle()
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	CAN_SpeedBLDC_AngleDC speedAngle;
	if(canctrl_GetMessage(&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC)) != HAL_OK) while(1);
 8002726:	f107 0308 	add.w	r3, r7, #8
 800272a:	2108      	movs	r1, #8
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff1d 	bl	800256c <canctrl_GetMessage>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d000      	beq.n	800273a <canfunc_MotorGetSpeedAndAngle+0x1c>
 8002738:	e7fe      	b.n	8002738 <canfunc_MotorGetSpeedAndAngle+0x1a>
	return speedAngle;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	461a      	mov	r2, r3
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002746:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	0000      	movs	r0, r0
 8002754:	0000      	movs	r0, r0
	...

08002758 <GamepPadHandle>:
 *  Created on: Oct 24, 2023
 *      Author: Admin
 */
#include"Gamepad.h"

void GamepPadHandle(_GamePad *pad,uint8_t *DataTayGame){
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
	pad->Status = 1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]

	pad->XLeft = DataTayGame[1];
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	785a      	ldrb	r2, [r3, #1]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	705a      	strb	r2, [r3, #1]
	pad->YLeft = DataTayGame[2];
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	789a      	ldrb	r2, [r3, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	709a      	strb	r2, [r3, #2]

	pad->XRight = DataTayGame[3];
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	78da      	ldrb	r2, [r3, #3]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	70da      	strb	r2, [r3, #3]
	pad->YRight = DataTayGame[4];
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	791a      	ldrb	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	711a      	strb	r2, [r3, #4]

	pad->Left = (DataTayGame[5] >> 7) & 1;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3305      	adds	r3, #5
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	09db      	lsrs	r3, r3, #7
 8002790:	b2da      	uxtb	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	715a      	strb	r2, [r3, #5]
	pad->Up = (DataTayGame[5] >> 6) & 1;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3305      	adds	r3, #5
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	719a      	strb	r2, [r3, #6]
	pad->Right = (DataTayGame[5] >> 5) & 1;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3305      	adds	r3, #5
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	71da      	strb	r2, [r3, #7]
	pad->Down = (DataTayGame[5] >> 4) & 1;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	3305      	adds	r3, #5
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	721a      	strb	r2, [r3, #8]

	pad->Square = (DataTayGame[5] >> 3) & 1;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	3305      	adds	r3, #5
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	725a      	strb	r2, [r3, #9]
	pad->Triangle = (DataTayGame[5] >> 2) & 1;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	3305      	adds	r3, #5
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	729a      	strb	r2, [r3, #10]
	pad->Circle = (DataTayGame[5] >> 1) & 1;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	3305      	adds	r3, #5
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	b2da      	uxtb	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	72da      	strb	r2, [r3, #11]
	pad->Cross = DataTayGame[5] & 1;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	3305      	adds	r3, #5
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	731a      	strb	r2, [r3, #12]

	pad->L1 = (DataTayGame[6] >> 7) & 1;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3306      	adds	r3, #6
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	09db      	lsrs	r3, r3, #7
 8002826:	b2da      	uxtb	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	735a      	strb	r2, [r3, #13]
	pad->L2 = (DataTayGame[6] >> 6) & 1;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	3306      	adds	r3, #6
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	099b      	lsrs	r3, r3, #6
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	739a      	strb	r2, [r3, #14]
	pad->R1 = (DataTayGame[6] >> 5) & 1;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	3306      	adds	r3, #6
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	741a      	strb	r2, [r3, #16]
	pad->R2 = (DataTayGame[6] >> 4) & 1;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	3306      	adds	r3, #6
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	b2da      	uxtb	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	745a      	strb	r2, [r3, #17]

	pad->Touch = (DataTayGame[6] >> 3) & 1;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	3306      	adds	r3, #6
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	08db      	lsrs	r3, r3, #3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	74da      	strb	r2, [r3, #19]
	pad->Charge = (DataTayGame[6] >> 2) & 1;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	3306      	adds	r3, #6
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	b2da      	uxtb	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	751a      	strb	r2, [r3, #20]

	pad->L3 = (DataTayGame[6] >> 1) & 1;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	3306      	adds	r3, #6
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	73da      	strb	r2, [r3, #15]
	pad->R3 = DataTayGame[6] & 1;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3306      	adds	r3, #6
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	749a      	strb	r2, [r3, #18]

	pad->Battery = DataTayGame[7];
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	79da      	ldrb	r2, [r3, #7]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	755a      	strb	r2, [r3, #21]

	pad->XLeftCtr = ((pad->XLeft-125))*0.5/125;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	3b7d      	subs	r3, #125	; 0x7d
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe2e 	bl	8000524 <__aeabi_i2d>
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <GamepPadHandle+0x2d8>)
 80028ce:	f7fd fe93 	bl	80005f8 <__aeabi_dmul>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <GamepPadHandle+0x2dc>)
 80028e0:	f7fd ffb4 	bl	800084c <__aeabi_ddiv>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f95c 	bl	8000ba8 <__aeabi_d2f>
 80028f0:	4602      	mov	r2, r0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	619a      	str	r2, [r3, #24]
	pad->YLeftCtr = ((pad->YLeft-125))*0.5/125;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	789b      	ldrb	r3, [r3, #2]
 80028fa:	3b7d      	subs	r3, #125	; 0x7d
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fd fe11 	bl	8000524 <__aeabi_i2d>
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <GamepPadHandle+0x2d8>)
 8002908:	f7fd fe76 	bl	80005f8 <__aeabi_dmul>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <GamepPadHandle+0x2dc>)
 800291a:	f7fd ff97 	bl	800084c <__aeabi_ddiv>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	f7fe f93f 	bl	8000ba8 <__aeabi_d2f>
 800292a:	4602      	mov	r2, r0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	61da      	str	r2, [r3, #28]
	pad->XRightCtr =(((pad->XRight-125))*1/125);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	78db      	ldrb	r3, [r3, #3]
 8002934:	3b7d      	subs	r3, #125	; 0x7d
 8002936:	4a40      	ldr	r2, [pc, #256]	; (8002a38 <GamepPadHandle+0x2e0>)
 8002938:	fb82 1203 	smull	r1, r2, r2, r3
 800293c:	10d2      	asrs	r2, r2, #3
 800293e:	17db      	asrs	r3, r3, #31
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	edc3 7a08 	vstr	s15, [r3, #32]

	if ((pad->XLeftCtr > -0.05)&&(pad->XLeftCtr < 0.05))pad->XLeftCtr = 0;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fdf7 	bl	8000548 <__aeabi_f2d>
 800295a:	a32d      	add	r3, pc, #180	; (adr r3, 8002a10 <GamepPadHandle+0x2b8>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	f7fe f8da 	bl	8000b18 <__aeabi_dcmpgt>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d010      	beq.n	800298c <GamepPadHandle+0x234>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fdea 	bl	8000548 <__aeabi_f2d>
 8002974:	a328      	add	r3, pc, #160	; (adr r3, 8002a18 <GamepPadHandle+0x2c0>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fe f8af 	bl	8000adc <__aeabi_dcmplt>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <GamepPadHandle+0x234>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	619a      	str	r2, [r3, #24]
	if ((pad->YLeftCtr > -0.05)&&(pad->YLeftCtr < 0.05))pad->YLeftCtr = 0;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fdd9 	bl	8000548 <__aeabi_f2d>
 8002996:	a31e      	add	r3, pc, #120	; (adr r3, 8002a10 <GamepPadHandle+0x2b8>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fe f8bc 	bl	8000b18 <__aeabi_dcmpgt>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d010      	beq.n	80029c8 <GamepPadHandle+0x270>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fdcc 	bl	8000548 <__aeabi_f2d>
 80029b0:	a319      	add	r3, pc, #100	; (adr r3, 8002a18 <GamepPadHandle+0x2c0>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fe f891 	bl	8000adc <__aeabi_dcmplt>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <GamepPadHandle+0x270>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	61da      	str	r2, [r3, #28]
	if ((pad->XRightCtr > -0.1)&&(pad->XRightCtr < 0.1))pad->XRightCtr = 0;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fdbb 	bl	8000548 <__aeabi_f2d>
 80029d2:	a313      	add	r3, pc, #76	; (adr r3, 8002a20 <GamepPadHandle+0x2c8>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fe f89e 	bl	8000b18 <__aeabi_dcmpgt>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d100      	bne.n	80029e4 <GamepPadHandle+0x28c>
}
 80029e2:	e011      	b.n	8002a08 <GamepPadHandle+0x2b0>
	if ((pad->XRightCtr > -0.1)&&(pad->XRightCtr < 0.1))pad->XRightCtr = 0;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fdad 	bl	8000548 <__aeabi_f2d>
 80029ee:	a30e      	add	r3, pc, #56	; (adr r3, 8002a28 <GamepPadHandle+0x2d0>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fe f872 	bl	8000adc <__aeabi_dcmplt>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d100      	bne.n	8002a00 <GamepPadHandle+0x2a8>
}
 80029fe:	e003      	b.n	8002a08 <GamepPadHandle+0x2b0>
	if ((pad->XRightCtr > -0.1)&&(pad->XRightCtr < 0.1))pad->XRightCtr = 0;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	621a      	str	r2, [r3, #32]
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	9999999a 	.word	0x9999999a
 8002a14:	bfa99999 	.word	0xbfa99999
 8002a18:	9999999a 	.word	0x9999999a
 8002a1c:	3fa99999 	.word	0x3fa99999
 8002a20:	9999999a 	.word	0x9999999a
 8002a24:	bfb99999 	.word	0xbfb99999
 8002a28:	9999999a 	.word	0x9999999a
 8002a2c:	3fb99999 	.word	0x3fb99999
 8002a30:	3fe00000 	.word	0x3fe00000
 8002a34:	405f4000 	.word	0x405f4000
 8002a38:	10624dd3 	.word	0x10624dd3

08002a3c <checkNull>:
#include "LogData.h"

char txLogBuffer[150] = {0};
UART_HandleTypeDef *targetUART;

static HAL_StatusTypeDef checkNull(){
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
	if(targetUART != NULL) return HAL_OK;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <checkNull+0x1c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <checkNull+0x10>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <checkNull+0x12>
	return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	200004a4 	.word	0x200004a4

08002a5c <log_Init>:

void log_Init(UART_HandleTypeDef *huart){
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

	targetUART = huart;
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <log_Init+0x1c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	200004a4 	.word	0x200004a4

08002a7c <log_TransmitCompleteHandle>:

void log_TransmitCompleteHandle(UART_HandleTypeDef *huart){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	if(huart != targetUART) return;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <log_TransmitCompleteHandle+0x30>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d109      	bne.n	8002aa2 <log_TransmitCompleteHandle+0x26>
	memset(txLogBuffer,0,strlen(txLogBuffer));
 8002a8e:	4808      	ldr	r0, [pc, #32]	; (8002ab0 <log_TransmitCompleteHandle+0x34>)
 8002a90:	f7fd fbee 	bl	8000270 <strlen>
 8002a94:	4603      	mov	r3, r0
 8002a96:	461a      	mov	r2, r3
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <log_TransmitCompleteHandle+0x34>)
 8002a9c:	f00a fe51 	bl	800d742 <memset>
 8002aa0:	e000      	b.n	8002aa4 <log_TransmitCompleteHandle+0x28>
	if(huart != targetUART) return;
 8002aa2:	bf00      	nop

}
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200004a4 	.word	0x200004a4
 8002ab0:	2000040c 	.word	0x2000040c

08002ab4 <log_SendString>:

void log_SendString(){
 8002ab4:	b598      	push	{r3, r4, r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	if(checkNull() != HAL_OK) return;
 8002ab8:	f7ff ffc0 	bl	8002a3c <checkNull>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d114      	bne.n	8002aec <log_SendString+0x38>
	txLogBuffer[strlen(txLogBuffer) -1] = '\n';  //xóa dấu phẩy cuối cùng, thay bằng \n
 8002ac2:	480b      	ldr	r0, [pc, #44]	; (8002af0 <log_SendString+0x3c>)
 8002ac4:	f7fd fbd4 	bl	8000270 <strlen>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	3b01      	subs	r3, #1
 8002acc:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <log_SendString+0x3c>)
 8002ace:	210a      	movs	r1, #10
 8002ad0:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_IT(targetUART, (uint8_t*)txLogBuffer, strlen(txLogBuffer));
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <log_SendString+0x40>)
 8002ad4:	681c      	ldr	r4, [r3, #0]
 8002ad6:	4806      	ldr	r0, [pc, #24]	; (8002af0 <log_SendString+0x3c>)
 8002ad8:	f7fd fbca 	bl	8000270 <strlen>
 8002adc:	4603      	mov	r3, r0
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4903      	ldr	r1, [pc, #12]	; (8002af0 <log_SendString+0x3c>)
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f007 f95a 	bl	8009d9e <HAL_UART_Transmit_IT>
 8002aea:	e000      	b.n	8002aee <log_SendString+0x3a>
	if(checkNull() != HAL_OK) return;
 8002aec:	bf00      	nop
}
 8002aee:	bd98      	pop	{r3, r4, r7, pc}
 8002af0:	2000040c 	.word	0x2000040c
 8002af4:	200004a4 	.word	0x200004a4

08002af8 <log_AddHeaderArgumentToBuffer>:


void log_AddHeaderArgumentToBuffer(char *name){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	char s[10] = {0};
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	809a      	strh	r2, [r3, #4]
	strcpy(s,name);
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00a feea 	bl	800d8ee <strcpy>
	sprintf(txLogBuffer+strlen(txLogBuffer),"%s,",s);
 8002b1a:	4808      	ldr	r0, [pc, #32]	; (8002b3c <log_AddHeaderArgumentToBuffer+0x44>)
 8002b1c:	f7fd fba8 	bl	8000270 <strlen>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4a06      	ldr	r2, [pc, #24]	; (8002b3c <log_AddHeaderArgumentToBuffer+0x44>)
 8002b24:	4413      	add	r3, r2
 8002b26:	f107 020c 	add.w	r2, r7, #12
 8002b2a:	4905      	ldr	r1, [pc, #20]	; (8002b40 <log_AddHeaderArgumentToBuffer+0x48>)
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f00a fda5 	bl	800d67c <siprintf>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2000040c 	.word	0x2000040c
 8002b40:	08011dd0 	.word	0x08011dd0

08002b44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <vApplicationGetIdleTaskMemory+0x30>)
 8002b5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	200004a8 	.word	0x200004a8
 8002b74:	20000548 	.word	0x20000548

08002b78 <nodeHome_SetFlag>:
}


uint32_t nodeSwerveSetHomeComplete = 0;
#define SETHOME_FLAG_GROUP nodeSwerveSetHomeComplete
void nodeHome_SetFlag(CAN_DEVICE_ID e) {
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
	SETFLAG(SETHOME_FLAG_GROUP, e);
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2201      	movs	r2, #1
 8002b86:	409a      	lsls	r2, r3
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <nodeHome_SetFlag+0x28>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <nodeHome_SetFlag+0x28>)
 8002b90:	6013      	str	r3, [r2, #0]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	2000118c 	.word	0x2000118c

08002ba4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*=============================== CAN ===============================*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002bac:	2102      	movs	r1, #2
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f004 f8e8 	bl	8006d84 <HAL_CAN_DeactivateNotification>
	CAN_MODE_ID modeID = canctrl_Receive_2(hcan, CAN_RX_FIFO0);
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff fd32 	bl	8002620 <canctrl_Receive_2>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskCANHandle, modeID, eSetValueWithOverwrite, &HigherPriorityTaskWoken);
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	7bf9      	ldrb	r1, [r7, #15]
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	f009 faa8 	bl	800c128 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	f3bf 8f6f 	isb	sy
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000e9c 	.word	0x20000e9c
 8002bfc:	e000ed04 	.word	0xe000ed04

08002c00 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8002c08:	2110      	movs	r1, #16
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f004 f8ba 	bl	8006d84 <HAL_CAN_DeactivateNotification>
	CAN_MODE_ID modeID = canctrl_Receive_2(hcan, CAN_RX_FIFO1);
 8002c10:	2101      	movs	r1, #1
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fd04 	bl	8002620 <canctrl_Receive_2>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	73fb      	strb	r3, [r7, #15]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskCANHandle, modeID, eSetValueWithOverwrite, &HigherPriorityTaskWoken);
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	7bf9      	ldrb	r1, [r7, #15]
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2203      	movs	r2, #3
 8002c30:	f009 fa7a 	bl	800c128 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <HAL_CAN_RxFifo1MsgPendingCallback+0x4a>
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8002c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	f3bf 8f6f 	isb	sy
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000e9c 	.word	0x20000e9c
 8002c58:	e000ed04 	.word	0xe000ed04

08002c5c <CAN_Init>:
void CAN_Init() {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af04      	add	r7, sp, #16
	HAL_CAN_Start(&hcan1);
 8002c62:	480b      	ldr	r0, [pc, #44]	; (8002c90 <CAN_Init+0x34>)
 8002c64:	f003 fe02 	bl	800686c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 8002c68:	2112      	movs	r1, #18
 8002c6a:	4809      	ldr	r0, [pc, #36]	; (8002c90 <CAN_Init+0x34>)
 8002c6c:	f004 f864 	bl	8006d38 <HAL_CAN_ActivateNotification>
	canctrl_Filter_Mask16(&hcan1,
 8002c70:	2300      	movs	r3, #0
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	2300      	movs	r3, #0
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	2360      	movs	r3, #96	; 0x60
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	2260      	movs	r2, #96	; 0x60
 8002c80:	2120      	movs	r1, #32
 8002c82:	4803      	ldr	r0, [pc, #12]	; (8002c90 <CAN_Init+0x34>)
 8002c84:	f7ff fce2 	bl	800264c <canctrl_Filter_Mask16>
			CANCTRL_MODE_NODE_REQ_SPEED_ANGLE << 5,
			CANCTRL_MODE_SET_HOME << 5,
			CANCTRL_MODE_NODE_REQ_SPEED_ANGLE << 5,
			0,
			CAN_RX_FIFO0);
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000690 	.word	0x20000690

08002c94 <setHomeComplete>:

void setHomeComplete()
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <handleFunctionCAN>:

void handleFunctionCAN(CAN_MODE_ID mode, CAN_DEVICE_ID targetID) {
 8002ca4:	b5b0      	push	{r4, r5, r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	460a      	mov	r2, r1
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	73bb      	strb	r3, [r7, #14]
	switch (mode) {
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d020      	beq.n	8002cfc <handleFunctionCAN+0x58>
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	dc2c      	bgt.n	8002d18 <handleFunctionCAN+0x74>
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d002      	beq.n	8002cc8 <handleFunctionCAN+0x24>
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d00b      	beq.n	8002cde <handleFunctionCAN+0x3a>
		case CANCTRL_MODE_UNTANGLE_WIRE:
			canfunc_SetBoolValue(1,CANCTRL_MODE_UNTANGLE_WIRE);
			while(canctrl_Send(&hcan1, targetID) != HAL_OK);
			break;
		default:
			break;
 8002cc6:	e027      	b.n	8002d18 <handleFunctionCAN+0x74>
			nodeHome_SetFlag(targetID);
 8002cc8:	7bbb      	ldrb	r3, [r7, #14]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ff54 	bl	8002b78 <nodeHome_SetFlag>
			if(nodeSwerveSetHomeComplete == 30)
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <handleFunctionCAN+0x84>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b1e      	cmp	r3, #30
 8002cd6:	d121      	bne.n	8002d1c <handleFunctionCAN+0x78>
				setHomeComplete();
 8002cd8:	f7ff ffdc 	bl	8002c94 <setHomeComplete>
		break;
 8002cdc:	e01e      	b.n	8002d1c <handleFunctionCAN+0x78>
			nodeSpeedAngle[targetID - 1] = canfunc_MotorGetSpeedAndAngle();
 8002cde:	7bbb      	ldrb	r3, [r7, #14]
 8002ce0:	1e5c      	subs	r4, r3, #1
 8002ce2:	4d12      	ldr	r5, [pc, #72]	; (8002d2c <handleFunctionCAN+0x88>)
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fd19 	bl	800271e <canfunc_MotorGetSpeedAndAngle>
 8002cec:	00e3      	lsls	r3, r4, #3
 8002cee:	442b      	add	r3, r5
 8002cf0:	463a      	mov	r2, r7
 8002cf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cf6:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8002cfa:	e010      	b.n	8002d1e <handleFunctionCAN+0x7a>
			canfunc_SetBoolValue(1,CANCTRL_MODE_UNTANGLE_WIRE);
 8002cfc:	210c      	movs	r1, #12
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f7ff fcd1 	bl	80026a6 <canfunc_SetBoolValue>
			while(canctrl_Send(&hcan1, targetID) != HAL_OK);
 8002d04:	bf00      	nop
 8002d06:	7bbb      	ldrb	r3, [r7, #14]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4809      	ldr	r0, [pc, #36]	; (8002d30 <handleFunctionCAN+0x8c>)
 8002d0c:	f7ff fc48 	bl	80025a0 <canctrl_Send>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f7      	bne.n	8002d06 <handleFunctionCAN+0x62>
			break;
 8002d16:	e002      	b.n	8002d1e <handleFunctionCAN+0x7a>
			break;
 8002d18:	bf00      	nop
 8002d1a:	e000      	b.n	8002d1e <handleFunctionCAN+0x7a>
		break;
 8002d1c:	bf00      	nop
	}

}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bdb0      	pop	{r4, r5, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000118c 	.word	0x2000118c
 8002d2c:	20001190 	.word	0x20001190
 8002d30:	20000690 	.word	0x20000690

08002d34 <HAL_UART_RxCpltCallback>:
/*=============================== UART ===============================*/


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_UART_RxCpltCallback+0xa8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d145      	bne.n	8002dd2 <HAL_UART_RxCpltCallback+0x9e>
		gamepadRxIsBusy = 1;
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_UART_RxCpltCallback+0xac>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
		int ViTriData = -1;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d50:	617b      	str	r3, [r7, #20]
		for (int i = 0; i <= 8; ++i) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	e00a      	b.n	8002d6e <HAL_UART_RxCpltCallback+0x3a>
			if (UARTRX3_Buffer[i] == 0xAA) {
 8002d58:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_UART_RxCpltCallback+0xb0>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2baa      	cmp	r3, #170	; 0xaa
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_RxCpltCallback+0x34>
				ViTriData = i;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	617b      	str	r3, [r7, #20]
		for (int i = 0; i <= 8; ++i) {
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	ddf1      	ble.n	8002d58 <HAL_UART_RxCpltCallback+0x24>
			}
		}
		if (ViTriData != -1) {
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d01e      	beq.n	8002dba <HAL_UART_RxCpltCallback+0x86>
			int cnt = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
			while (cnt < 9) {
 8002d80:	e013      	b.n	8002daa <HAL_UART_RxCpltCallback+0x76>
				DataTayGame[cnt] = UARTRX3_Buffer[ViTriData];
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <HAL_UART_RxCpltCallback+0xb0>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	4413      	add	r3, r2
 8002d88:	7819      	ldrb	r1, [r3, #0]
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <HAL_UART_RxCpltCallback+0xb4>)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	460a      	mov	r2, r1
 8002d92:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3301      	adds	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
				if (ViTriData >= 9) {
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	dd01      	ble.n	8002da4 <HAL_UART_RxCpltCallback+0x70>
					ViTriData = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
			while (cnt < 9) {
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	dde8      	ble.n	8002d82 <HAL_UART_RxCpltCallback+0x4e>
			}

			GamepPadHandle(&GamePad, DataTayGame);
 8002db0:	490d      	ldr	r1, [pc, #52]	; (8002de8 <HAL_UART_RxCpltCallback+0xb4>)
 8002db2:	480e      	ldr	r0, [pc, #56]	; (8002dec <HAL_UART_RxCpltCallback+0xb8>)
 8002db4:	f7ff fcd0 	bl	8002758 <GamepPadHandle>
 8002db8:	e002      	b.n	8002dc0 <HAL_UART_RxCpltCallback+0x8c>

		} else {
			GamePad.Status = 0;
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_UART_RxCpltCallback+0xb8>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
		}
		if (!gamepadRxIsBusy)
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_UART_RxCpltCallback+0xac>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d104      	bne.n	8002dd2 <HAL_UART_RxCpltCallback+0x9e>
			HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8002dc8:	2209      	movs	r2, #9
 8002dca:	4906      	ldr	r1, [pc, #24]	; (8002de4 <HAL_UART_RxCpltCallback+0xb0>)
 8002dcc:	4808      	ldr	r0, [pc, #32]	; (8002df0 <HAL_UART_RxCpltCallback+0xbc>)
 8002dce:	f007 f82b 	bl	8009e28 <HAL_UART_Receive_IT>

	}
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40004800 	.word	0x40004800
 8002de0:	200011e4 	.word	0x200011e4
 8002de4:	200011a8 	.word	0x200011a8
 8002de8:	200011b4 	.word	0x200011b4
 8002dec:	200011c0 	.word	0x200011c0
 8002df0:	200008f0 	.word	0x200008f0

08002df4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	while (1);
 8002dfc:	e7fe      	b.n	8002dfc <HAL_CAN_ErrorCallback+0x8>
	...

08002e00 <HAL_UART_ErrorCallback>:
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
	memset(UARTRX3_Buffer, 0, sizeof(UARTRX3_Buffer));
 8002e1e:	2209      	movs	r2, #9
 8002e20:	2100      	movs	r1, #0
 8002e22:	480a      	ldr	r0, [pc, #40]	; (8002e4c <HAL_UART_ErrorCallback+0x4c>)
 8002e24:	f00a fc8d 	bl	800d742 <memset>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8002e28:	2209      	movs	r2, #9
 8002e2a:	4908      	ldr	r1, [pc, #32]	; (8002e4c <HAL_UART_ErrorCallback+0x4c>)
 8002e2c:	4808      	ldr	r0, [pc, #32]	; (8002e50 <HAL_UART_ErrorCallback+0x50>)
 8002e2e:	f006 fffb 	bl	8009e28 <HAL_UART_Receive_IT>
	__HAL_UART_DISABLE(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e40:	60da      	str	r2, [r3, #12]
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200011a8 	.word	0x200011a8
 8002e50:	200008f0 	.word	0x200008f0

08002e54 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	log_TransmitCompleteHandle(huart);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fe0d 	bl	8002a7c <log_TransmitCompleteHandle>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <Send_Data>:

void Send_Data(){
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0

	log_SendString();
 8002e6e:	f7ff fe21 	bl	8002ab4 <log_SendString>
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <Send_Header>:

void Send_Header(){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
	log_AddHeaderArgumentToBuffer("PoseX");
 8002e7c:	480a      	ldr	r0, [pc, #40]	; (8002ea8 <Send_Header+0x30>)
 8002e7e:	f7ff fe3b 	bl	8002af8 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("PoseY");
 8002e82:	480a      	ldr	r0, [pc, #40]	; (8002eac <Send_Header+0x34>)
 8002e84:	f7ff fe38 	bl	8002af8 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("PoseTheta");
 8002e88:	4809      	ldr	r0, [pc, #36]	; (8002eb0 <Send_Header+0x38>)
 8002e8a:	f7ff fe35 	bl	8002af8 <log_AddHeaderArgumentToBuffer>

	log_AddHeaderArgumentToBuffer("TrajecPlanX");
 8002e8e:	4809      	ldr	r0, [pc, #36]	; (8002eb4 <Send_Header+0x3c>)
 8002e90:	f7ff fe32 	bl	8002af8 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("TrajecPlanY");
 8002e94:	4808      	ldr	r0, [pc, #32]	; (8002eb8 <Send_Header+0x40>)
 8002e96:	f7ff fe2f 	bl	8002af8 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("TrajecPlanTheta");
 8002e9a:	4808      	ldr	r0, [pc, #32]	; (8002ebc <Send_Header+0x44>)
 8002e9c:	f7ff fe2c 	bl	8002af8 <log_AddHeaderArgumentToBuffer>

	log_SendString();
 8002ea0:	f7ff fe08 	bl	8002ab4 <log_SendString>
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	08011dec 	.word	0x08011dec
 8002eac:	08011df4 	.word	0x08011df4
 8002eb0:	08011dfc 	.word	0x08011dfc
 8002eb4:	08011e08 	.word	0x08011e08
 8002eb8:	08011e14 	.word	0x08011e14
 8002ebc:	08011e20 	.word	0x08011e20

08002ec0 <Get_MPU_Angle>:

///////////////////////////MPU//////////////////////////
#define DELTA_T 0.05
void Get_MPU_Angle()
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    send_mpu ='z';
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <Get_MPU_Angle+0x44>)
 8002ec6:	227a      	movs	r2, #122	; 0x7a
 8002ec8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1,&send_mpu,1,1);
 8002eca:	2301      	movs	r3, #1
 8002ecc:	2201      	movs	r2, #1
 8002ece:	490d      	ldr	r1, [pc, #52]	; (8002f04 <Get_MPU_Angle+0x44>)
 8002ed0:	480d      	ldr	r0, [pc, #52]	; (8002f08 <Get_MPU_Angle+0x48>)
 8002ed2:	f006 fed2 	bl	8009c7a <HAL_UART_Transmit>
    angle=mpu[0]<<8|mpu[1];
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <Get_MPU_Angle+0x4c>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <Get_MPU_Angle+0x4c>)
 8002ee0:	785b      	ldrb	r3, [r3, #1]
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <Get_MPU_Angle+0x50>)
 8002eea:	801a      	strh	r2, [r3, #0]
    a_Now=angle;
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <Get_MPU_Angle+0x50>)
 8002eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <Get_MPU_Angle+0x54>)
 8002efc:	edc3 7a00 	vstr	s15, [r3]
}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20001202 	.word	0x20001202
 8002f08:	20000868 	.word	0x20000868
 8002f0c:	200011f8 	.word	0x200011f8
 8002f10:	20001204 	.word	0x20001204
 8002f14:	20001208 	.word	0x20001208

08002f18 <Reset_MPU_Angle>:

void Reset_MPU_Angle()
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
    send_mpu ='a';
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <Reset_MPU_Angle+0x1c>)
 8002f1e:	2261      	movs	r2, #97	; 0x61
 8002f20:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1,&send_mpu,1,1);
 8002f22:	2301      	movs	r3, #1
 8002f24:	2201      	movs	r2, #1
 8002f26:	4903      	ldr	r1, [pc, #12]	; (8002f34 <Reset_MPU_Angle+0x1c>)
 8002f28:	4803      	ldr	r0, [pc, #12]	; (8002f38 <Reset_MPU_Angle+0x20>)
 8002f2a:	f006 fea6 	bl	8009c7a <HAL_UART_Transmit>

}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20001202 	.word	0x20001202
 8002f38:	20000868 	.word	0x20000868

08002f3c <process_Init>:
/////////////////////Process///////////////////



void process_Init()
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
	////////PID/////////
	pid_Angle.kP = 1.2;
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <process_Init+0x54>)
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <process_Init+0x58>)
 8002f44:	60da      	str	r2, [r3, #12]
	pid_Angle.kI = 0;
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <process_Init+0x54>)
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
	pid_Angle.kD = 0;
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <process_Init+0x54>)
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	621a      	str	r2, [r3, #32]
	pid_Angle.alpha = 0;
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <process_Init+0x54>)
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
	pid_Angle.deltaT = DELTA_T;
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <process_Init+0x54>)
 8002f60:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <process_Init+0x5c>)
 8002f62:	609a      	str	r2, [r3, #8]
	pid_Angle.u_AboveLimit = 5;
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <process_Init+0x54>)
 8002f66:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <process_Init+0x60>)
 8002f68:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_Angle.u_BelowLimit = -5;
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <process_Init+0x54>)
 8002f6c:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <process_Init+0x64>)
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
	pid_Angle.kB = 1/DELTA_T;
 8002f70:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <process_Init+0x54>)
 8002f72:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <process_Init+0x68>)
 8002f74:	61da      	str	r2, [r3, #28]

	process_AutoChose = 0;
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <process_Init+0x6c>)
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
	encoder_Init(&FloatingEnc, &htim1, 200, DELTA_T);
 8002f7e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002fac <process_Init+0x70>
 8002f82:	22c8      	movs	r2, #200	; 0xc8
 8002f84:	490a      	ldr	r1, [pc, #40]	; (8002fb0 <process_Init+0x74>)
 8002f86:	480b      	ldr	r0, [pc, #44]	; (8002fb4 <process_Init+0x78>)
 8002f88:	f7fd ffdc 	bl	8000f44 <encoder_Init>
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20001210 	.word	0x20001210
 8002f94:	3f99999a 	.word	0x3f99999a
 8002f98:	3d4ccccd 	.word	0x3d4ccccd
 8002f9c:	40a00000 	.word	0x40a00000
 8002fa0:	c0a00000 	.word	0xc0a00000
 8002fa4:	41a00000 	.word	0x41a00000
 8002fa8:	200012a0 	.word	0x200012a0
 8002fac:	3d4ccccd 	.word	0x3d4ccccd
 8002fb0:	200006b8 	.word	0x200006b8
 8002fb4:	2000125c 	.word	0x2000125c

08002fb8 <process_PD_OnStrainghtPath>:

void process_PD_OnStrainghtPath()
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
	pid_Angle.kP = 2.5;
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <process_PD_OnStrainghtPath+0x44>)
 8002fbe:	4a10      	ldr	r2, [pc, #64]	; (8003000 <process_PD_OnStrainghtPath+0x48>)
 8002fc0:	60da      	str	r2, [r3, #12]
	pid_Angle.kI = 0;
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <process_PD_OnStrainghtPath+0x44>)
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	615a      	str	r2, [r3, #20]
	pid_Angle.kD = 0;
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <process_PD_OnStrainghtPath+0x44>)
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	621a      	str	r2, [r3, #32]
	pid_Angle.alpha = 0;
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <process_PD_OnStrainghtPath+0x44>)
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
	pid_Angle.deltaT = DELTA_T;
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <process_PD_OnStrainghtPath+0x44>)
 8002fdc:	4a09      	ldr	r2, [pc, #36]	; (8003004 <process_PD_OnStrainghtPath+0x4c>)
 8002fde:	609a      	str	r2, [r3, #8]
	pid_Angle.u_AboveLimit = 5;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <process_PD_OnStrainghtPath+0x44>)
 8002fe2:	4a09      	ldr	r2, [pc, #36]	; (8003008 <process_PD_OnStrainghtPath+0x50>)
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_Angle.u_BelowLimit = -5;
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <process_PD_OnStrainghtPath+0x44>)
 8002fe8:	4a08      	ldr	r2, [pc, #32]	; (800300c <process_PD_OnStrainghtPath+0x54>)
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40
	pid_Angle.kB = 1/DELTA_T;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <process_PD_OnStrainghtPath+0x44>)
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <process_PD_OnStrainghtPath+0x58>)
 8002ff0:	61da      	str	r2, [r3, #28]
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	20001210 	.word	0x20001210
 8003000:	40200000 	.word	0x40200000
 8003004:	3d4ccccd 	.word	0x3d4ccccd
 8003008:	40a00000 	.word	0x40a00000
 800300c:	c0a00000 	.word	0xc0a00000
 8003010:	41a00000 	.word	0x41a00000

08003014 <process_PD_OnTrajecPath>:

void process_PD_OnTrajecPath()
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
	pid_Angle.kP = 1.2;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <process_PD_OnTrajecPath+0x44>)
 800301a:	4a10      	ldr	r2, [pc, #64]	; (800305c <process_PD_OnTrajecPath+0x48>)
 800301c:	60da      	str	r2, [r3, #12]
	pid_Angle.kI = 0;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <process_PD_OnTrajecPath+0x44>)
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	615a      	str	r2, [r3, #20]
	pid_Angle.kD = 0;
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <process_PD_OnTrajecPath+0x44>)
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	621a      	str	r2, [r3, #32]
	pid_Angle.alpha = 0;
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <process_PD_OnTrajecPath+0x44>)
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
	pid_Angle.deltaT = DELTA_T;
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <process_PD_OnTrajecPath+0x44>)
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <process_PD_OnTrajecPath+0x4c>)
 800303a:	609a      	str	r2, [r3, #8]
	pid_Angle.u_AboveLimit = 5;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <process_PD_OnTrajecPath+0x44>)
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <process_PD_OnTrajecPath+0x50>)
 8003040:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_Angle.u_BelowLimit = -5;
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <process_PD_OnTrajecPath+0x44>)
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <process_PD_OnTrajecPath+0x54>)
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
	pid_Angle.kB = 1/DELTA_T;
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <process_PD_OnTrajecPath+0x44>)
 800304a:	4a08      	ldr	r2, [pc, #32]	; (800306c <process_PD_OnTrajecPath+0x58>)
 800304c:	61da      	str	r2, [r3, #28]
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	20001210 	.word	0x20001210
 800305c:	3f99999a 	.word	0x3f99999a
 8003060:	3d4ccccd 	.word	0x3d4ccccd
 8003064:	40a00000 	.word	0x40a00000
 8003068:	c0a00000 	.word	0xc0a00000
 800306c:	41a00000 	.word	0x41a00000

08003070 <process_PD_Auto_Chose>:

void process_PD_Auto_Chose(float Target,float Current)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	ed87 0a01 	vstr	s0, [r7, #4]
 800307a:	edc7 0a00 	vstr	s1, [r7]
	if(process_AutoChose == 0)
 800307e:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <process_PD_Auto_Chose+0xc0>)
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	d125      	bne.n	80030da <process_PD_Auto_Chose+0x6a>
	{
		if(absf(Target - Current)<5*M_PI/180)
 800308e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003092:	edd7 7a00 	vldr	s15, [r7]
 8003096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800309a:	eeb0 0a67 	vmov.f32	s0, s15
 800309e:	f7fe fa75 	bl	800158c <absf>
 80030a2:	ee10 3a10 	vmov	r3, s0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fa4e 	bl	8000548 <__aeabi_f2d>
 80030ac:	a31e      	add	r3, pc, #120	; (adr r3, 8003128 <process_PD_Auto_Chose+0xb8>)
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f7fd fd13 	bl	8000adc <__aeabi_dcmplt>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <process_PD_Auto_Chose+0x62>
		{
			process_AutoChose_Count++;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <process_PD_Auto_Chose+0xc4>)
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <process_PD_Auto_Chose+0xc4>)
 80030cc:	edc3 7a00 	vstr	s15, [r3]
 80030d0:	e003      	b.n	80030da <process_PD_Auto_Chose+0x6a>
		}else{
			process_AutoChose_Count = 0;
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <process_PD_Auto_Chose+0xc4>)
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
		}
	}

	if (process_AutoChose_Count>15)
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <process_PD_Auto_Chose+0xc4>)
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80030e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ec:	dd07      	ble.n	80030fe <process_PD_Auto_Chose+0x8e>
	{
		process_AutoChose_Count = 0;
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <process_PD_Auto_Chose+0xc4>)
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
		process_AutoChose = 1;
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <process_PD_Auto_Chose+0xc0>)
 80030f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030fc:	601a      	str	r2, [r3, #0]
	}

	if (process_AutoChose == 1)
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <process_PD_Auto_Chose+0xc0>)
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003108:	eef4 7a47 	vcmp.f32	s15, s14
 800310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003110:	d102      	bne.n	8003118 <process_PD_Auto_Chose+0xa8>
	{
		process_PD_OnStrainghtPath();
 8003112:	f7ff ff51 	bl	8002fb8 <process_PD_OnStrainghtPath>
	}else{
		process_PD_OnTrajecPath();
	}
}
 8003116:	e001      	b.n	800311c <process_PD_Auto_Chose+0xac>
		process_PD_OnTrajecPath();
 8003118:	f7ff ff7c 	bl	8003014 <process_PD_OnTrajecPath>
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	f3af 8000 	nop.w
 8003128:	4ae74487 	.word	0x4ae74487
 800312c:	3fb65718 	.word	0x3fb65718
 8003130:	200012a0 	.word	0x200012a0
 8003134:	200012a4 	.word	0x200012a4

08003138 <process_SetFloatingEnc>:
void process_SetFloatingEnc()
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
	floatingEncCount = encoder_GetFloatingDis(&FloatingEnc);
 800313c:	4806      	ldr	r0, [pc, #24]	; (8003158 <process_SetFloatingEnc+0x20>)
 800313e:	f7fd ff36 	bl	8000fae <encoder_GetFloatingDis>
 8003142:	eef0 7a40 	vmov.f32	s15, s0
 8003146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800314a:	ee17 2a90 	vmov	r2, s15
 800314e:	4b03      	ldr	r3, [pc, #12]	; (800315c <process_SetFloatingEnc+0x24>)
 8003150:	601a      	str	r2, [r3, #0]
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000125c 	.word	0x2000125c
 800315c:	2000128c 	.word	0x2000128c

08003160 <process_ResetFloatingEnc>:

void process_ResetFloatingEnc()
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
	encoder_ResetCount(&FloatingEnc);
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <process_ResetFloatingEnc+0x14>)
 8003166:	f7fd ff05 	bl	8000f74 <encoder_ResetCount>
	floatingEncCount = 0;
 800316a:	4b03      	ldr	r3, [pc, #12]	; (8003178 <process_ResetFloatingEnc+0x18>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	2000125c 	.word	0x2000125c
 8003178:	2000128c 	.word	0x2000128c
 800317c:	00000000 	.word	0x00000000

08003180 <process_Accel_FloatingEnc2>:
	u = cos(Angle*M_PI/180)*chasis_Vector_TargetSpeed ;
	v = sin(Angle*M_PI/180)*chasis_Vector_TargetSpeed ;
}

void process_Accel_FloatingEnc2(float Angle,float maxSpeed,float s,float accel)
{
 8003180:	b5b0      	push	{r4, r5, r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	ed87 0a03 	vstr	s0, [r7, #12]
 800318a:	edc7 0a02 	vstr	s1, [r7, #8]
 800318e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003192:	edc7 1a00 	vstr	s3, [r7]
	use_pidTheta = 1;
 8003196:	4b7a      	ldr	r3, [pc, #488]	; (8003380 <process_Accel_FloatingEnc2+0x200>)
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
	if ((floatingEncCount < 500)&&(chasis_Vector_TargetSpeed<maxSpeed))
 800319c:	4b79      	ldr	r3, [pc, #484]	; (8003384 <process_Accel_FloatingEnc2+0x204>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031a4:	da13      	bge.n	80031ce <process_Accel_FloatingEnc2+0x4e>
 80031a6:	4b78      	ldr	r3, [pc, #480]	; (8003388 <process_Accel_FloatingEnc2+0x208>)
 80031a8:	edd3 7a00 	vldr	s15, [r3]
 80031ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80031b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b8:	dd09      	ble.n	80031ce <process_Accel_FloatingEnc2+0x4e>
	{
		chasis_Vector_TargetSpeed += accel;
 80031ba:	4b73      	ldr	r3, [pc, #460]	; (8003388 <process_Accel_FloatingEnc2+0x208>)
 80031bc:	ed93 7a00 	vldr	s14, [r3]
 80031c0:	edd7 7a00 	vldr	s15, [r7]
 80031c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c8:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <process_Accel_FloatingEnc2+0x208>)
 80031ca:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((floatingEncCount > 500)&&(floatingEncCount < (s - 500)))
 80031ce:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <process_Accel_FloatingEnc2+0x204>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031d6:	dd19      	ble.n	800320c <process_Accel_FloatingEnc2+0x8c>
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <process_Accel_FloatingEnc2+0x204>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	ee07 3a90 	vmov	s15, r3
 80031e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80031e8:	eddf 6a68 	vldr	s13, [pc, #416]	; 800338c <process_Accel_FloatingEnc2+0x20c>
 80031ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f8:	d508      	bpl.n	800320c <process_Accel_FloatingEnc2+0x8c>
	{
		chasis_Vector_TargetSpeed = maxSpeed/2;
 80031fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80031fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003206:	4b60      	ldr	r3, [pc, #384]	; (8003388 <process_Accel_FloatingEnc2+0x208>)
 8003208:	edc3 7a00 	vstr	s15, [r3]
	}

	if (floatingEncCount > (s - 400)){
 800320c:	4b5d      	ldr	r3, [pc, #372]	; (8003384 <process_Accel_FloatingEnc2+0x204>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003218:	edd7 7a01 	vldr	s15, [r7, #4]
 800321c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8003390 <process_Accel_FloatingEnc2+0x210>
 8003220:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322c:	dd09      	ble.n	8003242 <process_Accel_FloatingEnc2+0xc2>
		chasis_Vector_TargetSpeed -= accel ;
 800322e:	4b56      	ldr	r3, [pc, #344]	; (8003388 <process_Accel_FloatingEnc2+0x208>)
 8003230:	ed93 7a00 	vldr	s14, [r3]
 8003234:	edd7 7a00 	vldr	s15, [r7]
 8003238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323c:	4b52      	ldr	r3, [pc, #328]	; (8003388 <process_Accel_FloatingEnc2+0x208>)
 800323e:	edc3 7a00 	vstr	s15, [r3]
//	if (floatingEncCount > (s - 300)){
//		use_pidTheta = 0;
//		r = 0;
//	}

	if ((chasis_Vector_TargetSpeed<=0)||(floatingEncCount > s))
 8003242:	4b51      	ldr	r3, [pc, #324]	; (8003388 <process_Accel_FloatingEnc2+0x208>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	d90c      	bls.n	800326c <process_Accel_FloatingEnc2+0xec>
 8003252:	4b4c      	ldr	r3, [pc, #304]	; (8003384 <process_Accel_FloatingEnc2+0x204>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800325e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326a:	d51b      	bpl.n	80032a4 <process_Accel_FloatingEnc2+0x124>
	{
		chasis_Vector_TargetSpeed = 0;
 800326c:	4b46      	ldr	r3, [pc, #280]	; (8003388 <process_Accel_FloatingEnc2+0x208>)
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
		process_ResetFloatingEnc();
 8003274:	f7ff ff74 	bl	8003160 <process_ResetFloatingEnc>
		r = 0;
 8003278:	4b46      	ldr	r3, [pc, #280]	; (8003394 <process_Accel_FloatingEnc2+0x214>)
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
		u = 0;
 8003280:	4b45      	ldr	r3, [pc, #276]	; (8003398 <process_Accel_FloatingEnc2+0x218>)
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
		v = 0;
 8003288:	4b44      	ldr	r3, [pc, #272]	; (800339c <process_Accel_FloatingEnc2+0x21c>)
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
		use_pidTheta = 0;
 8003290:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <process_Accel_FloatingEnc2+0x200>)
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
		step += 1;
 8003296:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <process_Accel_FloatingEnc2+0x220>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <process_Accel_FloatingEnc2+0x220>)
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e062      	b.n	800336a <process_Accel_FloatingEnc2+0x1ea>
	}else{
		u = cos(Angle*M_PI/180)*chasis_Vector_TargetSpeed ;
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7fd f94f 	bl	8000548 <__aeabi_f2d>
 80032aa:	a333      	add	r3, pc, #204	; (adr r3, 8003378 <process_Accel_FloatingEnc2+0x1f8>)
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	f7fd f9a2 	bl	80005f8 <__aeabi_dmul>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4610      	mov	r0, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <process_Accel_FloatingEnc2+0x224>)
 80032c2:	f7fd fac3 	bl	800084c <__aeabi_ddiv>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	ec43 2b17 	vmov	d7, r2, r3
 80032ce:	eeb0 0a47 	vmov.f32	s0, s14
 80032d2:	eef0 0a67 	vmov.f32	s1, s15
 80032d6:	f00c fc2b 	bl	800fb30 <cos>
 80032da:	ec55 4b10 	vmov	r4, r5, d0
 80032de:	4b2a      	ldr	r3, [pc, #168]	; (8003388 <process_Accel_FloatingEnc2+0x208>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f930 	bl	8000548 <__aeabi_f2d>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4620      	mov	r0, r4
 80032ee:	4629      	mov	r1, r5
 80032f0:	f7fd f982 	bl	80005f8 <__aeabi_dmul>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7fd fc54 	bl	8000ba8 <__aeabi_d2f>
 8003300:	4603      	mov	r3, r0
 8003302:	4a25      	ldr	r2, [pc, #148]	; (8003398 <process_Accel_FloatingEnc2+0x218>)
 8003304:	6013      	str	r3, [r2, #0]
		v = sin(Angle*M_PI/180)*chasis_Vector_TargetSpeed ;
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f7fd f91e 	bl	8000548 <__aeabi_f2d>
 800330c:	a31a      	add	r3, pc, #104	; (adr r3, 8003378 <process_Accel_FloatingEnc2+0x1f8>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd f971 	bl	80005f8 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <process_Accel_FloatingEnc2+0x224>)
 8003324:	f7fd fa92 	bl	800084c <__aeabi_ddiv>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	ec43 2b17 	vmov	d7, r2, r3
 8003330:	eeb0 0a47 	vmov.f32	s0, s14
 8003334:	eef0 0a67 	vmov.f32	s1, s15
 8003338:	f00c fc4e 	bl	800fbd8 <sin>
 800333c:	ec55 4b10 	vmov	r4, r5, d0
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <process_Accel_FloatingEnc2+0x208>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd f8ff 	bl	8000548 <__aeabi_f2d>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4620      	mov	r0, r4
 8003350:	4629      	mov	r1, r5
 8003352:	f7fd f951 	bl	80005f8 <__aeabi_dmul>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	f7fd fc23 	bl	8000ba8 <__aeabi_d2f>
 8003362:	4603      	mov	r3, r0
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <process_Accel_FloatingEnc2+0x21c>)
 8003366:	6013      	str	r3, [r2, #0]

	}
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bdb0      	pop	{r4, r5, r7, pc}
 8003372:	bf00      	nop
 8003374:	f3af 8000 	nop.w
 8003378:	54442d18 	.word	0x54442d18
 800337c:	400921fb 	.word	0x400921fb
 8003380:	20001258 	.word	0x20001258
 8003384:	2000128c 	.word	0x2000128c
 8003388:	2000129c 	.word	0x2000129c
 800338c:	43fa0000 	.word	0x43fa0000
 8003390:	43c80000 	.word	0x43c80000
 8003394:	20001298 	.word	0x20001298
 8003398:	20001290 	.word	0x20001290
 800339c:	20001294 	.word	0x20001294
 80033a0:	200011f6 	.word	0x200011f6
 80033a4:	40668000 	.word	0x40668000

080033a8 <process_RunByAngle>:
void process_LineFollow(){

//	if()
}
void process_RunByAngle(float Angle,float speed)
{
 80033a8:	b5b0      	push	{r4, r5, r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80033b2:	edc7 0a00 	vstr	s1, [r7]
	u = cos(Angle*M_PI/180)*speed ;
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd f8c6 	bl	8000548 <__aeabi_f2d>
 80033bc:	a330      	add	r3, pc, #192	; (adr r3, 8003480 <process_RunByAngle+0xd8>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fd f919 	bl	80005f8 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <process_RunByAngle+0xe0>)
 80033d4:	f7fd fa3a 	bl	800084c <__aeabi_ddiv>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	ec43 2b17 	vmov	d7, r2, r3
 80033e0:	eeb0 0a47 	vmov.f32	s0, s14
 80033e4:	eef0 0a67 	vmov.f32	s1, s15
 80033e8:	f00c fba2 	bl	800fb30 <cos>
 80033ec:	ec55 4b10 	vmov	r4, r5, d0
 80033f0:	6838      	ldr	r0, [r7, #0]
 80033f2:	f7fd f8a9 	bl	8000548 <__aeabi_f2d>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4620      	mov	r0, r4
 80033fc:	4629      	mov	r1, r5
 80033fe:	f7fd f8fb 	bl	80005f8 <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f7fd fbcd 	bl	8000ba8 <__aeabi_d2f>
 800340e:	4603      	mov	r3, r0
 8003410:	4a1e      	ldr	r2, [pc, #120]	; (800348c <process_RunByAngle+0xe4>)
 8003412:	6013      	str	r3, [r2, #0]
	v = sin(Angle*M_PI/180)*speed ;
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fd f897 	bl	8000548 <__aeabi_f2d>
 800341a:	a319      	add	r3, pc, #100	; (adr r3, 8003480 <process_RunByAngle+0xd8>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f7fd f8ea 	bl	80005f8 <__aeabi_dmul>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <process_RunByAngle+0xe0>)
 8003432:	f7fd fa0b 	bl	800084c <__aeabi_ddiv>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	ec43 2b17 	vmov	d7, r2, r3
 800343e:	eeb0 0a47 	vmov.f32	s0, s14
 8003442:	eef0 0a67 	vmov.f32	s1, s15
 8003446:	f00c fbc7 	bl	800fbd8 <sin>
 800344a:	ec55 4b10 	vmov	r4, r5, d0
 800344e:	6838      	ldr	r0, [r7, #0]
 8003450:	f7fd f87a 	bl	8000548 <__aeabi_f2d>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4620      	mov	r0, r4
 800345a:	4629      	mov	r1, r5
 800345c:	f7fd f8cc 	bl	80005f8 <__aeabi_dmul>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	f7fd fb9e 	bl	8000ba8 <__aeabi_d2f>
 800346c:	4603      	mov	r3, r0
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <process_RunByAngle+0xe8>)
 8003470:	6013      	str	r3, [r2, #0]
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bdb0      	pop	{r4, r5, r7, pc}
 800347a:	bf00      	nop
 800347c:	f3af 8000 	nop.w
 8003480:	54442d18 	.word	0x54442d18
 8003484:	400921fb 	.word	0x400921fb
 8003488:	40668000 	.word	0x40668000
 800348c:	20001290 	.word	0x20001290
 8003490:	20001294 	.word	0x20001294

08003494 <process_Signal_RotationMatrixTransform>:

void process_Signal_RotationMatrixTransform(float u, float v ,float r)
{
 8003494:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	ed87 0a03 	vstr	s0, [r7, #12]
 80034a0:	edc7 0a02 	vstr	s1, [r7, #8]
 80034a4:	ed87 1a01 	vstr	s2, [r7, #4]
	uControlX = u*cos(angle_Rad) - v*sin(angle_Rad);
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7fd f84d 	bl	8000548 <__aeabi_f2d>
 80034ae:	4604      	mov	r4, r0
 80034b0:	460d      	mov	r5, r1
 80034b2:	4b40      	ldr	r3, [pc, #256]	; (80035b4 <process_Signal_RotationMatrixTransform+0x120>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd f846 	bl	8000548 <__aeabi_f2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	ec43 2b10 	vmov	d0, r2, r3
 80034c4:	f00c fb34 	bl	800fb30 <cos>
 80034c8:	ec53 2b10 	vmov	r2, r3, d0
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fd f892 	bl	80005f8 <__aeabi_dmul>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4690      	mov	r8, r2
 80034da:	4699      	mov	r9, r3
 80034dc:	68b8      	ldr	r0, [r7, #8]
 80034de:	f7fd f833 	bl	8000548 <__aeabi_f2d>
 80034e2:	4604      	mov	r4, r0
 80034e4:	460d      	mov	r5, r1
 80034e6:	4b33      	ldr	r3, [pc, #204]	; (80035b4 <process_Signal_RotationMatrixTransform+0x120>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd f82c 	bl	8000548 <__aeabi_f2d>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	ec43 2b10 	vmov	d0, r2, r3
 80034f8:	f00c fb6e 	bl	800fbd8 <sin>
 80034fc:	ec53 2b10 	vmov	r2, r3, d0
 8003500:	4620      	mov	r0, r4
 8003502:	4629      	mov	r1, r5
 8003504:	f7fd f878 	bl	80005f8 <__aeabi_dmul>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4640      	mov	r0, r8
 800350e:	4649      	mov	r1, r9
 8003510:	f7fc feba 	bl	8000288 <__aeabi_dsub>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	f7fd fb44 	bl	8000ba8 <__aeabi_d2f>
 8003520:	4603      	mov	r3, r0
 8003522:	4a25      	ldr	r2, [pc, #148]	; (80035b8 <process_Signal_RotationMatrixTransform+0x124>)
 8003524:	6013      	str	r3, [r2, #0]
	uControlY = u*sin(angle_Rad) + v*cos(angle_Rad);
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f7fd f80e 	bl	8000548 <__aeabi_f2d>
 800352c:	4604      	mov	r4, r0
 800352e:	460d      	mov	r5, r1
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <process_Signal_RotationMatrixTransform+0x120>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd f807 	bl	8000548 <__aeabi_f2d>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	ec43 2b10 	vmov	d0, r2, r3
 8003542:	f00c fb49 	bl	800fbd8 <sin>
 8003546:	ec53 2b10 	vmov	r2, r3, d0
 800354a:	4620      	mov	r0, r4
 800354c:	4629      	mov	r1, r5
 800354e:	f7fd f853 	bl	80005f8 <__aeabi_dmul>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4690      	mov	r8, r2
 8003558:	4699      	mov	r9, r3
 800355a:	68b8      	ldr	r0, [r7, #8]
 800355c:	f7fc fff4 	bl	8000548 <__aeabi_f2d>
 8003560:	4604      	mov	r4, r0
 8003562:	460d      	mov	r5, r1
 8003564:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <process_Signal_RotationMatrixTransform+0x120>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc ffed 	bl	8000548 <__aeabi_f2d>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	ec43 2b10 	vmov	d0, r2, r3
 8003576:	f00c fadb 	bl	800fb30 <cos>
 800357a:	ec53 2b10 	vmov	r2, r3, d0
 800357e:	4620      	mov	r0, r4
 8003580:	4629      	mov	r1, r5
 8003582:	f7fd f839 	bl	80005f8 <__aeabi_dmul>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4640      	mov	r0, r8
 800358c:	4649      	mov	r1, r9
 800358e:	f7fc fe7d 	bl	800028c <__adddf3>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	f7fd fb05 	bl	8000ba8 <__aeabi_d2f>
 800359e:	4603      	mov	r3, r0
 80035a0:	4a06      	ldr	r2, [pc, #24]	; (80035bc <process_Signal_RotationMatrixTransform+0x128>)
 80035a2:	6013      	str	r3, [r2, #0]
	uControlTheta = r;
 80035a4:	4a06      	ldr	r2, [pc, #24]	; (80035c0 <process_Signal_RotationMatrixTransform+0x12c>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
}
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035b4:	2000120c 	.word	0x2000120c
 80035b8:	200011e8 	.word	0x200011e8
 80035bc:	200011ec 	.word	0x200011ec
 80035c0:	200011f0 	.word	0x200011f0
 80035c4:	00000000 	.word	0x00000000

080035c8 <process_Ball_Approach>:

void process_Ball_Approach()
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
	if (process_SubState == 0)
 80035cc:	4b74      	ldr	r3, [pc, #464]	; (80037a0 <process_Ball_Approach+0x1d8>)
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035da:	d112      	bne.n	8003602 <process_Ball_Approach+0x3a>
	{	process_Count ++;
 80035dc:	4b71      	ldr	r3, [pc, #452]	; (80037a4 <process_Ball_Approach+0x1dc>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	3301      	adds	r3, #1
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <process_Ball_Approach+0x1dc>)
 80035e6:	701a      	strb	r2, [r3, #0]
		if (process_Count > 10)
 80035e8:	4b6e      	ldr	r3, [pc, #440]	; (80037a4 <process_Ball_Approach+0x1dc>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b0a      	cmp	r3, #10
 80035ee:	f240 80c7 	bls.w	8003780 <process_Ball_Approach+0x1b8>
		{
			process_Count = 0;
 80035f2:	4b6c      	ldr	r3, [pc, #432]	; (80037a4 <process_Ball_Approach+0x1dc>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
			process_SubState = 1;
 80035f8:	4b69      	ldr	r3, [pc, #420]	; (80037a0 <process_Ball_Approach+0x1d8>)
 80035fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80035fe:	601a      	str	r2, [r3, #0]
			process_SubState = 0;
			step += 1;

		}
	}
}
 8003600:	e0be      	b.n	8003780 <process_Ball_Approach+0x1b8>
	else if(process_SubState == 1)
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <process_Ball_Approach+0x1d8>)
 8003604:	edd3 7a00 	vldr	s15, [r3]
 8003608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800360c:	eef4 7a47 	vcmp.f32	s15, s14
 8003610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003614:	d11d      	bne.n	8003652 <process_Ball_Approach+0x8a>
		process_RunByAngle(45,0.1);
 8003616:	eddf 0a64 	vldr	s1, [pc, #400]	; 80037a8 <process_Ball_Approach+0x1e0>
 800361a:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80037ac <process_Ball_Approach+0x1e4>
 800361e:	f7ff fec3 	bl	80033a8 <process_RunByAngle>
		use_pidTheta = 1;
 8003622:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <process_Ball_Approach+0x1e8>)
 8003624:	2201      	movs	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]
		if (distance<0.3)
 8003628:	4b62      	ldr	r3, [pc, #392]	; (80037b4 <process_Ball_Approach+0x1ec>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fc ff8b 	bl	8000548 <__aeabi_f2d>
 8003632:	a355      	add	r3, pc, #340	; (adr r3, 8003788 <process_Ball_Approach+0x1c0>)
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f7fd fa50 	bl	8000adc <__aeabi_dcmplt>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d100      	bne.n	8003644 <process_Ball_Approach+0x7c>
}
 8003642:	e09d      	b.n	8003780 <process_Ball_Approach+0x1b8>
			process_ResetFloatingEnc();
 8003644:	f7ff fd8c 	bl	8003160 <process_ResetFloatingEnc>
			process_SubState = 2;
 8003648:	4b55      	ldr	r3, [pc, #340]	; (80037a0 <process_Ball_Approach+0x1d8>)
 800364a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800364e:	601a      	str	r2, [r3, #0]
}
 8003650:	e096      	b.n	8003780 <process_Ball_Approach+0x1b8>
	else if (process_SubState == 2)
 8003652:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <process_Ball_Approach+0x1d8>)
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800365c:	eef4 7a47 	vcmp.f32	s15, s14
 8003660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003664:	d11d      	bne.n	80036a2 <process_Ball_Approach+0xda>
		process_RunByAngle(45,0.1);
 8003666:	eddf 0a50 	vldr	s1, [pc, #320]	; 80037a8 <process_Ball_Approach+0x1e0>
 800366a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80037ac <process_Ball_Approach+0x1e4>
 800366e:	f7ff fe9b 	bl	80033a8 <process_RunByAngle>
		if (floatingEncCount>140)
 8003672:	4b51      	ldr	r3, [pc, #324]	; (80037b8 <process_Ball_Approach+0x1f0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b8c      	cmp	r3, #140	; 0x8c
 8003678:	f340 8082 	ble.w	8003780 <process_Ball_Approach+0x1b8>
			u = 0;
 800367c:	4b4f      	ldr	r3, [pc, #316]	; (80037bc <process_Ball_Approach+0x1f4>)
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
			v = 0;
 8003684:	4b4e      	ldr	r3, [pc, #312]	; (80037c0 <process_Ball_Approach+0x1f8>)
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
			r = 0;
 800368c:	4b4d      	ldr	r3, [pc, #308]	; (80037c4 <process_Ball_Approach+0x1fc>)
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 8003694:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <process_Ball_Approach+0x1e8>)
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
			process_SubState = 3;
 800369a:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <process_Ball_Approach+0x1d8>)
 800369c:	4a4a      	ldr	r2, [pc, #296]	; (80037c8 <process_Ball_Approach+0x200>)
 800369e:	601a      	str	r2, [r3, #0]
}
 80036a0:	e06e      	b.n	8003780 <process_Ball_Approach+0x1b8>
	else if (process_SubState == 3)
 80036a2:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <process_Ball_Approach+0x1d8>)
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80036ac:	eef4 7a47 	vcmp.f32	s15, s14
 80036b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b4:	d12a      	bne.n	800370c <process_Ball_Approach+0x144>
		use_pidTheta = 1;
 80036b6:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <process_Ball_Approach+0x1e8>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
		process_RunByAngle(135,-0.08);
 80036bc:	eddf 0a43 	vldr	s1, [pc, #268]	; 80037cc <process_Ball_Approach+0x204>
 80036c0:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80037d0 <process_Ball_Approach+0x208>
 80036c4:	f7ff fe70 	bl	80033a8 <process_RunByAngle>
		if(distance < 0.21)
 80036c8:	4b3a      	ldr	r3, [pc, #232]	; (80037b4 <process_Ball_Approach+0x1ec>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc ff3b 	bl	8000548 <__aeabi_f2d>
 80036d2:	a32f      	add	r3, pc, #188	; (adr r3, 8003790 <process_Ball_Approach+0x1c8>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fd fa00 	bl	8000adc <__aeabi_dcmplt>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d100      	bne.n	80036e4 <process_Ball_Approach+0x11c>
}
 80036e2:	e04d      	b.n	8003780 <process_Ball_Approach+0x1b8>
			u = 0;
 80036e4:	4b35      	ldr	r3, [pc, #212]	; (80037bc <process_Ball_Approach+0x1f4>)
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
			v = 0;
 80036ec:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <process_Ball_Approach+0x1f8>)
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
			r = 0;
 80036f4:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <process_Ball_Approach+0x1fc>)
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <process_Ball_Approach+0x1e8>)
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
			process_SubState = 4;
 8003702:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <process_Ball_Approach+0x1d8>)
 8003704:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	e039      	b.n	8003780 <process_Ball_Approach+0x1b8>
	else if (process_SubState == 4)
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <process_Ball_Approach+0x1d8>)
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003716:	eef4 7a47 	vcmp.f32	s15, s14
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	d12f      	bne.n	8003780 <process_Ball_Approach+0x1b8>
		use_pidTheta = 1;
 8003720:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <process_Ball_Approach+0x1e8>)
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
		process_RunByAngle(135,0.08);
 8003726:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80037d4 <process_Ball_Approach+0x20c>
 800372a:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80037d0 <process_Ball_Approach+0x208>
 800372e:	f7ff fe3b 	bl	80033a8 <process_RunByAngle>
		if(distance > 0.15)
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <process_Ball_Approach+0x1ec>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc ff06 	bl	8000548 <__aeabi_f2d>
 800373c:	a316      	add	r3, pc, #88	; (adr r3, 8003798 <process_Ball_Approach+0x1d0>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f7fd f9e9 	bl	8000b18 <__aeabi_dcmpgt>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d100      	bne.n	800374e <process_Ball_Approach+0x186>
}
 800374c:	e018      	b.n	8003780 <process_Ball_Approach+0x1b8>
			u = 0;
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <process_Ball_Approach+0x1f4>)
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
			v = 0;
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <process_Ball_Approach+0x1f8>)
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
			r = 0;
 800375e:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <process_Ball_Approach+0x1fc>)
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 8003766:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <process_Ball_Approach+0x1e8>)
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
			process_SubState = 0;
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <process_Ball_Approach+0x1d8>)
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
			step += 1;
 8003774:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <process_Ball_Approach+0x210>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <process_Ball_Approach+0x210>)
 800377e:	701a      	strb	r2, [r3, #0]
}
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}
 8003784:	f3af 8000 	nop.w
 8003788:	33333333 	.word	0x33333333
 800378c:	3fd33333 	.word	0x3fd33333
 8003790:	ae147ae1 	.word	0xae147ae1
 8003794:	3fcae147 	.word	0x3fcae147
 8003798:	33333333 	.word	0x33333333
 800379c:	3fc33333 	.word	0x3fc33333
 80037a0:	200012a8 	.word	0x200012a8
 80037a4:	200012ae 	.word	0x200012ae
 80037a8:	3dcccccd 	.word	0x3dcccccd
 80037ac:	42340000 	.word	0x42340000
 80037b0:	20001258 	.word	0x20001258
 80037b4:	200012c0 	.word	0x200012c0
 80037b8:	2000128c 	.word	0x2000128c
 80037bc:	20001290 	.word	0x20001290
 80037c0:	20001294 	.word	0x20001294
 80037c4:	20001298 	.word	0x20001298
 80037c8:	40400000 	.word	0x40400000
 80037cc:	bda3d70a 	.word	0xbda3d70a
 80037d0:	43070000 	.word	0x43070000
 80037d4:	3da3d70a 	.word	0x3da3d70a
 80037d8:	200011f6 	.word	0x200011f6
 80037dc:	00000000 	.word	0x00000000

080037e0 <process_Ball_Approach2>:

void process_Ball_Approach2()
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
	if (process_SubState == 0)
 80037e4:	4b74      	ldr	r3, [pc, #464]	; (80039b8 <process_Ball_Approach2+0x1d8>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f2:	d112      	bne.n	800381a <process_Ball_Approach2+0x3a>
	{	process_Count ++;
 80037f4:	4b71      	ldr	r3, [pc, #452]	; (80039bc <process_Ball_Approach2+0x1dc>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	4b6f      	ldr	r3, [pc, #444]	; (80039bc <process_Ball_Approach2+0x1dc>)
 80037fe:	701a      	strb	r2, [r3, #0]
		if (process_Count > 10)
 8003800:	4b6e      	ldr	r3, [pc, #440]	; (80039bc <process_Ball_Approach2+0x1dc>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b0a      	cmp	r3, #10
 8003806:	f240 80c7 	bls.w	8003998 <process_Ball_Approach2+0x1b8>
		{
			process_Count = 0;
 800380a:	4b6c      	ldr	r3, [pc, #432]	; (80039bc <process_Ball_Approach2+0x1dc>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
			process_SubState = 1;
 8003810:	4b69      	ldr	r3, [pc, #420]	; (80039b8 <process_Ball_Approach2+0x1d8>)
 8003812:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003816:	601a      	str	r2, [r3, #0]
			process_SubState = 0;
			step += 1;

		}
	}
}
 8003818:	e0be      	b.n	8003998 <process_Ball_Approach2+0x1b8>
	else if(process_SubState == 1)
 800381a:	4b67      	ldr	r3, [pc, #412]	; (80039b8 <process_Ball_Approach2+0x1d8>)
 800381c:	edd3 7a00 	vldr	s15, [r3]
 8003820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003824:	eef4 7a47 	vcmp.f32	s15, s14
 8003828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382c:	d11d      	bne.n	800386a <process_Ball_Approach2+0x8a>
		process_RunByAngle(-135,0.1);
 800382e:	eddf 0a64 	vldr	s1, [pc, #400]	; 80039c0 <process_Ball_Approach2+0x1e0>
 8003832:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80039c4 <process_Ball_Approach2+0x1e4>
 8003836:	f7ff fdb7 	bl	80033a8 <process_RunByAngle>
		use_pidTheta = 1;
 800383a:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <process_Ball_Approach2+0x1e8>)
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
		if (distance<0.3)
 8003840:	4b62      	ldr	r3, [pc, #392]	; (80039cc <process_Ball_Approach2+0x1ec>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc fe7f 	bl	8000548 <__aeabi_f2d>
 800384a:	a355      	add	r3, pc, #340	; (adr r3, 80039a0 <process_Ball_Approach2+0x1c0>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f7fd f944 	bl	8000adc <__aeabi_dcmplt>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d100      	bne.n	800385c <process_Ball_Approach2+0x7c>
}
 800385a:	e09d      	b.n	8003998 <process_Ball_Approach2+0x1b8>
			process_ResetFloatingEnc();
 800385c:	f7ff fc80 	bl	8003160 <process_ResetFloatingEnc>
			process_SubState = 2;
 8003860:	4b55      	ldr	r3, [pc, #340]	; (80039b8 <process_Ball_Approach2+0x1d8>)
 8003862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003866:	601a      	str	r2, [r3, #0]
}
 8003868:	e096      	b.n	8003998 <process_Ball_Approach2+0x1b8>
	else if (process_SubState == 2)
 800386a:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <process_Ball_Approach2+0x1d8>)
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003874:	eef4 7a47 	vcmp.f32	s15, s14
 8003878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387c:	d11d      	bne.n	80038ba <process_Ball_Approach2+0xda>
		process_RunByAngle(-135,0.1);
 800387e:	eddf 0a50 	vldr	s1, [pc, #320]	; 80039c0 <process_Ball_Approach2+0x1e0>
 8003882:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80039c4 <process_Ball_Approach2+0x1e4>
 8003886:	f7ff fd8f 	bl	80033a8 <process_RunByAngle>
		if (floatingEncCount>100)
 800388a:	4b51      	ldr	r3, [pc, #324]	; (80039d0 <process_Ball_Approach2+0x1f0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	f340 8082 	ble.w	8003998 <process_Ball_Approach2+0x1b8>
			u = 0;
 8003894:	4b4f      	ldr	r3, [pc, #316]	; (80039d4 <process_Ball_Approach2+0x1f4>)
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
			v = 0;
 800389c:	4b4e      	ldr	r3, [pc, #312]	; (80039d8 <process_Ball_Approach2+0x1f8>)
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
			r = 0;
 80038a4:	4b4d      	ldr	r3, [pc, #308]	; (80039dc <process_Ball_Approach2+0x1fc>)
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 80038ac:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <process_Ball_Approach2+0x1e8>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
			process_SubState = 3;
 80038b2:	4b41      	ldr	r3, [pc, #260]	; (80039b8 <process_Ball_Approach2+0x1d8>)
 80038b4:	4a4a      	ldr	r2, [pc, #296]	; (80039e0 <process_Ball_Approach2+0x200>)
 80038b6:	601a      	str	r2, [r3, #0]
}
 80038b8:	e06e      	b.n	8003998 <process_Ball_Approach2+0x1b8>
	else if (process_SubState == 3)
 80038ba:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <process_Ball_Approach2+0x1d8>)
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80038c4:	eef4 7a47 	vcmp.f32	s15, s14
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	d12a      	bne.n	8003924 <process_Ball_Approach2+0x144>
		use_pidTheta = 1;
 80038ce:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <process_Ball_Approach2+0x1e8>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
		process_RunByAngle(135,-0.08);
 80038d4:	eddf 0a43 	vldr	s1, [pc, #268]	; 80039e4 <process_Ball_Approach2+0x204>
 80038d8:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80039e8 <process_Ball_Approach2+0x208>
 80038dc:	f7ff fd64 	bl	80033a8 <process_RunByAngle>
		if(distance < 0.21)
 80038e0:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <process_Ball_Approach2+0x1ec>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fe2f 	bl	8000548 <__aeabi_f2d>
 80038ea:	a32f      	add	r3, pc, #188	; (adr r3, 80039a8 <process_Ball_Approach2+0x1c8>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f7fd f8f4 	bl	8000adc <__aeabi_dcmplt>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d100      	bne.n	80038fc <process_Ball_Approach2+0x11c>
}
 80038fa:	e04d      	b.n	8003998 <process_Ball_Approach2+0x1b8>
			u = 0;
 80038fc:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <process_Ball_Approach2+0x1f4>)
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
			v = 0;
 8003904:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <process_Ball_Approach2+0x1f8>)
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
			r = 0;
 800390c:	4b33      	ldr	r3, [pc, #204]	; (80039dc <process_Ball_Approach2+0x1fc>)
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 8003914:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <process_Ball_Approach2+0x1e8>)
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
			process_SubState = 4;
 800391a:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <process_Ball_Approach2+0x1d8>)
 800391c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003920:	601a      	str	r2, [r3, #0]
}
 8003922:	e039      	b.n	8003998 <process_Ball_Approach2+0x1b8>
	else if (process_SubState == 4)
 8003924:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <process_Ball_Approach2+0x1d8>)
 8003926:	edd3 7a00 	vldr	s15, [r3]
 800392a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800392e:	eef4 7a47 	vcmp.f32	s15, s14
 8003932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003936:	d12f      	bne.n	8003998 <process_Ball_Approach2+0x1b8>
		use_pidTheta = 1;
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <process_Ball_Approach2+0x1e8>)
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
		process_RunByAngle(135,0.08);
 800393e:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80039ec <process_Ball_Approach2+0x20c>
 8003942:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80039e8 <process_Ball_Approach2+0x208>
 8003946:	f7ff fd2f 	bl	80033a8 <process_RunByAngle>
		if(distance > 0.15)
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <process_Ball_Approach2+0x1ec>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fc fdfa 	bl	8000548 <__aeabi_f2d>
 8003954:	a316      	add	r3, pc, #88	; (adr r3, 80039b0 <process_Ball_Approach2+0x1d0>)
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	f7fd f8dd 	bl	8000b18 <__aeabi_dcmpgt>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d100      	bne.n	8003966 <process_Ball_Approach2+0x186>
}
 8003964:	e018      	b.n	8003998 <process_Ball_Approach2+0x1b8>
			u = 0;
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <process_Ball_Approach2+0x1f4>)
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
			v = 0;
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <process_Ball_Approach2+0x1f8>)
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
			r = 0;
 8003976:	4b19      	ldr	r3, [pc, #100]	; (80039dc <process_Ball_Approach2+0x1fc>)
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <process_Ball_Approach2+0x1e8>)
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
			process_SubState = 0;
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <process_Ball_Approach2+0x1d8>)
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
			step += 1;
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <process_Ball_Approach2+0x210>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <process_Ball_Approach2+0x210>)
 8003996:	701a      	strb	r2, [r3, #0]
}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}
 800399c:	f3af 8000 	nop.w
 80039a0:	33333333 	.word	0x33333333
 80039a4:	3fd33333 	.word	0x3fd33333
 80039a8:	ae147ae1 	.word	0xae147ae1
 80039ac:	3fcae147 	.word	0x3fcae147
 80039b0:	33333333 	.word	0x33333333
 80039b4:	3fc33333 	.word	0x3fc33333
 80039b8:	200012a8 	.word	0x200012a8
 80039bc:	200012ae 	.word	0x200012ae
 80039c0:	3dcccccd 	.word	0x3dcccccd
 80039c4:	c3070000 	.word	0xc3070000
 80039c8:	20001258 	.word	0x20001258
 80039cc:	200012c0 	.word	0x200012c0
 80039d0:	2000128c 	.word	0x2000128c
 80039d4:	20001290 	.word	0x20001290
 80039d8:	20001294 	.word	0x20001294
 80039dc:	20001298 	.word	0x20001298
 80039e0:	40400000 	.word	0x40400000
 80039e4:	bda3d70a 	.word	0xbda3d70a
 80039e8:	43070000 	.word	0x43070000
 80039ec:	3da3d70a 	.word	0x3da3d70a
 80039f0:	200011f6 	.word	0x200011f6

080039f4 <process_ApproachWall>:

void process_ApproachWall()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
	if(process_SubState == 0)
 80039f8:	4b46      	ldr	r3, [pc, #280]	; (8003b14 <process_ApproachWall+0x120>)
 80039fa:	edd3 7a00 	vldr	s15, [r3]
 80039fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a06:	d126      	bne.n	8003a56 <process_ApproachWall+0x62>
	{
		use_pidTheta = 1;
 8003a08:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <process_ApproachWall+0x124>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
		process_RunByAngle(45,0.1);
 8003a0e:	eddf 0a43 	vldr	s1, [pc, #268]	; 8003b1c <process_ApproachWall+0x128>
 8003a12:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8003b20 <process_ApproachWall+0x12c>
 8003a16:	f7ff fcc7 	bl	80033a8 <process_RunByAngle>
		if (HAL_GPIO_ReadPin(sensor_4_GPIO_Port, sensor_4_Pin))
 8003a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a1e:	4841      	ldr	r0, [pc, #260]	; (8003b24 <process_ApproachWall+0x130>)
 8003a20:	f004 fa72 	bl	8007f08 <HAL_GPIO_ReadPin>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d006      	beq.n	8003a38 <process_ApproachWall+0x44>
		{
			process_SSCheck ++;
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <process_ApproachWall+0x134>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <process_ApproachWall+0x134>)
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e002      	b.n	8003a3e <process_ApproachWall+0x4a>
		}else{
			process_SSCheck = 0;
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <process_ApproachWall+0x134>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
		}
		if (process_SSCheck > 5)
 8003a3e:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <process_ApproachWall+0x134>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	d963      	bls.n	8003b0e <process_ApproachWall+0x11a>
		{
			process_SSCheck = 0;
 8003a46:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <process_ApproachWall+0x134>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
			process_SubState = 1;
 8003a4c:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <process_ApproachWall+0x120>)
 8003a4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a52:	601a      	str	r2, [r3, #0]
					r = 0;
					process_RunByAngle(45,0.05);
					step++;
				}
		}
}
 8003a54:	e05b      	b.n	8003b0e <process_ApproachWall+0x11a>
	else if(process_SubState == 1)
 8003a56:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <process_ApproachWall+0x120>)
 8003a58:	edd3 7a00 	vldr	s15, [r3]
 8003a5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a60:	eef4 7a47 	vcmp.f32	s15, s14
 8003a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a68:	d117      	bne.n	8003a9a <process_ApproachWall+0xa6>
			process_Count++;
 8003a6a:	4b30      	ldr	r3, [pc, #192]	; (8003b2c <process_ApproachWall+0x138>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <process_ApproachWall+0x138>)
 8003a74:	701a      	strb	r2, [r3, #0]
			if (process_Count > 40)
 8003a76:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <process_ApproachWall+0x138>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b28      	cmp	r3, #40	; 0x28
 8003a7c:	d947      	bls.n	8003b0e <process_ApproachWall+0x11a>
				process_Count = 0;
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <process_ApproachWall+0x138>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
				process_SubState = 2;
 8003a84:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <process_ApproachWall+0x120>)
 8003a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a8a:	601a      	str	r2, [r3, #0]
				process_RunByAngle(-28,0.1);
 8003a8c:	eddf 0a23 	vldr	s1, [pc, #140]	; 8003b1c <process_ApproachWall+0x128>
 8003a90:	eebb 0a0c 	vmov.f32	s0, #188	; 0xc1e00000 -28.0
 8003a94:	f7ff fc88 	bl	80033a8 <process_RunByAngle>
}
 8003a98:	e039      	b.n	8003b0e <process_ApproachWall+0x11a>
	else if(process_SubState == 2)
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <process_ApproachWall+0x120>)
 8003a9c:	edd3 7a00 	vldr	s15, [r3]
 8003aa0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003aa4:	eef4 7a47 	vcmp.f32	s15, s14
 8003aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aac:	d12f      	bne.n	8003b0e <process_ApproachWall+0x11a>
			if (HAL_GPIO_ReadPin(sensor_7_GPIO_Port, sensor_7_Pin))
 8003aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ab2:	481c      	ldr	r0, [pc, #112]	; (8003b24 <process_ApproachWall+0x130>)
 8003ab4:	f004 fa28 	bl	8007f08 <HAL_GPIO_ReadPin>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <process_ApproachWall+0xd8>
				process_SSCheck ++;
 8003abe:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <process_ApproachWall+0x134>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <process_ApproachWall+0x134>)
 8003ac8:	701a      	strb	r2, [r3, #0]
 8003aca:	e002      	b.n	8003ad2 <process_ApproachWall+0xde>
				process_SSCheck = 0;
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <process_ApproachWall+0x134>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
			if (process_SSCheck >= 1)
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <process_ApproachWall+0x134>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d019      	beq.n	8003b0e <process_ApproachWall+0x11a>
					process_SSCheck = 0;
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <process_ApproachWall+0x134>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
					process_SubState = 1;
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <process_ApproachWall+0x120>)
 8003ae2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ae6:	601a      	str	r2, [r3, #0]
					use_pidTheta = 0;
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <process_ApproachWall+0x124>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
					r = 0;
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <process_ApproachWall+0x13c>)
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
					process_RunByAngle(45,0.05);
 8003af6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8003b34 <process_ApproachWall+0x140>
 8003afa:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003b20 <process_ApproachWall+0x12c>
 8003afe:	f7ff fc53 	bl	80033a8 <process_RunByAngle>
					step++;
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <process_ApproachWall+0x144>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	3301      	adds	r3, #1
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <process_ApproachWall+0x144>)
 8003b0c:	701a      	strb	r2, [r3, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200012a8 	.word	0x200012a8
 8003b18:	20001258 	.word	0x20001258
 8003b1c:	3dcccccd 	.word	0x3dcccccd
 8003b20:	42340000 	.word	0x42340000
 8003b24:	40021000 	.word	0x40021000
 8003b28:	200012ad 	.word	0x200012ad
 8003b2c:	200012ae 	.word	0x200012ae
 8003b30:	20001298 	.word	0x20001298
 8003b34:	3d4ccccd 	.word	0x3d4ccccd
 8003b38:	200011f6 	.word	0x200011f6

08003b3c <process_setVal_PutBall>:
void process_setVal_PutBall(uint8_t value)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
	process_GetBall_State =  value;
 8003b46:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <process_setVal_PutBall+0x1c>)
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	7013      	strb	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	200012ac 	.word	0x200012ac

08003b5c <process_ReleaseBall>:

void process_ReleaseBall()
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	process_RunByAngle(45,0);
 8003b60:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003ba4 <process_ReleaseBall+0x48>
 8003b64:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003ba8 <process_ReleaseBall+0x4c>
 8003b68:	f7ff fc1e 	bl	80033a8 <process_RunByAngle>
	process_setVal_PutBall(2);
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f7ff ffe5 	bl	8003b3c <process_setVal_PutBall>
	process_Count++;
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <process_ReleaseBall+0x50>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <process_ReleaseBall+0x50>)
 8003b7c:	701a      	strb	r2, [r3, #0]
	if (process_Count>50){
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <process_ReleaseBall+0x50>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b32      	cmp	r3, #50	; 0x32
 8003b84:	d90b      	bls.n	8003b9e <process_ReleaseBall+0x42>
		process_Count = 0;
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <process_ReleaseBall+0x50>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
		process_setVal_PutBall(3);
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	f7ff ffd5 	bl	8003b3c <process_setVal_PutBall>
		step++;
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <process_ReleaseBall+0x54>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	3301      	adds	r3, #1
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <process_ReleaseBall+0x54>)
 8003b9c:	701a      	strb	r2, [r3, #0]
	}
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	00000000 	.word	0x00000000
 8003ba8:	42340000 	.word	0x42340000
 8003bac:	200012ae 	.word	0x200012ae
 8003bb0:	200011f6 	.word	0x200011f6

08003bb4 <process_getBall>:
void process_getBall()
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
	process_setVal_PutBall(0);
 8003bb8:	2000      	movs	r0, #0
 8003bba:	f7ff ffbf 	bl	8003b3c <process_setVal_PutBall>
	if (PutBall_getFlag()){
 8003bbe:	f7fd fc9b 	bl	80014f8 <PutBall_getFlag>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <process_getBall+0x2a>
		process_setVal_PutBall(1);
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f7ff ffb7 	bl	8003b3c <process_setVal_PutBall>
		process_ResetFloatingEnc();
 8003bce:	f7ff fac7 	bl	8003160 <process_ResetFloatingEnc>
		step += 1;
 8003bd2:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <process_getBall+0x30>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b02      	ldr	r3, [pc, #8]	; (8003be4 <process_getBall+0x30>)
 8003bdc:	701a      	strb	r2, [r3, #0]
	}
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200011f6 	.word	0x200011f6

08003be8 <readADC>:
////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////CAM BIEN DO KHOANG CACH/////////////////////////////////////
void readADC(){
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8003bec:	483c      	ldr	r0, [pc, #240]	; (8003ce0 <readADC+0xf8>)
 8003bee:	f001 ff6d 	bl	8005acc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8003bf2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003bf6:	483a      	ldr	r0, [pc, #232]	; (8003ce0 <readADC+0xf8>)
 8003bf8:	f002 f86d 	bl	8005cd6 <HAL_ADC_PollForConversion>
	adc_val = HAL_ADC_GetValue(&hadc1);
 8003bfc:	4838      	ldr	r0, [pc, #224]	; (8003ce0 <readADC+0xf8>)
 8003bfe:	f002 fa05 	bl	800600c <HAL_ADC_GetValue>
 8003c02:	ee07 0a90 	vmov	s15, r0
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <readADC+0xfc>)
 8003c0c:	edc3 7a00 	vstr	s15, [r3]
	count++;
 8003c10:	4b35      	ldr	r3, [pc, #212]	; (8003ce8 <readADC+0x100>)
 8003c12:	edd3 7a00 	vldr	s15, [r3]
 8003c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c1e:	4b32      	ldr	r3, [pc, #200]	; (8003ce8 <readADC+0x100>)
 8003c20:	edc3 7a00 	vstr	s15, [r3]
	sum+=adc_val;
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <readADC+0x104>)
 8003c26:	ed93 7a00 	vldr	s14, [r3]
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <readADC+0xfc>)
 8003c2c:	edd3 7a00 	vldr	s15, [r3]
 8003c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c34:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <readADC+0x104>)
 8003c36:	edc3 7a00 	vstr	s15, [r3]
	if(count>50)
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <readADC+0x100>)
 8003c3c:	edd3 7a00 	vldr	s15, [r3]
 8003c40:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003cf0 <readADC+0x108>
 8003c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4c:	dd11      	ble.n	8003c72 <readADC+0x8a>
	{
		adc_val_Fil=sum/50;
 8003c4e:	4b27      	ldr	r3, [pc, #156]	; (8003cec <readADC+0x104>)
 8003c50:	ed93 7a00 	vldr	s14, [r3]
 8003c54:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003cf0 <readADC+0x108>
 8003c58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <readADC+0x10c>)
 8003c5e:	edc3 7a00 	vstr	s15, [r3]
		sum = 0;
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <readADC+0x104>)
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
		count = 0;
 8003c6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <readADC+0x100>)
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
	}
	distance = (9.8/3945) * adc_val_Fil - 150 * (9.8/3945) + 0.28;
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <readADC+0x10c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc fc66 	bl	8000548 <__aeabi_f2d>
 8003c7c:	a312      	add	r3, pc, #72	; (adr r3, 8003cc8 <readADC+0xe0>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	f7fc fcb9 	bl	80005f8 <__aeabi_dmul>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	a310      	add	r3, pc, #64	; (adr r3, 8003cd0 <readADC+0xe8>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f7fc faf8 	bl	8000288 <__aeabi_dsub>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	a30d      	add	r3, pc, #52	; (adr r3, 8003cd8 <readADC+0xf0>)
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	f7fc faf1 	bl	800028c <__adddf3>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f7fc ff79 	bl	8000ba8 <__aeabi_d2f>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4a0f      	ldr	r2, [pc, #60]	; (8003cf8 <readADC+0x110>)
 8003cba:	6013      	str	r3, [r2, #0]

	HAL_ADC_Stop(&hadc1);
 8003cbc:	4808      	ldr	r0, [pc, #32]	; (8003ce0 <readADC+0xf8>)
 8003cbe:	f001 ffd7 	bl	8005c70 <HAL_ADC_Stop>
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	b87677a3 	.word	0xb87677a3
 8003ccc:	3f6459a7 	.word	0x3f6459a7
 8003cd0:	8c2ad433 	.word	0x8c2ad433
 8003cd4:	3fd7d910 	.word	0x3fd7d910
 8003cd8:	1eb851ec 	.word	0x1eb851ec
 8003cdc:	3fd1eb85 	.word	0x3fd1eb85
 8003ce0:	20000648 	.word	0x20000648
 8003ce4:	200012bc 	.word	0x200012bc
 8003ce8:	200012b0 	.word	0x200012b0
 8003cec:	200012b8 	.word	0x200012b8
 8003cf0:	42480000 	.word	0x42480000
 8003cf4:	200012b4 	.word	0x200012b4
 8003cf8:	200012c0 	.word	0x200012c0

08003cfc <process_WireRelease>:

void process_WireRelease(){
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	handleFunctionCAN(CANCTRL_MODE_UNTANGLE_WIRE, CANCTRL_DEVICE_MOTOR_CONTROLLER_1);
 8003d00:	2101      	movs	r1, #1
 8003d02:	200c      	movs	r0, #12
 8003d04:	f7fe ffce 	bl	8002ca4 <handleFunctionCAN>
	osDelay(1);
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f007 fb40 	bl	800b38e <osDelay>
	handleFunctionCAN(CANCTRL_MODE_UNTANGLE_WIRE, CANCTRL_DEVICE_MOTOR_CONTROLLER_2);
 8003d0e:	2102      	movs	r1, #2
 8003d10:	200c      	movs	r0, #12
 8003d12:	f7fe ffc7 	bl	8002ca4 <handleFunctionCAN>
	osDelay(1);
 8003d16:	2001      	movs	r0, #1
 8003d18:	f007 fb39 	bl	800b38e <osDelay>
	handleFunctionCAN(CANCTRL_MODE_UNTANGLE_WIRE, CANCTRL_DEVICE_MOTOR_CONTROLLER_3);
 8003d1c:	2103      	movs	r1, #3
 8003d1e:	200c      	movs	r0, #12
 8003d20:	f7fe ffc0 	bl	8002ca4 <handleFunctionCAN>
	osDelay(1);
 8003d24:	2001      	movs	r0, #1
 8003d26:	f007 fb32 	bl	800b38e <osDelay>
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	b09c      	sub	sp, #112	; 0x70
 8003d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d36:	f001 fe43 	bl	80059c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d3a:	f000 f8db 	bl	8003ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d3e:	f000 fca1 	bl	8004684 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d42:	f000 fc69 	bl	8004618 <MX_DMA_Init>
  MX_CAN1_Init();
 8003d46:	f000 f991 	bl	800406c <MX_CAN1_Init>
  MX_TIM2_Init();
 8003d4a:	f000 fa1d 	bl	8004188 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003d4e:	f000 fa6f 	bl	8004230 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8003d52:	f000 fc37 	bl	80045c4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8003d56:	f000 f9bf 	bl	80040d8 <MX_TIM1_Init>
  MX_TIM10_Init();
 8003d5a:	f000 fbbb 	bl	80044d4 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8003d5e:	f000 fbdd 	bl	800451c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003d62:	f000 fc05 	bl	8004570 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8003d66:	f000 fb33 	bl	80043d0 <MX_TIM5_Init>
  MX_ADC1_Init();
 8003d6a:	f000 f92d 	bl	8003fc8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8003d6e:	f000 fae1 	bl	8004334 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  	log_Init(&huart2);
  	log_Init(&huart2);
 8003d72:	4847      	ldr	r0, [pc, #284]	; (8003e90 <main+0x160>)
 8003d74:	f7fe fe72 	bl	8002a5c <log_Init>
  	Send_Header();
 8003d78:	f7ff f87e 	bl	8002e78 <Send_Header>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8003d7c:	2209      	movs	r2, #9
 8003d7e:	4945      	ldr	r1, [pc, #276]	; (8003e94 <main+0x164>)
 8003d80:	4845      	ldr	r0, [pc, #276]	; (8003e98 <main+0x168>)
 8003d82:	f006 f851 	bl	8009e28 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8003d86:	4845      	ldr	r0, [pc, #276]	; (8003e9c <main+0x16c>)
 8003d88:	f004 fe0a 	bl	80089a0 <HAL_TIM_Base_Start_IT>

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8003d8c:	4b44      	ldr	r3, [pc, #272]	; (8003ea0 <main+0x170>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <main+0x170>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0208 	bic.w	r2, r2, #8
 8003d9a:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4841      	ldr	r0, [pc, #260]	; (8003ea4 <main+0x174>)
 8003da0:	f004 fec8 	bl	8008b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003da4:	2104      	movs	r1, #4
 8003da6:	483f      	ldr	r0, [pc, #252]	; (8003ea4 <main+0x174>)
 8003da8:	f004 fec4 	bl	8008b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8003dac:	2100      	movs	r1, #0
 8003dae:	483e      	ldr	r0, [pc, #248]	; (8003ea8 <main+0x178>)
 8003db0:	f004 fec0 	bl	8008b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003db4:	2104      	movs	r1, #4
 8003db6:	483c      	ldr	r0, [pc, #240]	; (8003ea8 <main+0x178>)
 8003db8:	f004 febc 	bl	8008b34 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003dbc:	213c      	movs	r1, #60	; 0x3c
 8003dbe:	483b      	ldr	r0, [pc, #236]	; (8003eac <main+0x17c>)
 8003dc0:	f005 f826 	bl	8008e10 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003dc4:	213c      	movs	r1, #60	; 0x3c
 8003dc6:	483a      	ldr	r0, [pc, #232]	; (8003eb0 <main+0x180>)
 8003dc8:	f005 f822 	bl	8008e10 <HAL_TIM_Encoder_Start>


	HAL_UART_Receive_DMA(&huart1,(uint8_t*)mpu,10);
 8003dcc:	220a      	movs	r2, #10
 8003dce:	4939      	ldr	r1, [pc, #228]	; (8003eb4 <main+0x184>)
 8003dd0:	4839      	ldr	r0, [pc, #228]	; (8003eb8 <main+0x188>)
 8003dd2:	f006 f859 	bl	8009e88 <HAL_UART_Receive_DMA>


	pid.kP = -0.12;
 8003dd6:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <main+0x18c>)
 8003dd8:	4a39      	ldr	r2, [pc, #228]	; (8003ec0 <main+0x190>)
 8003dda:	60da      	str	r2, [r3, #12]
	pid.kI = 5.32;
 8003ddc:	4b37      	ldr	r3, [pc, #220]	; (8003ebc <main+0x18c>)
 8003dde:	4a39      	ldr	r2, [pc, #228]	; (8003ec4 <main+0x194>)
 8003de0:	615a      	str	r2, [r3, #20]
	pid.kD = 20.22;
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <main+0x18c>)
 8003de4:	4a38      	ldr	r2, [pc, #224]	; (8003ec8 <main+0x198>)
 8003de6:	621a      	str	r2, [r3, #32]
	pid.alpha = 5.31;
 8003de8:	4b34      	ldr	r3, [pc, #208]	; (8003ebc <main+0x18c>)
 8003dea:	4a38      	ldr	r2, [pc, #224]	; (8003ecc <main+0x19c>)
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
	pid.deltaT = 0.001;
 8003dee:	4b33      	ldr	r3, [pc, #204]	; (8003ebc <main+0x18c>)
 8003df0:	4a37      	ldr	r2, [pc, #220]	; (8003ed0 <main+0x1a0>)
 8003df2:	609a      	str	r2, [r3, #8]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 256);
 8003df4:	4b37      	ldr	r3, [pc, #220]	; (8003ed4 <main+0x1a4>)
 8003df6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003dfa:	461d      	mov	r5, r3
 8003dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003e08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f007 fa71 	bl	800b2f6 <osThreadCreate>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4a30      	ldr	r2, [pc, #192]	; (8003ed8 <main+0x1a8>)
 8003e18:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskInvKine */
  osThreadStaticDef(TaskInvKine, InverseKinematic, osPriorityLow, 0, 256, TaskInvKineBuffer, &TaskInvKineControlBlock);
 8003e1a:	4b30      	ldr	r3, [pc, #192]	; (8003edc <main+0x1ac>)
 8003e1c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003e20:	461d      	mov	r5, r3
 8003e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskInvKineHandle = osThreadCreate(osThread(TaskInvKine), NULL);
 8003e2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f007 fa5e 	bl	800b2f6 <osThreadCreate>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <main+0x1b0>)
 8003e3e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCAN */
  osThreadStaticDef(TaskCAN, CAN_Bus, osPriorityBelowNormal, 0, 128, TaskCANBuffer, &TaskCANControlBlock);
 8003e40:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <main+0x1b4>)
 8003e42:	f107 041c 	add.w	r4, r7, #28
 8003e46:	461d      	mov	r5, r3
 8003e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCANHandle = osThreadCreate(osThread(TaskCAN), NULL);
 8003e54:	f107 031c 	add.w	r3, r7, #28
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f007 fa4b 	bl	800b2f6 <osThreadCreate>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4a21      	ldr	r2, [pc, #132]	; (8003ee8 <main+0x1b8>)
 8003e64:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskOdometer */
  osThreadDef(TaskOdometer, OdometerHandle, osPriorityHigh, 0, 256);
 8003e66:	4b21      	ldr	r3, [pc, #132]	; (8003eec <main+0x1bc>)
 8003e68:	463c      	mov	r4, r7
 8003e6a:	461d      	mov	r5, r3
 8003e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskOdometerHandle = osThreadCreate(osThread(TaskOdometer), NULL);
 8003e78:	463b      	mov	r3, r7
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f007 fa3a 	bl	800b2f6 <osThreadCreate>
 8003e82:	4603      	mov	r3, r0
 8003e84:	4a1a      	ldr	r2, [pc, #104]	; (8003ef0 <main+0x1c0>)
 8003e86:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003e88:	f007 fa2e 	bl	800b2e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003e8c:	e7fe      	b.n	8003e8c <main+0x15c>
 8003e8e:	bf00      	nop
 8003e90:	200008ac 	.word	0x200008ac
 8003e94:	200011a8 	.word	0x200011a8
 8003e98:	200008f0 	.word	0x200008f0
 8003e9c:	20000790 	.word	0x20000790
 8003ea0:	20000934 	.word	0x20000934
 8003ea4:	20000748 	.word	0x20000748
 8003ea8:	200007d8 	.word	0x200007d8
 8003eac:	20000700 	.word	0x20000700
 8003eb0:	200006b8 	.word	0x200006b8
 8003eb4:	200011f8 	.word	0x200011f8
 8003eb8:	20000868 	.word	0x20000868
 8003ebc:	20001144 	.word	0x20001144
 8003ec0:	bdf5c28f 	.word	0xbdf5c28f
 8003ec4:	40aa3d71 	.word	0x40aa3d71
 8003ec8:	41a1c28f 	.word	0x41a1c28f
 8003ecc:	40a9eb85 	.word	0x40a9eb85
 8003ed0:	3a83126f 	.word	0x3a83126f
 8003ed4:	08011e3c 	.word	0x08011e3c
 8003ed8:	200009f4 	.word	0x200009f4
 8003edc:	08011e64 	.word	0x08011e64
 8003ee0:	200009f8 	.word	0x200009f8
 8003ee4:	08011e88 	.word	0x08011e88
 8003ee8:	20000e9c 	.word	0x20000e9c
 8003eec:	08011eb4 	.word	0x08011eb4
 8003ef0:	20001140 	.word	0x20001140

08003ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b094      	sub	sp, #80	; 0x50
 8003ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003efa:	f107 0320 	add.w	r3, r7, #32
 8003efe:	2230      	movs	r2, #48	; 0x30
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f009 fc1d 	bl	800d742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	4b28      	ldr	r3, [pc, #160]	; (8003fc0 <SystemClock_Config+0xcc>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <SystemClock_Config+0xcc>)
 8003f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f26:	6413      	str	r3, [r2, #64]	; 0x40
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <SystemClock_Config+0xcc>)
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f34:	2300      	movs	r3, #0
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <SystemClock_Config+0xd0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a21      	ldr	r2, [pc, #132]	; (8003fc4 <SystemClock_Config+0xd0>)
 8003f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <SystemClock_Config+0xd0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f50:	2302      	movs	r3, #2
 8003f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f54:	2301      	movs	r3, #1
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f58:	2310      	movs	r3, #16
 8003f5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f60:	2300      	movs	r3, #0
 8003f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f64:	2308      	movs	r3, #8
 8003f66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003f68:	23a0      	movs	r3, #160	; 0xa0
 8003f6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003f70:	2304      	movs	r3, #4
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f74:	f107 0320 	add.w	r3, r7, #32
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f003 fff7 	bl	8007f6c <HAL_RCC_OscConfig>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003f84:	f000 ffb6 	bl	8004ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f88:	230f      	movs	r3, #15
 8003f8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	2105      	movs	r1, #5
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 fa58 	bl	800845c <HAL_RCC_ClockConfig>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003fb2:	f000 ff9f 	bl	8004ef4 <Error_Handler>
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	3750      	adds	r7, #80	; 0x50
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40007000 	.word	0x40007000

08003fc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003fce:	463b      	mov	r3, r7
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003fda:	4b21      	ldr	r3, [pc, #132]	; (8004060 <MX_ADC1_Init+0x98>)
 8003fdc:	4a21      	ldr	r2, [pc, #132]	; (8004064 <MX_ADC1_Init+0x9c>)
 8003fde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <MX_ADC1_Init+0x98>)
 8003fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fe6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <MX_ADC1_Init+0x98>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003fee:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <MX_ADC1_Init+0x98>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <MX_ADC1_Init+0x98>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ffa:	4b19      	ldr	r3, [pc, #100]	; (8004060 <MX_ADC1_Init+0x98>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <MX_ADC1_Init+0x98>)
 8004004:	2200      	movs	r2, #0
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004008:	4b15      	ldr	r3, [pc, #84]	; (8004060 <MX_ADC1_Init+0x98>)
 800400a:	4a17      	ldr	r2, [pc, #92]	; (8004068 <MX_ADC1_Init+0xa0>)
 800400c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800400e:	4b14      	ldr	r3, [pc, #80]	; (8004060 <MX_ADC1_Init+0x98>)
 8004010:	2200      	movs	r2, #0
 8004012:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <MX_ADC1_Init+0x98>)
 8004016:	2201      	movs	r2, #1
 8004018:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <MX_ADC1_Init+0x98>)
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <MX_ADC1_Init+0x98>)
 8004024:	2201      	movs	r2, #1
 8004026:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004028:	480d      	ldr	r0, [pc, #52]	; (8004060 <MX_ADC1_Init+0x98>)
 800402a:	f001 fd0b 	bl	8005a44 <HAL_ADC_Init>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004034:	f000 ff5e 	bl	8004ef4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004038:	230b      	movs	r3, #11
 800403a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800403c:	2301      	movs	r3, #1
 800403e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004044:	463b      	mov	r3, r7
 8004046:	4619      	mov	r1, r3
 8004048:	4805      	ldr	r0, [pc, #20]	; (8004060 <MX_ADC1_Init+0x98>)
 800404a:	f002 f80b 	bl	8006064 <HAL_ADC_ConfigChannel>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004054:	f000 ff4e 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000648 	.word	0x20000648
 8004064:	40012000 	.word	0x40012000
 8004068:	0f000001 	.word	0x0f000001

0800406c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004070:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <MX_CAN1_Init+0x64>)
 8004072:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <MX_CAN1_Init+0x68>)
 8004074:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8004076:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <MX_CAN1_Init+0x64>)
 8004078:	220a      	movs	r2, #10
 800407a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800407c:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <MX_CAN1_Init+0x64>)
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <MX_CAN1_Init+0x64>)
 8004084:	2200      	movs	r2, #0
 8004086:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004088:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <MX_CAN1_Init+0x64>)
 800408a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800408e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004090:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <MX_CAN1_Init+0x64>)
 8004092:	2200      	movs	r2, #0
 8004094:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <MX_CAN1_Init+0x64>)
 8004098:	2200      	movs	r2, #0
 800409a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <MX_CAN1_Init+0x64>)
 800409e:	2200      	movs	r2, #0
 80040a0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <MX_CAN1_Init+0x64>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <MX_CAN1_Init+0x64>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <MX_CAN1_Init+0x64>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <MX_CAN1_Init+0x64>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80040ba:	4805      	ldr	r0, [pc, #20]	; (80040d0 <MX_CAN1_Init+0x64>)
 80040bc:	f002 f9fa 	bl	80064b4 <HAL_CAN_Init>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80040c6:	f000 ff15 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000690 	.word	0x20000690
 80040d4:	40006400 	.word	0x40006400

080040d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	; 0x30
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80040de:	f107 030c 	add.w	r3, r7, #12
 80040e2:	2224      	movs	r2, #36	; 0x24
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f009 fb2b 	bl	800d742 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040f4:	4b22      	ldr	r3, [pc, #136]	; (8004180 <MX_TIM1_Init+0xa8>)
 80040f6:	4a23      	ldr	r2, [pc, #140]	; (8004184 <MX_TIM1_Init+0xac>)
 80040f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <MX_TIM1_Init+0xa8>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <MX_TIM1_Init+0xa8>)
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <MX_TIM1_Init+0xa8>)
 8004108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800410c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <MX_TIM1_Init+0xa8>)
 8004110:	2200      	movs	r2, #0
 8004112:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <MX_TIM1_Init+0xa8>)
 8004116:	2200      	movs	r2, #0
 8004118:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800411a:	4b19      	ldr	r3, [pc, #100]	; (8004180 <MX_TIM1_Init+0xa8>)
 800411c:	2200      	movs	r2, #0
 800411e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004120:	2301      	movs	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004124:	2300      	movs	r3, #0
 8004126:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004128:	2301      	movs	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800412c:	2300      	movs	r3, #0
 800412e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004134:	2300      	movs	r3, #0
 8004136:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004138:	2301      	movs	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800413c:	2300      	movs	r3, #0
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	4619      	mov	r1, r3
 800414a:	480d      	ldr	r0, [pc, #52]	; (8004180 <MX_TIM1_Init+0xa8>)
 800414c:	f004 fdba 	bl	8008cc4 <HAL_TIM_Encoder_Init>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8004156:	f000 fecd 	bl	8004ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004162:	1d3b      	adds	r3, r7, #4
 8004164:	4619      	mov	r1, r3
 8004166:	4806      	ldr	r0, [pc, #24]	; (8004180 <MX_TIM1_Init+0xa8>)
 8004168:	f005 fcaa 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8004172:	f000 febf 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004176:	bf00      	nop
 8004178:	3730      	adds	r7, #48	; 0x30
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	200006b8 	.word	0x200006b8
 8004184:	40010000 	.word	0x40010000

08004188 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	; 0x30
 800418c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800418e:	f107 030c 	add.w	r3, r7, #12
 8004192:	2224      	movs	r2, #36	; 0x24
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f009 fad3 	bl	800d742 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800419c:	1d3b      	adds	r3, r7, #4
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041a4:	4b21      	ldr	r3, [pc, #132]	; (800422c <MX_TIM2_Init+0xa4>)
 80041a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80041ac:	4b1f      	ldr	r3, [pc, #124]	; (800422c <MX_TIM2_Init+0xa4>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b2:	4b1e      	ldr	r3, [pc, #120]	; (800422c <MX_TIM2_Init+0xa4>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80041b8:	4b1c      	ldr	r3, [pc, #112]	; (800422c <MX_TIM2_Init+0xa4>)
 80041ba:	f04f 32ff 	mov.w	r2, #4294967295
 80041be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <MX_TIM2_Init+0xa4>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c6:	4b19      	ldr	r3, [pc, #100]	; (800422c <MX_TIM2_Init+0xa4>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80041cc:	2303      	movs	r3, #3
 80041ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80041d4:	2301      	movs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80041e0:	2300      	movs	r3, #0
 80041e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80041e4:	2301      	movs	r3, #1
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80041f0:	f107 030c 	add.w	r3, r7, #12
 80041f4:	4619      	mov	r1, r3
 80041f6:	480d      	ldr	r0, [pc, #52]	; (800422c <MX_TIM2_Init+0xa4>)
 80041f8:	f004 fd64 	bl	8008cc4 <HAL_TIM_Encoder_Init>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004202:	f000 fe77 	bl	8004ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800420e:	1d3b      	adds	r3, r7, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4806      	ldr	r0, [pc, #24]	; (800422c <MX_TIM2_Init+0xa4>)
 8004214:	f005 fc54 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800421e:	f000 fe69 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004222:	bf00      	nop
 8004224:	3730      	adds	r7, #48	; 0x30
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000700 	.word	0x20000700

08004230 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08e      	sub	sp, #56	; 0x38
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004244:	f107 0320 	add.w	r3, r7, #32
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	611a      	str	r2, [r3, #16]
 800425c:	615a      	str	r2, [r3, #20]
 800425e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004260:	4b32      	ldr	r3, [pc, #200]	; (800432c <MX_TIM3_Init+0xfc>)
 8004262:	4a33      	ldr	r2, [pc, #204]	; (8004330 <MX_TIM3_Init+0x100>)
 8004264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8004266:	4b31      	ldr	r3, [pc, #196]	; (800432c <MX_TIM3_Init+0xfc>)
 8004268:	224f      	movs	r2, #79	; 0x4f
 800426a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800426c:	4b2f      	ldr	r3, [pc, #188]	; (800432c <MX_TIM3_Init+0xfc>)
 800426e:	2200      	movs	r2, #0
 8004270:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004272:	4b2e      	ldr	r3, [pc, #184]	; (800432c <MX_TIM3_Init+0xfc>)
 8004274:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004278:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800427a:	4b2c      	ldr	r3, [pc, #176]	; (800432c <MX_TIM3_Init+0xfc>)
 800427c:	2200      	movs	r2, #0
 800427e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004280:	4b2a      	ldr	r3, [pc, #168]	; (800432c <MX_TIM3_Init+0xfc>)
 8004282:	2200      	movs	r2, #0
 8004284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004286:	4829      	ldr	r0, [pc, #164]	; (800432c <MX_TIM3_Init+0xfc>)
 8004288:	f004 fb3a 	bl	8008900 <HAL_TIM_Base_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004292:	f000 fe2f 	bl	8004ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800429c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042a0:	4619      	mov	r1, r3
 80042a2:	4822      	ldr	r0, [pc, #136]	; (800432c <MX_TIM3_Init+0xfc>)
 80042a4:	f005 f80c 	bl	80092c0 <HAL_TIM_ConfigClockSource>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80042ae:	f000 fe21 	bl	8004ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042b2:	481e      	ldr	r0, [pc, #120]	; (800432c <MX_TIM3_Init+0xfc>)
 80042b4:	f004 fbe4 	bl	8008a80 <HAL_TIM_PWM_Init>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80042be:	f000 fe19 	bl	8004ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042c2:	2300      	movs	r3, #0
 80042c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042ca:	f107 0320 	add.w	r3, r7, #32
 80042ce:	4619      	mov	r1, r3
 80042d0:	4816      	ldr	r0, [pc, #88]	; (800432c <MX_TIM3_Init+0xfc>)
 80042d2:	f005 fbf5 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80042dc:	f000 fe0a 	bl	8004ef4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042e0:	2360      	movs	r3, #96	; 0x60
 80042e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042f0:	1d3b      	adds	r3, r7, #4
 80042f2:	2200      	movs	r2, #0
 80042f4:	4619      	mov	r1, r3
 80042f6:	480d      	ldr	r0, [pc, #52]	; (800432c <MX_TIM3_Init+0xfc>)
 80042f8:	f004 ff20 	bl	800913c <HAL_TIM_PWM_ConfigChannel>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004302:	f000 fdf7 	bl	8004ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	2204      	movs	r2, #4
 800430a:	4619      	mov	r1, r3
 800430c:	4807      	ldr	r0, [pc, #28]	; (800432c <MX_TIM3_Init+0xfc>)
 800430e:	f004 ff15 	bl	800913c <HAL_TIM_PWM_ConfigChannel>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004318:	f000 fdec 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800431c:	4803      	ldr	r0, [pc, #12]	; (800432c <MX_TIM3_Init+0xfc>)
 800431e:	f000 ffc5 	bl	80052ac <HAL_TIM_MspPostInit>

}
 8004322:	bf00      	nop
 8004324:	3738      	adds	r7, #56	; 0x38
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000748 	.word	0x20000748
 8004330:	40000400 	.word	0x40000400

08004334 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800433a:	f107 0308 	add.w	r3, r7, #8
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004348:	463b      	mov	r3, r7
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004350:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <MX_TIM4_Init+0x94>)
 8004352:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <MX_TIM4_Init+0x98>)
 8004354:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <MX_TIM4_Init+0x94>)
 8004358:	224f      	movs	r2, #79	; 0x4f
 800435a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435c:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <MX_TIM4_Init+0x94>)
 800435e:	2200      	movs	r2, #0
 8004360:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <MX_TIM4_Init+0x94>)
 8004364:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004368:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800436a:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <MX_TIM4_Init+0x94>)
 800436c:	2200      	movs	r2, #0
 800436e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004370:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <MX_TIM4_Init+0x94>)
 8004372:	2200      	movs	r2, #0
 8004374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004376:	4814      	ldr	r0, [pc, #80]	; (80043c8 <MX_TIM4_Init+0x94>)
 8004378:	f004 fac2 	bl	8008900 <HAL_TIM_Base_Init>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004382:	f000 fdb7 	bl	8004ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800438a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800438c:	f107 0308 	add.w	r3, r7, #8
 8004390:	4619      	mov	r1, r3
 8004392:	480d      	ldr	r0, [pc, #52]	; (80043c8 <MX_TIM4_Init+0x94>)
 8004394:	f004 ff94 	bl	80092c0 <HAL_TIM_ConfigClockSource>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800439e:	f000 fda9 	bl	8004ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043aa:	463b      	mov	r3, r7
 80043ac:	4619      	mov	r1, r3
 80043ae:	4806      	ldr	r0, [pc, #24]	; (80043c8 <MX_TIM4_Init+0x94>)
 80043b0:	f005 fb86 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80043ba:	f000 fd9b 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000790 	.word	0x20000790
 80043cc:	40000800 	.word	0x40000800

080043d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08e      	sub	sp, #56	; 0x38
 80043d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
 80043e0:	609a      	str	r2, [r3, #8]
 80043e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e4:	f107 0320 	add.w	r3, r7, #32
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	611a      	str	r2, [r3, #16]
 80043fc:	615a      	str	r2, [r3, #20]
 80043fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004400:	4b32      	ldr	r3, [pc, #200]	; (80044cc <MX_TIM5_Init+0xfc>)
 8004402:	4a33      	ldr	r2, [pc, #204]	; (80044d0 <MX_TIM5_Init+0x100>)
 8004404:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8004406:	4b31      	ldr	r3, [pc, #196]	; (80044cc <MX_TIM5_Init+0xfc>)
 8004408:	224f      	movs	r2, #79	; 0x4f
 800440a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800440c:	4b2f      	ldr	r3, [pc, #188]	; (80044cc <MX_TIM5_Init+0xfc>)
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8004412:	4b2e      	ldr	r3, [pc, #184]	; (80044cc <MX_TIM5_Init+0xfc>)
 8004414:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004418:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800441a:	4b2c      	ldr	r3, [pc, #176]	; (80044cc <MX_TIM5_Init+0xfc>)
 800441c:	2200      	movs	r2, #0
 800441e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004420:	4b2a      	ldr	r3, [pc, #168]	; (80044cc <MX_TIM5_Init+0xfc>)
 8004422:	2200      	movs	r2, #0
 8004424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004426:	4829      	ldr	r0, [pc, #164]	; (80044cc <MX_TIM5_Init+0xfc>)
 8004428:	f004 fa6a 	bl	8008900 <HAL_TIM_Base_Init>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8004432:	f000 fd5f 	bl	8004ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800443a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800443c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004440:	4619      	mov	r1, r3
 8004442:	4822      	ldr	r0, [pc, #136]	; (80044cc <MX_TIM5_Init+0xfc>)
 8004444:	f004 ff3c 	bl	80092c0 <HAL_TIM_ConfigClockSource>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800444e:	f000 fd51 	bl	8004ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004452:	481e      	ldr	r0, [pc, #120]	; (80044cc <MX_TIM5_Init+0xfc>)
 8004454:	f004 fb14 	bl	8008a80 <HAL_TIM_PWM_Init>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800445e:	f000 fd49 	bl	8004ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004462:	2300      	movs	r3, #0
 8004464:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004466:	2300      	movs	r3, #0
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800446a:	f107 0320 	add.w	r3, r7, #32
 800446e:	4619      	mov	r1, r3
 8004470:	4816      	ldr	r0, [pc, #88]	; (80044cc <MX_TIM5_Init+0xfc>)
 8004472:	f005 fb25 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800447c:	f000 fd3a 	bl	8004ef4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004480:	2360      	movs	r3, #96	; 0x60
 8004482:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	2200      	movs	r2, #0
 8004494:	4619      	mov	r1, r3
 8004496:	480d      	ldr	r0, [pc, #52]	; (80044cc <MX_TIM5_Init+0xfc>)
 8004498:	f004 fe50 	bl	800913c <HAL_TIM_PWM_ConfigChannel>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80044a2:	f000 fd27 	bl	8004ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	2204      	movs	r2, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	4807      	ldr	r0, [pc, #28]	; (80044cc <MX_TIM5_Init+0xfc>)
 80044ae:	f004 fe45 	bl	800913c <HAL_TIM_PWM_ConfigChannel>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80044b8:	f000 fd1c 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80044bc:	4803      	ldr	r0, [pc, #12]	; (80044cc <MX_TIM5_Init+0xfc>)
 80044be:	f000 fef5 	bl	80052ac <HAL_TIM_MspPostInit>

}
 80044c2:	bf00      	nop
 80044c4:	3738      	adds	r7, #56	; 0x38
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200007d8 	.word	0x200007d8
 80044d0:	40000c00 	.word	0x40000c00

080044d4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <MX_TIM10_Init+0x40>)
 80044da:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <MX_TIM10_Init+0x44>)
 80044dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 160-1;
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <MX_TIM10_Init+0x40>)
 80044e0:	229f      	movs	r2, #159	; 0x9f
 80044e2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <MX_TIM10_Init+0x40>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65000;
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <MX_TIM10_Init+0x40>)
 80044ec:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80044f0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <MX_TIM10_Init+0x40>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <MX_TIM10_Init+0x40>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80044fe:	4805      	ldr	r0, [pc, #20]	; (8004514 <MX_TIM10_Init+0x40>)
 8004500:	f004 f9fe 	bl	8008900 <HAL_TIM_Base_Init>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800450a:	f000 fcf3 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000820 	.word	0x20000820
 8004518:	40014400 	.word	0x40014400

0800451c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <MX_USART1_UART_Init+0x4c>)
 8004522:	4a12      	ldr	r2, [pc, #72]	; (800456c <MX_USART1_UART_Init+0x50>)
 8004524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <MX_USART1_UART_Init+0x4c>)
 8004528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800452c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800452e:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <MX_USART1_UART_Init+0x4c>)
 8004530:	2200      	movs	r2, #0
 8004532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <MX_USART1_UART_Init+0x4c>)
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <MX_USART1_UART_Init+0x4c>)
 800453c:	2200      	movs	r2, #0
 800453e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <MX_USART1_UART_Init+0x4c>)
 8004542:	220c      	movs	r2, #12
 8004544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <MX_USART1_UART_Init+0x4c>)
 8004548:	2200      	movs	r2, #0
 800454a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <MX_USART1_UART_Init+0x4c>)
 800454e:	2200      	movs	r2, #0
 8004550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004552:	4805      	ldr	r0, [pc, #20]	; (8004568 <MX_USART1_UART_Init+0x4c>)
 8004554:	f005 fb44 	bl	8009be0 <HAL_UART_Init>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800455e:	f000 fcc9 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000868 	.word	0x20000868
 800456c:	40011000 	.word	0x40011000

08004570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004574:	4b11      	ldr	r3, [pc, #68]	; (80045bc <MX_USART2_UART_Init+0x4c>)
 8004576:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <MX_USART2_UART_Init+0x50>)
 8004578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <MX_USART2_UART_Init+0x4c>)
 800457c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <MX_USART2_UART_Init+0x4c>)
 8004584:	2200      	movs	r2, #0
 8004586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <MX_USART2_UART_Init+0x4c>)
 800458a:	2200      	movs	r2, #0
 800458c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <MX_USART2_UART_Init+0x4c>)
 8004590:	2200      	movs	r2, #0
 8004592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <MX_USART2_UART_Init+0x4c>)
 8004596:	220c      	movs	r2, #12
 8004598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <MX_USART2_UART_Init+0x4c>)
 800459c:	2200      	movs	r2, #0
 800459e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <MX_USART2_UART_Init+0x4c>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045a6:	4805      	ldr	r0, [pc, #20]	; (80045bc <MX_USART2_UART_Init+0x4c>)
 80045a8:	f005 fb1a 	bl	8009be0 <HAL_UART_Init>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80045b2:	f000 fc9f 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	200008ac 	.word	0x200008ac
 80045c0:	40004400 	.word	0x40004400

080045c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045c8:	4b11      	ldr	r3, [pc, #68]	; (8004610 <MX_USART3_UART_Init+0x4c>)
 80045ca:	4a12      	ldr	r2, [pc, #72]	; (8004614 <MX_USART3_UART_Init+0x50>)
 80045cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <MX_USART3_UART_Init+0x4c>)
 80045d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045d6:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <MX_USART3_UART_Init+0x4c>)
 80045d8:	2200      	movs	r2, #0
 80045da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <MX_USART3_UART_Init+0x4c>)
 80045de:	2200      	movs	r2, #0
 80045e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <MX_USART3_UART_Init+0x4c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <MX_USART3_UART_Init+0x4c>)
 80045ea:	220c      	movs	r2, #12
 80045ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <MX_USART3_UART_Init+0x4c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <MX_USART3_UART_Init+0x4c>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80045fa:	4805      	ldr	r0, [pc, #20]	; (8004610 <MX_USART3_UART_Init+0x4c>)
 80045fc:	f005 faf0 	bl	8009be0 <HAL_UART_Init>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004606:	f000 fc75 	bl	8004ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200008f0 	.word	0x200008f0
 8004614:	40004800 	.word	0x40004800

08004618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <MX_DMA_Init+0x68>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4a16      	ldr	r2, [pc, #88]	; (8004680 <MX_DMA_Init+0x68>)
 8004628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800462c:	6313      	str	r3, [r2, #48]	; 0x30
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <MX_DMA_Init+0x68>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <MX_DMA_Init+0x68>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	4a0f      	ldr	r2, [pc, #60]	; (8004680 <MX_DMA_Init+0x68>)
 8004644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004648:	6313      	str	r3, [r2, #48]	; 0x30
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <MX_DMA_Init+0x68>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8004656:	2200      	movs	r2, #0
 8004658:	2105      	movs	r1, #5
 800465a:	2011      	movs	r0, #17
 800465c:	f002 fe8c 	bl	8007378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004660:	2011      	movs	r0, #17
 8004662:	f002 fea5 	bl	80073b0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8004666:	2200      	movs	r2, #0
 8004668:	2105      	movs	r1, #5
 800466a:	203a      	movs	r0, #58	; 0x3a
 800466c:	f002 fe84 	bl	8007378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004670:	203a      	movs	r0, #58	; 0x3a
 8004672:	f002 fe9d 	bl	80073b0 <HAL_NVIC_EnableIRQ>

}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800

08004684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468a:	f107 0314 	add.w	r3, r7, #20
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	605a      	str	r2, [r3, #4]
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	60da      	str	r2, [r3, #12]
 8004698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	4b3d      	ldr	r3, [pc, #244]	; (8004794 <MX_GPIO_Init+0x110>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	4a3c      	ldr	r2, [pc, #240]	; (8004794 <MX_GPIO_Init+0x110>)
 80046a4:	f043 0310 	orr.w	r3, r3, #16
 80046a8:	6313      	str	r3, [r2, #48]	; 0x30
 80046aa:	4b3a      	ldr	r3, [pc, #232]	; (8004794 <MX_GPIO_Init+0x110>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <MX_GPIO_Init+0x110>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	4a35      	ldr	r2, [pc, #212]	; (8004794 <MX_GPIO_Init+0x110>)
 80046c0:	f043 0304 	orr.w	r3, r3, #4
 80046c4:	6313      	str	r3, [r2, #48]	; 0x30
 80046c6:	4b33      	ldr	r3, [pc, #204]	; (8004794 <MX_GPIO_Init+0x110>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <MX_GPIO_Init+0x110>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	4a2e      	ldr	r2, [pc, #184]	; (8004794 <MX_GPIO_Init+0x110>)
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	6313      	str	r3, [r2, #48]	; 0x30
 80046e2:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <MX_GPIO_Init+0x110>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	4b28      	ldr	r3, [pc, #160]	; (8004794 <MX_GPIO_Init+0x110>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	4a27      	ldr	r2, [pc, #156]	; (8004794 <MX_GPIO_Init+0x110>)
 80046f8:	f043 0302 	orr.w	r3, r3, #2
 80046fc:	6313      	str	r3, [r2, #48]	; 0x30
 80046fe:	4b25      	ldr	r3, [pc, #148]	; (8004794 <MX_GPIO_Init+0x110>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4b21      	ldr	r3, [pc, #132]	; (8004794 <MX_GPIO_Init+0x110>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	4a20      	ldr	r2, [pc, #128]	; (8004794 <MX_GPIO_Init+0x110>)
 8004714:	f043 0308 	orr.w	r3, r3, #8
 8004718:	6313      	str	r3, [r2, #48]	; 0x30
 800471a:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <MX_GPIO_Init+0x110>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8004726:	2200      	movs	r2, #0
 8004728:	2160      	movs	r1, #96	; 0x60
 800472a:	481b      	ldr	r0, [pc, #108]	; (8004798 <MX_GPIO_Init+0x114>)
 800472c:	f003 fc04 	bl	8007f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HC595_CLK_Pin|HC595_RCLK_Pin|HC595_OE_Pin|HC595_DATA_Pin, GPIO_PIN_RESET);
 8004730:	2200      	movs	r2, #0
 8004732:	21f0      	movs	r1, #240	; 0xf0
 8004734:	4819      	ldr	r0, [pc, #100]	; (800479c <MX_GPIO_Init+0x118>)
 8004736:	f003 fbff 	bl	8007f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800473a:	2360      	movs	r3, #96	; 0x60
 800473c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800473e:	2301      	movs	r3, #1
 8004740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004746:	2300      	movs	r3, #0
 8004748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800474a:	f107 0314 	add.w	r3, r7, #20
 800474e:	4619      	mov	r1, r3
 8004750:	4811      	ldr	r0, [pc, #68]	; (8004798 <MX_GPIO_Init+0x114>)
 8004752:	f003 fa3d 	bl	8007bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HC595_CLK_Pin HC595_RCLK_Pin HC595_OE_Pin HC595_DATA_Pin */
  GPIO_InitStruct.Pin = HC595_CLK_Pin|HC595_RCLK_Pin|HC595_OE_Pin|HC595_DATA_Pin;
 8004756:	23f0      	movs	r3, #240	; 0xf0
 8004758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800475a:	2301      	movs	r3, #1
 800475c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004762:	2300      	movs	r3, #0
 8004764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	4619      	mov	r1, r3
 800476c:	480b      	ldr	r0, [pc, #44]	; (800479c <MX_GPIO_Init+0x118>)
 800476e:	f003 fa2f 	bl	8007bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor_1_Pin sensor_2_Pin sensor_3_Pin sensor_4_Pin
                           sensor_5_Pin sensor_6_Pin sensor_7_Pin sensor_8_Pin */
  GPIO_InitStruct.Pin = sensor_1_Pin|sensor_2_Pin|sensor_3_Pin|sensor_4_Pin
 8004772:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8004776:	617b      	str	r3, [r7, #20]
                          |sensor_5_Pin|sensor_6_Pin|sensor_7_Pin|sensor_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004780:	f107 0314 	add.w	r3, r7, #20
 8004784:	4619      	mov	r1, r3
 8004786:	4804      	ldr	r0, [pc, #16]	; (8004798 <MX_GPIO_Init+0x114>)
 8004788:	f003 fa22 	bl	8007bd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800478c:	bf00      	nop
 800478e:	3728      	adds	r7, #40	; 0x28
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40023800 	.word	0x40023800
 8004798:	40021000 	.word	0x40021000
 800479c:	40020000 	.word	0x40020000

080047a0 <InvCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t shootFlag;
void InvCpltCallback(ModuleID ID, float speed, float angle) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80047ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80047b0:	73fb      	strb	r3, [r7, #15]
	CAN_SpeedBLDC_AngleDC speedAngle;
	speedAngle.bldcSpeed = speed;
 80047b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80047b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047ba:	ee17 3a90 	vmov	r3, s15
 80047be:	613b      	str	r3, [r7, #16]
	speedAngle.dcAngle = angle;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	617b      	str	r3, [r7, #20]
	canfunc_MotorPutSpeedAndAngle(speedAngle);
 80047c4:	f107 0310 	add.w	r3, r7, #16
 80047c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047cc:	f7fd ff95 	bl	80026fa <canfunc_MotorPutSpeedAndAngle>



	while (canctrl_Send(&hcan1, ID) != HAL_OK);
 80047d0:	bf00      	nop
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	4619      	mov	r1, r3
 80047d6:	4805      	ldr	r0, [pc, #20]	; (80047ec <InvCpltCallback+0x4c>)
 80047d8:	f7fd fee2 	bl	80025a0 <canctrl_Send>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f7      	bne.n	80047d2 <InvCpltCallback+0x32>
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000690 	.word	0x20000690

080047f0 <StartDefaultTask>:
 * @retval None
 */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */

	swer_Init();
 80047f8:	f7fd fd30 	bl	800225c <swer_Init>

	for (;;) {

		if(xaDay == 0 )
 80047fc:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <StartDefaultTask+0xd4>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d139      	bne.n	8004878 <StartDefaultTask+0x88>
		{
			invkine_Implementation(MODULE_ID_3, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 8004804:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <StartDefaultTask+0xd8>)
 8004806:	edd3 7a00 	vldr	s15, [r3]
 800480a:	4b30      	ldr	r3, [pc, #192]	; (80048cc <StartDefaultTask+0xdc>)
 800480c:	ed93 7a00 	vldr	s14, [r3]
 8004810:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <StartDefaultTask+0xe0>)
 8004812:	edd3 6a00 	vldr	s13, [r3]
 8004816:	492f      	ldr	r1, [pc, #188]	; (80048d4 <StartDefaultTask+0xe4>)
 8004818:	eeb0 1a66 	vmov.f32	s2, s13
 800481c:	eef0 0a47 	vmov.f32	s1, s14
 8004820:	eeb0 0a67 	vmov.f32	s0, s15
 8004824:	2003      	movs	r0, #3
 8004826:	f7fd f89f 	bl	8001968 <invkine_Implementation>
			invkine_Implementation(MODULE_ID_1, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 800482a:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <StartDefaultTask+0xd8>)
 800482c:	edd3 7a00 	vldr	s15, [r3]
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <StartDefaultTask+0xdc>)
 8004832:	ed93 7a00 	vldr	s14, [r3]
 8004836:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <StartDefaultTask+0xe0>)
 8004838:	edd3 6a00 	vldr	s13, [r3]
 800483c:	4925      	ldr	r1, [pc, #148]	; (80048d4 <StartDefaultTask+0xe4>)
 800483e:	eeb0 1a66 	vmov.f32	s2, s13
 8004842:	eef0 0a47 	vmov.f32	s1, s14
 8004846:	eeb0 0a67 	vmov.f32	s0, s15
 800484a:	2001      	movs	r0, #1
 800484c:	f7fd f88c 	bl	8001968 <invkine_Implementation>
			invkine_Implementation(MODULE_ID_2, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 8004850:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <StartDefaultTask+0xd8>)
 8004852:	edd3 7a00 	vldr	s15, [r3]
 8004856:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <StartDefaultTask+0xdc>)
 8004858:	ed93 7a00 	vldr	s14, [r3]
 800485c:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <StartDefaultTask+0xe0>)
 800485e:	edd3 6a00 	vldr	s13, [r3]
 8004862:	491c      	ldr	r1, [pc, #112]	; (80048d4 <StartDefaultTask+0xe4>)
 8004864:	eeb0 1a66 	vmov.f32	s2, s13
 8004868:	eef0 0a47 	vmov.f32	s1, s14
 800486c:	eeb0 0a67 	vmov.f32	s0, s15
 8004870:	2002      	movs	r0, #2
 8004872:	f7fd f879 	bl	8001968 <invkine_Implementation>
 8004876:	e005      	b.n	8004884 <StartDefaultTask+0x94>
		}else if (xaDay == 1){
 8004878:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <StartDefaultTask+0xd4>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <StartDefaultTask+0x94>
			process_WireRelease();
 8004880:	f7ff fa3c 	bl	8003cfc <process_WireRelease>
		}


		if (gamepadRxIsBusy) {
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <StartDefaultTask+0xe8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <StartDefaultTask+0xac>
			gamepadRxIsBusy = 0;
 800488c:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <StartDefaultTask+0xe8>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8004892:	2209      	movs	r2, #9
 8004894:	4911      	ldr	r1, [pc, #68]	; (80048dc <StartDefaultTask+0xec>)
 8004896:	4812      	ldr	r0, [pc, #72]	; (80048e0 <StartDefaultTask+0xf0>)
 8004898:	f005 fac6 	bl	8009e28 <HAL_UART_Receive_IT>
		}
		if ((huart3.Instance->CR1 & USART_CR1_UE) == 0) {
 800489c:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <StartDefaultTask+0xf0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d107      	bne.n	80048ba <StartDefaultTask+0xca>
			__HAL_UART_ENABLE(&huart3);
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <StartDefaultTask+0xf0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <StartDefaultTask+0xf0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b8:	60da      	str	r2, [r3, #12]
		}
		osDelay(50);
 80048ba:	2032      	movs	r0, #50	; 0x32
 80048bc:	f006 fd67 	bl	800b38e <osDelay>
		if(xaDay == 0 )
 80048c0:	e79c      	b.n	80047fc <StartDefaultTask+0xc>
 80048c2:	bf00      	nop
 80048c4:	200011f4 	.word	0x200011f4
 80048c8:	200011e8 	.word	0x200011e8
 80048cc:	200011ec 	.word	0x200011ec
 80048d0:	200011f0 	.word	0x200011f0
 80048d4:	080047a1 	.word	0x080047a1
 80048d8:	200011e4 	.word	0x200011e4
 80048dc:	200011a8 	.word	0x200011a8
 80048e0:	200008f0 	.word	0x200008f0

080048e4 <InverseKinematic>:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	}
}
/* USER CODE END Header_InverseKinematic */
void InverseKinematic(void const * argument)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InverseKinematic */
	uint32_t value = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if(xTaskNotifyWait(pdFALSE, pdFALSE, &value, portMAX_DELAY)){
 80048f0:	f107 020c 	add.w	r2, r7, #12
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
 80048f8:	2100      	movs	r1, #0
 80048fa:	2000      	movs	r0, #0
 80048fc:	f007 faf6 	bl	800beec <xTaskNotifyWait>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <InverseKinematic+0x26>
			Send_Data();
 8004906:	f7fe fab0 	bl	8002e6a <Send_Data>
		}
		osDelay(1);
 800490a:	2001      	movs	r0, #1
 800490c:	f006 fd3f 	bl	800b38e <osDelay>
		if(xTaskNotifyWait(pdFALSE, pdFALSE, &value, portMAX_DELAY)){
 8004910:	e7ee      	b.n	80048f0 <InverseKinematic+0xc>
	...

08004914 <CAN_Bus>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CAN_Bus */
void CAN_Bus(void const * argument)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08c      	sub	sp, #48	; 0x30
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_Bus */
	CAN_Init();
 800491c:	f7fe f99e 	bl	8002c5c <CAN_Init>


	osDelay(500);
 8004920:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004924:	f006 fd33 	bl	800b38e <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_1, CANCTRL_MODE_SET_HOME);
 8004928:	2201      	movs	r2, #1
 800492a:	2101      	movs	r1, #1
 800492c:	4821      	ldr	r0, [pc, #132]	; (80049b4 <CAN_Bus+0xa0>)
 800492e:	f7fd fd9f 	bl	8002470 <canctrl_RTR_TxRequest>
	osDelay(1);
 8004932:	2001      	movs	r0, #1
 8004934:	f006 fd2b 	bl	800b38e <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_2, CANCTRL_MODE_SET_HOME);
 8004938:	2201      	movs	r2, #1
 800493a:	2102      	movs	r1, #2
 800493c:	481d      	ldr	r0, [pc, #116]	; (80049b4 <CAN_Bus+0xa0>)
 800493e:	f7fd fd97 	bl	8002470 <canctrl_RTR_TxRequest>
	osDelay(1);
 8004942:	2001      	movs	r0, #1
 8004944:	f006 fd23 	bl	800b38e <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_3, CANCTRL_MODE_SET_HOME);
 8004948:	2201      	movs	r2, #1
 800494a:	2103      	movs	r1, #3
 800494c:	4819      	ldr	r0, [pc, #100]	; (80049b4 <CAN_Bus+0xa0>)
 800494e:	f7fd fd8f 	bl	8002470 <canctrl_RTR_TxRequest>
	osDelay(1);
 8004952:	2001      	movs	r0, #1
 8004954:	f006 fd1b 	bl	800b38e <osDelay>
	osDelay(500);
 8004958:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800495c:	f006 fd17 	bl	800b38e <osDelay>
	uint32_t modeID;
	/* Infinite loop */
	for (;;) {
		if (xTaskNotifyWait(pdFALSE, pdFALSE, &modeID, portMAX_DELAY)) {
 8004960:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004964:	f04f 33ff 	mov.w	r3, #4294967295
 8004968:	2100      	movs	r1, #0
 800496a:	2000      	movs	r0, #0
 800496c:	f007 fabe 	bl	800beec <xTaskNotifyWait>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f4      	beq.n	8004960 <CAN_Bus+0x4c>
			CAN_RxHeaderTypeDef rxHeader = canctrl_GetRxHeader();
 8004976:	f107 030c 	add.w	r3, r7, #12
 800497a:	4618      	mov	r0, r3
 800497c:	f7fd fd56 	bl	800242c <canctrl_GetRxHeader>
			uint32_t targetID = rxHeader.StdId >> CAN_DEVICE_POS;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
			if ((modeID == CANCTRL_MODE_SET_HOME || modeID == CANCTRL_MODE_NODE_REQ_SPEED_ANGLE ) && targetID) {
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	2b01      	cmp	r3, #1
 800498a:	d002      	beq.n	8004992 <CAN_Bus+0x7e>
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	2b03      	cmp	r3, #3
 8004990:	d10a      	bne.n	80049a8 <CAN_Bus+0x94>
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <CAN_Bus+0x94>
				handleFunctionCAN(modeID, targetID);
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	b2db      	uxtb	r3, r3
 800499c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	4611      	mov	r1, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe f97e 	bl	8002ca4 <handleFunctionCAN>
			}
			HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80049a8:	2102      	movs	r1, #2
 80049aa:	4802      	ldr	r0, [pc, #8]	; (80049b4 <CAN_Bus+0xa0>)
 80049ac:	f002 f9c4 	bl	8006d38 <HAL_CAN_ActivateNotification>
		if (xTaskNotifyWait(pdFALSE, pdFALSE, &modeID, portMAX_DELAY)) {
 80049b0:	e7d6      	b.n	8004960 <CAN_Bus+0x4c>
 80049b2:	bf00      	nop
 80049b4:	20000690 	.word	0x20000690

080049b8 <OdometerHandle>:
 */
float TargetAngleTrajec,TargetAngleTrajecAccel;
uint8_t CB5;
/* USER CODE END Header_OdometerHandle */
void OdometerHandle(void const * argument)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OdometerHandle */
	  /* USER CODE BEGIN OdometerHandle */

		process_Init();
 80049c0:	f7fe fabc 	bl	8002f3c <process_Init>
//		handleFunctionCAN(CANCTRL_MODE_UNTANGLE_WIRE, CANCTRL_DEVICE_MOTOR_CONTROLLER_1);
//		for(CAN_DEVICE_ID id = CANCTRL_DEVICE_MOTOR_CONTROLLER_1; id <= CANCTRL_DEVICE_MOTOR_CONTROLLER_3;id++){
//		}
		/* Infinite loop */
		for (;;) {
			CB5 = HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin);
 80049c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049c8:	48b3      	ldr	r0, [pc, #716]	; (8004c98 <OdometerHandle+0x2e0>)
 80049ca:	f003 fa9d 	bl	8007f08 <HAL_GPIO_ReadPin>
 80049ce:	4603      	mov	r3, r0
 80049d0:	461a      	mov	r2, r3
 80049d2:	4bb2      	ldr	r3, [pc, #712]	; (8004c9c <OdometerHandle+0x2e4>)
 80049d4:	701a      	strb	r2, [r3, #0]
			else if(step == 4)// Doi Nhan nut de chay tiep
			{
				// if (dieu kien nut nhan duoc nhan)step = 5;
			}
--------------------------------------------CODE MAU--------------------------------------------------*/
			angle_Rad = (a_Now/10)*M_PI/180;
 80049d6:	4bb2      	ldr	r3, [pc, #712]	; (8004ca0 <OdometerHandle+0x2e8>)
 80049d8:	edd3 7a00 	vldr	s15, [r3]
 80049dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80049e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80049e4:	ee16 0a90 	vmov	r0, s13
 80049e8:	f7fb fdae 	bl	8000548 <__aeabi_f2d>
 80049ec:	a3a6      	add	r3, pc, #664	; (adr r3, 8004c88 <OdometerHandle+0x2d0>)
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f7fb fe01 	bl	80005f8 <__aeabi_dmul>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	4ba8      	ldr	r3, [pc, #672]	; (8004ca4 <OdometerHandle+0x2ec>)
 8004a04:	f7fb ff22 	bl	800084c <__aeabi_ddiv>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f7fc f8ca 	bl	8000ba8 <__aeabi_d2f>
 8004a14:	4603      	mov	r3, r0
 8004a16:	4aa4      	ldr	r2, [pc, #656]	; (8004ca8 <OdometerHandle+0x2f0>)
 8004a18:	6013      	str	r3, [r2, #0]
			trajecTheta.t += DELTA_T;
 8004a1a:	4ba4      	ldr	r3, [pc, #656]	; (8004cac <OdometerHandle+0x2f4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fb fd92 	bl	8000548 <__aeabi_f2d>
 8004a24:	a39a      	add	r3, pc, #616	; (adr r3, 8004c90 <OdometerHandle+0x2d8>)
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	f7fb fc2f 	bl	800028c <__adddf3>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4610      	mov	r0, r2
 8004a34:	4619      	mov	r1, r3
 8004a36:	f7fc f8b7 	bl	8000ba8 <__aeabi_d2f>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4a9b      	ldr	r2, [pc, #620]	; (8004cac <OdometerHandle+0x2f4>)
 8004a3e:	6013      	str	r3, [r2, #0]
			startPutBall(process_GetBall_State);
 8004a40:	4b9b      	ldr	r3, [pc, #620]	; (8004cb0 <OdometerHandle+0x2f8>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fc fc4b 	bl	80012e0 <startPutBall>
			Get_MPU_Angle();
 8004a4a:	f7fe fa39 	bl	8002ec0 <Get_MPU_Angle>
			process_SetFloatingEnc();
 8004a4e:	f7fe fb73 	bl	8003138 <process_SetFloatingEnc>
			trajecPlan_Cal(&trajecTheta);
 8004a52:	4896      	ldr	r0, [pc, #600]	; (8004cac <OdometerHandle+0x2f4>)
 8004a54:	f7fd f840 	bl	8001ad8 <trajecPlan_Cal>
			if (use_pidTheta)
 8004a58:	4b96      	ldr	r3, [pc, #600]	; (8004cb4 <OdometerHandle+0x2fc>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <OdometerHandle+0xda>
			{
				r = -(PID_Cal(&pid_Angle, trajecTheta.xTrajec, angle_Rad)+trajecTheta.xdottraject);
 8004a60:	4b92      	ldr	r3, [pc, #584]	; (8004cac <OdometerHandle+0x2f4>)
 8004a62:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a66:	4b90      	ldr	r3, [pc, #576]	; (8004ca8 <OdometerHandle+0x2f0>)
 8004a68:	ed93 7a00 	vldr	s14, [r3]
 8004a6c:	eef0 0a47 	vmov.f32	s1, s14
 8004a70:	eeb0 0a67 	vmov.f32	s0, s15
 8004a74:	4890      	ldr	r0, [pc, #576]	; (8004cb8 <OdometerHandle+0x300>)
 8004a76:	f006 fb53 	bl	800b120 <PID_Cal>
 8004a7a:	eeb0 7a40 	vmov.f32	s14, s0
 8004a7e:	4b8b      	ldr	r3, [pc, #556]	; (8004cac <OdometerHandle+0x2f4>)
 8004a80:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a88:	eef1 7a67 	vneg.f32	s15, s15
 8004a8c:	4b8b      	ldr	r3, [pc, #556]	; (8004cbc <OdometerHandle+0x304>)
 8004a8e:	edc3 7a00 	vstr	s15, [r3]

			}
///////////////////////////////////////////////////CODE O DAY/////////////////////////////////////////////////////

				if (step == 0)
 8004a92:	4b8b      	ldr	r3, [pc, #556]	; (8004cc0 <OdometerHandle+0x308>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <OdometerHandle+0xe8>
					{	// Ra lenh cho co Cau lay bong di xuong
						process_getBall();
 8004a9a:	f7ff f88b 	bl	8003bb4 <process_getBall>
 8004a9e:	e189      	b.n	8004db4 <OdometerHandle+0x3fc>
					}

				else if (step == 1)
 8004aa0:	4b87      	ldr	r3, [pc, #540]	; (8004cc0 <OdometerHandle+0x308>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d128      	bne.n	8004afa <OdometerHandle+0x142>
					{	//Ra lenh cho co Cau lay bong di len cham chu U
						process_setVal_PutBall(1);
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7ff f847 	bl	8003b3c <process_setVal_PutBall>

						if (GamePad.Down)
 8004aae:	4b85      	ldr	r3, [pc, #532]	; (8004cc4 <OdometerHandle+0x30c>)
 8004ab0:	7a1b      	ldrb	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 817e 	beq.w	8004db4 <OdometerHandle+0x3fc>
						{
							osDelay(500);
 8004ab8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004abc:	f006 fc67 	bl	800b38e <osDelay>
							if(GamePad.Down)
 8004ac0:	4b80      	ldr	r3, [pc, #512]	; (8004cc4 <OdometerHandle+0x30c>)
 8004ac2:	7a1b      	ldrb	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8175 	beq.w	8004db4 <OdometerHandle+0x3fc>
							{	//Reset thong so enc tha troi va la ban :
								Reset_MPU_Angle();
 8004aca:	f7fe fa25 	bl	8002f18 <Reset_MPU_Angle>
								process_ResetFloatingEnc();
 8004ace:	f7fe fb47 	bl	8003160 <process_ResetFloatingEnc>
								// Set thong so quy hoach quy dao :
								trajecPlan_SetParam(&trajecTheta, angle_Rad, -45*M_PI/180, 5, 0, 0);
 8004ad2:	4b75      	ldr	r3, [pc, #468]	; (8004ca8 <OdometerHandle+0x2f0>)
 8004ad4:	edd3 7a00 	vldr	s15, [r3]
 8004ad8:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 8004cc8 <OdometerHandle+0x310>
 8004adc:	eddf 1a7a 	vldr	s3, [pc, #488]	; 8004cc8 <OdometerHandle+0x310>
 8004ae0:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8004ae4:	eddf 0a79 	vldr	s1, [pc, #484]	; 8004ccc <OdometerHandle+0x314>
 8004ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8004aec:	486f      	ldr	r0, [pc, #444]	; (8004cac <OdometerHandle+0x2f4>)
 8004aee:	f7fd f8ea 	bl	8001cc6 <trajecPlan_SetParam>
								step = 2;
 8004af2:	4b73      	ldr	r3, [pc, #460]	; (8004cc0 <OdometerHandle+0x308>)
 8004af4:	2202      	movs	r2, #2
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	e15c      	b.n	8004db4 <OdometerHandle+0x3fc>
							}
						}
					}

				else if (step == 2)
 8004afa:	4b71      	ldr	r3, [pc, #452]	; (8004cc0 <OdometerHandle+0x308>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d119      	bne.n	8004b36 <OdometerHandle+0x17e>
					{
						//Cho phep PID giu goc
						use_pidTheta = 1;
 8004b02:	4b6c      	ldr	r3, [pc, #432]	; (8004cb4 <OdometerHandle+0x2fc>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
						//Set thong so khi vua chay vua xoay
						process_PD_Auto_Chose(trajecTheta.Pf, angle_Rad);
 8004b08:	4b68      	ldr	r3, [pc, #416]	; (8004cac <OdometerHandle+0x2f4>)
 8004b0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b0e:	4b66      	ldr	r3, [pc, #408]	; (8004ca8 <OdometerHandle+0x2f0>)
 8004b10:	ed93 7a00 	vldr	s14, [r3]
 8004b14:	eef0 0a47 	vmov.f32	s1, s14
 8004b18:	eeb0 0a67 	vmov.f32	s0, s15
 8004b1c:	f7fe faa8 	bl	8003070 <process_PD_Auto_Chose>
						//Set chu trinh chay theo enc
						process_Accel_FloatingEnc2(-22, 1.2, 4400, 0.08);
 8004b20:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8004cd0 <OdometerHandle+0x318>
 8004b24:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8004cd4 <OdometerHandle+0x31c>
 8004b28:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8004cd8 <OdometerHandle+0x320>
 8004b2c:	eebb 0a06 	vmov.f32	s0, #182	; 0xc1b00000 -22.0
 8004b30:	f7fe fb26 	bl	8003180 <process_Accel_FloatingEnc2>
 8004b34:	e13e      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 3)
 8004b36:	4b62      	ldr	r3, [pc, #392]	; (8004cc0 <OdometerHandle+0x308>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d102      	bne.n	8004b44 <OdometerHandle+0x18c>
					{
						process_Ball_Approach();
 8004b3e:	f7fe fd43 	bl	80035c8 <process_Ball_Approach>
 8004b42:	e137      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 4)
 8004b44:	4b5e      	ldr	r3, [pc, #376]	; (8004cc0 <OdometerHandle+0x308>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d102      	bne.n	8004b52 <OdometerHandle+0x19a>
					{
						process_getBall();
 8004b4c:	f7ff f832 	bl	8003bb4 <process_getBall>
 8004b50:	e130      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 5)
 8004b52:	4b5b      	ldr	r3, [pc, #364]	; (8004cc0 <OdometerHandle+0x308>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b05      	cmp	r3, #5
 8004b58:	d116      	bne.n	8004b88 <OdometerHandle+0x1d0>
					{
						trajecPlan_SetParam(&trajecTheta, angle_Rad, -3*M_PI/180, 4, 0, 0);
 8004b5a:	4b53      	ldr	r3, [pc, #332]	; (8004ca8 <OdometerHandle+0x2f0>)
 8004b5c:	edd3 7a00 	vldr	s15, [r3]
 8004b60:	ed9f 2a59 	vldr	s4, [pc, #356]	; 8004cc8 <OdometerHandle+0x310>
 8004b64:	eddf 1a58 	vldr	s3, [pc, #352]	; 8004cc8 <OdometerHandle+0x310>
 8004b68:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8004b6c:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8004cdc <OdometerHandle+0x324>
 8004b70:	eeb0 0a67 	vmov.f32	s0, s15
 8004b74:	484d      	ldr	r0, [pc, #308]	; (8004cac <OdometerHandle+0x2f4>)
 8004b76:	f7fd f8a6 	bl	8001cc6 <trajecPlan_SetParam>
						step += 1;
 8004b7a:	4b51      	ldr	r3, [pc, #324]	; (8004cc0 <OdometerHandle+0x308>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4b4f      	ldr	r3, [pc, #316]	; (8004cc0 <OdometerHandle+0x308>)
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e115      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if(step == 6)
 8004b88:	4b4d      	ldr	r3, [pc, #308]	; (8004cc0 <OdometerHandle+0x308>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b06      	cmp	r3, #6
 8004b8e:	d10a      	bne.n	8004ba6 <OdometerHandle+0x1ee>
					{
						process_Accel_FloatingEnc2(75, 1.2, 3000, 0.05);
 8004b90:	eddf 1a53 	vldr	s3, [pc, #332]	; 8004ce0 <OdometerHandle+0x328>
 8004b94:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8004ce4 <OdometerHandle+0x32c>
 8004b98:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8004cd8 <OdometerHandle+0x320>
 8004b9c:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8004ce8 <OdometerHandle+0x330>
 8004ba0:	f7fe faee 	bl	8003180 <process_Accel_FloatingEnc2>
 8004ba4:	e106      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if(step == 7)
 8004ba6:	4b46      	ldr	r3, [pc, #280]	; (8004cc0 <OdometerHandle+0x308>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b07      	cmp	r3, #7
 8004bac:	d104      	bne.n	8004bb8 <OdometerHandle+0x200>
					{
						process_PD_OnStrainghtPath();
 8004bae:	f7fe fa03 	bl	8002fb8 <process_PD_OnStrainghtPath>
						process_ApproachWall();
 8004bb2:	f7fe ff1f 	bl	80039f4 <process_ApproachWall>
 8004bb6:	e0fd      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if(step == 8)
 8004bb8:	4b41      	ldr	r3, [pc, #260]	; (8004cc0 <OdometerHandle+0x308>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d102      	bne.n	8004bc6 <OdometerHandle+0x20e>
					{
						process_ReleaseBall();
 8004bc0:	f7fe ffcc 	bl	8003b5c <process_ReleaseBall>
 8004bc4:	e0f6      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 9)
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <OdometerHandle+0x308>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b09      	cmp	r3, #9
 8004bcc:	d116      	bne.n	8004bfc <OdometerHandle+0x244>
					{
						trajecPlan_SetParam(&trajecTheta, angle_Rad, -45*M_PI/180, 4, 0, 0);
 8004bce:	4b36      	ldr	r3, [pc, #216]	; (8004ca8 <OdometerHandle+0x2f0>)
 8004bd0:	edd3 7a00 	vldr	s15, [r3]
 8004bd4:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8004cc8 <OdometerHandle+0x310>
 8004bd8:	eddf 1a3b 	vldr	s3, [pc, #236]	; 8004cc8 <OdometerHandle+0x310>
 8004bdc:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8004be0:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8004ccc <OdometerHandle+0x314>
 8004be4:	eeb0 0a67 	vmov.f32	s0, s15
 8004be8:	4830      	ldr	r0, [pc, #192]	; (8004cac <OdometerHandle+0x2f4>)
 8004bea:	f7fd f86c 	bl	8001cc6 <trajecPlan_SetParam>
						step += 1;
 8004bee:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <OdometerHandle+0x308>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4b32      	ldr	r3, [pc, #200]	; (8004cc0 <OdometerHandle+0x308>)
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e0db      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 10)
 8004bfc:	4b30      	ldr	r3, [pc, #192]	; (8004cc0 <OdometerHandle+0x308>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b0a      	cmp	r3, #10
 8004c02:	d116      	bne.n	8004c32 <OdometerHandle+0x27a>
					{
						process_PD_Auto_Chose(trajecTheta.Pf, angle_Rad);
 8004c04:	4b29      	ldr	r3, [pc, #164]	; (8004cac <OdometerHandle+0x2f4>)
 8004c06:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c0a:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <OdometerHandle+0x2f0>)
 8004c0c:	ed93 7a00 	vldr	s14, [r3]
 8004c10:	eef0 0a47 	vmov.f32	s1, s14
 8004c14:	eeb0 0a67 	vmov.f32	s0, s15
 8004c18:	f7fe fa2a 	bl	8003070 <process_PD_Auto_Chose>
						process_Accel_FloatingEnc2(-115, 1.2, 3200, 0.05);
 8004c1c:	eddf 1a30 	vldr	s3, [pc, #192]	; 8004ce0 <OdometerHandle+0x328>
 8004c20:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8004cec <OdometerHandle+0x334>
 8004c24:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8004cd8 <OdometerHandle+0x320>
 8004c28:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004cf0 <OdometerHandle+0x338>
 8004c2c:	f7fe faa8 	bl	8003180 <process_Accel_FloatingEnc2>
 8004c30:	e0c0      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 11)
 8004c32:	4b23      	ldr	r3, [pc, #140]	; (8004cc0 <OdometerHandle+0x308>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b0b      	cmp	r3, #11
 8004c38:	d102      	bne.n	8004c40 <OdometerHandle+0x288>
					{
						process_Ball_Approach2();
 8004c3a:	f7fe fdd1 	bl	80037e0 <process_Ball_Approach2>
 8004c3e:	e0b9      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 12)
 8004c40:	4b1f      	ldr	r3, [pc, #124]	; (8004cc0 <OdometerHandle+0x308>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d102      	bne.n	8004c4e <OdometerHandle+0x296>
					{
						process_getBall();
 8004c48:	f7fe ffb4 	bl	8003bb4 <process_getBall>
 8004c4c:	e0b2      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 13)
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <OdometerHandle+0x308>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b0d      	cmp	r3, #13
 8004c54:	d14e      	bne.n	8004cf4 <OdometerHandle+0x33c>
					{
						trajecPlan_SetParam(&trajecTheta, angle_Rad, -3*M_PI/180, 3, 0, 0);
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <OdometerHandle+0x2f0>)
 8004c58:	edd3 7a00 	vldr	s15, [r3]
 8004c5c:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 8004cc8 <OdometerHandle+0x310>
 8004c60:	eddf 1a19 	vldr	s3, [pc, #100]	; 8004cc8 <OdometerHandle+0x310>
 8004c64:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8004c68:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004cdc <OdometerHandle+0x324>
 8004c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c70:	480e      	ldr	r0, [pc, #56]	; (8004cac <OdometerHandle+0x2f4>)
 8004c72:	f7fd f828 	bl	8001cc6 <trajecPlan_SetParam>
						step += 1;
 8004c76:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <OdometerHandle+0x308>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <OdometerHandle+0x308>)
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	e097      	b.n	8004db4 <OdometerHandle+0x3fc>
 8004c84:	f3af 8000 	nop.w
 8004c88:	54442d18 	.word	0x54442d18
 8004c8c:	400921fb 	.word	0x400921fb
 8004c90:	9999999a 	.word	0x9999999a
 8004c94:	3fa99999 	.word	0x3fa99999
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	200012f4 	.word	0x200012f4
 8004ca0:	20001208 	.word	0x20001208
 8004ca4:	40668000 	.word	0x40668000
 8004ca8:	2000120c 	.word	0x2000120c
 8004cac:	200012c4 	.word	0x200012c4
 8004cb0:	200012ac 	.word	0x200012ac
 8004cb4:	20001258 	.word	0x20001258
 8004cb8:	20001210 	.word	0x20001210
 8004cbc:	20001298 	.word	0x20001298
 8004cc0:	200011f6 	.word	0x200011f6
 8004cc4:	200011c0 	.word	0x200011c0
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	bf490fdb 	.word	0xbf490fdb
 8004cd0:	3da3d70a 	.word	0x3da3d70a
 8004cd4:	45898000 	.word	0x45898000
 8004cd8:	3f99999a 	.word	0x3f99999a
 8004cdc:	bd567750 	.word	0xbd567750
 8004ce0:	3d4ccccd 	.word	0x3d4ccccd
 8004ce4:	453b8000 	.word	0x453b8000
 8004ce8:	42960000 	.word	0x42960000
 8004cec:	45480000 	.word	0x45480000
 8004cf0:	c2e60000 	.word	0xc2e60000
					}
				else if (step == 14)
 8004cf4:	4b5e      	ldr	r3, [pc, #376]	; (8004e70 <OdometerHandle+0x4b8>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b0e      	cmp	r3, #14
 8004cfa:	d116      	bne.n	8004d2a <OdometerHandle+0x372>
					{
						process_PD_Auto_Chose(trajecTheta.Pf, angle_Rad);
 8004cfc:	4b5d      	ldr	r3, [pc, #372]	; (8004e74 <OdometerHandle+0x4bc>)
 8004cfe:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d02:	4b5d      	ldr	r3, [pc, #372]	; (8004e78 <OdometerHandle+0x4c0>)
 8004d04:	ed93 7a00 	vldr	s14, [r3]
 8004d08:	eef0 0a47 	vmov.f32	s1, s14
 8004d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d10:	f7fe f9ae 	bl	8003070 <process_PD_Auto_Chose>
						process_Accel_FloatingEnc2(78, 1.2, 2800, 0.05);
 8004d14:	eddf 1a59 	vldr	s3, [pc, #356]	; 8004e7c <OdometerHandle+0x4c4>
 8004d18:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8004e80 <OdometerHandle+0x4c8>
 8004d1c:	eddf 0a59 	vldr	s1, [pc, #356]	; 8004e84 <OdometerHandle+0x4cc>
 8004d20:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8004e88 <OdometerHandle+0x4d0>
 8004d24:	f7fe fa2c 	bl	8003180 <process_Accel_FloatingEnc2>
 8004d28:	e044      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 15)
 8004d2a:	4b51      	ldr	r3, [pc, #324]	; (8004e70 <OdometerHandle+0x4b8>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b0f      	cmp	r3, #15
 8004d30:	d104      	bne.n	8004d3c <OdometerHandle+0x384>
					{
						process_PD_OnStrainghtPath();
 8004d32:	f7fe f941 	bl	8002fb8 <process_PD_OnStrainghtPath>
						process_ApproachWall();
 8004d36:	f7fe fe5d 	bl	80039f4 <process_ApproachWall>
 8004d3a:	e03b      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 16)
 8004d3c:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <OdometerHandle+0x4b8>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d102      	bne.n	8004d4a <OdometerHandle+0x392>
					{
						process_ReleaseBall();
 8004d44:	f7fe ff0a 	bl	8003b5c <process_ReleaseBall>
 8004d48:	e034      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 17)
 8004d4a:	4b49      	ldr	r3, [pc, #292]	; (8004e70 <OdometerHandle+0x4b8>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b11      	cmp	r3, #17
 8004d50:	d116      	bne.n	8004d80 <OdometerHandle+0x3c8>
					{
						trajecPlan_SetParam(&trajecTheta, angle_Rad, 0*M_PI/180, 1, 0, 0);
 8004d52:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <OdometerHandle+0x4c0>)
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 8004e8c <OdometerHandle+0x4d4>
 8004d5c:	eddf 1a4b 	vldr	s3, [pc, #300]	; 8004e8c <OdometerHandle+0x4d4>
 8004d60:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004d64:	eddf 0a49 	vldr	s1, [pc, #292]	; 8004e8c <OdometerHandle+0x4d4>
 8004d68:	eeb0 0a67 	vmov.f32	s0, s15
 8004d6c:	4841      	ldr	r0, [pc, #260]	; (8004e74 <OdometerHandle+0x4bc>)
 8004d6e:	f7fc ffaa 	bl	8001cc6 <trajecPlan_SetParam>
						step += 1;
 8004d72:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <OdometerHandle+0x4b8>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	4b3d      	ldr	r3, [pc, #244]	; (8004e70 <OdometerHandle+0x4b8>)
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e019      	b.n	8004db4 <OdometerHandle+0x3fc>
					}
				else if (step == 18)
 8004d80:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <OdometerHandle+0x4b8>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b12      	cmp	r3, #18
 8004d86:	d115      	bne.n	8004db4 <OdometerHandle+0x3fc>
					{
						process_PD_Auto_Chose(trajecTheta.Pf, angle_Rad);
 8004d88:	4b3a      	ldr	r3, [pc, #232]	; (8004e74 <OdometerHandle+0x4bc>)
 8004d8a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d8e:	4b3a      	ldr	r3, [pc, #232]	; (8004e78 <OdometerHandle+0x4c0>)
 8004d90:	ed93 7a00 	vldr	s14, [r3]
 8004d94:	eef0 0a47 	vmov.f32	s1, s14
 8004d98:	eeb0 0a67 	vmov.f32	s0, s15
 8004d9c:	f7fe f968 	bl	8003070 <process_PD_Auto_Chose>
						process_Accel_FloatingEnc2(200, 1.2, 6000, 0.05);
 8004da0:	eddf 1a36 	vldr	s3, [pc, #216]	; 8004e7c <OdometerHandle+0x4c4>
 8004da4:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8004e90 <OdometerHandle+0x4d8>
 8004da8:	eddf 0a36 	vldr	s1, [pc, #216]	; 8004e84 <OdometerHandle+0x4cc>
 8004dac:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8004e94 <OdometerHandle+0x4dc>
 8004db0:	f7fe f9e6 	bl	8003180 <process_Accel_FloatingEnc2>
					}

////////////////////////////////////////////////NUT BAM////////////////////////////////////////////////////////////
			if (GamePad.Down && GamePad.Cross)//Chuyen Sang Che Do GamePad
 8004db4:	4b38      	ldr	r3, [pc, #224]	; (8004e98 <OdometerHandle+0x4e0>)
 8004db6:	7a1b      	ldrb	r3, [r3, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d011      	beq.n	8004de0 <OdometerHandle+0x428>
 8004dbc:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <OdometerHandle+0x4e0>)
 8004dbe:	7b1b      	ldrb	r3, [r3, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <OdometerHandle+0x428>
			{
				osDelay(100);
 8004dc4:	2064      	movs	r0, #100	; 0x64
 8004dc6:	f006 fae2 	bl	800b38e <osDelay>
				if (GamePad.Down && GamePad.Cross)
 8004dca:	4b33      	ldr	r3, [pc, #204]	; (8004e98 <OdometerHandle+0x4e0>)
 8004dcc:	7a1b      	ldrb	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d006      	beq.n	8004de0 <OdometerHandle+0x428>
 8004dd2:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <OdometerHandle+0x4e0>)
 8004dd4:	7b1b      	ldrb	r3, [r3, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <OdometerHandle+0x428>
				{
					Gamepad = 1;
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <OdometerHandle+0x4e4>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
				}
			}

			if((GamePad.Square == 1)&&(GamePad.Right == 1))// Xa day
 8004de0:	4b2d      	ldr	r3, [pc, #180]	; (8004e98 <OdometerHandle+0x4e0>)
 8004de2:	7a5b      	ldrb	r3, [r3, #9]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d111      	bne.n	8004e0c <OdometerHandle+0x454>
 8004de8:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <OdometerHandle+0x4e0>)
 8004dea:	79db      	ldrb	r3, [r3, #7]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d10d      	bne.n	8004e0c <OdometerHandle+0x454>
			{
				osDelay(100);
 8004df0:	2064      	movs	r0, #100	; 0x64
 8004df2:	f006 facc 	bl	800b38e <osDelay>
				if((GamePad.Square == 1)&&(GamePad.Right == 1))
 8004df6:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <OdometerHandle+0x4e0>)
 8004df8:	7a5b      	ldrb	r3, [r3, #9]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d106      	bne.n	8004e0c <OdometerHandle+0x454>
 8004dfe:	4b26      	ldr	r3, [pc, #152]	; (8004e98 <OdometerHandle+0x4e0>)
 8004e00:	79db      	ldrb	r3, [r3, #7]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d102      	bne.n	8004e0c <OdometerHandle+0x454>
				{
					xaDay = 1;
 8004e06:	4b26      	ldr	r3, [pc, #152]	; (8004ea0 <OdometerHandle+0x4e8>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
				}
			}

			if (Gamepad == 1)
 8004e0c:	4b23      	ldr	r3, [pc, #140]	; (8004e9c <OdometerHandle+0x4e4>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d110      	bne.n	8004e36 <OdometerHandle+0x47e>
			{
				uControlX = 	-GamePad.XLeftCtr;
 8004e14:	4b20      	ldr	r3, [pc, #128]	; (8004e98 <OdometerHandle+0x4e0>)
 8004e16:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e1a:	eef1 7a67 	vneg.f32	s15, s15
 8004e1e:	4b21      	ldr	r3, [pc, #132]	; (8004ea4 <OdometerHandle+0x4ec>)
 8004e20:	edc3 7a00 	vstr	s15, [r3]
				uControlY = 	GamePad.YLeftCtr;
 8004e24:	4b1c      	ldr	r3, [pc, #112]	; (8004e98 <OdometerHandle+0x4e0>)
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <OdometerHandle+0x4f0>)
 8004e2a:	6013      	str	r3, [r2, #0]
				uControlTheta = GamePad.XRightCtr;
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <OdometerHandle+0x4e0>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <OdometerHandle+0x4f4>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	e010      	b.n	8004e58 <OdometerHandle+0x4a0>
			}
			else {
				process_Signal_RotationMatrixTransform(u, v, r);
 8004e36:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <OdometerHandle+0x4f8>)
 8004e38:	edd3 7a00 	vldr	s15, [r3]
 8004e3c:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <OdometerHandle+0x4fc>)
 8004e3e:	ed93 7a00 	vldr	s14, [r3]
 8004e42:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <OdometerHandle+0x500>)
 8004e44:	edd3 6a00 	vldr	s13, [r3]
 8004e48:	eeb0 1a66 	vmov.f32	s2, s13
 8004e4c:	eef0 0a47 	vmov.f32	s1, s14
 8004e50:	eeb0 0a67 	vmov.f32	s0, s15
 8004e54:	f7fe fb1e 	bl	8003494 <process_Signal_RotationMatrixTransform>
			}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
			xTaskNotify(TaskInvKineHandle,1,eSetValueWithOverwrite);
 8004e58:	4b18      	ldr	r3, [pc, #96]	; (8004ebc <OdometerHandle+0x504>)
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2203      	movs	r2, #3
 8004e60:	2101      	movs	r1, #1
 8004e62:	f007 f8a3 	bl	800bfac <xTaskGenericNotify>
			osDelay(DELTA_T*1000);
 8004e66:	2032      	movs	r0, #50	; 0x32
 8004e68:	f006 fa91 	bl	800b38e <osDelay>
			CB5 = HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin);
 8004e6c:	e5aa      	b.n	80049c4 <OdometerHandle+0xc>
 8004e6e:	bf00      	nop
 8004e70:	200011f6 	.word	0x200011f6
 8004e74:	200012c4 	.word	0x200012c4
 8004e78:	2000120c 	.word	0x2000120c
 8004e7c:	3d4ccccd 	.word	0x3d4ccccd
 8004e80:	452f0000 	.word	0x452f0000
 8004e84:	3f99999a 	.word	0x3f99999a
 8004e88:	429c0000 	.word	0x429c0000
 8004e8c:	00000000 	.word	0x00000000
 8004e90:	45bb8000 	.word	0x45bb8000
 8004e94:	43480000 	.word	0x43480000
 8004e98:	200011c0 	.word	0x200011c0
 8004e9c:	200011f5 	.word	0x200011f5
 8004ea0:	200011f4 	.word	0x200011f4
 8004ea4:	200011e8 	.word	0x200011e8
 8004ea8:	200011ec 	.word	0x200011ec
 8004eac:	200011f0 	.word	0x200011f0
 8004eb0:	20001290 	.word	0x20001290
 8004eb4:	20001294 	.word	0x20001294
 8004eb8:	20001298 	.word	0x20001298
 8004ebc:	200009f8 	.word	0x200009f8

08004ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a07      	ldr	r2, [pc, #28]	; (8004eec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004ed2:	f000 fd97 	bl	8005a04 <HAL_IncTick>
  }
  if (htim->Instance == TIM4) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a05      	ldr	r2, [pc, #20]	; (8004ef0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIM_PeriodElapsedCallback+0x24>
    readADC();
 8004ee0:	f7fe fe82 	bl	8003be8 <readADC>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40001c00 	.word	0x40001c00
 8004ef0:	40000800 	.word	0x40000800

08004ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ef8:	b672      	cpsid	i
}
 8004efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004efc:	e7fe      	b.n	8004efc <Error_Handler+0x8>
	...

08004f00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f06:	2300      	movs	r3, #0
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <HAL_MspInit+0x54>)
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	4a11      	ldr	r2, [pc, #68]	; (8004f54 <HAL_MspInit+0x54>)
 8004f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f14:	6453      	str	r3, [r2, #68]	; 0x44
 8004f16:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <HAL_MspInit+0x54>)
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f22:	2300      	movs	r3, #0
 8004f24:	603b      	str	r3, [r7, #0]
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_MspInit+0x54>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <HAL_MspInit+0x54>)
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f30:	6413      	str	r3, [r2, #64]	; 0x40
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <HAL_MspInit+0x54>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	210f      	movs	r1, #15
 8004f42:	f06f 0001 	mvn.w	r0, #1
 8004f46:	f002 fa17 	bl	8007378 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800

08004f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	; 0x28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f60:	f107 0314 	add.w	r3, r7, #20
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	605a      	str	r2, [r3, #4]
 8004f6a:	609a      	str	r2, [r3, #8]
 8004f6c:	60da      	str	r2, [r3, #12]
 8004f6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1b      	ldr	r2, [pc, #108]	; (8004fe4 <HAL_ADC_MspInit+0x8c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d12f      	bne.n	8004fda <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_ADC_MspInit+0x90>)
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_ADC_MspInit+0x90>)
 8004f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f88:	6453      	str	r3, [r2, #68]	; 0x44
 8004f8a:	4b17      	ldr	r3, [pc, #92]	; (8004fe8 <HAL_ADC_MspInit+0x90>)
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <HAL_ADC_MspInit+0x90>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	4a12      	ldr	r2, [pc, #72]	; (8004fe8 <HAL_ADC_MspInit+0x90>)
 8004fa0:	f043 0304 	orr.w	r3, r3, #4
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <HAL_ADC_MspInit+0x90>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fbe:	f107 0314 	add.w	r3, r7, #20
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4809      	ldr	r0, [pc, #36]	; (8004fec <HAL_ADC_MspInit+0x94>)
 8004fc6:	f002 fe03 	bl	8007bd0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2105      	movs	r1, #5
 8004fce:	2012      	movs	r0, #18
 8004fd0:	f002 f9d2 	bl	8007378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004fd4:	2012      	movs	r0, #18
 8004fd6:	f002 f9eb 	bl	80073b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004fda:	bf00      	nop
 8004fdc:	3728      	adds	r7, #40	; 0x28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40012000 	.word	0x40012000
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40020800 	.word	0x40020800

08004ff0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff8:	f107 0314 	add.w	r3, r7, #20
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <HAL_CAN_MspInit+0x94>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d134      	bne.n	800507c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	4b1c      	ldr	r3, [pc, #112]	; (8005088 <HAL_CAN_MspInit+0x98>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <HAL_CAN_MspInit+0x98>)
 800501c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005020:	6413      	str	r3, [r2, #64]	; 0x40
 8005022:	4b19      	ldr	r3, [pc, #100]	; (8005088 <HAL_CAN_MspInit+0x98>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	4b15      	ldr	r3, [pc, #84]	; (8005088 <HAL_CAN_MspInit+0x98>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	4a14      	ldr	r2, [pc, #80]	; (8005088 <HAL_CAN_MspInit+0x98>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	6313      	str	r3, [r2, #48]	; 0x30
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <HAL_CAN_MspInit+0x98>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800504a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800504e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005050:	2302      	movs	r3, #2
 8005052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005058:	2303      	movs	r3, #3
 800505a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800505c:	2309      	movs	r3, #9
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005060:	f107 0314 	add.w	r3, r7, #20
 8005064:	4619      	mov	r1, r3
 8005066:	4809      	ldr	r0, [pc, #36]	; (800508c <HAL_CAN_MspInit+0x9c>)
 8005068:	f002 fdb2 	bl	8007bd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800506c:	2200      	movs	r2, #0
 800506e:	2105      	movs	r1, #5
 8005070:	2014      	movs	r0, #20
 8005072:	f002 f981 	bl	8007378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005076:	2014      	movs	r0, #20
 8005078:	f002 f99a 	bl	80073b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800507c:	bf00      	nop
 800507e:	3728      	adds	r7, #40	; 0x28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40006400 	.word	0x40006400
 8005088:	40023800 	.word	0x40023800
 800508c:	40020000 	.word	0x40020000

08005090 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08c      	sub	sp, #48	; 0x30
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005098:	f107 031c 	add.w	r3, r7, #28
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	605a      	str	r2, [r3, #4]
 80050a2:	609a      	str	r2, [r3, #8]
 80050a4:	60da      	str	r2, [r3, #12]
 80050a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a46      	ldr	r2, [pc, #280]	; (80051c8 <HAL_TIM_Encoder_MspInit+0x138>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d12d      	bne.n	800510e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	4b45      	ldr	r3, [pc, #276]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	4a44      	ldr	r2, [pc, #272]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6453      	str	r3, [r2, #68]	; 0x44
 80050c2:	4b42      	ldr	r3, [pc, #264]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	4a3d      	ldr	r2, [pc, #244]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6313      	str	r3, [r2, #48]	; 0x30
 80050de:	4b3b      	ldr	r3, [pc, #236]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80050ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f0:	2302      	movs	r3, #2
 80050f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050fc:	2301      	movs	r3, #1
 80050fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005100:	f107 031c 	add.w	r3, r7, #28
 8005104:	4619      	mov	r1, r3
 8005106:	4832      	ldr	r0, [pc, #200]	; (80051d0 <HAL_TIM_Encoder_MspInit+0x140>)
 8005108:	f002 fd62 	bl	8007bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800510c:	e057      	b.n	80051be <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM2)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005116:	d152      	bne.n	80051be <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	4b2b      	ldr	r3, [pc, #172]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6413      	str	r3, [r2, #64]	; 0x40
 8005128:	4b28      	ldr	r3, [pc, #160]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	4a23      	ldr	r2, [pc, #140]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	6313      	str	r3, [r2, #48]	; 0x30
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 800515a:	f043 0302 	orr.w	r3, r3, #2
 800515e:	6313      	str	r3, [r2, #48]	; 0x30
 8005160:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800516c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005172:	2302      	movs	r3, #2
 8005174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005176:	2300      	movs	r3, #0
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800517a:	2300      	movs	r3, #0
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800517e:	2301      	movs	r3, #1
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005182:	f107 031c 	add.w	r3, r7, #28
 8005186:	4619      	mov	r1, r3
 8005188:	4811      	ldr	r0, [pc, #68]	; (80051d0 <HAL_TIM_Encoder_MspInit+0x140>)
 800518a:	f002 fd21 	bl	8007bd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800518e:	2308      	movs	r3, #8
 8005190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005192:	2302      	movs	r3, #2
 8005194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519a:	2300      	movs	r3, #0
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800519e:	2301      	movs	r3, #1
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a2:	f107 031c 	add.w	r3, r7, #28
 80051a6:	4619      	mov	r1, r3
 80051a8:	480a      	ldr	r0, [pc, #40]	; (80051d4 <HAL_TIM_Encoder_MspInit+0x144>)
 80051aa:	f002 fd11 	bl	8007bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80051ae:	2200      	movs	r2, #0
 80051b0:	2105      	movs	r1, #5
 80051b2:	201c      	movs	r0, #28
 80051b4:	f002 f8e0 	bl	8007378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051b8:	201c      	movs	r0, #28
 80051ba:	f002 f8f9 	bl	80073b0 <HAL_NVIC_EnableIRQ>
}
 80051be:	bf00      	nop
 80051c0:	3730      	adds	r7, #48	; 0x30
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40020000 	.word	0x40020000
 80051d4:	40020400 	.word	0x40020400

080051d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <HAL_TIM_Base_MspInit+0xc0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10e      	bne.n	8005208 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	4b2b      	ldr	r3, [pc, #172]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	4a2a      	ldr	r2, [pc, #168]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	6413      	str	r3, [r2, #64]	; 0x40
 80051fa:	4b28      	ldr	r3, [pc, #160]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005206:	e042      	b.n	800528e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a24      	ldr	r2, [pc, #144]	; (80052a0 <HAL_TIM_Base_MspInit+0xc8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d116      	bne.n	8005240 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	4b21      	ldr	r3, [pc, #132]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	4a20      	ldr	r2, [pc, #128]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 800521c:	f043 0304 	orr.w	r3, r3, #4
 8005220:	6413      	str	r3, [r2, #64]	; 0x40
 8005222:	4b1e      	ldr	r3, [pc, #120]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800522e:	2200      	movs	r2, #0
 8005230:	2105      	movs	r1, #5
 8005232:	201e      	movs	r0, #30
 8005234:	f002 f8a0 	bl	8007378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005238:	201e      	movs	r0, #30
 800523a:	f002 f8b9 	bl	80073b0 <HAL_NVIC_EnableIRQ>
}
 800523e:	e026      	b.n	800528e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <HAL_TIM_Base_MspInit+0xcc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d10e      	bne.n	8005268 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	4a12      	ldr	r2, [pc, #72]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 8005254:	f043 0308 	orr.w	r3, r3, #8
 8005258:	6413      	str	r3, [r2, #64]	; 0x40
 800525a:	4b10      	ldr	r3, [pc, #64]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
}
 8005266:	e012      	b.n	800528e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a0e      	ldr	r2, [pc, #56]	; (80052a8 <HAL_TIM_Base_MspInit+0xd0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10d      	bne.n	800528e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	4a08      	ldr	r2, [pc, #32]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 800527c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005280:	6453      	str	r3, [r2, #68]	; 0x44
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_TIM_Base_MspInit+0xc4>)
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528a:	60bb      	str	r3, [r7, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
}
 800528e:	bf00      	nop
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40000400 	.word	0x40000400
 800529c:	40023800 	.word	0x40023800
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40014400 	.word	0x40014400

080052ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08a      	sub	sp, #40	; 0x28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	605a      	str	r2, [r3, #4]
 80052be:	609a      	str	r2, [r3, #8]
 80052c0:	60da      	str	r2, [r3, #12]
 80052c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a24      	ldr	r2, [pc, #144]	; (800535c <HAL_TIM_MspPostInit+0xb0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d11e      	bne.n	800530c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_TIM_MspPostInit+0xb4>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	4a22      	ldr	r2, [pc, #136]	; (8005360 <HAL_TIM_MspPostInit+0xb4>)
 80052d8:	f043 0302 	orr.w	r3, r3, #2
 80052dc:	6313      	str	r3, [r2, #48]	; 0x30
 80052de:	4b20      	ldr	r3, [pc, #128]	; (8005360 <HAL_TIM_MspPostInit+0xb4>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80052ea:	2330      	movs	r3, #48	; 0x30
 80052ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ee:	2302      	movs	r3, #2
 80052f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f6:	2300      	movs	r3, #0
 80052f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052fa:	2302      	movs	r3, #2
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052fe:	f107 0314 	add.w	r3, r7, #20
 8005302:	4619      	mov	r1, r3
 8005304:	4817      	ldr	r0, [pc, #92]	; (8005364 <HAL_TIM_MspPostInit+0xb8>)
 8005306:	f002 fc63 	bl	8007bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800530a:	e022      	b.n	8005352 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a15      	ldr	r2, [pc, #84]	; (8005368 <HAL_TIM_MspPostInit+0xbc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d11d      	bne.n	8005352 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	4b11      	ldr	r3, [pc, #68]	; (8005360 <HAL_TIM_MspPostInit+0xb4>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	4a10      	ldr	r2, [pc, #64]	; (8005360 <HAL_TIM_MspPostInit+0xb4>)
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	6313      	str	r3, [r2, #48]	; 0x30
 8005326:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <HAL_TIM_MspPostInit+0xb4>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005332:	2303      	movs	r3, #3
 8005334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005336:	2302      	movs	r3, #2
 8005338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533e:	2300      	movs	r3, #0
 8005340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005342:	2302      	movs	r3, #2
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005346:	f107 0314 	add.w	r3, r7, #20
 800534a:	4619      	mov	r1, r3
 800534c:	4807      	ldr	r0, [pc, #28]	; (800536c <HAL_TIM_MspPostInit+0xc0>)
 800534e:	f002 fc3f 	bl	8007bd0 <HAL_GPIO_Init>
}
 8005352:	bf00      	nop
 8005354:	3728      	adds	r7, #40	; 0x28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40000400 	.word	0x40000400
 8005360:	40023800 	.word	0x40023800
 8005364:	40020400 	.word	0x40020400
 8005368:	40000c00 	.word	0x40000c00
 800536c:	40020000 	.word	0x40020000

08005370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08e      	sub	sp, #56	; 0x38
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a86      	ldr	r2, [pc, #536]	; (80055a8 <HAL_UART_MspInit+0x238>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d163      	bne.n	800545a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	623b      	str	r3, [r7, #32]
 8005396:	4b85      	ldr	r3, [pc, #532]	; (80055ac <HAL_UART_MspInit+0x23c>)
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	4a84      	ldr	r2, [pc, #528]	; (80055ac <HAL_UART_MspInit+0x23c>)
 800539c:	f043 0310 	orr.w	r3, r3, #16
 80053a0:	6453      	str	r3, [r2, #68]	; 0x44
 80053a2:	4b82      	ldr	r3, [pc, #520]	; (80055ac <HAL_UART_MspInit+0x23c>)
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	623b      	str	r3, [r7, #32]
 80053ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	4b7e      	ldr	r3, [pc, #504]	; (80055ac <HAL_UART_MspInit+0x23c>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	4a7d      	ldr	r2, [pc, #500]	; (80055ac <HAL_UART_MspInit+0x23c>)
 80053b8:	f043 0302 	orr.w	r3, r3, #2
 80053bc:	6313      	str	r3, [r2, #48]	; 0x30
 80053be:	4b7b      	ldr	r3, [pc, #492]	; (80055ac <HAL_UART_MspInit+0x23c>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053ca:	23c0      	movs	r3, #192	; 0xc0
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ce:	2302      	movs	r3, #2
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d6:	2303      	movs	r3, #3
 80053d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053da:	2307      	movs	r3, #7
 80053dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e2:	4619      	mov	r1, r3
 80053e4:	4872      	ldr	r0, [pc, #456]	; (80055b0 <HAL_UART_MspInit+0x240>)
 80053e6:	f002 fbf3 	bl	8007bd0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80053ea:	4b72      	ldr	r3, [pc, #456]	; (80055b4 <HAL_UART_MspInit+0x244>)
 80053ec:	4a72      	ldr	r2, [pc, #456]	; (80055b8 <HAL_UART_MspInit+0x248>)
 80053ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80053f0:	4b70      	ldr	r3, [pc, #448]	; (80055b4 <HAL_UART_MspInit+0x244>)
 80053f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053f8:	4b6e      	ldr	r3, [pc, #440]	; (80055b4 <HAL_UART_MspInit+0x244>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053fe:	4b6d      	ldr	r3, [pc, #436]	; (80055b4 <HAL_UART_MspInit+0x244>)
 8005400:	2200      	movs	r2, #0
 8005402:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005404:	4b6b      	ldr	r3, [pc, #428]	; (80055b4 <HAL_UART_MspInit+0x244>)
 8005406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800540a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800540c:	4b69      	ldr	r3, [pc, #420]	; (80055b4 <HAL_UART_MspInit+0x244>)
 800540e:	2200      	movs	r2, #0
 8005410:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005412:	4b68      	ldr	r3, [pc, #416]	; (80055b4 <HAL_UART_MspInit+0x244>)
 8005414:	2200      	movs	r2, #0
 8005416:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005418:	4b66      	ldr	r3, [pc, #408]	; (80055b4 <HAL_UART_MspInit+0x244>)
 800541a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800541e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005420:	4b64      	ldr	r3, [pc, #400]	; (80055b4 <HAL_UART_MspInit+0x244>)
 8005422:	2200      	movs	r2, #0
 8005424:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005426:	4b63      	ldr	r3, [pc, #396]	; (80055b4 <HAL_UART_MspInit+0x244>)
 8005428:	2200      	movs	r2, #0
 800542a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800542c:	4861      	ldr	r0, [pc, #388]	; (80055b4 <HAL_UART_MspInit+0x244>)
 800542e:	f001 ffcd 	bl	80073cc <HAL_DMA_Init>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005438:	f7ff fd5c 	bl	8004ef4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a5d      	ldr	r2, [pc, #372]	; (80055b4 <HAL_UART_MspInit+0x244>)
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
 8005442:	4a5c      	ldr	r2, [pc, #368]	; (80055b4 <HAL_UART_MspInit+0x244>)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005448:	2200      	movs	r2, #0
 800544a:	2105      	movs	r1, #5
 800544c:	2025      	movs	r0, #37	; 0x25
 800544e:	f001 ff93 	bl	8007378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005452:	2025      	movs	r0, #37	; 0x25
 8005454:	f001 ffac 	bl	80073b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005458:	e0a1      	b.n	800559e <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a57      	ldr	r2, [pc, #348]	; (80055bc <HAL_UART_MspInit+0x24c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d162      	bne.n	800552a <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005464:	2300      	movs	r3, #0
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	4b50      	ldr	r3, [pc, #320]	; (80055ac <HAL_UART_MspInit+0x23c>)
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	4a4f      	ldr	r2, [pc, #316]	; (80055ac <HAL_UART_MspInit+0x23c>)
 800546e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005472:	6413      	str	r3, [r2, #64]	; 0x40
 8005474:	4b4d      	ldr	r3, [pc, #308]	; (80055ac <HAL_UART_MspInit+0x23c>)
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	4b49      	ldr	r3, [pc, #292]	; (80055ac <HAL_UART_MspInit+0x23c>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	4a48      	ldr	r2, [pc, #288]	; (80055ac <HAL_UART_MspInit+0x23c>)
 800548a:	f043 0308 	orr.w	r3, r3, #8
 800548e:	6313      	str	r3, [r2, #48]	; 0x30
 8005490:	4b46      	ldr	r3, [pc, #280]	; (80055ac <HAL_UART_MspInit+0x23c>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800549c:	2360      	movs	r3, #96	; 0x60
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a0:	2302      	movs	r3, #2
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a8:	2303      	movs	r3, #3
 80054aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054ac:	2307      	movs	r3, #7
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b4:	4619      	mov	r1, r3
 80054b6:	4842      	ldr	r0, [pc, #264]	; (80055c0 <HAL_UART_MspInit+0x250>)
 80054b8:	f002 fb8a 	bl	8007bd0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80054bc:	4b41      	ldr	r3, [pc, #260]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054be:	4a42      	ldr	r2, [pc, #264]	; (80055c8 <HAL_UART_MspInit+0x258>)
 80054c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80054c2:	4b40      	ldr	r3, [pc, #256]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054ca:	4b3e      	ldr	r3, [pc, #248]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054cc:	2240      	movs	r2, #64	; 0x40
 80054ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054d0:	4b3c      	ldr	r3, [pc, #240]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054d6:	4b3b      	ldr	r3, [pc, #236]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054de:	4b39      	ldr	r3, [pc, #228]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054e4:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80054ea:	4b36      	ldr	r3, [pc, #216]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054f0:	4b34      	ldr	r3, [pc, #208]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054f6:	4b33      	ldr	r3, [pc, #204]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80054fc:	4831      	ldr	r0, [pc, #196]	; (80055c4 <HAL_UART_MspInit+0x254>)
 80054fe:	f001 ff65 	bl	80073cc <HAL_DMA_Init>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8005508:	f7ff fcf4 	bl	8004ef4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a2d      	ldr	r2, [pc, #180]	; (80055c4 <HAL_UART_MspInit+0x254>)
 8005510:	635a      	str	r2, [r3, #52]	; 0x34
 8005512:	4a2c      	ldr	r2, [pc, #176]	; (80055c4 <HAL_UART_MspInit+0x254>)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005518:	2200      	movs	r2, #0
 800551a:	2105      	movs	r1, #5
 800551c:	2026      	movs	r0, #38	; 0x26
 800551e:	f001 ff2b 	bl	8007378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005522:	2026      	movs	r0, #38	; 0x26
 8005524:	f001 ff44 	bl	80073b0 <HAL_NVIC_EnableIRQ>
}
 8005528:	e039      	b.n	800559e <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a27      	ldr	r2, [pc, #156]	; (80055cc <HAL_UART_MspInit+0x25c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d134      	bne.n	800559e <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005534:	2300      	movs	r3, #0
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <HAL_UART_MspInit+0x23c>)
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	4a1b      	ldr	r2, [pc, #108]	; (80055ac <HAL_UART_MspInit+0x23c>)
 800553e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005542:	6413      	str	r3, [r2, #64]	; 0x40
 8005544:	4b19      	ldr	r3, [pc, #100]	; (80055ac <HAL_UART_MspInit+0x23c>)
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	4b15      	ldr	r3, [pc, #84]	; (80055ac <HAL_UART_MspInit+0x23c>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4a14      	ldr	r2, [pc, #80]	; (80055ac <HAL_UART_MspInit+0x23c>)
 800555a:	f043 0302 	orr.w	r3, r3, #2
 800555e:	6313      	str	r3, [r2, #48]	; 0x30
 8005560:	4b12      	ldr	r3, [pc, #72]	; (80055ac <HAL_UART_MspInit+0x23c>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800556c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005572:	2302      	movs	r3, #2
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557a:	2303      	movs	r3, #3
 800557c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800557e:	2307      	movs	r3, #7
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005586:	4619      	mov	r1, r3
 8005588:	4809      	ldr	r0, [pc, #36]	; (80055b0 <HAL_UART_MspInit+0x240>)
 800558a:	f002 fb21 	bl	8007bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800558e:	2200      	movs	r2, #0
 8005590:	2105      	movs	r1, #5
 8005592:	2027      	movs	r0, #39	; 0x27
 8005594:	f001 fef0 	bl	8007378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005598:	2027      	movs	r0, #39	; 0x27
 800559a:	f001 ff09 	bl	80073b0 <HAL_NVIC_EnableIRQ>
}
 800559e:	bf00      	nop
 80055a0:	3738      	adds	r7, #56	; 0x38
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40011000 	.word	0x40011000
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40020400 	.word	0x40020400
 80055b4:	20000934 	.word	0x20000934
 80055b8:	40026440 	.word	0x40026440
 80055bc:	40004400 	.word	0x40004400
 80055c0:	40020c00 	.word	0x40020c00
 80055c4:	20000994 	.word	0x20000994
 80055c8:	400260a0 	.word	0x400260a0
 80055cc:	40004800 	.word	0x40004800

080055d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08e      	sub	sp, #56	; 0x38
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	4b33      	ldr	r3, [pc, #204]	; (80056b4 <HAL_InitTick+0xe4>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	4a32      	ldr	r2, [pc, #200]	; (80056b4 <HAL_InitTick+0xe4>)
 80055ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ee:	6413      	str	r3, [r2, #64]	; 0x40
 80055f0:	4b30      	ldr	r3, [pc, #192]	; (80056b4 <HAL_InitTick+0xe4>)
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80055fc:	f107 0210 	add.w	r2, r7, #16
 8005600:	f107 0314 	add.w	r3, r7, #20
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f003 f948 	bl	800889c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d103      	bne.n	800561e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005616:	f003 f919 	bl	800884c <HAL_RCC_GetPCLK1Freq>
 800561a:	6378      	str	r0, [r7, #52]	; 0x34
 800561c:	e004      	b.n	8005628 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800561e:	f003 f915 	bl	800884c <HAL_RCC_GetPCLK1Freq>
 8005622:	4603      	mov	r3, r0
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	4a23      	ldr	r2, [pc, #140]	; (80056b8 <HAL_InitTick+0xe8>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	0c9b      	lsrs	r3, r3, #18
 8005632:	3b01      	subs	r3, #1
 8005634:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8005636:	4b21      	ldr	r3, [pc, #132]	; (80056bc <HAL_InitTick+0xec>)
 8005638:	4a21      	ldr	r2, [pc, #132]	; (80056c0 <HAL_InitTick+0xf0>)
 800563a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800563c:	4b1f      	ldr	r3, [pc, #124]	; (80056bc <HAL_InitTick+0xec>)
 800563e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005642:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8005644:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <HAL_InitTick+0xec>)
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 800564a:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <HAL_InitTick+0xec>)
 800564c:	2200      	movs	r2, #0
 800564e:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005650:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <HAL_InitTick+0xec>)
 8005652:	2200      	movs	r2, #0
 8005654:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005656:	4b19      	ldr	r3, [pc, #100]	; (80056bc <HAL_InitTick+0xec>)
 8005658:	2200      	movs	r2, #0
 800565a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 800565c:	4817      	ldr	r0, [pc, #92]	; (80056bc <HAL_InitTick+0xec>)
 800565e:	f003 f94f 	bl	8008900 <HAL_TIM_Base_Init>
 8005662:	4603      	mov	r3, r0
 8005664:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005668:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800566c:	2b00      	cmp	r3, #0
 800566e:	d11b      	bne.n	80056a8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 8005670:	4812      	ldr	r0, [pc, #72]	; (80056bc <HAL_InitTick+0xec>)
 8005672:	f003 f995 	bl	80089a0 <HAL_TIM_Base_Start_IT>
 8005676:	4603      	mov	r3, r0
 8005678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800567c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005680:	2b00      	cmp	r3, #0
 8005682:	d111      	bne.n	80056a8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005684:	202c      	movs	r0, #44	; 0x2c
 8005686:	f001 fe93 	bl	80073b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b0f      	cmp	r3, #15
 800568e:	d808      	bhi.n	80056a2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8005690:	2200      	movs	r2, #0
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	202c      	movs	r0, #44	; 0x2c
 8005696:	f001 fe6f 	bl	8007378 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800569a:	4a0a      	ldr	r2, [pc, #40]	; (80056c4 <HAL_InitTick+0xf4>)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e002      	b.n	80056a8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80056a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3738      	adds	r7, #56	; 0x38
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40023800 	.word	0x40023800
 80056b8:	431bde83 	.word	0x431bde83
 80056bc:	200012f8 	.word	0x200012f8
 80056c0:	40001c00 	.word	0x40001c00
 80056c4:	20000004 	.word	0x20000004

080056c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056cc:	e7fe      	b.n	80056cc <NMI_Handler+0x4>

080056ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056ce:	b480      	push	{r7}
 80056d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056d2:	e7fe      	b.n	80056d2 <HardFault_Handler+0x4>

080056d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056d8:	e7fe      	b.n	80056d8 <MemManage_Handler+0x4>

080056da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056da:	b480      	push	{r7}
 80056dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056de:	e7fe      	b.n	80056de <BusFault_Handler+0x4>

080056e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056e4:	e7fe      	b.n	80056e4 <UsageFault_Handler+0x4>

080056e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056e6:	b480      	push	{r7}
 80056e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056ea:	bf00      	nop
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80056f8:	4802      	ldr	r0, [pc, #8]	; (8005704 <DMA1_Stream6_IRQHandler+0x10>)
 80056fa:	f001 ffff 	bl	80076fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80056fe:	bf00      	nop
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000994 	.word	0x20000994

08005708 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800570c:	4802      	ldr	r0, [pc, #8]	; (8005718 <ADC_IRQHandler+0x10>)
 800570e:	f000 fb6d 	bl	8005dec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000648 	.word	0x20000648

0800571c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005720:	4802      	ldr	r0, [pc, #8]	; (800572c <CAN1_RX0_IRQHandler+0x10>)
 8005722:	f001 fb56 	bl	8006dd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005726:	bf00      	nop
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000690 	.word	0x20000690

08005730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005734:	4802      	ldr	r0, [pc, #8]	; (8005740 <TIM2_IRQHandler+0x10>)
 8005736:	f003 fbf9 	bl	8008f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000700 	.word	0x20000700

08005744 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005748:	4802      	ldr	r0, [pc, #8]	; (8005754 <TIM4_IRQHandler+0x10>)
 800574a:	f003 fbef 	bl	8008f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000790 	.word	0x20000790

08005758 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800575c:	4802      	ldr	r0, [pc, #8]	; (8005768 <USART1_IRQHandler+0x10>)
 800575e:	f004 fbc3 	bl	8009ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000868 	.word	0x20000868

0800576c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005770:	4802      	ldr	r0, [pc, #8]	; (800577c <USART2_IRQHandler+0x10>)
 8005772:	f004 fbb9 	bl	8009ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005776:	bf00      	nop
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	200008ac 	.word	0x200008ac

08005780 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005784:	4802      	ldr	r0, [pc, #8]	; (8005790 <USART3_IRQHandler+0x10>)
 8005786:	f004 fbaf 	bl	8009ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800578a:	bf00      	nop
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200008f0 	.word	0x200008f0

08005794 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8005798:	4802      	ldr	r0, [pc, #8]	; (80057a4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800579a:	f003 fbc7 	bl	8008f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800579e:	bf00      	nop
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200012f8 	.word	0x200012f8

080057a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80057ac:	4802      	ldr	r0, [pc, #8]	; (80057b8 <DMA2_Stream2_IRQHandler+0x10>)
 80057ae:	f001 ffa5 	bl	80076fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80057b2:	bf00      	nop
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000934 	.word	0x20000934

080057bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return 1;
 80057c0:	2301      	movs	r3, #1
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <_kill>:

int _kill(int pid, int sig)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80057d6:	f008 f85d 	bl	800d894 <__errno>
 80057da:	4603      	mov	r3, r0
 80057dc:	2216      	movs	r2, #22
 80057de:	601a      	str	r2, [r3, #0]
  return -1;
 80057e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <_exit>:

void _exit (int status)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80057f4:	f04f 31ff 	mov.w	r1, #4294967295
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff ffe7 	bl	80057cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80057fe:	e7fe      	b.n	80057fe <_exit+0x12>

08005800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e00a      	b.n	8005828 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005812:	f3af 8000 	nop.w
 8005816:	4601      	mov	r1, r0
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	60ba      	str	r2, [r7, #8]
 800581e:	b2ca      	uxtb	r2, r1
 8005820:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	3301      	adds	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	dbf0      	blt.n	8005812 <_read+0x12>
  }

  return len;
 8005830:	687b      	ldr	r3, [r7, #4]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b086      	sub	sp, #24
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e009      	b.n	8005860 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	60ba      	str	r2, [r7, #8]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	3301      	adds	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	429a      	cmp	r2, r3
 8005866:	dbf1      	blt.n	800584c <_write+0x12>
  }
  return len;
 8005868:	687b      	ldr	r3, [r7, #4]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <_close>:

int _close(int file)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800589a:	605a      	str	r2, [r3, #4]
  return 0;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <_isatty>:

int _isatty(int file)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80058b2:	2301      	movs	r3, #1
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058e4:	4a14      	ldr	r2, [pc, #80]	; (8005938 <_sbrk+0x5c>)
 80058e6:	4b15      	ldr	r3, [pc, #84]	; (800593c <_sbrk+0x60>)
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058f0:	4b13      	ldr	r3, [pc, #76]	; (8005940 <_sbrk+0x64>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d102      	bne.n	80058fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <_sbrk+0x64>)
 80058fa:	4a12      	ldr	r2, [pc, #72]	; (8005944 <_sbrk+0x68>)
 80058fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058fe:	4b10      	ldr	r3, [pc, #64]	; (8005940 <_sbrk+0x64>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4413      	add	r3, r2
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	429a      	cmp	r2, r3
 800590a:	d207      	bcs.n	800591c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800590c:	f007 ffc2 	bl	800d894 <__errno>
 8005910:	4603      	mov	r3, r0
 8005912:	220c      	movs	r2, #12
 8005914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005916:	f04f 33ff 	mov.w	r3, #4294967295
 800591a:	e009      	b.n	8005930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800591c:	4b08      	ldr	r3, [pc, #32]	; (8005940 <_sbrk+0x64>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005922:	4b07      	ldr	r3, [pc, #28]	; (8005940 <_sbrk+0x64>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	4a05      	ldr	r2, [pc, #20]	; (8005940 <_sbrk+0x64>)
 800592c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800592e:	68fb      	ldr	r3, [r7, #12]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20020000 	.word	0x20020000
 800593c:	00000400 	.word	0x00000400
 8005940:	20001340 	.word	0x20001340
 8005944:	200051e8 	.word	0x200051e8

08005948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <SystemInit+0x20>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	4a05      	ldr	r2, [pc, #20]	; (8005968 <SystemInit+0x20>)
 8005954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800595c:	bf00      	nop
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	e000ed00 	.word	0xe000ed00

0800596c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800596c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005970:	480d      	ldr	r0, [pc, #52]	; (80059a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005972:	490e      	ldr	r1, [pc, #56]	; (80059ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005974:	4a0e      	ldr	r2, [pc, #56]	; (80059b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005978:	e002      	b.n	8005980 <LoopCopyDataInit>

0800597a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800597a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800597c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800597e:	3304      	adds	r3, #4

08005980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005984:	d3f9      	bcc.n	800597a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005986:	4a0b      	ldr	r2, [pc, #44]	; (80059b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005988:	4c0b      	ldr	r4, [pc, #44]	; (80059b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800598a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800598c:	e001      	b.n	8005992 <LoopFillZerobss>

0800598e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800598e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005990:	3204      	adds	r2, #4

08005992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005994:	d3fb      	bcc.n	800598e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005996:	f7ff ffd7 	bl	8005948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800599a:	f007 ff81 	bl	800d8a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800599e:	f7fe f9c7 	bl	8003d30 <main>
  bx  lr    
 80059a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80059a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80059a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059ac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80059b0:	080124f8 	.word	0x080124f8
  ldr r2, =_sbss
 80059b4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80059b8:	200051e8 	.word	0x200051e8

080059bc <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059bc:	e7fe      	b.n	80059bc <CAN1_RX1_IRQHandler>
	...

080059c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80059c4:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <HAL_Init+0x40>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a0d      	ldr	r2, [pc, #52]	; (8005a00 <HAL_Init+0x40>)
 80059ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <HAL_Init+0x40>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a0a      	ldr	r2, [pc, #40]	; (8005a00 <HAL_Init+0x40>)
 80059d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059dc:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <HAL_Init+0x40>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a07      	ldr	r2, [pc, #28]	; (8005a00 <HAL_Init+0x40>)
 80059e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059e8:	2003      	movs	r0, #3
 80059ea:	f001 fcba 	bl	8007362 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059ee:	200f      	movs	r0, #15
 80059f0:	f7ff fdee 	bl	80055d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059f4:	f7ff fa84 	bl	8004f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40023c00 	.word	0x40023c00

08005a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_IncTick+0x20>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <HAL_IncTick+0x24>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4413      	add	r3, r2
 8005a14:	4a04      	ldr	r2, [pc, #16]	; (8005a28 <HAL_IncTick+0x24>)
 8005a16:	6013      	str	r3, [r2, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000008 	.word	0x20000008
 8005a28:	20001344 	.word	0x20001344

08005a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <HAL_GetTick+0x14>)
 8005a32:	681b      	ldr	r3, [r3, #0]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20001344 	.word	0x20001344

08005a44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e033      	b.n	8005ac2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fa78 	bl	8004f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d118      	bne.n	8005ab4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a8a:	f023 0302 	bic.w	r3, r3, #2
 8005a8e:	f043 0202 	orr.w	r2, r3, #2
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fc06 	bl	80062a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	f043 0201 	orr.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ab2:	e001      	b.n	8005ab8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_ADC_Start+0x1a>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e0b2      	b.n	8005c4c <HAL_ADC_Start+0x180>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d018      	beq.n	8005b2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b0c:	4b52      	ldr	r3, [pc, #328]	; (8005c58 <HAL_ADC_Start+0x18c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a52      	ldr	r2, [pc, #328]	; (8005c5c <HAL_ADC_Start+0x190>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	0c9a      	lsrs	r2, r3, #18
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005b20:	e002      	b.n	8005b28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f9      	bne.n	8005b22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d17a      	bne.n	8005c32 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7a:	d106      	bne.n	8005b8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b80:	f023 0206 	bic.w	r2, r3, #6
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	645a      	str	r2, [r3, #68]	; 0x44
 8005b88:	e002      	b.n	8005b90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b98:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <HAL_ADC_Start+0x194>)
 8005b9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005ba4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d12a      	bne.n	8005c08 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2b      	ldr	r2, [pc, #172]	; (8005c64 <HAL_ADC_Start+0x198>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d015      	beq.n	8005be8 <HAL_ADC_Start+0x11c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <HAL_ADC_Start+0x19c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d105      	bne.n	8005bd2 <HAL_ADC_Start+0x106>
 8005bc6:	4b26      	ldr	r3, [pc, #152]	; (8005c60 <HAL_ADC_Start+0x194>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <HAL_ADC_Start+0x1a0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d136      	bne.n	8005c4a <HAL_ADC_Start+0x17e>
 8005bdc:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <HAL_ADC_Start+0x194>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d130      	bne.n	8005c4a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d129      	bne.n	8005c4a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c04:	609a      	str	r2, [r3, #8]
 8005c06:	e020      	b.n	8005c4a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <HAL_ADC_Start+0x198>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d11b      	bne.n	8005c4a <HAL_ADC_Start+0x17e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d114      	bne.n	8005c4a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c2e:	609a      	str	r2, [r3, #8]
 8005c30:	e00b      	b.n	8005c4a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f043 0210 	orr.w	r2, r3, #16
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	f043 0201 	orr.w	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	20000000 	.word	0x20000000
 8005c5c:	431bde83 	.word	0x431bde83
 8005c60:	40012300 	.word	0x40012300
 8005c64:	40012000 	.word	0x40012000
 8005c68:	40012100 	.word	0x40012100
 8005c6c:	40012200 	.word	0x40012200

08005c70 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_ADC_Stop+0x16>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e021      	b.n	8005cca <HAL_ADC_Stop+0x5a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0201 	bic.w	r2, r2, #1
 8005c9c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	f043 0201 	orr.w	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf2:	d113      	bne.n	8005d1c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d02:	d10b      	bne.n	8005d1c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e063      	b.n	8005de4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005d1c:	f7ff fe86 	bl	8005a2c <HAL_GetTick>
 8005d20:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d22:	e021      	b.n	8005d68 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2a:	d01d      	beq.n	8005d68 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_ADC_PollForConversion+0x6c>
 8005d32:	f7ff fe7b 	bl	8005a2c <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d212      	bcs.n	8005d68 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d00b      	beq.n	8005d68 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	f043 0204 	orr.w	r2, r3, #4
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e03d      	b.n	8005de4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d1d6      	bne.n	8005d24 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f06f 0212 	mvn.w	r2, #18
 8005d7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d123      	bne.n	8005de2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11f      	bne.n	8005de2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d111      	bne.n	8005de2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d105      	bne.n	8005de2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f043 0201 	orr.w	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d049      	beq.n	8005eb6 <HAL_ADC_IRQHandler+0xca>
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d046      	beq.n	8005eb6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d105      	bne.n	8005e40 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d12b      	bne.n	8005ea6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d127      	bne.n	8005ea6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d006      	beq.n	8005e72 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d119      	bne.n	8005ea6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0220 	bic.w	r2, r2, #32
 8005e80:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d105      	bne.n	8005ea6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f043 0201 	orr.w	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8bd 	bl	8006026 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0212 	mvn.w	r2, #18
 8005eb4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d057      	beq.n	8005f7c <HAL_ADC_IRQHandler+0x190>
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d054      	beq.n	8005f7c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d105      	bne.n	8005eea <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d139      	bne.n	8005f6c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d006      	beq.n	8005f14 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d12b      	bne.n	8005f6c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d124      	bne.n	8005f6c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11d      	bne.n	8005f6c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d119      	bne.n	8005f6c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fa97 	bl	80064a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f06f 020c 	mvn.w	r2, #12
 8005f7a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d017      	beq.n	8005fc2 <HAL_ADC_IRQHandler+0x1d6>
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d014      	beq.n	8005fc2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d10d      	bne.n	8005fc2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f841 	bl	800603a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0201 	mvn.w	r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fd0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d015      	beq.n	8006004 <HAL_ADC_IRQHandler+0x218>
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d012      	beq.n	8006004 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f043 0202 	orr.w	r2, r3, #2
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f06f 0220 	mvn.w	r2, #32
 8005ff2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f82a 	bl	800604e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f06f 0220 	mvn.w	r2, #32
 8006002:	601a      	str	r2, [r3, #0]
  }
}
 8006004:	bf00      	nop
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_ADC_ConfigChannel+0x1c>
 800607c:	2302      	movs	r3, #2
 800607e:	e105      	b.n	800628c <HAL_ADC_ConfigChannel+0x228>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b09      	cmp	r3, #9
 800608e:	d925      	bls.n	80060dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68d9      	ldr	r1, [r3, #12]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	4613      	mov	r3, r2
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	4413      	add	r3, r2
 80060a4:	3b1e      	subs	r3, #30
 80060a6:	2207      	movs	r2, #7
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	43da      	mvns	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	400a      	ands	r2, r1
 80060b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68d9      	ldr	r1, [r3, #12]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	4618      	mov	r0, r3
 80060c8:	4603      	mov	r3, r0
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	4403      	add	r3, r0
 80060ce:	3b1e      	subs	r3, #30
 80060d0:	409a      	lsls	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	60da      	str	r2, [r3, #12]
 80060da:	e022      	b.n	8006122 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6919      	ldr	r1, [r3, #16]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	4613      	mov	r3, r2
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	4413      	add	r3, r2
 80060f0:	2207      	movs	r2, #7
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	43da      	mvns	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	400a      	ands	r2, r1
 80060fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6919      	ldr	r1, [r3, #16]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	4618      	mov	r0, r3
 8006112:	4603      	mov	r3, r0
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	4403      	add	r3, r0
 8006118:	409a      	lsls	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	2b06      	cmp	r3, #6
 8006128:	d824      	bhi.n	8006174 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	3b05      	subs	r3, #5
 800613c:	221f      	movs	r2, #31
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	43da      	mvns	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	400a      	ands	r2, r1
 800614a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	4618      	mov	r0, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	3b05      	subs	r3, #5
 8006166:	fa00 f203 	lsl.w	r2, r0, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	635a      	str	r2, [r3, #52]	; 0x34
 8006172:	e04c      	b.n	800620e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b0c      	cmp	r3, #12
 800617a:	d824      	bhi.n	80061c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	3b23      	subs	r3, #35	; 0x23
 800618e:	221f      	movs	r2, #31
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	43da      	mvns	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	400a      	ands	r2, r1
 800619c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	4618      	mov	r0, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	3b23      	subs	r3, #35	; 0x23
 80061b8:	fa00 f203 	lsl.w	r2, r0, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
 80061c4:	e023      	b.n	800620e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	3b41      	subs	r3, #65	; 0x41
 80061d8:	221f      	movs	r2, #31
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43da      	mvns	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	400a      	ands	r2, r1
 80061e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	4618      	mov	r0, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	3b41      	subs	r3, #65	; 0x41
 8006202:	fa00 f203 	lsl.w	r2, r0, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800620e:	4b22      	ldr	r3, [pc, #136]	; (8006298 <HAL_ADC_ConfigChannel+0x234>)
 8006210:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a21      	ldr	r2, [pc, #132]	; (800629c <HAL_ADC_ConfigChannel+0x238>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d109      	bne.n	8006230 <HAL_ADC_ConfigChannel+0x1cc>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b12      	cmp	r3, #18
 8006222:	d105      	bne.n	8006230 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a19      	ldr	r2, [pc, #100]	; (800629c <HAL_ADC_ConfigChannel+0x238>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d123      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x21e>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b10      	cmp	r3, #16
 8006240:	d003      	beq.n	800624a <HAL_ADC_ConfigChannel+0x1e6>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b11      	cmp	r3, #17
 8006248:	d11b      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b10      	cmp	r3, #16
 800625c:	d111      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800625e:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <HAL_ADC_ConfigChannel+0x23c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a10      	ldr	r2, [pc, #64]	; (80062a4 <HAL_ADC_ConfigChannel+0x240>)
 8006264:	fba2 2303 	umull	r2, r3, r2, r3
 8006268:	0c9a      	lsrs	r2, r3, #18
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006274:	e002      	b.n	800627c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	3b01      	subs	r3, #1
 800627a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f9      	bne.n	8006276 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40012300 	.word	0x40012300
 800629c:	40012000 	.word	0x40012000
 80062a0:	20000000 	.word	0x20000000
 80062a4:	431bde83 	.word	0x431bde83

080062a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062b0:	4b79      	ldr	r3, [pc, #484]	; (8006498 <ADC_Init+0x1f0>)
 80062b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	431a      	orrs	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6859      	ldr	r1, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	021a      	lsls	r2, r3, #8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006300:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6859      	ldr	r1, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6899      	ldr	r1, [r3, #8]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	4a58      	ldr	r2, [pc, #352]	; (800649c <ADC_Init+0x1f4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d022      	beq.n	8006386 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800634e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6899      	ldr	r1, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6899      	ldr	r1, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	609a      	str	r2, [r3, #8]
 8006384:	e00f      	b.n	80063a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006394:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0202 	bic.w	r2, r2, #2
 80063b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6899      	ldr	r1, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	7e1b      	ldrb	r3, [r3, #24]
 80063c0:	005a      	lsls	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01b      	beq.n	800640c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80063f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6859      	ldr	r1, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	3b01      	subs	r3, #1
 8006400:	035a      	lsls	r2, r3, #13
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	605a      	str	r2, [r3, #4]
 800640a:	e007      	b.n	800641c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800641a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	3b01      	subs	r3, #1
 8006438:	051a      	lsls	r2, r3, #20
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006450:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6899      	ldr	r1, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800645e:	025a      	lsls	r2, r3, #9
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6899      	ldr	r1, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	029a      	lsls	r2, r3, #10
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	609a      	str	r2, [r3, #8]
}
 800648c:	bf00      	nop
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	40012300 	.word	0x40012300
 800649c:	0f000001 	.word	0x0f000001

080064a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e0ed      	b.n	80066a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fe fd8c 	bl	8004ff0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064e8:	f7ff faa0 	bl	8005a2c <HAL_GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80064ee:	e012      	b.n	8006516 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80064f0:	f7ff fa9c 	bl	8005a2c <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b0a      	cmp	r3, #10
 80064fc:	d90b      	bls.n	8006516 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2205      	movs	r2, #5
 800650e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e0c5      	b.n	80066a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0e5      	beq.n	80064f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0202 	bic.w	r2, r2, #2
 8006532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006534:	f7ff fa7a 	bl	8005a2c <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800653a:	e012      	b.n	8006562 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800653c:	f7ff fa76 	bl	8005a2c <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b0a      	cmp	r3, #10
 8006548:	d90b      	bls.n	8006562 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2205      	movs	r2, #5
 800655a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e09f      	b.n	80066a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e5      	bne.n	800653c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7e1b      	ldrb	r3, [r3, #24]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d108      	bne.n	800658a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e007      	b.n	800659a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006598:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	7e5b      	ldrb	r3, [r3, #25]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d108      	bne.n	80065b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e007      	b.n	80065c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	7e9b      	ldrb	r3, [r3, #26]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d108      	bne.n	80065de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0220 	orr.w	r2, r2, #32
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	e007      	b.n	80065ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0220 	bic.w	r2, r2, #32
 80065ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	7edb      	ldrb	r3, [r3, #27]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d108      	bne.n	8006608 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0210 	bic.w	r2, r2, #16
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e007      	b.n	8006618 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0210 	orr.w	r2, r2, #16
 8006616:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	7f1b      	ldrb	r3, [r3, #28]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d108      	bne.n	8006632 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0208 	orr.w	r2, r2, #8
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e007      	b.n	8006642 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0208 	bic.w	r2, r2, #8
 8006640:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	7f5b      	ldrb	r3, [r3, #29]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d108      	bne.n	800665c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0204 	orr.w	r2, r2, #4
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	e007      	b.n	800666c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0204 	bic.w	r2, r2, #4
 800666a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	431a      	orrs	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	ea42 0103 	orr.w	r1, r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	1e5a      	subs	r2, r3, #1
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d003      	beq.n	80066d2 <HAL_CAN_ConfigFilter+0x26>
 80066ca:	7cfb      	ldrb	r3, [r7, #19]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	f040 80be 	bne.w	800684e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80066d2:	4b65      	ldr	r3, [pc, #404]	; (8006868 <HAL_CAN_ConfigFilter+0x1bc>)
 80066d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066dc:	f043 0201 	orr.w	r2, r3, #1
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	431a      	orrs	r2, r3
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	2201      	movs	r2, #1
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	43db      	mvns	r3, r3
 8006724:	401a      	ands	r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d123      	bne.n	800677c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	43db      	mvns	r3, r3
 800673e:	401a      	ands	r2, r3
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006756:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	3248      	adds	r2, #72	; 0x48
 800675c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006770:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006772:	6979      	ldr	r1, [r7, #20]
 8006774:	3348      	adds	r3, #72	; 0x48
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	440b      	add	r3, r1
 800677a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d122      	bne.n	80067ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	431a      	orrs	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80067a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	3248      	adds	r2, #72	; 0x48
 80067aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80067be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80067c0:	6979      	ldr	r1, [r7, #20]
 80067c2:	3348      	adds	r3, #72	; 0x48
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	440b      	add	r3, r1
 80067c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	43db      	mvns	r3, r3
 80067dc:	401a      	ands	r2, r3
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80067e4:	e007      	b.n	80067f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d109      	bne.n	8006812 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	43db      	mvns	r3, r3
 8006808:	401a      	ands	r2, r3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006810:	e007      	b.n	8006822 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	431a      	orrs	r2, r3
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d107      	bne.n	800683a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	431a      	orrs	r2, r3
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006840:	f023 0201 	bic.w	r2, r3, #1
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e006      	b.n	800685c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
  }
}
 800685c:	4618      	mov	r0, r3
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40006400 	.word	0x40006400

0800686c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b01      	cmp	r3, #1
 800687e:	d12e      	bne.n	80068de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006898:	f7ff f8c8 	bl	8005a2c <HAL_GetTick>
 800689c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800689e:	e012      	b.n	80068c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80068a0:	f7ff f8c4 	bl	8005a2c <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b0a      	cmp	r3, #10
 80068ac:	d90b      	bls.n	80068c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2205      	movs	r2, #5
 80068be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e012      	b.n	80068ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e5      	bne.n	80068a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	e006      	b.n	80068ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
  }
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b089      	sub	sp, #36	; 0x24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006908:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006912:	7ffb      	ldrb	r3, [r7, #31]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d003      	beq.n	8006920 <HAL_CAN_AddTxMessage+0x2c>
 8006918:	7ffb      	ldrb	r3, [r7, #31]
 800691a:	2b02      	cmp	r3, #2
 800691c:	f040 80b8 	bne.w	8006a90 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006930:	2b00      	cmp	r3, #0
 8006932:	d105      	bne.n	8006940 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 80a0 	beq.w	8006a80 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	0e1b      	lsrs	r3, r3, #24
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d907      	bls.n	8006960 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e09e      	b.n	8006a9e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006960:	2201      	movs	r2, #1
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	409a      	lsls	r2, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10d      	bne.n	800698e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800697c:	68f9      	ldr	r1, [r7, #12]
 800697e:	6809      	ldr	r1, [r1, #0]
 8006980:	431a      	orrs	r2, r3
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	3318      	adds	r3, #24
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	440b      	add	r3, r1
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e00f      	b.n	80069ae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006998:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80069a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3318      	adds	r3, #24
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	440b      	add	r3, r1
 80069ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6819      	ldr	r1, [r3, #0]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	3318      	adds	r3, #24
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	440b      	add	r3, r1
 80069be:	3304      	adds	r3, #4
 80069c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	7d1b      	ldrb	r3, [r3, #20]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d111      	bne.n	80069ee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	3318      	adds	r3, #24
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	4413      	add	r3, r2
 80069d6:	3304      	adds	r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	6811      	ldr	r1, [r2, #0]
 80069de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	3318      	adds	r3, #24
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	440b      	add	r3, r1
 80069ea:	3304      	adds	r3, #4
 80069ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3307      	adds	r3, #7
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	061a      	lsls	r2, r3, #24
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3306      	adds	r3, #6
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	041b      	lsls	r3, r3, #16
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3305      	adds	r3, #5
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	3204      	adds	r2, #4
 8006a0e:	7812      	ldrb	r2, [r2, #0]
 8006a10:	4610      	mov	r0, r2
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	6811      	ldr	r1, [r2, #0]
 8006a16:	ea43 0200 	orr.w	r2, r3, r0
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	440b      	add	r3, r1
 8006a20:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006a24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3303      	adds	r3, #3
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	061a      	lsls	r2, r3, #24
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3302      	adds	r3, #2
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	041b      	lsls	r3, r3, #16
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	4313      	orrs	r3, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	7812      	ldrb	r2, [r2, #0]
 8006a46:	4610      	mov	r0, r2
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	6811      	ldr	r1, [r2, #0]
 8006a4c:	ea43 0200 	orr.w	r2, r3, r0
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	440b      	add	r3, r1
 8006a56:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006a5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	3318      	adds	r3, #24
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	4413      	add	r3, r2
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	6811      	ldr	r1, [r2, #0]
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	3318      	adds	r3, #24
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	440b      	add	r3, r1
 8006a7a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e00e      	b.n	8006a9e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e006      	b.n	8006a9e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3724      	adds	r7, #36	; 0x24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006abc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d002      	beq.n	8006aca <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006ac4:	7afb      	ldrb	r3, [r7, #11]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d11d      	bne.n	8006b06 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3301      	adds	r3, #1
 8006af0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3301      	adds	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006b06:	68fb      	ldr	r3, [r7, #12]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b28:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d003      	beq.n	8006b38 <HAL_CAN_GetRxMessage+0x24>
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	f040 80f3 	bne.w	8006d1e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10e      	bne.n	8006b5c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d116      	bne.n	8006b7a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e0e7      	b.n	8006d2c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d107      	bne.n	8006b7a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e0d8      	b.n	8006d2c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	331b      	adds	r3, #27
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	4413      	add	r3, r2
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0204 	and.w	r2, r3, #4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10c      	bne.n	8006bb2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	331b      	adds	r3, #27
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	4413      	add	r3, r2
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	0d5b      	lsrs	r3, r3, #21
 8006ba8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	e00b      	b.n	8006bca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	331b      	adds	r3, #27
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	4413      	add	r3, r2
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	08db      	lsrs	r3, r3, #3
 8006bc2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	331b      	adds	r3, #27
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	4413      	add	r3, r2
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0202 	and.w	r2, r3, #2
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	331b      	adds	r3, #27
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	4413      	add	r3, r2
 8006bec:	3304      	adds	r3, #4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 020f 	and.w	r2, r3, #15
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	331b      	adds	r3, #27
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	4413      	add	r3, r2
 8006c04:	3304      	adds	r3, #4
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	0a1b      	lsrs	r3, r3, #8
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	331b      	adds	r3, #27
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	4413      	add	r3, r2
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	0c1b      	lsrs	r3, r3, #16
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	0a1a      	lsrs	r2, r3, #8
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	0c1a      	lsrs	r2, r3, #16
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	0e1a      	lsrs	r2, r3, #24
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	3303      	adds	r3, #3
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	0a1a      	lsrs	r2, r3, #8
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	3305      	adds	r3, #5
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	0c1a      	lsrs	r2, r3, #16
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	3306      	adds	r3, #6
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	0e1a      	lsrs	r2, r3, #24
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	3307      	adds	r3, #7
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d108      	bne.n	8006d0a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0220 	orr.w	r2, r2, #32
 8006d06:	60da      	str	r2, [r3, #12]
 8006d08:	e007      	b.n	8006d1a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0220 	orr.w	r2, r2, #32
 8006d18:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e006      	b.n	8006d2c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
  }
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d48:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d002      	beq.n	8006d56 <HAL_CAN_ActivateNotification+0x1e>
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d109      	bne.n	8006d6a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6959      	ldr	r1, [r3, #20]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e006      	b.n	8006d78 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
  }
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d94:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d002      	beq.n	8006da2 <HAL_CAN_DeactivateNotification+0x1e>
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d10a      	bne.n	8006db8 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6959      	ldr	r1, [r3, #20]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	43da      	mvns	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	400a      	ands	r2, r1
 8006db2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	e006      	b.n	8006dc6 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
  }
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b08a      	sub	sp, #40	; 0x28
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d07c      	beq.n	8006f12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d023      	beq.n	8006e6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2201      	movs	r2, #1
 8006e28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f983 	bl	8007140 <HAL_CAN_TxMailbox0CompleteCallback>
 8006e3a:	e016      	b.n	8006e6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4e:	e00c      	b.n	8006e6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
 8006e62:	e002      	b.n	8006e6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f989 	bl	800717c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d024      	beq.n	8006ebe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f963 	bl	8007154 <HAL_CAN_TxMailbox1CompleteCallback>
 8006e8e:	e016      	b.n	8006ebe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea2:	e00c      	b.n	8006ebe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb6:	e002      	b.n	8006ebe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f969 	bl	8007190 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d024      	beq.n	8006f12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ed0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f943 	bl	8007168 <HAL_CAN_TxMailbox2CompleteCallback>
 8006ee2:	e016      	b.n	8006f12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef6:	e00c      	b.n	8006f12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0a:	e002      	b.n	8006f12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f949 	bl	80071a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00c      	beq.n	8006f36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2210      	movs	r2, #16
 8006f34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d006      	beq.n	8006f58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2208      	movs	r2, #8
 8006f50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f930 	bl	80071b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7fb fe17 	bl	8002ba4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00c      	beq.n	8006f9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2210      	movs	r2, #16
 8006f98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d006      	beq.n	8006fbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2208      	movs	r2, #8
 8006fb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f908 	bl	80071cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7fb fe13 	bl	8002c00 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00b      	beq.n	8006ffc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d006      	beq.n	8006ffc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2210      	movs	r2, #16
 8006ff4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f8f2 	bl	80071e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d006      	beq.n	800701e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2208      	movs	r2, #8
 8007016:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f8eb 	bl	80071f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d07b      	beq.n	8007120 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d072      	beq.n	8007118 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d008      	beq.n	800704e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007054:	2b00      	cmp	r3, #0
 8007056:	d008      	beq.n	800706a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	f043 0302 	orr.w	r3, r3, #2
 8007068:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007070:	2b00      	cmp	r3, #0
 8007072:	d008      	beq.n	8007086 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	f043 0304 	orr.w	r3, r3, #4
 8007084:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800708c:	2b00      	cmp	r3, #0
 800708e:	d043      	beq.n	8007118 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007096:	2b00      	cmp	r3, #0
 8007098:	d03e      	beq.n	8007118 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070a0:	2b60      	cmp	r3, #96	; 0x60
 80070a2:	d02b      	beq.n	80070fc <HAL_CAN_IRQHandler+0x32a>
 80070a4:	2b60      	cmp	r3, #96	; 0x60
 80070a6:	d82e      	bhi.n	8007106 <HAL_CAN_IRQHandler+0x334>
 80070a8:	2b50      	cmp	r3, #80	; 0x50
 80070aa:	d022      	beq.n	80070f2 <HAL_CAN_IRQHandler+0x320>
 80070ac:	2b50      	cmp	r3, #80	; 0x50
 80070ae:	d82a      	bhi.n	8007106 <HAL_CAN_IRQHandler+0x334>
 80070b0:	2b40      	cmp	r3, #64	; 0x40
 80070b2:	d019      	beq.n	80070e8 <HAL_CAN_IRQHandler+0x316>
 80070b4:	2b40      	cmp	r3, #64	; 0x40
 80070b6:	d826      	bhi.n	8007106 <HAL_CAN_IRQHandler+0x334>
 80070b8:	2b30      	cmp	r3, #48	; 0x30
 80070ba:	d010      	beq.n	80070de <HAL_CAN_IRQHandler+0x30c>
 80070bc:	2b30      	cmp	r3, #48	; 0x30
 80070be:	d822      	bhi.n	8007106 <HAL_CAN_IRQHandler+0x334>
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d002      	beq.n	80070ca <HAL_CAN_IRQHandler+0x2f8>
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d005      	beq.n	80070d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80070c8:	e01d      	b.n	8007106 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	f043 0308 	orr.w	r3, r3, #8
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80070d2:	e019      	b.n	8007108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	f043 0310 	orr.w	r3, r3, #16
 80070da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80070dc:	e014      	b.n	8007108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	f043 0320 	orr.w	r3, r3, #32
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80070e6:	e00f      	b.n	8007108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80070f0:	e00a      	b.n	8007108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80070fa:	e005      	b.n	8007108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007104:	e000      	b.n	8007108 <HAL_CAN_IRQHandler+0x336>
            break;
 8007106:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	699a      	ldr	r2, [r3, #24]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007116:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2204      	movs	r2, #4
 800711e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	2b00      	cmp	r3, #0
 8007124:	d008      	beq.n	8007138 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fb fe5e 	bl	8002df4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007138:	bf00      	nop
 800713a:	3728      	adds	r7, #40	; 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007218:	4b0c      	ldr	r3, [pc, #48]	; (800724c <__NVIC_SetPriorityGrouping+0x44>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007224:	4013      	ands	r3, r2
 8007226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800723a:	4a04      	ldr	r2, [pc, #16]	; (800724c <__NVIC_SetPriorityGrouping+0x44>)
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	60d3      	str	r3, [r2, #12]
}
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	e000ed00 	.word	0xe000ed00

08007250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007254:	4b04      	ldr	r3, [pc, #16]	; (8007268 <__NVIC_GetPriorityGrouping+0x18>)
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	0a1b      	lsrs	r3, r3, #8
 800725a:	f003 0307 	and.w	r3, r3, #7
}
 800725e:	4618      	mov	r0, r3
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	e000ed00 	.word	0xe000ed00

0800726c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800727a:	2b00      	cmp	r3, #0
 800727c:	db0b      	blt.n	8007296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	f003 021f 	and.w	r2, r3, #31
 8007284:	4907      	ldr	r1, [pc, #28]	; (80072a4 <__NVIC_EnableIRQ+0x38>)
 8007286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	2001      	movs	r0, #1
 800728e:	fa00 f202 	lsl.w	r2, r0, r2
 8007292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	e000e100 	.word	0xe000e100

080072a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	6039      	str	r1, [r7, #0]
 80072b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	db0a      	blt.n	80072d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	490c      	ldr	r1, [pc, #48]	; (80072f4 <__NVIC_SetPriority+0x4c>)
 80072c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c6:	0112      	lsls	r2, r2, #4
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	440b      	add	r3, r1
 80072cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072d0:	e00a      	b.n	80072e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	4908      	ldr	r1, [pc, #32]	; (80072f8 <__NVIC_SetPriority+0x50>)
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	3b04      	subs	r3, #4
 80072e0:	0112      	lsls	r2, r2, #4
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	440b      	add	r3, r1
 80072e6:	761a      	strb	r2, [r3, #24]
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	e000e100 	.word	0xe000e100
 80072f8:	e000ed00 	.word	0xe000ed00

080072fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b089      	sub	sp, #36	; 0x24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f1c3 0307 	rsb	r3, r3, #7
 8007316:	2b04      	cmp	r3, #4
 8007318:	bf28      	it	cs
 800731a:	2304      	movcs	r3, #4
 800731c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	3304      	adds	r3, #4
 8007322:	2b06      	cmp	r3, #6
 8007324:	d902      	bls.n	800732c <NVIC_EncodePriority+0x30>
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	3b03      	subs	r3, #3
 800732a:	e000      	b.n	800732e <NVIC_EncodePriority+0x32>
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007330:	f04f 32ff 	mov.w	r2, #4294967295
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	43da      	mvns	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	401a      	ands	r2, r3
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007344:	f04f 31ff 	mov.w	r1, #4294967295
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	43d9      	mvns	r1, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007354:	4313      	orrs	r3, r2
         );
}
 8007356:	4618      	mov	r0, r3
 8007358:	3724      	adds	r7, #36	; 0x24
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff ff4c 	bl	8007208 <__NVIC_SetPriorityGrouping>
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007386:	2300      	movs	r3, #0
 8007388:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800738a:	f7ff ff61 	bl	8007250 <__NVIC_GetPriorityGrouping>
 800738e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	6978      	ldr	r0, [r7, #20]
 8007396:	f7ff ffb1 	bl	80072fc <NVIC_EncodePriority>
 800739a:	4602      	mov	r2, r0
 800739c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073a0:	4611      	mov	r1, r2
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff ff80 	bl	80072a8 <__NVIC_SetPriority>
}
 80073a8:	bf00      	nop
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff ff54 	bl	800726c <__NVIC_EnableIRQ>
}
 80073c4:	bf00      	nop
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80073d8:	f7fe fb28 	bl	8005a2c <HAL_GetTick>
 80073dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e099      	b.n	800751c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0201 	bic.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007408:	e00f      	b.n	800742a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800740a:	f7fe fb0f 	bl	8005a2c <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b05      	cmp	r3, #5
 8007416:	d908      	bls.n	800742a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2220      	movs	r2, #32
 800741c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2203      	movs	r2, #3
 8007422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e078      	b.n	800751c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e8      	bne.n	800740a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4b38      	ldr	r3, [pc, #224]	; (8007524 <HAL_DMA_Init+0x158>)
 8007444:	4013      	ands	r3, r2
 8007446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800746e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	2b04      	cmp	r3, #4
 8007482:	d107      	bne.n	8007494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748c:	4313      	orrs	r3, r2
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4313      	orrs	r3, r2
 8007492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f023 0307 	bic.w	r3, r3, #7
 80074aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d117      	bne.n	80074ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fb01 	bl	8007ad8 <DMA_CheckFifoParam>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2240      	movs	r2, #64	; 0x40
 80074e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80074ea:	2301      	movs	r3, #1
 80074ec:	e016      	b.n	800751c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fab8 	bl	8007a6c <DMA_CalcBaseAndBitshift>
 80074fc:	4603      	mov	r3, r0
 80074fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007504:	223f      	movs	r2, #63	; 0x3f
 8007506:	409a      	lsls	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	f010803f 	.word	0xf010803f

08007528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007546:	2b01      	cmp	r3, #1
 8007548:	d101      	bne.n	800754e <HAL_DMA_Start_IT+0x26>
 800754a:	2302      	movs	r3, #2
 800754c:	e040      	b.n	80075d0 <HAL_DMA_Start_IT+0xa8>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b01      	cmp	r3, #1
 8007560:	d12f      	bne.n	80075c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2202      	movs	r2, #2
 8007566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	68b9      	ldr	r1, [r7, #8]
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 fa4a 	bl	8007a10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007580:	223f      	movs	r2, #63	; 0x3f
 8007582:	409a      	lsls	r2, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0216 	orr.w	r2, r2, #22
 8007596:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0208 	orr.w	r2, r2, #8
 80075ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0201 	orr.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	e005      	b.n	80075ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80075ca:	2302      	movs	r3, #2
 80075cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80075e6:	f7fe fa21 	bl	8005a2c <HAL_GetTick>
 80075ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d008      	beq.n	800760a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2280      	movs	r2, #128	; 0x80
 80075fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e052      	b.n	80076b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0216 	bic.w	r2, r2, #22
 8007618:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695a      	ldr	r2, [r3, #20]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007628:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	2b00      	cmp	r3, #0
 8007630:	d103      	bne.n	800763a <HAL_DMA_Abort+0x62>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0208 	bic.w	r2, r2, #8
 8007648:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0201 	bic.w	r2, r2, #1
 8007658:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800765a:	e013      	b.n	8007684 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800765c:	f7fe f9e6 	bl	8005a2c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b05      	cmp	r3, #5
 8007668:	d90c      	bls.n	8007684 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2203      	movs	r2, #3
 8007674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e015      	b.n	80076b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e4      	bne.n	800765c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007696:	223f      	movs	r2, #63	; 0x3f
 8007698:	409a      	lsls	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d004      	beq.n	80076d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2280      	movs	r2, #128	; 0x80
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e00c      	b.n	80076f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2205      	movs	r2, #5
 80076da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0201 	bic.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007708:	4b8e      	ldr	r3, [pc, #568]	; (8007944 <HAL_DMA_IRQHandler+0x248>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a8e      	ldr	r2, [pc, #568]	; (8007948 <HAL_DMA_IRQHandler+0x24c>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	0a9b      	lsrs	r3, r3, #10
 8007714:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007726:	2208      	movs	r2, #8
 8007728:	409a      	lsls	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4013      	ands	r3, r2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01a      	beq.n	8007768 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d013      	beq.n	8007768 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0204 	bic.w	r2, r2, #4
 800774e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007754:	2208      	movs	r2, #8
 8007756:	409a      	lsls	r2, r3
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007760:	f043 0201 	orr.w	r2, r3, #1
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776c:	2201      	movs	r2, #1
 800776e:	409a      	lsls	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4013      	ands	r3, r2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d012      	beq.n	800779e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778a:	2201      	movs	r2, #1
 800778c:	409a      	lsls	r2, r3
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007796:	f043 0202 	orr.w	r2, r3, #2
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a2:	2204      	movs	r2, #4
 80077a4:	409a      	lsls	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4013      	ands	r3, r2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d012      	beq.n	80077d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c0:	2204      	movs	r2, #4
 80077c2:	409a      	lsls	r2, r3
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077cc:	f043 0204 	orr.w	r2, r3, #4
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d8:	2210      	movs	r2, #16
 80077da:	409a      	lsls	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d043      	beq.n	800786c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d03c      	beq.n	800786c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f6:	2210      	movs	r2, #16
 80077f8:	409a      	lsls	r2, r3
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d018      	beq.n	800783e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d108      	bne.n	800782c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	2b00      	cmp	r3, #0
 8007820:	d024      	beq.n	800786c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	e01f      	b.n	800786c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01b      	beq.n	800786c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	4798      	blx	r3
 800783c:	e016      	b.n	800786c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007848:	2b00      	cmp	r3, #0
 800784a:	d107      	bne.n	800785c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0208 	bic.w	r2, r2, #8
 800785a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007870:	2220      	movs	r2, #32
 8007872:	409a      	lsls	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4013      	ands	r3, r2
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 808f 	beq.w	800799c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8087 	beq.w	800799c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007892:	2220      	movs	r2, #32
 8007894:	409a      	lsls	r2, r3
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b05      	cmp	r3, #5
 80078a4:	d136      	bne.n	8007914 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0216 	bic.w	r2, r2, #22
 80078b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695a      	ldr	r2, [r3, #20]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <HAL_DMA_IRQHandler+0x1da>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d007      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0208 	bic.w	r2, r2, #8
 80078e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ea:	223f      	movs	r2, #63	; 0x3f
 80078ec:	409a      	lsls	r2, r3
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007906:	2b00      	cmp	r3, #0
 8007908:	d07e      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
        }
        return;
 8007912:	e079      	b.n	8007a08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01d      	beq.n	800795e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10d      	bne.n	800794c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007934:	2b00      	cmp	r3, #0
 8007936:	d031      	beq.n	800799c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
 8007940:	e02c      	b.n	800799c <HAL_DMA_IRQHandler+0x2a0>
 8007942:	bf00      	nop
 8007944:	20000000 	.word	0x20000000
 8007948:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d023      	beq.n	800799c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4798      	blx	r3
 800795c:	e01e      	b.n	800799c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10f      	bne.n	800798c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0210 	bic.w	r2, r2, #16
 800797a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d032      	beq.n	8007a0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d022      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2205      	movs	r2, #5
 80079b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0201 	bic.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	3301      	adds	r3, #1
 80079cc:	60bb      	str	r3, [r7, #8]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d307      	bcc.n	80079e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f2      	bne.n	80079c8 <HAL_DMA_IRQHandler+0x2cc>
 80079e2:	e000      	b.n	80079e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80079e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d005      	beq.n	8007a0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
 8007a06:	e000      	b.n	8007a0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007a08:	bf00      	nop
    }
  }
}
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b40      	cmp	r3, #64	; 0x40
 8007a3c:	d108      	bne.n	8007a50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007a4e:	e007      	b.n	8007a60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	60da      	str	r2, [r3, #12]
}
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	3b10      	subs	r3, #16
 8007a7c:	4a14      	ldr	r2, [pc, #80]	; (8007ad0 <DMA_CalcBaseAndBitshift+0x64>)
 8007a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a82:	091b      	lsrs	r3, r3, #4
 8007a84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007a86:	4a13      	ldr	r2, [pc, #76]	; (8007ad4 <DMA_CalcBaseAndBitshift+0x68>)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d909      	bls.n	8007aae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	1d1a      	adds	r2, r3, #4
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	659a      	str	r2, [r3, #88]	; 0x58
 8007aac:	e007      	b.n	8007abe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ab6:	f023 0303 	bic.w	r3, r3, #3
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	aaaaaaab 	.word	0xaaaaaaab
 8007ad4:	08011ef0 	.word	0x08011ef0

08007ad8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d11f      	bne.n	8007b32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d856      	bhi.n	8007ba6 <DMA_CheckFifoParam+0xce>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <DMA_CheckFifoParam+0x28>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b11 	.word	0x08007b11
 8007b04:	08007b23 	.word	0x08007b23
 8007b08:	08007b11 	.word	0x08007b11
 8007b0c:	08007ba7 	.word	0x08007ba7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d046      	beq.n	8007baa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b20:	e043      	b.n	8007baa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b2a:	d140      	bne.n	8007bae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b30:	e03d      	b.n	8007bae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b3a:	d121      	bne.n	8007b80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d837      	bhi.n	8007bb2 <DMA_CheckFifoParam+0xda>
 8007b42:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <DMA_CheckFifoParam+0x70>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b5f 	.word	0x08007b5f
 8007b50:	08007b59 	.word	0x08007b59
 8007b54:	08007b71 	.word	0x08007b71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5c:	e030      	b.n	8007bc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d025      	beq.n	8007bb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b6e:	e022      	b.n	8007bb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b78:	d11f      	bne.n	8007bba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007b7e:	e01c      	b.n	8007bba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d903      	bls.n	8007b8e <DMA_CheckFifoParam+0xb6>
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d003      	beq.n	8007b94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007b8c:	e018      	b.n	8007bc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	73fb      	strb	r3, [r7, #15]
      break;
 8007b92:	e015      	b.n	8007bc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00e      	beq.n	8007bbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba4:	e00b      	b.n	8007bbe <DMA_CheckFifoParam+0xe6>
      break;
 8007ba6:	bf00      	nop
 8007ba8:	e00a      	b.n	8007bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8007baa:	bf00      	nop
 8007bac:	e008      	b.n	8007bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8007bae:	bf00      	nop
 8007bb0:	e006      	b.n	8007bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8007bb2:	bf00      	nop
 8007bb4:	e004      	b.n	8007bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8007bb6:	bf00      	nop
 8007bb8:	e002      	b.n	8007bc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8007bba:	bf00      	nop
 8007bbc:	e000      	b.n	8007bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8007bbe:	bf00      	nop
    }
  } 
  
  return status; 
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop

08007bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b089      	sub	sp, #36	; 0x24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007be6:	2300      	movs	r3, #0
 8007be8:	61fb      	str	r3, [r7, #28]
 8007bea:	e16b      	b.n	8007ec4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007bec:	2201      	movs	r2, #1
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	f040 815a 	bne.w	8007ebe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d005      	beq.n	8007c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d130      	bne.n	8007c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c32:	43db      	mvns	r3, r3
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	4013      	ands	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	fa02 f303 	lsl.w	r3, r2, r3
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c58:	2201      	movs	r2, #1
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c60:	43db      	mvns	r3, r3
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	4013      	ands	r3, r2
 8007c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	091b      	lsrs	r3, r3, #4
 8007c6e:	f003 0201 	and.w	r2, r3, #1
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	fa02 f303 	lsl.w	r3, r2, r3
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f003 0303 	and.w	r3, r3, #3
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d017      	beq.n	8007cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d123      	bne.n	8007d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	08da      	lsrs	r2, r3, #3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3208      	adds	r2, #8
 8007cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	f003 0307 	and.w	r3, r3, #7
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	220f      	movs	r2, #15
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	43db      	mvns	r3, r3
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	4013      	ands	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	691a      	ldr	r2, [r3, #16]
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	08da      	lsrs	r2, r3, #3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3208      	adds	r2, #8
 8007d0e:	69b9      	ldr	r1, [r7, #24]
 8007d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	2203      	movs	r2, #3
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	43db      	mvns	r3, r3
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f003 0203 	and.w	r2, r3, #3
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80b4 	beq.w	8007ebe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]
 8007d5a:	4b60      	ldr	r3, [pc, #384]	; (8007edc <HAL_GPIO_Init+0x30c>)
 8007d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5e:	4a5f      	ldr	r2, [pc, #380]	; (8007edc <HAL_GPIO_Init+0x30c>)
 8007d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d64:	6453      	str	r3, [r2, #68]	; 0x44
 8007d66:	4b5d      	ldr	r3, [pc, #372]	; (8007edc <HAL_GPIO_Init+0x30c>)
 8007d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d72:	4a5b      	ldr	r2, [pc, #364]	; (8007ee0 <HAL_GPIO_Init+0x310>)
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	089b      	lsrs	r3, r3, #2
 8007d78:	3302      	adds	r3, #2
 8007d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	220f      	movs	r2, #15
 8007d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8e:	43db      	mvns	r3, r3
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	4013      	ands	r3, r2
 8007d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a52      	ldr	r2, [pc, #328]	; (8007ee4 <HAL_GPIO_Init+0x314>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d02b      	beq.n	8007df6 <HAL_GPIO_Init+0x226>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a51      	ldr	r2, [pc, #324]	; (8007ee8 <HAL_GPIO_Init+0x318>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d025      	beq.n	8007df2 <HAL_GPIO_Init+0x222>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a50      	ldr	r2, [pc, #320]	; (8007eec <HAL_GPIO_Init+0x31c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01f      	beq.n	8007dee <HAL_GPIO_Init+0x21e>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a4f      	ldr	r2, [pc, #316]	; (8007ef0 <HAL_GPIO_Init+0x320>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d019      	beq.n	8007dea <HAL_GPIO_Init+0x21a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a4e      	ldr	r2, [pc, #312]	; (8007ef4 <HAL_GPIO_Init+0x324>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <HAL_GPIO_Init+0x216>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a4d      	ldr	r2, [pc, #308]	; (8007ef8 <HAL_GPIO_Init+0x328>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00d      	beq.n	8007de2 <HAL_GPIO_Init+0x212>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a4c      	ldr	r2, [pc, #304]	; (8007efc <HAL_GPIO_Init+0x32c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d007      	beq.n	8007dde <HAL_GPIO_Init+0x20e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a4b      	ldr	r2, [pc, #300]	; (8007f00 <HAL_GPIO_Init+0x330>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d101      	bne.n	8007dda <HAL_GPIO_Init+0x20a>
 8007dd6:	2307      	movs	r3, #7
 8007dd8:	e00e      	b.n	8007df8 <HAL_GPIO_Init+0x228>
 8007dda:	2308      	movs	r3, #8
 8007ddc:	e00c      	b.n	8007df8 <HAL_GPIO_Init+0x228>
 8007dde:	2306      	movs	r3, #6
 8007de0:	e00a      	b.n	8007df8 <HAL_GPIO_Init+0x228>
 8007de2:	2305      	movs	r3, #5
 8007de4:	e008      	b.n	8007df8 <HAL_GPIO_Init+0x228>
 8007de6:	2304      	movs	r3, #4
 8007de8:	e006      	b.n	8007df8 <HAL_GPIO_Init+0x228>
 8007dea:	2303      	movs	r3, #3
 8007dec:	e004      	b.n	8007df8 <HAL_GPIO_Init+0x228>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e002      	b.n	8007df8 <HAL_GPIO_Init+0x228>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <HAL_GPIO_Init+0x228>
 8007df6:	2300      	movs	r3, #0
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	f002 0203 	and.w	r2, r2, #3
 8007dfe:	0092      	lsls	r2, r2, #2
 8007e00:	4093      	lsls	r3, r2
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e08:	4935      	ldr	r1, [pc, #212]	; (8007ee0 <HAL_GPIO_Init+0x310>)
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	089b      	lsrs	r3, r3, #2
 8007e0e:	3302      	adds	r3, #2
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e16:	4b3b      	ldr	r3, [pc, #236]	; (8007f04 <HAL_GPIO_Init+0x334>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	43db      	mvns	r3, r3
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	4013      	ands	r3, r2
 8007e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007e3a:	4a32      	ldr	r2, [pc, #200]	; (8007f04 <HAL_GPIO_Init+0x334>)
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007e40:	4b30      	ldr	r3, [pc, #192]	; (8007f04 <HAL_GPIO_Init+0x334>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	43db      	mvns	r3, r3
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007e64:	4a27      	ldr	r2, [pc, #156]	; (8007f04 <HAL_GPIO_Init+0x334>)
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007e6a:	4b26      	ldr	r3, [pc, #152]	; (8007f04 <HAL_GPIO_Init+0x334>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	43db      	mvns	r3, r3
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	4013      	ands	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007e8e:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <HAL_GPIO_Init+0x334>)
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e94:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <HAL_GPIO_Init+0x334>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007eb8:	4a12      	ldr	r2, [pc, #72]	; (8007f04 <HAL_GPIO_Init+0x334>)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b0f      	cmp	r3, #15
 8007ec8:	f67f ae90 	bls.w	8007bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	3724      	adds	r7, #36	; 0x24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40023800 	.word	0x40023800
 8007ee0:	40013800 	.word	0x40013800
 8007ee4:	40020000 	.word	0x40020000
 8007ee8:	40020400 	.word	0x40020400
 8007eec:	40020800 	.word	0x40020800
 8007ef0:	40020c00 	.word	0x40020c00
 8007ef4:	40021000 	.word	0x40021000
 8007ef8:	40021400 	.word	0x40021400
 8007efc:	40021800 	.word	0x40021800
 8007f00:	40021c00 	.word	0x40021c00
 8007f04:	40013c00 	.word	0x40013c00

08007f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	887b      	ldrh	r3, [r7, #2]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f20:	2301      	movs	r3, #1
 8007f22:	73fb      	strb	r3, [r7, #15]
 8007f24:	e001      	b.n	8007f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	807b      	strh	r3, [r7, #2]
 8007f44:	4613      	mov	r3, r2
 8007f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f48:	787b      	ldrb	r3, [r7, #1]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f4e:	887a      	ldrh	r2, [r7, #2]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007f54:	e003      	b.n	8007f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007f56:	887b      	ldrh	r3, [r7, #2]
 8007f58:	041a      	lsls	r2, r3, #16
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	619a      	str	r2, [r3, #24]
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
	...

08007f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e267      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d075      	beq.n	8008076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f8a:	4b88      	ldr	r3, [pc, #544]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 030c 	and.w	r3, r3, #12
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d00c      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f96:	4b85      	ldr	r3, [pc, #532]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d112      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fa2:	4b82      	ldr	r3, [pc, #520]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fae:	d10b      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fb0:	4b7e      	ldr	r3, [pc, #504]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d05b      	beq.n	8008074 <HAL_RCC_OscConfig+0x108>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d157      	bne.n	8008074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e242      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd0:	d106      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x74>
 8007fd2:	4b76      	ldr	r3, [pc, #472]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a75      	ldr	r2, [pc, #468]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8007fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	e01d      	b.n	800801c <HAL_RCC_OscConfig+0xb0>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fe8:	d10c      	bne.n	8008004 <HAL_RCC_OscConfig+0x98>
 8007fea:	4b70      	ldr	r3, [pc, #448]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a6f      	ldr	r2, [pc, #444]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8007ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	4b6d      	ldr	r3, [pc, #436]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a6c      	ldr	r2, [pc, #432]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8007ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	e00b      	b.n	800801c <HAL_RCC_OscConfig+0xb0>
 8008004:	4b69      	ldr	r3, [pc, #420]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a68      	ldr	r2, [pc, #416]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 800800a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	4b66      	ldr	r3, [pc, #408]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a65      	ldr	r2, [pc, #404]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8008016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800801a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d013      	beq.n	800804c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008024:	f7fd fd02 	bl	8005a2c <HAL_GetTick>
 8008028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800802a:	e008      	b.n	800803e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800802c:	f7fd fcfe 	bl	8005a2c <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b64      	cmp	r3, #100	; 0x64
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e207      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800803e:	4b5b      	ldr	r3, [pc, #364]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0f0      	beq.n	800802c <HAL_RCC_OscConfig+0xc0>
 800804a:	e014      	b.n	8008076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800804c:	f7fd fcee 	bl	8005a2c <HAL_GetTick>
 8008050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008052:	e008      	b.n	8008066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008054:	f7fd fcea 	bl	8005a2c <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b64      	cmp	r3, #100	; 0x64
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e1f3      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008066:	4b51      	ldr	r3, [pc, #324]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f0      	bne.n	8008054 <HAL_RCC_OscConfig+0xe8>
 8008072:	e000      	b.n	8008076 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d063      	beq.n	800814a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008082:	4b4a      	ldr	r3, [pc, #296]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 030c 	and.w	r3, r3, #12
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800808e:	4b47      	ldr	r3, [pc, #284]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008096:	2b08      	cmp	r3, #8
 8008098:	d11c      	bne.n	80080d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800809a:	4b44      	ldr	r3, [pc, #272]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d116      	bne.n	80080d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080a6:	4b41      	ldr	r3, [pc, #260]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d005      	beq.n	80080be <HAL_RCC_OscConfig+0x152>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d001      	beq.n	80080be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e1c7      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080be:	4b3b      	ldr	r3, [pc, #236]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	4937      	ldr	r1, [pc, #220]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080d2:	e03a      	b.n	800814a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d020      	beq.n	800811e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080dc:	4b34      	ldr	r3, [pc, #208]	; (80081b0 <HAL_RCC_OscConfig+0x244>)
 80080de:	2201      	movs	r2, #1
 80080e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e2:	f7fd fca3 	bl	8005a2c <HAL_GetTick>
 80080e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080e8:	e008      	b.n	80080fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080ea:	f7fd fc9f 	bl	8005a2c <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d901      	bls.n	80080fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e1a8      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080fc:	4b2b      	ldr	r3, [pc, #172]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0f0      	beq.n	80080ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008108:	4b28      	ldr	r3, [pc, #160]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	4925      	ldr	r1, [pc, #148]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8008118:	4313      	orrs	r3, r2
 800811a:	600b      	str	r3, [r1, #0]
 800811c:	e015      	b.n	800814a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800811e:	4b24      	ldr	r3, [pc, #144]	; (80081b0 <HAL_RCC_OscConfig+0x244>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008124:	f7fd fc82 	bl	8005a2c <HAL_GetTick>
 8008128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800812c:	f7fd fc7e 	bl	8005a2c <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e187      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800813e:	4b1b      	ldr	r3, [pc, #108]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f0      	bne.n	800812c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d036      	beq.n	80081c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d016      	beq.n	800818c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800815e:	4b15      	ldr	r3, [pc, #84]	; (80081b4 <HAL_RCC_OscConfig+0x248>)
 8008160:	2201      	movs	r2, #1
 8008162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008164:	f7fd fc62 	bl	8005a2c <HAL_GetTick>
 8008168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800816c:	f7fd fc5e 	bl	8005a2c <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e167      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800817e:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <HAL_RCC_OscConfig+0x240>)
 8008180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0f0      	beq.n	800816c <HAL_RCC_OscConfig+0x200>
 800818a:	e01b      	b.n	80081c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800818c:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <HAL_RCC_OscConfig+0x248>)
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008192:	f7fd fc4b 	bl	8005a2c <HAL_GetTick>
 8008196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008198:	e00e      	b.n	80081b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800819a:	f7fd fc47 	bl	8005a2c <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d907      	bls.n	80081b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e150      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
 80081ac:	40023800 	.word	0x40023800
 80081b0:	42470000 	.word	0x42470000
 80081b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081b8:	4b88      	ldr	r3, [pc, #544]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 80081ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1ea      	bne.n	800819a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8097 	beq.w	8008300 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081d6:	4b81      	ldr	r3, [pc, #516]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10f      	bne.n	8008202 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081e2:	2300      	movs	r3, #0
 80081e4:	60bb      	str	r3, [r7, #8]
 80081e6:	4b7d      	ldr	r3, [pc, #500]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	4a7c      	ldr	r2, [pc, #496]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 80081ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f0:	6413      	str	r3, [r2, #64]	; 0x40
 80081f2:	4b7a      	ldr	r3, [pc, #488]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fa:	60bb      	str	r3, [r7, #8]
 80081fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081fe:	2301      	movs	r3, #1
 8008200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008202:	4b77      	ldr	r3, [pc, #476]	; (80083e0 <HAL_RCC_OscConfig+0x474>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820a:	2b00      	cmp	r3, #0
 800820c:	d118      	bne.n	8008240 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800820e:	4b74      	ldr	r3, [pc, #464]	; (80083e0 <HAL_RCC_OscConfig+0x474>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a73      	ldr	r2, [pc, #460]	; (80083e0 <HAL_RCC_OscConfig+0x474>)
 8008214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800821a:	f7fd fc07 	bl	8005a2c <HAL_GetTick>
 800821e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008220:	e008      	b.n	8008234 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008222:	f7fd fc03 	bl	8005a2c <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d901      	bls.n	8008234 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e10c      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008234:	4b6a      	ldr	r3, [pc, #424]	; (80083e0 <HAL_RCC_OscConfig+0x474>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0f0      	beq.n	8008222 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d106      	bne.n	8008256 <HAL_RCC_OscConfig+0x2ea>
 8008248:	4b64      	ldr	r3, [pc, #400]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 800824a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824c:	4a63      	ldr	r2, [pc, #396]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	6713      	str	r3, [r2, #112]	; 0x70
 8008254:	e01c      	b.n	8008290 <HAL_RCC_OscConfig+0x324>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b05      	cmp	r3, #5
 800825c:	d10c      	bne.n	8008278 <HAL_RCC_OscConfig+0x30c>
 800825e:	4b5f      	ldr	r3, [pc, #380]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 8008260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008262:	4a5e      	ldr	r2, [pc, #376]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 8008264:	f043 0304 	orr.w	r3, r3, #4
 8008268:	6713      	str	r3, [r2, #112]	; 0x70
 800826a:	4b5c      	ldr	r3, [pc, #368]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	4a5b      	ldr	r2, [pc, #364]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 8008270:	f043 0301 	orr.w	r3, r3, #1
 8008274:	6713      	str	r3, [r2, #112]	; 0x70
 8008276:	e00b      	b.n	8008290 <HAL_RCC_OscConfig+0x324>
 8008278:	4b58      	ldr	r3, [pc, #352]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 800827a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827c:	4a57      	ldr	r2, [pc, #348]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 800827e:	f023 0301 	bic.w	r3, r3, #1
 8008282:	6713      	str	r3, [r2, #112]	; 0x70
 8008284:	4b55      	ldr	r3, [pc, #340]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 8008286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008288:	4a54      	ldr	r2, [pc, #336]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 800828a:	f023 0304 	bic.w	r3, r3, #4
 800828e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d015      	beq.n	80082c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008298:	f7fd fbc8 	bl	8005a2c <HAL_GetTick>
 800829c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800829e:	e00a      	b.n	80082b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082a0:	f7fd fbc4 	bl	8005a2c <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e0cb      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082b6:	4b49      	ldr	r3, [pc, #292]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 80082b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0ee      	beq.n	80082a0 <HAL_RCC_OscConfig+0x334>
 80082c2:	e014      	b.n	80082ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082c4:	f7fd fbb2 	bl	8005a2c <HAL_GetTick>
 80082c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ca:	e00a      	b.n	80082e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082cc:	f7fd fbae 	bl	8005a2c <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082da:	4293      	cmp	r3, r2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e0b5      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082e2:	4b3e      	ldr	r3, [pc, #248]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1ee      	bne.n	80082cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d105      	bne.n	8008300 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082f4:	4b39      	ldr	r3, [pc, #228]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	4a38      	ldr	r2, [pc, #224]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 80082fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80a1 	beq.w	800844c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800830a:	4b34      	ldr	r3, [pc, #208]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f003 030c 	and.w	r3, r3, #12
 8008312:	2b08      	cmp	r3, #8
 8008314:	d05c      	beq.n	80083d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d141      	bne.n	80083a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800831e:	4b31      	ldr	r3, [pc, #196]	; (80083e4 <HAL_RCC_OscConfig+0x478>)
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008324:	f7fd fb82 	bl	8005a2c <HAL_GetTick>
 8008328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800832a:	e008      	b.n	800833e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800832c:	f7fd fb7e 	bl	8005a2c <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b02      	cmp	r3, #2
 8008338:	d901      	bls.n	800833e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e087      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800833e:	4b27      	ldr	r3, [pc, #156]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f0      	bne.n	800832c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69da      	ldr	r2, [r3, #28]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	019b      	lsls	r3, r3, #6
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	085b      	lsrs	r3, r3, #1
 8008362:	3b01      	subs	r3, #1
 8008364:	041b      	lsls	r3, r3, #16
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	061b      	lsls	r3, r3, #24
 800836e:	491b      	ldr	r1, [pc, #108]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 8008370:	4313      	orrs	r3, r2
 8008372:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008374:	4b1b      	ldr	r3, [pc, #108]	; (80083e4 <HAL_RCC_OscConfig+0x478>)
 8008376:	2201      	movs	r2, #1
 8008378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800837a:	f7fd fb57 	bl	8005a2c <HAL_GetTick>
 800837e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008380:	e008      	b.n	8008394 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008382:	f7fd fb53 	bl	8005a2c <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b02      	cmp	r3, #2
 800838e:	d901      	bls.n	8008394 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e05c      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008394:	4b11      	ldr	r3, [pc, #68]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0f0      	beq.n	8008382 <HAL_RCC_OscConfig+0x416>
 80083a0:	e054      	b.n	800844c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083a2:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <HAL_RCC_OscConfig+0x478>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083a8:	f7fd fb40 	bl	8005a2c <HAL_GetTick>
 80083ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083b0:	f7fd fb3c 	bl	8005a2c <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e045      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083c2:	4b06      	ldr	r3, [pc, #24]	; (80083dc <HAL_RCC_OscConfig+0x470>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1f0      	bne.n	80083b0 <HAL_RCC_OscConfig+0x444>
 80083ce:	e03d      	b.n	800844c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d107      	bne.n	80083e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e038      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
 80083dc:	40023800 	.word	0x40023800
 80083e0:	40007000 	.word	0x40007000
 80083e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083e8:	4b1b      	ldr	r3, [pc, #108]	; (8008458 <HAL_RCC_OscConfig+0x4ec>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d028      	beq.n	8008448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008400:	429a      	cmp	r2, r3
 8008402:	d121      	bne.n	8008448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800840e:	429a      	cmp	r2, r3
 8008410:	d11a      	bne.n	8008448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008418:	4013      	ands	r3, r2
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800841e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008420:	4293      	cmp	r3, r2
 8008422:	d111      	bne.n	8008448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842e:	085b      	lsrs	r3, r3, #1
 8008430:	3b01      	subs	r3, #1
 8008432:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008434:	429a      	cmp	r2, r3
 8008436:	d107      	bne.n	8008448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008444:	429a      	cmp	r2, r3
 8008446:	d001      	beq.n	800844c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	40023800 	.word	0x40023800

0800845c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e0cc      	b.n	800860a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008470:	4b68      	ldr	r3, [pc, #416]	; (8008614 <HAL_RCC_ClockConfig+0x1b8>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0307 	and.w	r3, r3, #7
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	429a      	cmp	r2, r3
 800847c:	d90c      	bls.n	8008498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800847e:	4b65      	ldr	r3, [pc, #404]	; (8008614 <HAL_RCC_ClockConfig+0x1b8>)
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	b2d2      	uxtb	r2, r2
 8008484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008486:	4b63      	ldr	r3, [pc, #396]	; (8008614 <HAL_RCC_ClockConfig+0x1b8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d001      	beq.n	8008498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e0b8      	b.n	800860a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d020      	beq.n	80084e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084b0:	4b59      	ldr	r3, [pc, #356]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	4a58      	ldr	r2, [pc, #352]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80084b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0308 	and.w	r3, r3, #8
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084c8:	4b53      	ldr	r3, [pc, #332]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	4a52      	ldr	r2, [pc, #328]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80084ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084d4:	4b50      	ldr	r3, [pc, #320]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	494d      	ldr	r1, [pc, #308]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d044      	beq.n	800857c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d107      	bne.n	800850a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084fa:	4b47      	ldr	r3, [pc, #284]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d119      	bne.n	800853a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e07f      	b.n	800860a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d003      	beq.n	800851a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008516:	2b03      	cmp	r3, #3
 8008518:	d107      	bne.n	800852a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800851a:	4b3f      	ldr	r3, [pc, #252]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e06f      	b.n	800860a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800852a:	4b3b      	ldr	r3, [pc, #236]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e067      	b.n	800860a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800853a:	4b37      	ldr	r3, [pc, #220]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f023 0203 	bic.w	r2, r3, #3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	4934      	ldr	r1, [pc, #208]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 8008548:	4313      	orrs	r3, r2
 800854a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800854c:	f7fd fa6e 	bl	8005a2c <HAL_GetTick>
 8008550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008552:	e00a      	b.n	800856a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008554:	f7fd fa6a 	bl	8005a2c <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008562:	4293      	cmp	r3, r2
 8008564:	d901      	bls.n	800856a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e04f      	b.n	800860a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800856a:	4b2b      	ldr	r3, [pc, #172]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 020c 	and.w	r2, r3, #12
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	429a      	cmp	r2, r3
 800857a:	d1eb      	bne.n	8008554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800857c:	4b25      	ldr	r3, [pc, #148]	; (8008614 <HAL_RCC_ClockConfig+0x1b8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0307 	and.w	r3, r3, #7
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d20c      	bcs.n	80085a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800858a:	4b22      	ldr	r3, [pc, #136]	; (8008614 <HAL_RCC_ClockConfig+0x1b8>)
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	b2d2      	uxtb	r2, r2
 8008590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008592:	4b20      	ldr	r3, [pc, #128]	; (8008614 <HAL_RCC_ClockConfig+0x1b8>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	429a      	cmp	r2, r3
 800859e:	d001      	beq.n	80085a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e032      	b.n	800860a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d008      	beq.n	80085c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085b0:	4b19      	ldr	r3, [pc, #100]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	4916      	ldr	r1, [pc, #88]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0308 	and.w	r3, r3, #8
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d009      	beq.n	80085e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085ce:	4b12      	ldr	r3, [pc, #72]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	490e      	ldr	r1, [pc, #56]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085e2:	f000 f821 	bl	8008628 <HAL_RCC_GetSysClockFreq>
 80085e6:	4602      	mov	r2, r0
 80085e8:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	091b      	lsrs	r3, r3, #4
 80085ee:	f003 030f 	and.w	r3, r3, #15
 80085f2:	490a      	ldr	r1, [pc, #40]	; (800861c <HAL_RCC_ClockConfig+0x1c0>)
 80085f4:	5ccb      	ldrb	r3, [r1, r3]
 80085f6:	fa22 f303 	lsr.w	r3, r2, r3
 80085fa:	4a09      	ldr	r2, [pc, #36]	; (8008620 <HAL_RCC_ClockConfig+0x1c4>)
 80085fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085fe:	4b09      	ldr	r3, [pc, #36]	; (8008624 <HAL_RCC_ClockConfig+0x1c8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4618      	mov	r0, r3
 8008604:	f7fc ffe4 	bl	80055d0 <HAL_InitTick>

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	40023c00 	.word	0x40023c00
 8008618:	40023800 	.word	0x40023800
 800861c:	08011ed8 	.word	0x08011ed8
 8008620:	20000000 	.word	0x20000000
 8008624:	20000004 	.word	0x20000004

08008628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800862c:	b094      	sub	sp, #80	; 0x50
 800862e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	647b      	str	r3, [r7, #68]	; 0x44
 8008634:	2300      	movs	r3, #0
 8008636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008638:	2300      	movs	r3, #0
 800863a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008640:	4b79      	ldr	r3, [pc, #484]	; (8008828 <HAL_RCC_GetSysClockFreq+0x200>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f003 030c 	and.w	r3, r3, #12
 8008648:	2b08      	cmp	r3, #8
 800864a:	d00d      	beq.n	8008668 <HAL_RCC_GetSysClockFreq+0x40>
 800864c:	2b08      	cmp	r3, #8
 800864e:	f200 80e1 	bhi.w	8008814 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <HAL_RCC_GetSysClockFreq+0x34>
 8008656:	2b04      	cmp	r3, #4
 8008658:	d003      	beq.n	8008662 <HAL_RCC_GetSysClockFreq+0x3a>
 800865a:	e0db      	b.n	8008814 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800865c:	4b73      	ldr	r3, [pc, #460]	; (800882c <HAL_RCC_GetSysClockFreq+0x204>)
 800865e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008660:	e0db      	b.n	800881a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008662:	4b73      	ldr	r3, [pc, #460]	; (8008830 <HAL_RCC_GetSysClockFreq+0x208>)
 8008664:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008666:	e0d8      	b.n	800881a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008668:	4b6f      	ldr	r3, [pc, #444]	; (8008828 <HAL_RCC_GetSysClockFreq+0x200>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008670:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008672:	4b6d      	ldr	r3, [pc, #436]	; (8008828 <HAL_RCC_GetSysClockFreq+0x200>)
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d063      	beq.n	8008746 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800867e:	4b6a      	ldr	r3, [pc, #424]	; (8008828 <HAL_RCC_GetSysClockFreq+0x200>)
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	099b      	lsrs	r3, r3, #6
 8008684:	2200      	movs	r2, #0
 8008686:	63bb      	str	r3, [r7, #56]	; 0x38
 8008688:	63fa      	str	r2, [r7, #60]	; 0x3c
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008690:	633b      	str	r3, [r7, #48]	; 0x30
 8008692:	2300      	movs	r3, #0
 8008694:	637b      	str	r3, [r7, #52]	; 0x34
 8008696:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800869a:	4622      	mov	r2, r4
 800869c:	462b      	mov	r3, r5
 800869e:	f04f 0000 	mov.w	r0, #0
 80086a2:	f04f 0100 	mov.w	r1, #0
 80086a6:	0159      	lsls	r1, r3, #5
 80086a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086ac:	0150      	lsls	r0, r2, #5
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4621      	mov	r1, r4
 80086b4:	1a51      	subs	r1, r2, r1
 80086b6:	6139      	str	r1, [r7, #16]
 80086b8:	4629      	mov	r1, r5
 80086ba:	eb63 0301 	sbc.w	r3, r3, r1
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	f04f 0200 	mov.w	r2, #0
 80086c4:	f04f 0300 	mov.w	r3, #0
 80086c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086cc:	4659      	mov	r1, fp
 80086ce:	018b      	lsls	r3, r1, #6
 80086d0:	4651      	mov	r1, sl
 80086d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086d6:	4651      	mov	r1, sl
 80086d8:	018a      	lsls	r2, r1, #6
 80086da:	4651      	mov	r1, sl
 80086dc:	ebb2 0801 	subs.w	r8, r2, r1
 80086e0:	4659      	mov	r1, fp
 80086e2:	eb63 0901 	sbc.w	r9, r3, r1
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	f04f 0300 	mov.w	r3, #0
 80086ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086fa:	4690      	mov	r8, r2
 80086fc:	4699      	mov	r9, r3
 80086fe:	4623      	mov	r3, r4
 8008700:	eb18 0303 	adds.w	r3, r8, r3
 8008704:	60bb      	str	r3, [r7, #8]
 8008706:	462b      	mov	r3, r5
 8008708:	eb49 0303 	adc.w	r3, r9, r3
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	f04f 0200 	mov.w	r2, #0
 8008712:	f04f 0300 	mov.w	r3, #0
 8008716:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800871a:	4629      	mov	r1, r5
 800871c:	024b      	lsls	r3, r1, #9
 800871e:	4621      	mov	r1, r4
 8008720:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008724:	4621      	mov	r1, r4
 8008726:	024a      	lsls	r2, r1, #9
 8008728:	4610      	mov	r0, r2
 800872a:	4619      	mov	r1, r3
 800872c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800872e:	2200      	movs	r2, #0
 8008730:	62bb      	str	r3, [r7, #40]	; 0x28
 8008732:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008734:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008738:	f7f8 fa86 	bl	8000c48 <__aeabi_uldivmod>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4613      	mov	r3, r2
 8008742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008744:	e058      	b.n	80087f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008746:	4b38      	ldr	r3, [pc, #224]	; (8008828 <HAL_RCC_GetSysClockFreq+0x200>)
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	099b      	lsrs	r3, r3, #6
 800874c:	2200      	movs	r2, #0
 800874e:	4618      	mov	r0, r3
 8008750:	4611      	mov	r1, r2
 8008752:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008756:	623b      	str	r3, [r7, #32]
 8008758:	2300      	movs	r3, #0
 800875a:	627b      	str	r3, [r7, #36]	; 0x24
 800875c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008760:	4642      	mov	r2, r8
 8008762:	464b      	mov	r3, r9
 8008764:	f04f 0000 	mov.w	r0, #0
 8008768:	f04f 0100 	mov.w	r1, #0
 800876c:	0159      	lsls	r1, r3, #5
 800876e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008772:	0150      	lsls	r0, r2, #5
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4641      	mov	r1, r8
 800877a:	ebb2 0a01 	subs.w	sl, r2, r1
 800877e:	4649      	mov	r1, r9
 8008780:	eb63 0b01 	sbc.w	fp, r3, r1
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	f04f 0300 	mov.w	r3, #0
 800878c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008790:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008794:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008798:	ebb2 040a 	subs.w	r4, r2, sl
 800879c:	eb63 050b 	sbc.w	r5, r3, fp
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	00eb      	lsls	r3, r5, #3
 80087aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087ae:	00e2      	lsls	r2, r4, #3
 80087b0:	4614      	mov	r4, r2
 80087b2:	461d      	mov	r5, r3
 80087b4:	4643      	mov	r3, r8
 80087b6:	18e3      	adds	r3, r4, r3
 80087b8:	603b      	str	r3, [r7, #0]
 80087ba:	464b      	mov	r3, r9
 80087bc:	eb45 0303 	adc.w	r3, r5, r3
 80087c0:	607b      	str	r3, [r7, #4]
 80087c2:	f04f 0200 	mov.w	r2, #0
 80087c6:	f04f 0300 	mov.w	r3, #0
 80087ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087ce:	4629      	mov	r1, r5
 80087d0:	028b      	lsls	r3, r1, #10
 80087d2:	4621      	mov	r1, r4
 80087d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087d8:	4621      	mov	r1, r4
 80087da:	028a      	lsls	r2, r1, #10
 80087dc:	4610      	mov	r0, r2
 80087de:	4619      	mov	r1, r3
 80087e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e2:	2200      	movs	r2, #0
 80087e4:	61bb      	str	r3, [r7, #24]
 80087e6:	61fa      	str	r2, [r7, #28]
 80087e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087ec:	f7f8 fa2c 	bl	8000c48 <__aeabi_uldivmod>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4613      	mov	r3, r2
 80087f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087f8:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <HAL_RCC_GetSysClockFreq+0x200>)
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	0c1b      	lsrs	r3, r3, #16
 80087fe:	f003 0303 	and.w	r3, r3, #3
 8008802:	3301      	adds	r3, #1
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008808:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800880a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800880c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008810:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008812:	e002      	b.n	800881a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008814:	4b05      	ldr	r3, [pc, #20]	; (800882c <HAL_RCC_GetSysClockFreq+0x204>)
 8008816:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800881a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800881c:	4618      	mov	r0, r3
 800881e:	3750      	adds	r7, #80	; 0x50
 8008820:	46bd      	mov	sp, r7
 8008822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008826:	bf00      	nop
 8008828:	40023800 	.word	0x40023800
 800882c:	00f42400 	.word	0x00f42400
 8008830:	007a1200 	.word	0x007a1200

08008834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008834:	b480      	push	{r7}
 8008836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008838:	4b03      	ldr	r3, [pc, #12]	; (8008848 <HAL_RCC_GetHCLKFreq+0x14>)
 800883a:	681b      	ldr	r3, [r3, #0]
}
 800883c:	4618      	mov	r0, r3
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	20000000 	.word	0x20000000

0800884c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008850:	f7ff fff0 	bl	8008834 <HAL_RCC_GetHCLKFreq>
 8008854:	4602      	mov	r2, r0
 8008856:	4b05      	ldr	r3, [pc, #20]	; (800886c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	0a9b      	lsrs	r3, r3, #10
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	4903      	ldr	r1, [pc, #12]	; (8008870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008862:	5ccb      	ldrb	r3, [r1, r3]
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008868:	4618      	mov	r0, r3
 800886a:	bd80      	pop	{r7, pc}
 800886c:	40023800 	.word	0x40023800
 8008870:	08011ee8 	.word	0x08011ee8

08008874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008878:	f7ff ffdc 	bl	8008834 <HAL_RCC_GetHCLKFreq>
 800887c:	4602      	mov	r2, r0
 800887e:	4b05      	ldr	r3, [pc, #20]	; (8008894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	0b5b      	lsrs	r3, r3, #13
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	4903      	ldr	r1, [pc, #12]	; (8008898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800888a:	5ccb      	ldrb	r3, [r1, r3]
 800888c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008890:	4618      	mov	r0, r3
 8008892:	bd80      	pop	{r7, pc}
 8008894:	40023800 	.word	0x40023800
 8008898:	08011ee8 	.word	0x08011ee8

0800889c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	220f      	movs	r2, #15
 80088aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80088ac:	4b12      	ldr	r3, [pc, #72]	; (80088f8 <HAL_RCC_GetClockConfig+0x5c>)
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f003 0203 	and.w	r2, r3, #3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80088b8:	4b0f      	ldr	r3, [pc, #60]	; (80088f8 <HAL_RCC_GetClockConfig+0x5c>)
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80088c4:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <HAL_RCC_GetClockConfig+0x5c>)
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80088d0:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <HAL_RCC_GetClockConfig+0x5c>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	08db      	lsrs	r3, r3, #3
 80088d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80088de:	4b07      	ldr	r3, [pc, #28]	; (80088fc <HAL_RCC_GetClockConfig+0x60>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0207 	and.w	r2, r3, #7
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	601a      	str	r2, [r3, #0]
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	40023800 	.word	0x40023800
 80088fc:	40023c00 	.word	0x40023c00

08008900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e041      	b.n	8008996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7fc fc56 	bl	80051d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3304      	adds	r3, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f000 fdae 	bl	80094a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d001      	beq.n	80089b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e04e      	b.n	8008a56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0201 	orr.w	r2, r2, #1
 80089ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a23      	ldr	r2, [pc, #140]	; (8008a64 <HAL_TIM_Base_Start_IT+0xc4>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d022      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x80>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e2:	d01d      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x80>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a1f      	ldr	r2, [pc, #124]	; (8008a68 <HAL_TIM_Base_Start_IT+0xc8>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d018      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x80>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a1e      	ldr	r2, [pc, #120]	; (8008a6c <HAL_TIM_Base_Start_IT+0xcc>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d013      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x80>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a1c      	ldr	r2, [pc, #112]	; (8008a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d00e      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x80>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a1b      	ldr	r2, [pc, #108]	; (8008a74 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d009      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x80>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a19      	ldr	r2, [pc, #100]	; (8008a78 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d004      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x80>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a18      	ldr	r2, [pc, #96]	; (8008a7c <HAL_TIM_Base_Start_IT+0xdc>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d111      	bne.n	8008a44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b06      	cmp	r3, #6
 8008a30:	d010      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f042 0201 	orr.w	r2, r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a42:	e007      	b.n	8008a54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f042 0201 	orr.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	40010000 	.word	0x40010000
 8008a68:	40000400 	.word	0x40000400
 8008a6c:	40000800 	.word	0x40000800
 8008a70:	40000c00 	.word	0x40000c00
 8008a74:	40010400 	.word	0x40010400
 8008a78:	40014000 	.word	0x40014000
 8008a7c:	40001800 	.word	0x40001800

08008a80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e041      	b.n	8008b16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f839 	bl	8008b1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f000 fcee 	bl	80094a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
	...

08008b34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d109      	bne.n	8008b58 <HAL_TIM_PWM_Start+0x24>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	bf14      	ite	ne
 8008b50:	2301      	movne	r3, #1
 8008b52:	2300      	moveq	r3, #0
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	e022      	b.n	8008b9e <HAL_TIM_PWM_Start+0x6a>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d109      	bne.n	8008b72 <HAL_TIM_PWM_Start+0x3e>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	bf14      	ite	ne
 8008b6a:	2301      	movne	r3, #1
 8008b6c:	2300      	moveq	r3, #0
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	e015      	b.n	8008b9e <HAL_TIM_PWM_Start+0x6a>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d109      	bne.n	8008b8c <HAL_TIM_PWM_Start+0x58>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	bf14      	ite	ne
 8008b84:	2301      	movne	r3, #1
 8008b86:	2300      	moveq	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	e008      	b.n	8008b9e <HAL_TIM_PWM_Start+0x6a>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	bf14      	ite	ne
 8008b98:	2301      	movne	r3, #1
 8008b9a:	2300      	moveq	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e07c      	b.n	8008ca0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d104      	bne.n	8008bb6 <HAL_TIM_PWM_Start+0x82>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bb4:	e013      	b.n	8008bde <HAL_TIM_PWM_Start+0xaa>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d104      	bne.n	8008bc6 <HAL_TIM_PWM_Start+0x92>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bc4:	e00b      	b.n	8008bde <HAL_TIM_PWM_Start+0xaa>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b08      	cmp	r3, #8
 8008bca:	d104      	bne.n	8008bd6 <HAL_TIM_PWM_Start+0xa2>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bd4:	e003      	b.n	8008bde <HAL_TIM_PWM_Start+0xaa>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2201      	movs	r2, #1
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 ff44 	bl	8009a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a2d      	ldr	r2, [pc, #180]	; (8008ca8 <HAL_TIM_PWM_Start+0x174>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_TIM_PWM_Start+0xcc>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a2c      	ldr	r2, [pc, #176]	; (8008cac <HAL_TIM_PWM_Start+0x178>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d101      	bne.n	8008c04 <HAL_TIM_PWM_Start+0xd0>
 8008c00:	2301      	movs	r3, #1
 8008c02:	e000      	b.n	8008c06 <HAL_TIM_PWM_Start+0xd2>
 8008c04:	2300      	movs	r3, #0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d007      	beq.n	8008c1a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a22      	ldr	r2, [pc, #136]	; (8008ca8 <HAL_TIM_PWM_Start+0x174>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d022      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x136>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c2c:	d01d      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x136>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a1f      	ldr	r2, [pc, #124]	; (8008cb0 <HAL_TIM_PWM_Start+0x17c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d018      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x136>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a1d      	ldr	r2, [pc, #116]	; (8008cb4 <HAL_TIM_PWM_Start+0x180>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d013      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x136>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a1c      	ldr	r2, [pc, #112]	; (8008cb8 <HAL_TIM_PWM_Start+0x184>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00e      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x136>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a16      	ldr	r2, [pc, #88]	; (8008cac <HAL_TIM_PWM_Start+0x178>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d009      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x136>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a18      	ldr	r2, [pc, #96]	; (8008cbc <HAL_TIM_PWM_Start+0x188>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d004      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x136>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a16      	ldr	r2, [pc, #88]	; (8008cc0 <HAL_TIM_PWM_Start+0x18c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d111      	bne.n	8008c8e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b06      	cmp	r3, #6
 8008c7a:	d010      	beq.n	8008c9e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0201 	orr.w	r2, r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c8c:	e007      	b.n	8008c9e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f042 0201 	orr.w	r2, r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	40010000 	.word	0x40010000
 8008cac:	40010400 	.word	0x40010400
 8008cb0:	40000400 	.word	0x40000400
 8008cb4:	40000800 	.word	0x40000800
 8008cb8:	40000c00 	.word	0x40000c00
 8008cbc:	40014000 	.word	0x40014000
 8008cc0:	40001800 	.word	0x40001800

08008cc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e097      	b.n	8008e08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d106      	bne.n	8008cf2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7fc f9cf 	bl	8005090 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	6812      	ldr	r2, [r2, #0]
 8008d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d08:	f023 0307 	bic.w	r3, r3, #7
 8008d0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3304      	adds	r3, #4
 8008d16:	4619      	mov	r1, r3
 8008d18:	4610      	mov	r0, r2
 8008d1a:	f000 fbc1 	bl	80094a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d46:	f023 0303 	bic.w	r3, r3, #3
 8008d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	021b      	lsls	r3, r3, #8
 8008d56:	4313      	orrs	r3, r2
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d64:	f023 030c 	bic.w	r3, r3, #12
 8008d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	021b      	lsls	r3, r3, #8
 8008d80:	4313      	orrs	r3, r2
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	011a      	lsls	r2, r3, #4
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	031b      	lsls	r3, r3, #12
 8008d94:	4313      	orrs	r3, r2
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008da2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008daa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	011b      	lsls	r3, r3, #4
 8008db6:	4313      	orrs	r3, r2
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d110      	bne.n	8008e62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d102      	bne.n	8008e4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e46:	7b7b      	ldrb	r3, [r7, #13]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d001      	beq.n	8008e50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e069      	b.n	8008f24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e60:	e031      	b.n	8008ec6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d110      	bne.n	8008e8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d102      	bne.n	8008e74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e6e:	7b3b      	ldrb	r3, [r7, #12]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d001      	beq.n	8008e78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e055      	b.n	8008f24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e88:	e01d      	b.n	8008ec6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d108      	bne.n	8008ea2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d105      	bne.n	8008ea2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e96:	7b7b      	ldrb	r3, [r7, #13]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d102      	bne.n	8008ea2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e9c:	7b3b      	ldrb	r3, [r7, #12]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d001      	beq.n	8008ea6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e03e      	b.n	8008f24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2202      	movs	r2, #2
 8008eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <HAL_TIM_Encoder_Start+0xc4>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d008      	beq.n	8008ee4 <HAL_TIM_Encoder_Start+0xd4>
 8008ed2:	e00f      	b.n	8008ef4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	2100      	movs	r1, #0
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fdc9 	bl	8009a74 <TIM_CCxChannelCmd>
      break;
 8008ee2:	e016      	b.n	8008f12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	2104      	movs	r1, #4
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fdc1 	bl	8009a74 <TIM_CCxChannelCmd>
      break;
 8008ef2:	e00e      	b.n	8008f12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	2100      	movs	r1, #0
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fdb9 	bl	8009a74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2201      	movs	r2, #1
 8008f08:	2104      	movs	r1, #4
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fdb2 	bl	8009a74 <TIM_CCxChannelCmd>
      break;
 8008f10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f042 0201 	orr.w	r2, r2, #1
 8008f20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d122      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d11b      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f06f 0202 	mvn.w	r2, #2
 8008f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	f003 0303 	and.w	r3, r3, #3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fa77 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 8008f74:	e005      	b.n	8008f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa69 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fa7a 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d122      	bne.n	8008fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d11b      	bne.n	8008fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0204 	mvn.w	r2, #4
 8008fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa4d 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 8008fc8:	e005      	b.n	8008fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fa3f 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fa50 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	f003 0308 	and.w	r3, r3, #8
 8008fe6:	2b08      	cmp	r3, #8
 8008fe8:	d122      	bne.n	8009030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	2b08      	cmp	r3, #8
 8008ff6:	d11b      	bne.n	8009030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f06f 0208 	mvn.w	r2, #8
 8009000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2204      	movs	r2, #4
 8009006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa23 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 800901c:	e005      	b.n	800902a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa15 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fa26 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0310 	and.w	r3, r3, #16
 800903a:	2b10      	cmp	r3, #16
 800903c:	d122      	bne.n	8009084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b10      	cmp	r3, #16
 800904a:	d11b      	bne.n	8009084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f06f 0210 	mvn.w	r2, #16
 8009054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2208      	movs	r2, #8
 800905a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f9f9 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 8009070:	e005      	b.n	800907e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f9eb 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f9fc 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b01      	cmp	r3, #1
 8009090:	d10e      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b01      	cmp	r3, #1
 800909e:	d107      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f06f 0201 	mvn.w	r2, #1
 80090a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7fb ff08 	bl	8004ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ba:	2b80      	cmp	r3, #128	; 0x80
 80090bc:	d10e      	bne.n	80090dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c8:	2b80      	cmp	r3, #128	; 0x80
 80090ca:	d107      	bne.n	80090dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fd78 	bl	8009bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e6:	2b40      	cmp	r3, #64	; 0x40
 80090e8:	d10e      	bne.n	8009108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f4:	2b40      	cmp	r3, #64	; 0x40
 80090f6:	d107      	bne.n	8009108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f9c1 	bl	800948a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b20      	cmp	r3, #32
 8009114:	d10e      	bne.n	8009134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b20      	cmp	r3, #32
 8009122:	d107      	bne.n	8009134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0220 	mvn.w	r2, #32
 800912c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fd42 	bl	8009bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009156:	2302      	movs	r3, #2
 8009158:	e0ae      	b.n	80092b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b0c      	cmp	r3, #12
 8009166:	f200 809f 	bhi.w	80092a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800916a:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	080091a5 	.word	0x080091a5
 8009174:	080092a9 	.word	0x080092a9
 8009178:	080092a9 	.word	0x080092a9
 800917c:	080092a9 	.word	0x080092a9
 8009180:	080091e5 	.word	0x080091e5
 8009184:	080092a9 	.word	0x080092a9
 8009188:	080092a9 	.word	0x080092a9
 800918c:	080092a9 	.word	0x080092a9
 8009190:	08009227 	.word	0x08009227
 8009194:	080092a9 	.word	0x080092a9
 8009198:	080092a9 	.word	0x080092a9
 800919c:	080092a9 	.word	0x080092a9
 80091a0:	08009267 	.word	0x08009267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68b9      	ldr	r1, [r7, #8]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fa18 	bl	80095e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0208 	orr.w	r2, r2, #8
 80091be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	699a      	ldr	r2, [r3, #24]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0204 	bic.w	r2, r2, #4
 80091ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6999      	ldr	r1, [r3, #24]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	691a      	ldr	r2, [r3, #16]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	619a      	str	r2, [r3, #24]
      break;
 80091e2:	e064      	b.n	80092ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68b9      	ldr	r1, [r7, #8]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fa68 	bl	80096c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	699a      	ldr	r2, [r3, #24]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	699a      	ldr	r2, [r3, #24]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800920e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6999      	ldr	r1, [r3, #24]
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	021a      	lsls	r2, r3, #8
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	619a      	str	r2, [r3, #24]
      break;
 8009224:	e043      	b.n	80092ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fabd 	bl	80097ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69da      	ldr	r2, [r3, #28]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0208 	orr.w	r2, r2, #8
 8009240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69da      	ldr	r2, [r3, #28]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0204 	bic.w	r2, r2, #4
 8009250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69d9      	ldr	r1, [r3, #28]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	691a      	ldr	r2, [r3, #16]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	61da      	str	r2, [r3, #28]
      break;
 8009264:	e023      	b.n	80092ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68b9      	ldr	r1, [r7, #8]
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fb11 	bl	8009894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69da      	ldr	r2, [r3, #28]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69da      	ldr	r2, [r3, #28]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69d9      	ldr	r1, [r3, #28]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	021a      	lsls	r2, r3, #8
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	61da      	str	r2, [r3, #28]
      break;
 80092a6:	e002      	b.n	80092ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	75fb      	strb	r3, [r7, #23]
      break;
 80092ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_TIM_ConfigClockSource+0x1c>
 80092d8:	2302      	movs	r3, #2
 80092da:	e0b4      	b.n	8009446 <HAL_TIM_ConfigClockSource+0x186>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009314:	d03e      	beq.n	8009394 <HAL_TIM_ConfigClockSource+0xd4>
 8009316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800931a:	f200 8087 	bhi.w	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800931e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009322:	f000 8086 	beq.w	8009432 <HAL_TIM_ConfigClockSource+0x172>
 8009326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932a:	d87f      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800932c:	2b70      	cmp	r3, #112	; 0x70
 800932e:	d01a      	beq.n	8009366 <HAL_TIM_ConfigClockSource+0xa6>
 8009330:	2b70      	cmp	r3, #112	; 0x70
 8009332:	d87b      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 8009334:	2b60      	cmp	r3, #96	; 0x60
 8009336:	d050      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x11a>
 8009338:	2b60      	cmp	r3, #96	; 0x60
 800933a:	d877      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800933c:	2b50      	cmp	r3, #80	; 0x50
 800933e:	d03c      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0xfa>
 8009340:	2b50      	cmp	r3, #80	; 0x50
 8009342:	d873      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 8009344:	2b40      	cmp	r3, #64	; 0x40
 8009346:	d058      	beq.n	80093fa <HAL_TIM_ConfigClockSource+0x13a>
 8009348:	2b40      	cmp	r3, #64	; 0x40
 800934a:	d86f      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800934c:	2b30      	cmp	r3, #48	; 0x30
 800934e:	d064      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009350:	2b30      	cmp	r3, #48	; 0x30
 8009352:	d86b      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 8009354:	2b20      	cmp	r3, #32
 8009356:	d060      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009358:	2b20      	cmp	r3, #32
 800935a:	d867      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800935c:	2b00      	cmp	r3, #0
 800935e:	d05c      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009360:	2b10      	cmp	r3, #16
 8009362:	d05a      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009364:	e062      	b.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6899      	ldr	r1, [r3, #8]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	f000 fb5d 	bl	8009a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	609a      	str	r2, [r3, #8]
      break;
 8009392:	e04f      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	6899      	ldr	r1, [r3, #8]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f000 fb46 	bl	8009a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093b6:	609a      	str	r2, [r3, #8]
      break;
 80093b8:	e03c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	6859      	ldr	r1, [r3, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	461a      	mov	r2, r3
 80093c8:	f000 faba 	bl	8009940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2150      	movs	r1, #80	; 0x50
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fb13 	bl	80099fe <TIM_ITRx_SetConfig>
      break;
 80093d8:	e02c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	6859      	ldr	r1, [r3, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f000 fad9 	bl	800999e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2160      	movs	r1, #96	; 0x60
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fb03 	bl	80099fe <TIM_ITRx_SetConfig>
      break;
 80093f8:	e01c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	6859      	ldr	r1, [r3, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	461a      	mov	r2, r3
 8009408:	f000 fa9a 	bl	8009940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2140      	movs	r1, #64	; 0x40
 8009412:	4618      	mov	r0, r3
 8009414:	f000 faf3 	bl	80099fe <TIM_ITRx_SetConfig>
      break;
 8009418:	e00c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f000 faea 	bl	80099fe <TIM_ITRx_SetConfig>
      break;
 800942a:	e003      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	73fb      	strb	r3, [r7, #15]
      break;
 8009430:	e000      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009444:	7bfb      	ldrb	r3, [r7, #15]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009456:	bf00      	nop
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
	...

080094a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a40      	ldr	r2, [pc, #256]	; (80095b4 <TIM_Base_SetConfig+0x114>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d013      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094be:	d00f      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a3d      	ldr	r2, [pc, #244]	; (80095b8 <TIM_Base_SetConfig+0x118>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00b      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a3c      	ldr	r2, [pc, #240]	; (80095bc <TIM_Base_SetConfig+0x11c>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d007      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a3b      	ldr	r2, [pc, #236]	; (80095c0 <TIM_Base_SetConfig+0x120>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d003      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a3a      	ldr	r2, [pc, #232]	; (80095c4 <TIM_Base_SetConfig+0x124>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d108      	bne.n	80094f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a2f      	ldr	r2, [pc, #188]	; (80095b4 <TIM_Base_SetConfig+0x114>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d02b      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009500:	d027      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a2c      	ldr	r2, [pc, #176]	; (80095b8 <TIM_Base_SetConfig+0x118>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d023      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a2b      	ldr	r2, [pc, #172]	; (80095bc <TIM_Base_SetConfig+0x11c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d01f      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a2a      	ldr	r2, [pc, #168]	; (80095c0 <TIM_Base_SetConfig+0x120>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d01b      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a29      	ldr	r2, [pc, #164]	; (80095c4 <TIM_Base_SetConfig+0x124>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d017      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a28      	ldr	r2, [pc, #160]	; (80095c8 <TIM_Base_SetConfig+0x128>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d013      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a27      	ldr	r2, [pc, #156]	; (80095cc <TIM_Base_SetConfig+0x12c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d00f      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a26      	ldr	r2, [pc, #152]	; (80095d0 <TIM_Base_SetConfig+0x130>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d00b      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a25      	ldr	r2, [pc, #148]	; (80095d4 <TIM_Base_SetConfig+0x134>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d007      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a24      	ldr	r2, [pc, #144]	; (80095d8 <TIM_Base_SetConfig+0x138>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d003      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a23      	ldr	r2, [pc, #140]	; (80095dc <TIM_Base_SetConfig+0x13c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d108      	bne.n	8009564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	4313      	orrs	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a0a      	ldr	r2, [pc, #40]	; (80095b4 <TIM_Base_SetConfig+0x114>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_Base_SetConfig+0xf8>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a0c      	ldr	r2, [pc, #48]	; (80095c4 <TIM_Base_SetConfig+0x124>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d103      	bne.n	80095a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	615a      	str	r2, [r3, #20]
}
 80095a6:	bf00      	nop
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	40010000 	.word	0x40010000
 80095b8:	40000400 	.word	0x40000400
 80095bc:	40000800 	.word	0x40000800
 80095c0:	40000c00 	.word	0x40000c00
 80095c4:	40010400 	.word	0x40010400
 80095c8:	40014000 	.word	0x40014000
 80095cc:	40014400 	.word	0x40014400
 80095d0:	40014800 	.word	0x40014800
 80095d4:	40001800 	.word	0x40001800
 80095d8:	40001c00 	.word	0x40001c00
 80095dc:	40002000 	.word	0x40002000

080095e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	f023 0201 	bic.w	r2, r3, #1
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800960e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f023 0303 	bic.w	r3, r3, #3
 8009616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f023 0302 	bic.w	r3, r3, #2
 8009628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	4313      	orrs	r3, r2
 8009632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a20      	ldr	r2, [pc, #128]	; (80096b8 <TIM_OC1_SetConfig+0xd8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d003      	beq.n	8009644 <TIM_OC1_SetConfig+0x64>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a1f      	ldr	r2, [pc, #124]	; (80096bc <TIM_OC1_SetConfig+0xdc>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d10c      	bne.n	800965e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f023 0308 	bic.w	r3, r3, #8
 800964a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	4313      	orrs	r3, r2
 8009654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f023 0304 	bic.w	r3, r3, #4
 800965c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a15      	ldr	r2, [pc, #84]	; (80096b8 <TIM_OC1_SetConfig+0xd8>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d003      	beq.n	800966e <TIM_OC1_SetConfig+0x8e>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a14      	ldr	r2, [pc, #80]	; (80096bc <TIM_OC1_SetConfig+0xdc>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d111      	bne.n	8009692 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800967c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	4313      	orrs	r3, r2
 8009686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	4313      	orrs	r3, r2
 8009690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	621a      	str	r2, [r3, #32]
}
 80096ac:	bf00      	nop
 80096ae:	371c      	adds	r7, #28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	40010000 	.word	0x40010000
 80096bc:	40010400 	.word	0x40010400

080096c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f023 0210 	bic.w	r2, r3, #16
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4313      	orrs	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f023 0320 	bic.w	r3, r3, #32
 800970a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	011b      	lsls	r3, r3, #4
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a22      	ldr	r2, [pc, #136]	; (80097a4 <TIM_OC2_SetConfig+0xe4>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_OC2_SetConfig+0x68>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a21      	ldr	r2, [pc, #132]	; (80097a8 <TIM_OC2_SetConfig+0xe8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d10d      	bne.n	8009744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800972e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	011b      	lsls	r3, r3, #4
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	4313      	orrs	r3, r2
 800973a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a17      	ldr	r2, [pc, #92]	; (80097a4 <TIM_OC2_SetConfig+0xe4>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d003      	beq.n	8009754 <TIM_OC2_SetConfig+0x94>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a16      	ldr	r2, [pc, #88]	; (80097a8 <TIM_OC2_SetConfig+0xe8>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d113      	bne.n	800977c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800975a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	4313      	orrs	r3, r2
 800976e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4313      	orrs	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	621a      	str	r2, [r3, #32]
}
 8009796:	bf00      	nop
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	40010000 	.word	0x40010000
 80097a8:	40010400 	.word	0x40010400

080097ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f023 0303 	bic.w	r3, r3, #3
 80097e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	021b      	lsls	r3, r3, #8
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a21      	ldr	r2, [pc, #132]	; (800988c <TIM_OC3_SetConfig+0xe0>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d003      	beq.n	8009812 <TIM_OC3_SetConfig+0x66>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a20      	ldr	r2, [pc, #128]	; (8009890 <TIM_OC3_SetConfig+0xe4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d10d      	bne.n	800982e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	021b      	lsls	r3, r3, #8
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	4313      	orrs	r3, r2
 8009824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800982c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a16      	ldr	r2, [pc, #88]	; (800988c <TIM_OC3_SetConfig+0xe0>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d003      	beq.n	800983e <TIM_OC3_SetConfig+0x92>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a15      	ldr	r2, [pc, #84]	; (8009890 <TIM_OC3_SetConfig+0xe4>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d113      	bne.n	8009866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800984c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	011b      	lsls	r3, r3, #4
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	4313      	orrs	r3, r2
 8009858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	011b      	lsls	r3, r3, #4
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4313      	orrs	r3, r2
 8009864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	621a      	str	r2, [r3, #32]
}
 8009880:	bf00      	nop
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	40010000 	.word	0x40010000
 8009890:	40010400 	.word	0x40010400

08009894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	031b      	lsls	r3, r3, #12
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a12      	ldr	r2, [pc, #72]	; (8009938 <TIM_OC4_SetConfig+0xa4>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d003      	beq.n	80098fc <TIM_OC4_SetConfig+0x68>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a11      	ldr	r2, [pc, #68]	; (800993c <TIM_OC4_SetConfig+0xa8>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d109      	bne.n	8009910 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	019b      	lsls	r3, r3, #6
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	4313      	orrs	r3, r2
 800990e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	621a      	str	r2, [r3, #32]
}
 800992a:	bf00      	nop
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	40010000 	.word	0x40010000
 800993c:	40010400 	.word	0x40010400

08009940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	f023 0201 	bic.w	r2, r3, #1
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800996a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	4313      	orrs	r3, r2
 8009974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f023 030a 	bic.w	r3, r3, #10
 800997c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	4313      	orrs	r3, r2
 8009984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	621a      	str	r2, [r3, #32]
}
 8009992:	bf00      	nop
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800999e:	b480      	push	{r7}
 80099a0:	b087      	sub	sp, #28
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	f023 0210 	bic.w	r2, r3, #16
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	031b      	lsls	r3, r3, #12
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	621a      	str	r2, [r3, #32]
}
 80099f2:	bf00      	nop
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	f043 0307 	orr.w	r3, r3, #7
 8009a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	609a      	str	r2, [r3, #8]
}
 8009a28:	bf00      	nop
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	021a      	lsls	r2, r3, #8
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	609a      	str	r2, [r3, #8]
}
 8009a68:	bf00      	nop
 8009a6a:	371c      	adds	r7, #28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f003 031f 	and.w	r3, r3, #31
 8009a86:	2201      	movs	r2, #1
 8009a88:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a1a      	ldr	r2, [r3, #32]
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	43db      	mvns	r3, r3
 8009a96:	401a      	ands	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a1a      	ldr	r2, [r3, #32]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f003 031f 	and.w	r3, r3, #31
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8009aac:	431a      	orrs	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	621a      	str	r2, [r3, #32]
}
 8009ab2:	bf00      	nop
 8009ab4:	371c      	adds	r7, #28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
	...

08009ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d101      	bne.n	8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e05a      	b.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a21      	ldr	r2, [pc, #132]	; (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d022      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b24:	d01d      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a1d      	ldr	r2, [pc, #116]	; (8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d018      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a1b      	ldr	r2, [pc, #108]	; (8009ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d013      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a1a      	ldr	r2, [pc, #104]	; (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d00e      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a18      	ldr	r2, [pc, #96]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d009      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a17      	ldr	r2, [pc, #92]	; (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d004      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a15      	ldr	r2, [pc, #84]	; (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d10c      	bne.n	8009b7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40000400 	.word	0x40000400
 8009ba4:	40000800 	.word	0x40000800
 8009ba8:	40000c00 	.word	0x40000c00
 8009bac:	40010400 	.word	0x40010400
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	40001800 	.word	0x40001800

08009bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e03f      	b.n	8009c72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d106      	bne.n	8009c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7fb fbb2 	bl	8005370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2224      	movs	r2, #36	; 0x24
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 f807 	bl	800ac38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	691a      	ldr	r2, [r3, #16]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695a      	ldr	r2, [r3, #20]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68da      	ldr	r2, [r3, #12]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b08a      	sub	sp, #40	; 0x28
 8009c7e:	af02      	add	r7, sp, #8
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	603b      	str	r3, [r7, #0]
 8009c86:	4613      	mov	r3, r2
 8009c88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b20      	cmp	r3, #32
 8009c98:	d17c      	bne.n	8009d94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <HAL_UART_Transmit+0x2c>
 8009ca0:	88fb      	ldrh	r3, [r7, #6]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e075      	b.n	8009d96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d101      	bne.n	8009cb8 <HAL_UART_Transmit+0x3e>
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	e06e      	b.n	8009d96 <HAL_UART_Transmit+0x11c>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2221      	movs	r2, #33	; 0x21
 8009cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cce:	f7fb fead 	bl	8005a2c <HAL_GetTick>
 8009cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	88fa      	ldrh	r2, [r7, #6]
 8009cd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	88fa      	ldrh	r2, [r7, #6]
 8009cde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce8:	d108      	bne.n	8009cfc <HAL_UART_Transmit+0x82>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d104      	bne.n	8009cfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	61bb      	str	r3, [r7, #24]
 8009cfa:	e003      	b.n	8009d04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009d0c:	e02a      	b.n	8009d64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2200      	movs	r2, #0
 8009d16:	2180      	movs	r1, #128	; 0x80
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f000 fc81 	bl	800a620 <UART_WaitOnFlagUntilTimeout>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e036      	b.n	8009d96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10b      	bne.n	8009d46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	3302      	adds	r3, #2
 8009d42:	61bb      	str	r3, [r7, #24]
 8009d44:	e007      	b.n	8009d56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	781a      	ldrb	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	3301      	adds	r3, #1
 8009d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1cf      	bne.n	8009d0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2200      	movs	r2, #0
 8009d76:	2140      	movs	r1, #64	; 0x40
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 fc51 	bl	800a620 <UART_WaitOnFlagUntilTimeout>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e006      	b.n	8009d96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2220      	movs	r2, #32
 8009d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	e000      	b.n	8009d96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d94:	2302      	movs	r3, #2
  }
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b085      	sub	sp, #20
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	4613      	mov	r3, r2
 8009daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d130      	bne.n	8009e1a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <HAL_UART_Transmit_IT+0x26>
 8009dbe:	88fb      	ldrh	r3, [r7, #6]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e029      	b.n	8009e1c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d101      	bne.n	8009dd6 <HAL_UART_Transmit_IT+0x38>
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e022      	b.n	8009e1c <HAL_UART_Transmit_IT+0x7e>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	88fa      	ldrh	r2, [r7, #6]
 8009de8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	88fa      	ldrh	r2, [r7, #6]
 8009dee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2221      	movs	r2, #33	; 0x21
 8009dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68da      	ldr	r2, [r3, #12]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e14:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	e000      	b.n	8009e1c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009e1a:	2302      	movs	r3, #2
  }
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	4613      	mov	r3, r2
 8009e34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b20      	cmp	r3, #32
 8009e40:	d11d      	bne.n	8009e7e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <HAL_UART_Receive_IT+0x26>
 8009e48:	88fb      	ldrh	r3, [r7, #6]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e016      	b.n	8009e80 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d101      	bne.n	8009e60 <HAL_UART_Receive_IT+0x38>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e00f      	b.n	8009e80 <HAL_UART_Receive_IT+0x58>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009e6e:	88fb      	ldrh	r3, [r7, #6]
 8009e70:	461a      	mov	r2, r3
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 fc41 	bl	800a6fc <UART_Start_Receive_IT>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	e000      	b.n	8009e80 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009e7e:	2302      	movs	r3, #2
  }
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	4613      	mov	r3, r2
 8009e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b20      	cmp	r3, #32
 8009ea0:	d11d      	bne.n	8009ede <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <HAL_UART_Receive_DMA+0x26>
 8009ea8:	88fb      	ldrh	r3, [r7, #6]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e016      	b.n	8009ee0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d101      	bne.n	8009ec0 <HAL_UART_Receive_DMA+0x38>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	e00f      	b.n	8009ee0 <HAL_UART_Receive_DMA+0x58>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	68b9      	ldr	r1, [r7, #8]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f000 fc4f 	bl	800a778 <UART_Start_Receive_DMA>
 8009eda:	4603      	mov	r3, r0
 8009edc:	e000      	b.n	8009ee0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009ede:	2302      	movs	r3, #2
  }
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b0ba      	sub	sp, #232	; 0xe8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009f14:	2300      	movs	r3, #0
 8009f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10f      	bne.n	8009f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d009      	beq.n	8009f4e <HAL_UART_IRQHandler+0x66>
 8009f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fdbb 	bl	800aac2 <UART_Receive_IT>
      return;
 8009f4c:	e256      	b.n	800a3fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 80de 	beq.w	800a114 <HAL_UART_IRQHandler+0x22c>
 8009f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 80d1 	beq.w	800a114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00b      	beq.n	8009f96 <HAL_UART_IRQHandler+0xae>
 8009f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d005      	beq.n	8009f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	f043 0201 	orr.w	r2, r3, #1
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f9a:	f003 0304 	and.w	r3, r3, #4
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00b      	beq.n	8009fba <HAL_UART_IRQHandler+0xd2>
 8009fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d005      	beq.n	8009fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb2:	f043 0202 	orr.w	r2, r3, #2
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00b      	beq.n	8009fde <HAL_UART_IRQHandler+0xf6>
 8009fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d005      	beq.n	8009fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd6:	f043 0204 	orr.w	r2, r3, #4
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fe2:	f003 0308 	and.w	r3, r3, #8
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d011      	beq.n	800a00e <HAL_UART_IRQHandler+0x126>
 8009fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fee:	f003 0320 	and.w	r3, r3, #32
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d105      	bne.n	800a002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a006:	f043 0208 	orr.w	r2, r3, #8
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 81ed 	beq.w	800a3f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a01c:	f003 0320 	and.w	r3, r3, #32
 800a020:	2b00      	cmp	r3, #0
 800a022:	d008      	beq.n	800a036 <HAL_UART_IRQHandler+0x14e>
 800a024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a028:	f003 0320 	and.w	r3, r3, #32
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 fd46 	bl	800aac2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a040:	2b40      	cmp	r3, #64	; 0x40
 800a042:	bf0c      	ite	eq
 800a044:	2301      	moveq	r3, #1
 800a046:	2300      	movne	r3, #0
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	2b00      	cmp	r3, #0
 800a058:	d103      	bne.n	800a062 <HAL_UART_IRQHandler+0x17a>
 800a05a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d04f      	beq.n	800a102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fc4e 	bl	800a904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a072:	2b40      	cmp	r3, #64	; 0x40
 800a074:	d141      	bne.n	800a0fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3314      	adds	r3, #20
 800a07c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a084:	e853 3f00 	ldrex	r3, [r3]
 800a088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a08c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3314      	adds	r3, #20
 800a09e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a0a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a0a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a0ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a0ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1d9      	bne.n	800a076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d013      	beq.n	800a0f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	4a7d      	ldr	r2, [pc, #500]	; (800a2c4 <HAL_UART_IRQHandler+0x3dc>)
 800a0d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fd faee 	bl	80076b8 <HAL_DMA_Abort_IT>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d016      	beq.n	800a110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f0:	e00e      	b.n	800a110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7f8 fe84 	bl	8002e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f8:	e00a      	b.n	800a110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7f8 fe80 	bl	8002e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a100:	e006      	b.n	800a110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7f8 fe7c 	bl	8002e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a10e:	e170      	b.n	800a3f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a110:	bf00      	nop
    return;
 800a112:	e16e      	b.n	800a3f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a118:	2b01      	cmp	r3, #1
 800a11a:	f040 814a 	bne.w	800a3b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a122:	f003 0310 	and.w	r3, r3, #16
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 8143 	beq.w	800a3b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a130:	f003 0310 	and.w	r3, r3, #16
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 813c 	beq.w	800a3b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a13a:	2300      	movs	r3, #0
 800a13c:	60bb      	str	r3, [r7, #8]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60bb      	str	r3, [r7, #8]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	60bb      	str	r3, [r7, #8]
 800a14e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15a:	2b40      	cmp	r3, #64	; 0x40
 800a15c:	f040 80b4 	bne.w	800a2c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a16c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 8140 	beq.w	800a3f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a17a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a17e:	429a      	cmp	r2, r3
 800a180:	f080 8139 	bcs.w	800a3f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a18a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a196:	f000 8088 	beq.w	800a2aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	330c      	adds	r3, #12
 800a1a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a1b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	330c      	adds	r3, #12
 800a1c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a1c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a1ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a1d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a1de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1d9      	bne.n	800a19a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3314      	adds	r3, #20
 800a1ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a1f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1f8:	f023 0301 	bic.w	r3, r3, #1
 800a1fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3314      	adds	r3, #20
 800a206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a20a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a20e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a216:	e841 2300 	strex	r3, r2, [r1]
 800a21a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a21c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1e1      	bne.n	800a1e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	3314      	adds	r3, #20
 800a228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a22c:	e853 3f00 	ldrex	r3, [r3]
 800a230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3314      	adds	r3, #20
 800a242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a246:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a24c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e3      	bne.n	800a222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2220      	movs	r2, #32
 800a25e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	330c      	adds	r3, #12
 800a26e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a272:	e853 3f00 	ldrex	r3, [r3]
 800a276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a27a:	f023 0310 	bic.w	r3, r3, #16
 800a27e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	330c      	adds	r3, #12
 800a288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a28c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a28e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a294:	e841 2300 	strex	r3, r2, [r1]
 800a298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a29a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1e3      	bne.n	800a268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fd f997 	bl	80075d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f8ac 	bl	800a418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2c0:	e099      	b.n	800a3f6 <HAL_UART_IRQHandler+0x50e>
 800a2c2:	bf00      	nop
 800a2c4:	0800a9cb 	.word	0x0800a9cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 808b 	beq.w	800a3fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a2e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 8086 	beq.w	800a3fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	330c      	adds	r3, #12
 800a2f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a304:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	330c      	adds	r3, #12
 800a30e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a312:	647a      	str	r2, [r7, #68]	; 0x44
 800a314:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a316:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a31a:	e841 2300 	strex	r3, r2, [r1]
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1e3      	bne.n	800a2ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3314      	adds	r3, #20
 800a32c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	623b      	str	r3, [r7, #32]
   return(result);
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	f023 0301 	bic.w	r3, r3, #1
 800a33c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3314      	adds	r3, #20
 800a346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a34a:	633a      	str	r2, [r7, #48]	; 0x30
 800a34c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a352:	e841 2300 	strex	r3, r2, [r1]
 800a356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1e3      	bne.n	800a326 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2220      	movs	r2, #32
 800a362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	330c      	adds	r3, #12
 800a372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	e853 3f00 	ldrex	r3, [r3]
 800a37a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f023 0310 	bic.w	r3, r3, #16
 800a382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	330c      	adds	r3, #12
 800a38c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a390:	61fa      	str	r2, [r7, #28]
 800a392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a394:	69b9      	ldr	r1, [r7, #24]
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	e841 2300 	strex	r3, r2, [r1]
 800a39c:	617b      	str	r3, [r7, #20]
   return(result);
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1e3      	bne.n	800a36c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f834 	bl	800a418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a3b0:	e023      	b.n	800a3fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a3b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d009      	beq.n	800a3d2 <HAL_UART_IRQHandler+0x4ea>
 800a3be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fb11 	bl	800a9f2 <UART_Transmit_IT>
    return;
 800a3d0:	e014      	b.n	800a3fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00e      	beq.n	800a3fc <HAL_UART_IRQHandler+0x514>
 800a3de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d008      	beq.n	800a3fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fb51 	bl	800aa92 <UART_EndTransmit_IT>
    return;
 800a3f0:	e004      	b.n	800a3fc <HAL_UART_IRQHandler+0x514>
    return;
 800a3f2:	bf00      	nop
 800a3f4:	e002      	b.n	800a3fc <HAL_UART_IRQHandler+0x514>
      return;
 800a3f6:	bf00      	nop
 800a3f8:	e000      	b.n	800a3fc <HAL_UART_IRQHandler+0x514>
      return;
 800a3fa:	bf00      	nop
  }
}
 800a3fc:	37e8      	adds	r7, #232	; 0xe8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop

0800a404 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b09c      	sub	sp, #112	; 0x70
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d172      	bne.n	800a532 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a44c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a44e:	2200      	movs	r2, #0
 800a450:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	330c      	adds	r3, #12
 800a458:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a45c:	e853 3f00 	ldrex	r3, [r3]
 800a460:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a468:	66bb      	str	r3, [r7, #104]	; 0x68
 800a46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	330c      	adds	r3, #12
 800a470:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a472:	65ba      	str	r2, [r7, #88]	; 0x58
 800a474:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a476:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a478:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a47a:	e841 2300 	strex	r3, r2, [r1]
 800a47e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1e5      	bne.n	800a452 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3314      	adds	r3, #20
 800a48c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	e853 3f00 	ldrex	r3, [r3]
 800a494:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a498:	f023 0301 	bic.w	r3, r3, #1
 800a49c:	667b      	str	r3, [r7, #100]	; 0x64
 800a49e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3314      	adds	r3, #20
 800a4a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4a6:	647a      	str	r2, [r7, #68]	; 0x44
 800a4a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ae:	e841 2300 	strex	r3, r2, [r1]
 800a4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e5      	bne.n	800a486 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3314      	adds	r3, #20
 800a4c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	e853 3f00 	ldrex	r3, [r3]
 800a4c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3314      	adds	r3, #20
 800a4d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4da:	633a      	str	r2, [r7, #48]	; 0x30
 800a4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e2:	e841 2300 	strex	r3, r2, [r1]
 800a4e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1e5      	bne.n	800a4ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d119      	bne.n	800a532 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	330c      	adds	r3, #12
 800a504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	e853 3f00 	ldrex	r3, [r3]
 800a50c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f023 0310 	bic.w	r3, r3, #16
 800a514:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	330c      	adds	r3, #12
 800a51c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a51e:	61fa      	str	r2, [r7, #28]
 800a520:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	69b9      	ldr	r1, [r7, #24]
 800a524:	69fa      	ldr	r2, [r7, #28]
 800a526:	e841 2300 	strex	r3, r2, [r1]
 800a52a:	617b      	str	r3, [r7, #20]
   return(result);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1e5      	bne.n	800a4fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a536:	2b01      	cmp	r3, #1
 800a538:	d106      	bne.n	800a548 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a53c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a53e:	4619      	mov	r1, r3
 800a540:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a542:	f7ff ff69 	bl	800a418 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a546:	e002      	b.n	800a54e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a548:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a54a:	f7f8 fbf3 	bl	8002d34 <HAL_UART_RxCpltCallback>
}
 800a54e:	bf00      	nop
 800a550:	3770      	adds	r7, #112	; 0x70
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a562:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d108      	bne.n	800a57e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a570:	085b      	lsrs	r3, r3, #1
 800a572:	b29b      	uxth	r3, r3
 800a574:	4619      	mov	r1, r3
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f7ff ff4e 	bl	800a418 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a57c:	e002      	b.n	800a584 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff ff40 	bl	800a404 <HAL_UART_RxHalfCpltCallback>
}
 800a584:	bf00      	nop
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a594:	2300      	movs	r3, #0
 800a596:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a8:	2b80      	cmp	r3, #128	; 0x80
 800a5aa:	bf0c      	ite	eq
 800a5ac:	2301      	moveq	r3, #1
 800a5ae:	2300      	movne	r3, #0
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b21      	cmp	r3, #33	; 0x21
 800a5be:	d108      	bne.n	800a5d2 <UART_DMAError+0x46>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d005      	beq.n	800a5d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a5cc:	68b8      	ldr	r0, [r7, #8]
 800a5ce:	f000 f971 	bl	800a8b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5dc:	2b40      	cmp	r3, #64	; 0x40
 800a5de:	bf0c      	ite	eq
 800a5e0:	2301      	moveq	r3, #1
 800a5e2:	2300      	movne	r3, #0
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b22      	cmp	r3, #34	; 0x22
 800a5f2:	d108      	bne.n	800a606 <UART_DMAError+0x7a>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d005      	beq.n	800a606 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a600:	68b8      	ldr	r0, [r7, #8]
 800a602:	f000 f97f 	bl	800a904 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60a:	f043 0210 	orr.w	r2, r3, #16
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a612:	68b8      	ldr	r0, [r7, #8]
 800a614:	f7f8 fbf4 	bl	8002e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a618:	bf00      	nop
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b090      	sub	sp, #64	; 0x40
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	4613      	mov	r3, r2
 800a62e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a630:	e050      	b.n	800a6d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a638:	d04c      	beq.n	800a6d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a63a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d007      	beq.n	800a650 <UART_WaitOnFlagUntilTimeout+0x30>
 800a640:	f7fb f9f4 	bl	8005a2c <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d241      	bcs.n	800a6d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	330c      	adds	r3, #12
 800a656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a666:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	330c      	adds	r3, #12
 800a66e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a670:	637a      	str	r2, [r7, #52]	; 0x34
 800a672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e5      	bne.n	800a650 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3314      	adds	r3, #20
 800a68a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	e853 3f00 	ldrex	r3, [r3]
 800a692:	613b      	str	r3, [r7, #16]
   return(result);
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f023 0301 	bic.w	r3, r3, #1
 800a69a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3314      	adds	r3, #20
 800a6a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6a4:	623a      	str	r2, [r7, #32]
 800a6a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a8:	69f9      	ldr	r1, [r7, #28]
 800a6aa:	6a3a      	ldr	r2, [r7, #32]
 800a6ac:	e841 2300 	strex	r3, r2, [r1]
 800a6b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d1e5      	bne.n	800a684 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2220      	movs	r2, #32
 800a6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e00f      	b.n	800a6f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	4013      	ands	r3, r2
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	bf0c      	ite	eq
 800a6e4:	2301      	moveq	r3, #1
 800a6e6:	2300      	movne	r3, #0
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d09f      	beq.n	800a632 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3740      	adds	r7, #64	; 0x40
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	4613      	mov	r3, r2
 800a708:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	88fa      	ldrh	r2, [r7, #6]
 800a714:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	88fa      	ldrh	r2, [r7, #6]
 800a71a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2222      	movs	r2, #34	; 0x22
 800a726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d007      	beq.n	800a74a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68da      	ldr	r2, [r3, #12]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a748:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	695a      	ldr	r2, [r3, #20]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f042 0201 	orr.w	r2, r2, #1
 800a758:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68da      	ldr	r2, [r3, #12]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f042 0220 	orr.w	r2, r2, #32
 800a768:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b098      	sub	sp, #96	; 0x60
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	4613      	mov	r3, r2
 800a784:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	88fa      	ldrh	r2, [r7, #6]
 800a790:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2222      	movs	r2, #34	; 0x22
 800a79c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a4:	4a40      	ldr	r2, [pc, #256]	; (800a8a8 <UART_Start_Receive_DMA+0x130>)
 800a7a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ac:	4a3f      	ldr	r2, [pc, #252]	; (800a8ac <UART_Start_Receive_DMA+0x134>)
 800a7ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b4:	4a3e      	ldr	r2, [pc, #248]	; (800a8b0 <UART_Start_Receive_DMA+0x138>)
 800a7b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7bc:	2200      	movs	r2, #0
 800a7be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a7c0:	f107 0308 	add.w	r3, r7, #8
 800a7c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	88fb      	ldrh	r3, [r7, #6]
 800a7d8:	f7fc fea6 	bl	8007528 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a7dc:	2300      	movs	r3, #0
 800a7de:	613b      	str	r3, [r7, #16]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	613b      	str	r3, [r7, #16]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	613b      	str	r3, [r7, #16]
 800a7f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d019      	beq.n	800a836 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	330c      	adds	r3, #12
 800a808:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a80c:	e853 3f00 	ldrex	r3, [r3]
 800a810:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a818:	65bb      	str	r3, [r7, #88]	; 0x58
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	330c      	adds	r3, #12
 800a820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a822:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a824:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a826:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a828:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a82a:	e841 2300 	strex	r3, r2, [r1]
 800a82e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e5      	bne.n	800a802 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3314      	adds	r3, #20
 800a83c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a848:	f043 0301 	orr.w	r3, r3, #1
 800a84c:	657b      	str	r3, [r7, #84]	; 0x54
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3314      	adds	r3, #20
 800a854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a856:	63ba      	str	r2, [r7, #56]	; 0x38
 800a858:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a85c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e5      	bne.n	800a836 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3314      	adds	r3, #20
 800a870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	617b      	str	r3, [r7, #20]
   return(result);
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a880:	653b      	str	r3, [r7, #80]	; 0x50
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3314      	adds	r3, #20
 800a888:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a88a:	627a      	str	r2, [r7, #36]	; 0x24
 800a88c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	6a39      	ldr	r1, [r7, #32]
 800a890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	61fb      	str	r3, [r7, #28]
   return(result);
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e5      	bne.n	800a86a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3760      	adds	r7, #96	; 0x60
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	0800a431 	.word	0x0800a431
 800a8ac:	0800a557 	.word	0x0800a557
 800a8b0:	0800a58d 	.word	0x0800a58d

0800a8b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b089      	sub	sp, #36	; 0x24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	330c      	adds	r3, #12
 800a8c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	e853 3f00 	ldrex	r3, [r3]
 800a8ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	330c      	adds	r3, #12
 800a8da:	69fa      	ldr	r2, [r7, #28]
 800a8dc:	61ba      	str	r2, [r7, #24]
 800a8de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e0:	6979      	ldr	r1, [r7, #20]
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	e841 2300 	strex	r3, r2, [r1]
 800a8e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1e5      	bne.n	800a8bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a8f8:	bf00      	nop
 800a8fa:	3724      	adds	r7, #36	; 0x24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a904:	b480      	push	{r7}
 800a906:	b095      	sub	sp, #84	; 0x54
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	330c      	adds	r3, #12
 800a912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a916:	e853 3f00 	ldrex	r3, [r3]
 800a91a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a922:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	330c      	adds	r3, #12
 800a92a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a92c:	643a      	str	r2, [r7, #64]	; 0x40
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a934:	e841 2300 	strex	r3, r2, [r1]
 800a938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1e5      	bne.n	800a90c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3314      	adds	r3, #20
 800a946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	e853 3f00 	ldrex	r3, [r3]
 800a94e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	f023 0301 	bic.w	r3, r3, #1
 800a956:	64bb      	str	r3, [r7, #72]	; 0x48
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3314      	adds	r3, #20
 800a95e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a960:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a968:	e841 2300 	strex	r3, r2, [r1]
 800a96c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1e5      	bne.n	800a940 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d119      	bne.n	800a9b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	330c      	adds	r3, #12
 800a982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	e853 3f00 	ldrex	r3, [r3]
 800a98a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	f023 0310 	bic.w	r3, r3, #16
 800a992:	647b      	str	r3, [r7, #68]	; 0x44
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	330c      	adds	r3, #12
 800a99a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a99c:	61ba      	str	r2, [r7, #24]
 800a99e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a0:	6979      	ldr	r1, [r7, #20]
 800a9a2:	69ba      	ldr	r2, [r7, #24]
 800a9a4:	e841 2300 	strex	r3, r2, [r1]
 800a9a8:	613b      	str	r3, [r7, #16]
   return(result);
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1e5      	bne.n	800a97c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2220      	movs	r2, #32
 800a9b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a9be:	bf00      	nop
 800a9c0:	3754      	adds	r7, #84	; 0x54
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f7f8 fa0b 	bl	8002e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9ea:	bf00      	nop
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b085      	sub	sp, #20
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b21      	cmp	r3, #33	; 0x21
 800aa04:	d13e      	bne.n	800aa84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa0e:	d114      	bne.n	800aa3a <UART_Transmit_IT+0x48>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d110      	bne.n	800aa3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	1c9a      	adds	r2, r3, #2
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	621a      	str	r2, [r3, #32]
 800aa38:	e008      	b.n	800aa4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a1b      	ldr	r3, [r3, #32]
 800aa3e:	1c59      	adds	r1, r3, #1
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	6211      	str	r1, [r2, #32]
 800aa44:	781a      	ldrb	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	3b01      	subs	r3, #1
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10f      	bne.n	800aa80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68da      	ldr	r2, [r3, #12]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68da      	ldr	r2, [r3, #12]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa80:	2300      	movs	r3, #0
 800aa82:	e000      	b.n	800aa86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aa84:	2302      	movs	r3, #2
  }
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b082      	sub	sp, #8
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68da      	ldr	r2, [r3, #12]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2220      	movs	r2, #32
 800aaae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7f8 f9ce 	bl	8002e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b08c      	sub	sp, #48	; 0x30
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b22      	cmp	r3, #34	; 0x22
 800aad4:	f040 80ab 	bne.w	800ac2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aae0:	d117      	bne.n	800ab12 <UART_Receive_IT+0x50>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d113      	bne.n	800ab12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0a:	1c9a      	adds	r2, r3, #2
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	629a      	str	r2, [r3, #40]	; 0x28
 800ab10:	e026      	b.n	800ab60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab24:	d007      	beq.n	800ab36 <UART_Receive_IT+0x74>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10a      	bne.n	800ab44 <UART_Receive_IT+0x82>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab40:	701a      	strb	r2, [r3, #0]
 800ab42:	e008      	b.n	800ab56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	1c5a      	adds	r2, r3, #1
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	3b01      	subs	r3, #1
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d15a      	bne.n	800ac2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68da      	ldr	r2, [r3, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f022 0220 	bic.w	r2, r2, #32
 800ab82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	695a      	ldr	r2, [r3, #20]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f022 0201 	bic.w	r2, r2, #1
 800aba2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2220      	movs	r2, #32
 800aba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d135      	bne.n	800ac20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	330c      	adds	r3, #12
 800abc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	e853 3f00 	ldrex	r3, [r3]
 800abc8:	613b      	str	r3, [r7, #16]
   return(result);
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f023 0310 	bic.w	r3, r3, #16
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	330c      	adds	r3, #12
 800abd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abda:	623a      	str	r2, [r7, #32]
 800abdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abde:	69f9      	ldr	r1, [r7, #28]
 800abe0:	6a3a      	ldr	r2, [r7, #32]
 800abe2:	e841 2300 	strex	r3, r2, [r1]
 800abe6:	61bb      	str	r3, [r7, #24]
   return(result);
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1e5      	bne.n	800abba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0310 	and.w	r3, r3, #16
 800abf8:	2b10      	cmp	r3, #16
 800abfa:	d10a      	bne.n	800ac12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800abfc:	2300      	movs	r3, #0
 800abfe:	60fb      	str	r3, [r7, #12]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f7ff fbfd 	bl	800a418 <HAL_UARTEx_RxEventCallback>
 800ac1e:	e002      	b.n	800ac26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7f8 f887 	bl	8002d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	e002      	b.n	800ac30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e000      	b.n	800ac30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ac2e:	2302      	movs	r3, #2
  }
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3730      	adds	r7, #48	; 0x30
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac3c:	b0c0      	sub	sp, #256	; 0x100
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ac50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac54:	68d9      	ldr	r1, [r3, #12]
 800ac56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	ea40 0301 	orr.w	r3, r0, r1
 800ac60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ac62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac66:	689a      	ldr	r2, [r3, #8]
 800ac68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	431a      	orrs	r2, r3
 800ac78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ac84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ac90:	f021 010c 	bic.w	r1, r1, #12
 800ac94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800acae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acb2:	6999      	ldr	r1, [r3, #24]
 800acb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	ea40 0301 	orr.w	r3, r0, r1
 800acbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800acc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	4b8f      	ldr	r3, [pc, #572]	; (800af04 <UART_SetConfig+0x2cc>)
 800acc8:	429a      	cmp	r2, r3
 800acca:	d005      	beq.n	800acd8 <UART_SetConfig+0xa0>
 800accc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	4b8d      	ldr	r3, [pc, #564]	; (800af08 <UART_SetConfig+0x2d0>)
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d104      	bne.n	800ace2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800acd8:	f7fd fdcc 	bl	8008874 <HAL_RCC_GetPCLK2Freq>
 800acdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ace0:	e003      	b.n	800acea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ace2:	f7fd fdb3 	bl	800884c <HAL_RCC_GetPCLK1Freq>
 800ace6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acf4:	f040 810c 	bne.w	800af10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800acf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acfc:	2200      	movs	r2, #0
 800acfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ad06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	462b      	mov	r3, r5
 800ad0e:	1891      	adds	r1, r2, r2
 800ad10:	65b9      	str	r1, [r7, #88]	; 0x58
 800ad12:	415b      	adcs	r3, r3
 800ad14:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	eb12 0801 	adds.w	r8, r2, r1
 800ad20:	4629      	mov	r1, r5
 800ad22:	eb43 0901 	adc.w	r9, r3, r1
 800ad26:	f04f 0200 	mov.w	r2, #0
 800ad2a:	f04f 0300 	mov.w	r3, #0
 800ad2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad3a:	4690      	mov	r8, r2
 800ad3c:	4699      	mov	r9, r3
 800ad3e:	4623      	mov	r3, r4
 800ad40:	eb18 0303 	adds.w	r3, r8, r3
 800ad44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad48:	462b      	mov	r3, r5
 800ad4a:	eb49 0303 	adc.w	r3, r9, r3
 800ad4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ad62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad66:	460b      	mov	r3, r1
 800ad68:	18db      	adds	r3, r3, r3
 800ad6a:	653b      	str	r3, [r7, #80]	; 0x50
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	eb42 0303 	adc.w	r3, r2, r3
 800ad72:	657b      	str	r3, [r7, #84]	; 0x54
 800ad74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ad78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ad7c:	f7f5 ff64 	bl	8000c48 <__aeabi_uldivmod>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4b61      	ldr	r3, [pc, #388]	; (800af0c <UART_SetConfig+0x2d4>)
 800ad86:	fba3 2302 	umull	r2, r3, r3, r2
 800ad8a:	095b      	lsrs	r3, r3, #5
 800ad8c:	011c      	lsls	r4, r3, #4
 800ad8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad92:	2200      	movs	r2, #0
 800ad94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ad9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ada0:	4642      	mov	r2, r8
 800ada2:	464b      	mov	r3, r9
 800ada4:	1891      	adds	r1, r2, r2
 800ada6:	64b9      	str	r1, [r7, #72]	; 0x48
 800ada8:	415b      	adcs	r3, r3
 800adaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800adb0:	4641      	mov	r1, r8
 800adb2:	eb12 0a01 	adds.w	sl, r2, r1
 800adb6:	4649      	mov	r1, r9
 800adb8:	eb43 0b01 	adc.w	fp, r3, r1
 800adbc:	f04f 0200 	mov.w	r2, #0
 800adc0:	f04f 0300 	mov.w	r3, #0
 800adc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800adc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800adcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800add0:	4692      	mov	sl, r2
 800add2:	469b      	mov	fp, r3
 800add4:	4643      	mov	r3, r8
 800add6:	eb1a 0303 	adds.w	r3, sl, r3
 800adda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adde:	464b      	mov	r3, r9
 800ade0:	eb4b 0303 	adc.w	r3, fp, r3
 800ade4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ade8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800adf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800adf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800adfc:	460b      	mov	r3, r1
 800adfe:	18db      	adds	r3, r3, r3
 800ae00:	643b      	str	r3, [r7, #64]	; 0x40
 800ae02:	4613      	mov	r3, r2
 800ae04:	eb42 0303 	adc.w	r3, r2, r3
 800ae08:	647b      	str	r3, [r7, #68]	; 0x44
 800ae0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ae0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ae12:	f7f5 ff19 	bl	8000c48 <__aeabi_uldivmod>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	4b3b      	ldr	r3, [pc, #236]	; (800af0c <UART_SetConfig+0x2d4>)
 800ae1e:	fba3 2301 	umull	r2, r3, r3, r1
 800ae22:	095b      	lsrs	r3, r3, #5
 800ae24:	2264      	movs	r2, #100	; 0x64
 800ae26:	fb02 f303 	mul.w	r3, r2, r3
 800ae2a:	1acb      	subs	r3, r1, r3
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ae32:	4b36      	ldr	r3, [pc, #216]	; (800af0c <UART_SetConfig+0x2d4>)
 800ae34:	fba3 2302 	umull	r2, r3, r3, r2
 800ae38:	095b      	lsrs	r3, r3, #5
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae40:	441c      	add	r4, r3
 800ae42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae46:	2200      	movs	r2, #0
 800ae48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ae50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ae54:	4642      	mov	r2, r8
 800ae56:	464b      	mov	r3, r9
 800ae58:	1891      	adds	r1, r2, r2
 800ae5a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ae5c:	415b      	adcs	r3, r3
 800ae5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae64:	4641      	mov	r1, r8
 800ae66:	1851      	adds	r1, r2, r1
 800ae68:	6339      	str	r1, [r7, #48]	; 0x30
 800ae6a:	4649      	mov	r1, r9
 800ae6c:	414b      	adcs	r3, r1
 800ae6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ae70:	f04f 0200 	mov.w	r2, #0
 800ae74:	f04f 0300 	mov.w	r3, #0
 800ae78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ae7c:	4659      	mov	r1, fp
 800ae7e:	00cb      	lsls	r3, r1, #3
 800ae80:	4651      	mov	r1, sl
 800ae82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae86:	4651      	mov	r1, sl
 800ae88:	00ca      	lsls	r2, r1, #3
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4603      	mov	r3, r0
 800ae90:	4642      	mov	r2, r8
 800ae92:	189b      	adds	r3, r3, r2
 800ae94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae98:	464b      	mov	r3, r9
 800ae9a:	460a      	mov	r2, r1
 800ae9c:	eb42 0303 	adc.w	r3, r2, r3
 800aea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aeb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aeb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aeb8:	460b      	mov	r3, r1
 800aeba:	18db      	adds	r3, r3, r3
 800aebc:	62bb      	str	r3, [r7, #40]	; 0x28
 800aebe:	4613      	mov	r3, r2
 800aec0:	eb42 0303 	adc.w	r3, r2, r3
 800aec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aeca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aece:	f7f5 febb 	bl	8000c48 <__aeabi_uldivmod>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4b0d      	ldr	r3, [pc, #52]	; (800af0c <UART_SetConfig+0x2d4>)
 800aed8:	fba3 1302 	umull	r1, r3, r3, r2
 800aedc:	095b      	lsrs	r3, r3, #5
 800aede:	2164      	movs	r1, #100	; 0x64
 800aee0:	fb01 f303 	mul.w	r3, r1, r3
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	00db      	lsls	r3, r3, #3
 800aee8:	3332      	adds	r3, #50	; 0x32
 800aeea:	4a08      	ldr	r2, [pc, #32]	; (800af0c <UART_SetConfig+0x2d4>)
 800aeec:	fba2 2303 	umull	r2, r3, r2, r3
 800aef0:	095b      	lsrs	r3, r3, #5
 800aef2:	f003 0207 	and.w	r2, r3, #7
 800aef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4422      	add	r2, r4
 800aefe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af00:	e106      	b.n	800b110 <UART_SetConfig+0x4d8>
 800af02:	bf00      	nop
 800af04:	40011000 	.word	0x40011000
 800af08:	40011400 	.word	0x40011400
 800af0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af14:	2200      	movs	r2, #0
 800af16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800af1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800af22:	4642      	mov	r2, r8
 800af24:	464b      	mov	r3, r9
 800af26:	1891      	adds	r1, r2, r2
 800af28:	6239      	str	r1, [r7, #32]
 800af2a:	415b      	adcs	r3, r3
 800af2c:	627b      	str	r3, [r7, #36]	; 0x24
 800af2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af32:	4641      	mov	r1, r8
 800af34:	1854      	adds	r4, r2, r1
 800af36:	4649      	mov	r1, r9
 800af38:	eb43 0501 	adc.w	r5, r3, r1
 800af3c:	f04f 0200 	mov.w	r2, #0
 800af40:	f04f 0300 	mov.w	r3, #0
 800af44:	00eb      	lsls	r3, r5, #3
 800af46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af4a:	00e2      	lsls	r2, r4, #3
 800af4c:	4614      	mov	r4, r2
 800af4e:	461d      	mov	r5, r3
 800af50:	4643      	mov	r3, r8
 800af52:	18e3      	adds	r3, r4, r3
 800af54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800af58:	464b      	mov	r3, r9
 800af5a:	eb45 0303 	adc.w	r3, r5, r3
 800af5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800af62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af72:	f04f 0200 	mov.w	r2, #0
 800af76:	f04f 0300 	mov.w	r3, #0
 800af7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800af7e:	4629      	mov	r1, r5
 800af80:	008b      	lsls	r3, r1, #2
 800af82:	4621      	mov	r1, r4
 800af84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af88:	4621      	mov	r1, r4
 800af8a:	008a      	lsls	r2, r1, #2
 800af8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800af90:	f7f5 fe5a 	bl	8000c48 <__aeabi_uldivmod>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	4b60      	ldr	r3, [pc, #384]	; (800b11c <UART_SetConfig+0x4e4>)
 800af9a:	fba3 2302 	umull	r2, r3, r3, r2
 800af9e:	095b      	lsrs	r3, r3, #5
 800afa0:	011c      	lsls	r4, r3, #4
 800afa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afa6:	2200      	movs	r2, #0
 800afa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800afac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800afb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800afb4:	4642      	mov	r2, r8
 800afb6:	464b      	mov	r3, r9
 800afb8:	1891      	adds	r1, r2, r2
 800afba:	61b9      	str	r1, [r7, #24]
 800afbc:	415b      	adcs	r3, r3
 800afbe:	61fb      	str	r3, [r7, #28]
 800afc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afc4:	4641      	mov	r1, r8
 800afc6:	1851      	adds	r1, r2, r1
 800afc8:	6139      	str	r1, [r7, #16]
 800afca:	4649      	mov	r1, r9
 800afcc:	414b      	adcs	r3, r1
 800afce:	617b      	str	r3, [r7, #20]
 800afd0:	f04f 0200 	mov.w	r2, #0
 800afd4:	f04f 0300 	mov.w	r3, #0
 800afd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800afdc:	4659      	mov	r1, fp
 800afde:	00cb      	lsls	r3, r1, #3
 800afe0:	4651      	mov	r1, sl
 800afe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afe6:	4651      	mov	r1, sl
 800afe8:	00ca      	lsls	r2, r1, #3
 800afea:	4610      	mov	r0, r2
 800afec:	4619      	mov	r1, r3
 800afee:	4603      	mov	r3, r0
 800aff0:	4642      	mov	r2, r8
 800aff2:	189b      	adds	r3, r3, r2
 800aff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aff8:	464b      	mov	r3, r9
 800affa:	460a      	mov	r2, r1
 800affc:	eb42 0303 	adc.w	r3, r2, r3
 800b000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b00e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b010:	f04f 0200 	mov.w	r2, #0
 800b014:	f04f 0300 	mov.w	r3, #0
 800b018:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b01c:	4649      	mov	r1, r9
 800b01e:	008b      	lsls	r3, r1, #2
 800b020:	4641      	mov	r1, r8
 800b022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b026:	4641      	mov	r1, r8
 800b028:	008a      	lsls	r2, r1, #2
 800b02a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b02e:	f7f5 fe0b 	bl	8000c48 <__aeabi_uldivmod>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4611      	mov	r1, r2
 800b038:	4b38      	ldr	r3, [pc, #224]	; (800b11c <UART_SetConfig+0x4e4>)
 800b03a:	fba3 2301 	umull	r2, r3, r3, r1
 800b03e:	095b      	lsrs	r3, r3, #5
 800b040:	2264      	movs	r2, #100	; 0x64
 800b042:	fb02 f303 	mul.w	r3, r2, r3
 800b046:	1acb      	subs	r3, r1, r3
 800b048:	011b      	lsls	r3, r3, #4
 800b04a:	3332      	adds	r3, #50	; 0x32
 800b04c:	4a33      	ldr	r2, [pc, #204]	; (800b11c <UART_SetConfig+0x4e4>)
 800b04e:	fba2 2303 	umull	r2, r3, r2, r3
 800b052:	095b      	lsrs	r3, r3, #5
 800b054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b058:	441c      	add	r4, r3
 800b05a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b05e:	2200      	movs	r2, #0
 800b060:	673b      	str	r3, [r7, #112]	; 0x70
 800b062:	677a      	str	r2, [r7, #116]	; 0x74
 800b064:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b068:	4642      	mov	r2, r8
 800b06a:	464b      	mov	r3, r9
 800b06c:	1891      	adds	r1, r2, r2
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	415b      	adcs	r3, r3
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b078:	4641      	mov	r1, r8
 800b07a:	1851      	adds	r1, r2, r1
 800b07c:	6039      	str	r1, [r7, #0]
 800b07e:	4649      	mov	r1, r9
 800b080:	414b      	adcs	r3, r1
 800b082:	607b      	str	r3, [r7, #4]
 800b084:	f04f 0200 	mov.w	r2, #0
 800b088:	f04f 0300 	mov.w	r3, #0
 800b08c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b090:	4659      	mov	r1, fp
 800b092:	00cb      	lsls	r3, r1, #3
 800b094:	4651      	mov	r1, sl
 800b096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b09a:	4651      	mov	r1, sl
 800b09c:	00ca      	lsls	r2, r1, #3
 800b09e:	4610      	mov	r0, r2
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	189b      	adds	r3, r3, r2
 800b0a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0aa:	464b      	mov	r3, r9
 800b0ac:	460a      	mov	r2, r1
 800b0ae:	eb42 0303 	adc.w	r3, r2, r3
 800b0b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	663b      	str	r3, [r7, #96]	; 0x60
 800b0be:	667a      	str	r2, [r7, #100]	; 0x64
 800b0c0:	f04f 0200 	mov.w	r2, #0
 800b0c4:	f04f 0300 	mov.w	r3, #0
 800b0c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	008b      	lsls	r3, r1, #2
 800b0d0:	4641      	mov	r1, r8
 800b0d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0d6:	4641      	mov	r1, r8
 800b0d8:	008a      	lsls	r2, r1, #2
 800b0da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b0de:	f7f5 fdb3 	bl	8000c48 <__aeabi_uldivmod>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	4b0d      	ldr	r3, [pc, #52]	; (800b11c <UART_SetConfig+0x4e4>)
 800b0e8:	fba3 1302 	umull	r1, r3, r3, r2
 800b0ec:	095b      	lsrs	r3, r3, #5
 800b0ee:	2164      	movs	r1, #100	; 0x64
 800b0f0:	fb01 f303 	mul.w	r3, r1, r3
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	011b      	lsls	r3, r3, #4
 800b0f8:	3332      	adds	r3, #50	; 0x32
 800b0fa:	4a08      	ldr	r2, [pc, #32]	; (800b11c <UART_SetConfig+0x4e4>)
 800b0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b100:	095b      	lsrs	r3, r3, #5
 800b102:	f003 020f 	and.w	r2, r3, #15
 800b106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4422      	add	r2, r4
 800b10e:	609a      	str	r2, [r3, #8]
}
 800b110:	bf00      	nop
 800b112:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b116:	46bd      	mov	sp, r7
 800b118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b11c:	51eb851f 	.word	0x51eb851f

0800b120 <PID_Cal>:
 * @param CurrVal_set giá trị feedback của hệ thống
 * @return
 */

float PID_Cal(PID_Param *pid,float Target_set,float CurrVal_set)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	ed87 0a02 	vstr	s0, [r7, #8]
 800b12c:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	e = Target_set - CurrVal_set;
 800b130:	ed97 7a02 	vldr	s14, [r7, #8]
 800b134:	edd7 7a01 	vldr	s15, [r7, #4]
 800b138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	edc3 7a00 	vstr	s15, [r3]

	if(!kI) kB = 0;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	edd3 7a05 	vldr	s15, [r3, #20]
 800b148:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b150:	d104      	bne.n	800b15c <PID_Cal+0x3c>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f04f 0200 	mov.w	r2, #0
 800b158:	61da      	str	r2, [r3, #28]
 800b15a:	e009      	b.n	800b170 <PID_Cal+0x50>
	else kB = 1/deltaT;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	ed93 7a02 	vldr	s14, [r3, #8]
 800b162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	edc3 7a07 	vstr	s15, [r3, #28]

//-----------------------Propotion Term----------------//
	uP = kP*e;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	ed93 7a03 	vldr	s14, [r3, #12]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	edd3 7a00 	vldr	s15, [r3]
 800b17c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	edc3 7a04 	vstr	s15, [r3, #16]

//-----------------------Integral Term-----------------//
	uI +=(kI*e + kB*(-u + uHat))*deltaT;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	ed93 7a06 	vldr	s14, [r3, #24]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	edd3 6a05 	vldr	s13, [r3, #20]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	edd3 7a00 	vldr	s15, [r3]
 800b198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	ed93 6a07 	vldr	s12, [r3, #28]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	edd3 5a0e 	vldr	s11, [r3, #56]	; 0x38
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b1ae:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b1b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b1b6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	edd3 7a02 	vldr	s15, [r3, #8]
 800b1c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Derivative Term---------------//
	uD = kD*(e - e_Pre)/deltaT;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	ed93 7a08 	vldr	s14, [r3, #32]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	edd3 6a00 	vldr	s13, [r3]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	edd3 7a01 	vldr	s15, [r3, #4]
 800b1e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b1e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	ed93 7a02 	vldr	s14, [r3, #8]
 800b1ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	uD_Fil = (1-alpha)*uD_FilPre+alpha*uD;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b1fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b202:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b20c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b21c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b220:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

//-----------------------Previous Value----------------//
	e_Pre = e;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	605a      	str	r2, [r3, #4]
	uD_FilPre = uD_Fil;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	62da      	str	r2, [r3, #44]	; 0x2c

//-----------------------Sum---------------------------//
	u = uP + uI + uD;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	ed93 7a04 	vldr	s14, [r3, #16]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	edd3 7a06 	vldr	s15, [r3, #24]
 800b246:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b250:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	if(u >= u_AboveLimit) uHat = u_AboveLimit;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26e:	db04      	blt.n	800b27a <PID_Cal+0x15a>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	639a      	str	r2, [r3, #56]	; 0x38
 800b278:	e013      	b.n	800b2a2 <PID_Cal+0x182>
	else if(u <= u_BelowLimit) uHat = u_BelowLimit;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b28e:	d804      	bhi.n	800b29a <PID_Cal+0x17a>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	639a      	str	r2, [r3, #56]	; 0x38
 800b298:	e003      	b.n	800b2a2 <PID_Cal+0x182>
	else uHat = u;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	639a      	str	r2, [r3, #56]	; 0x38
	return uHat;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a6:	ee07 3a90 	vmov	s15, r3
}
 800b2aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ae:	3714      	adds	r7, #20
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	4603      	mov	r3, r0
 800b2c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b2c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b2ca:	2b84      	cmp	r3, #132	; 0x84
 800b2cc:	d005      	beq.n	800b2da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b2ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	3303      	adds	r3, #3
 800b2d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b2da:	68fb      	ldr	r3, [r7, #12]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b2ec:	f000 faf6 	bl	800b8dc <vTaskStartScheduler>
  
  return osOK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b2f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2f8:	b089      	sub	sp, #36	; 0x24
 800b2fa:	af04      	add	r7, sp, #16
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d020      	beq.n	800b34a <osThreadCreate+0x54>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d01c      	beq.n	800b34a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685c      	ldr	r4, [r3, #4]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	691e      	ldr	r6, [r3, #16]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b322:	4618      	mov	r0, r3
 800b324:	f7ff ffc8 	bl	800b2b8 <makeFreeRtosPriority>
 800b328:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	695b      	ldr	r3, [r3, #20]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b332:	9202      	str	r2, [sp, #8]
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	9100      	str	r1, [sp, #0]
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	4632      	mov	r2, r6
 800b33c:	4629      	mov	r1, r5
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 f8ed 	bl	800b51e <xTaskCreateStatic>
 800b344:	4603      	mov	r3, r0
 800b346:	60fb      	str	r3, [r7, #12]
 800b348:	e01c      	b.n	800b384 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685c      	ldr	r4, [r3, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b356:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff ffaa 	bl	800b2b8 <makeFreeRtosPriority>
 800b364:	4602      	mov	r2, r0
 800b366:	f107 030c 	add.w	r3, r7, #12
 800b36a:	9301      	str	r3, [sp, #4]
 800b36c:	9200      	str	r2, [sp, #0]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	4632      	mov	r2, r6
 800b372:	4629      	mov	r1, r5
 800b374:	4620      	mov	r0, r4
 800b376:	f000 f92f 	bl	800b5d8 <xTaskCreate>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d001      	beq.n	800b384 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b380:	2300      	movs	r3, #0
 800b382:	e000      	b.n	800b386 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b384:	68fb      	ldr	r3, [r7, #12]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b38e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b084      	sub	sp, #16
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <osDelay+0x16>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	e000      	b.n	800b3a6 <osDelay+0x18>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 fa64 	bl	800b874 <vTaskDelay>
  
  return osOK;
 800b3ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f103 0208 	add.w	r2, r3, #8
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f103 0208 	add.w	r2, r3, #8
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f103 0208 	add.w	r2, r3, #8
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b3ea:	bf00      	nop
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	683a      	ldr	r2, [r7, #0]
 800b43a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	1c5a      	adds	r2, r3, #1
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	601a      	str	r2, [r3, #0]
}
 800b44c:	bf00      	nop
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46e:	d103      	bne.n	800b478 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	60fb      	str	r3, [r7, #12]
 800b476:	e00c      	b.n	800b492 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3308      	adds	r3, #8
 800b47c:	60fb      	str	r3, [r7, #12]
 800b47e:	e002      	b.n	800b486 <vListInsert+0x2e>
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d2f6      	bcs.n	800b480 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	685a      	ldr	r2, [r3, #4]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	601a      	str	r2, [r3, #0]
}
 800b4be:	bf00      	nop
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b085      	sub	sp, #20
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	6892      	ldr	r2, [r2, #8]
 800b4e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	6852      	ldr	r2, [r2, #4]
 800b4ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d103      	bne.n	800b4fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	689a      	ldr	r2, [r3, #8]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	1e5a      	subs	r2, r3, #1
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b08e      	sub	sp, #56	; 0x38
 800b522:	af04      	add	r7, sp, #16
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	607a      	str	r2, [r7, #4]
 800b52a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10a      	bne.n	800b548 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b544:	bf00      	nop
 800b546:	e7fe      	b.n	800b546 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10a      	bne.n	800b564 <xTaskCreateStatic+0x46>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	61fb      	str	r3, [r7, #28]
}
 800b560:	bf00      	nop
 800b562:	e7fe      	b.n	800b562 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b564:	23a0      	movs	r3, #160	; 0xa0
 800b566:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	2ba0      	cmp	r3, #160	; 0xa0
 800b56c:	d00a      	beq.n	800b584 <xTaskCreateStatic+0x66>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	61bb      	str	r3, [r7, #24]
}
 800b580:	bf00      	nop
 800b582:	e7fe      	b.n	800b582 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b584:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d01e      	beq.n	800b5ca <xTaskCreateStatic+0xac>
 800b58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d01b      	beq.n	800b5ca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b594:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b59a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9303      	str	r3, [sp, #12]
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	9302      	str	r3, [sp, #8]
 800b5ac:	f107 0314 	add.w	r3, r7, #20
 800b5b0:	9301      	str	r3, [sp, #4]
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	68b9      	ldr	r1, [r7, #8]
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f000 f851 	bl	800b664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5c4:	f000 f8ec 	bl	800b7a0 <prvAddNewTaskToReadyList>
 800b5c8:	e001      	b.n	800b5ce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5ce:	697b      	ldr	r3, [r7, #20]
	}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3728      	adds	r7, #40	; 0x28
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08c      	sub	sp, #48	; 0x30
 800b5dc:	af04      	add	r7, sp, #16
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	603b      	str	r3, [r7, #0]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5e8:	88fb      	ldrh	r3, [r7, #6]
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f001 f933 	bl	800c858 <pvPortMalloc>
 800b5f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00e      	beq.n	800b618 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5fa:	20a0      	movs	r0, #160	; 0xa0
 800b5fc:	f001 f92c 	bl	800c858 <pvPortMalloc>
 800b600:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	697a      	ldr	r2, [r7, #20]
 800b60c:	631a      	str	r2, [r3, #48]	; 0x30
 800b60e:	e005      	b.n	800b61c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b610:	6978      	ldr	r0, [r7, #20]
 800b612:	f001 f9ed 	bl	800c9f0 <vPortFree>
 800b616:	e001      	b.n	800b61c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b618:	2300      	movs	r3, #0
 800b61a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d017      	beq.n	800b652 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b62a:	88fa      	ldrh	r2, [r7, #6]
 800b62c:	2300      	movs	r3, #0
 800b62e:	9303      	str	r3, [sp, #12]
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	9302      	str	r3, [sp, #8]
 800b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b636:	9301      	str	r3, [sp, #4]
 800b638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	68b9      	ldr	r1, [r7, #8]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 f80f 	bl	800b664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b646:	69f8      	ldr	r0, [r7, #28]
 800b648:	f000 f8aa 	bl	800b7a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b64c:	2301      	movs	r3, #1
 800b64e:	61bb      	str	r3, [r7, #24]
 800b650:	e002      	b.n	800b658 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b652:	f04f 33ff 	mov.w	r3, #4294967295
 800b656:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b658:	69bb      	ldr	r3, [r7, #24]
	}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3720      	adds	r7, #32
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
	...

0800b664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b088      	sub	sp, #32
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
 800b670:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b67c:	3b01      	subs	r3, #1
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	f023 0307 	bic.w	r3, r3, #7
 800b68a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	f003 0307 	and.w	r3, r3, #7
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00a      	beq.n	800b6ac <prvInitialiseNewTask+0x48>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	617b      	str	r3, [r7, #20]
}
 800b6a8:	bf00      	nop
 800b6aa:	e7fe      	b.n	800b6aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d01f      	beq.n	800b6f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	61fb      	str	r3, [r7, #28]
 800b6b6:	e012      	b.n	800b6de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	4413      	add	r3, r2
 800b6be:	7819      	ldrb	r1, [r3, #0]
 800b6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	3334      	adds	r3, #52	; 0x34
 800b6c8:	460a      	mov	r2, r1
 800b6ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d006      	beq.n	800b6e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	61fb      	str	r3, [r7, #28]
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	2b0f      	cmp	r3, #15
 800b6e2:	d9e9      	bls.n	800b6b8 <prvInitialiseNewTask+0x54>
 800b6e4:	e000      	b.n	800b6e8 <prvInitialiseNewTask+0x84>
			{
				break;
 800b6e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6f0:	e003      	b.n	800b6fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fc:	2b06      	cmp	r3, #6
 800b6fe:	d901      	bls.n	800b704 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b700:	2306      	movs	r3, #6
 800b702:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b708:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b70e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	2200      	movs	r2, #0
 800b714:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	3304      	adds	r3, #4
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7ff fe6b 	bl	800b3f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b722:	3318      	adds	r3, #24
 800b724:	4618      	mov	r0, r3
 800b726:	f7ff fe66 	bl	800b3f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b72e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	f1c3 0207 	rsb	r2, r3, #7
 800b736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b73e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	2200      	movs	r2, #0
 800b744:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	334c      	adds	r3, #76	; 0x4c
 800b754:	224c      	movs	r2, #76	; 0x4c
 800b756:	2100      	movs	r1, #0
 800b758:	4618      	mov	r0, r3
 800b75a:	f001 fff2 	bl	800d742 <memset>
 800b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b760:	4a0c      	ldr	r2, [pc, #48]	; (800b794 <prvInitialiseNewTask+0x130>)
 800b762:	651a      	str	r2, [r3, #80]	; 0x50
 800b764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b766:	4a0c      	ldr	r2, [pc, #48]	; (800b798 <prvInitialiseNewTask+0x134>)
 800b768:	655a      	str	r2, [r3, #84]	; 0x54
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	4a0b      	ldr	r2, [pc, #44]	; (800b79c <prvInitialiseNewTask+0x138>)
 800b76e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	68f9      	ldr	r1, [r7, #12]
 800b774:	69b8      	ldr	r0, [r7, #24]
 800b776:	f000 fe21 	bl	800c3bc <pxPortInitialiseStack>
 800b77a:	4602      	mov	r2, r0
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b782:	2b00      	cmp	r3, #0
 800b784:	d002      	beq.n	800b78c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b78c:	bf00      	nop
 800b78e:	3720      	adds	r7, #32
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	2000509c 	.word	0x2000509c
 800b798:	20005104 	.word	0x20005104
 800b79c:	2000516c 	.word	0x2000516c

0800b7a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7a8:	f000 ff34 	bl	800c614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7ac:	4b2a      	ldr	r3, [pc, #168]	; (800b858 <prvAddNewTaskToReadyList+0xb8>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	4a29      	ldr	r2, [pc, #164]	; (800b858 <prvAddNewTaskToReadyList+0xb8>)
 800b7b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7b6:	4b29      	ldr	r3, [pc, #164]	; (800b85c <prvAddNewTaskToReadyList+0xbc>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d109      	bne.n	800b7d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7be:	4a27      	ldr	r2, [pc, #156]	; (800b85c <prvAddNewTaskToReadyList+0xbc>)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7c4:	4b24      	ldr	r3, [pc, #144]	; (800b858 <prvAddNewTaskToReadyList+0xb8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d110      	bne.n	800b7ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7cc:	f000 facc 	bl	800bd68 <prvInitialiseTaskLists>
 800b7d0:	e00d      	b.n	800b7ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7d2:	4b23      	ldr	r3, [pc, #140]	; (800b860 <prvAddNewTaskToReadyList+0xc0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d109      	bne.n	800b7ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7da:	4b20      	ldr	r3, [pc, #128]	; (800b85c <prvAddNewTaskToReadyList+0xbc>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d802      	bhi.n	800b7ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7e8:	4a1c      	ldr	r2, [pc, #112]	; (800b85c <prvAddNewTaskToReadyList+0xbc>)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7ee:	4b1d      	ldr	r3, [pc, #116]	; (800b864 <prvAddNewTaskToReadyList+0xc4>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	4a1b      	ldr	r2, [pc, #108]	; (800b864 <prvAddNewTaskToReadyList+0xc4>)
 800b7f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	409a      	lsls	r2, r3
 800b800:	4b19      	ldr	r3, [pc, #100]	; (800b868 <prvAddNewTaskToReadyList+0xc8>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4313      	orrs	r3, r2
 800b806:	4a18      	ldr	r2, [pc, #96]	; (800b868 <prvAddNewTaskToReadyList+0xc8>)
 800b808:	6013      	str	r3, [r2, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4a15      	ldr	r2, [pc, #84]	; (800b86c <prvAddNewTaskToReadyList+0xcc>)
 800b818:	441a      	add	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3304      	adds	r3, #4
 800b81e:	4619      	mov	r1, r3
 800b820:	4610      	mov	r0, r2
 800b822:	f7ff fdf5 	bl	800b410 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b826:	f000 ff25 	bl	800c674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b82a:	4b0d      	ldr	r3, [pc, #52]	; (800b860 <prvAddNewTaskToReadyList+0xc0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00e      	beq.n	800b850 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b832:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <prvAddNewTaskToReadyList+0xbc>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d207      	bcs.n	800b850 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <prvAddNewTaskToReadyList+0xd0>)
 800b842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	20001448 	.word	0x20001448
 800b85c:	20001348 	.word	0x20001348
 800b860:	20001454 	.word	0x20001454
 800b864:	20001464 	.word	0x20001464
 800b868:	20001450 	.word	0x20001450
 800b86c:	2000134c 	.word	0x2000134c
 800b870:	e000ed04 	.word	0xe000ed04

0800b874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d017      	beq.n	800b8b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b886:	4b13      	ldr	r3, [pc, #76]	; (800b8d4 <vTaskDelay+0x60>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00a      	beq.n	800b8a4 <vTaskDelay+0x30>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	60bb      	str	r3, [r7, #8]
}
 800b8a0:	bf00      	nop
 800b8a2:	e7fe      	b.n	800b8a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8a4:	f000 f884 	bl	800b9b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fd20 	bl	800c2f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8b0:	f000 f88c 	bl	800b9cc <xTaskResumeAll>
 800b8b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d107      	bne.n	800b8cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8bc:	4b06      	ldr	r3, [pc, #24]	; (800b8d8 <vTaskDelay+0x64>)
 800b8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8cc:	bf00      	nop
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	20001470 	.word	0x20001470
 800b8d8:	e000ed04 	.word	0xe000ed04

0800b8dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08a      	sub	sp, #40	; 0x28
 800b8e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8ea:	463a      	mov	r2, r7
 800b8ec:	1d39      	adds	r1, r7, #4
 800b8ee:	f107 0308 	add.w	r3, r7, #8
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7f7 f926 	bl	8002b44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	9202      	str	r2, [sp, #8]
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	2300      	movs	r3, #0
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	2300      	movs	r3, #0
 800b908:	460a      	mov	r2, r1
 800b90a:	4921      	ldr	r1, [pc, #132]	; (800b990 <vTaskStartScheduler+0xb4>)
 800b90c:	4821      	ldr	r0, [pc, #132]	; (800b994 <vTaskStartScheduler+0xb8>)
 800b90e:	f7ff fe06 	bl	800b51e <xTaskCreateStatic>
 800b912:	4603      	mov	r3, r0
 800b914:	4a20      	ldr	r2, [pc, #128]	; (800b998 <vTaskStartScheduler+0xbc>)
 800b916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b918:	4b1f      	ldr	r3, [pc, #124]	; (800b998 <vTaskStartScheduler+0xbc>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b920:	2301      	movs	r3, #1
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e001      	b.n	800b92a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b926:	2300      	movs	r3, #0
 800b928:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d11b      	bne.n	800b968 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	613b      	str	r3, [r7, #16]
}
 800b942:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b944:	4b15      	ldr	r3, [pc, #84]	; (800b99c <vTaskStartScheduler+0xc0>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	334c      	adds	r3, #76	; 0x4c
 800b94a:	4a15      	ldr	r2, [pc, #84]	; (800b9a0 <vTaskStartScheduler+0xc4>)
 800b94c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b94e:	4b15      	ldr	r3, [pc, #84]	; (800b9a4 <vTaskStartScheduler+0xc8>)
 800b950:	f04f 32ff 	mov.w	r2, #4294967295
 800b954:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b956:	4b14      	ldr	r3, [pc, #80]	; (800b9a8 <vTaskStartScheduler+0xcc>)
 800b958:	2201      	movs	r2, #1
 800b95a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b95c:	4b13      	ldr	r3, [pc, #76]	; (800b9ac <vTaskStartScheduler+0xd0>)
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b962:	f000 fdb5 	bl	800c4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b966:	e00e      	b.n	800b986 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96e:	d10a      	bne.n	800b986 <vTaskStartScheduler+0xaa>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b974:	f383 8811 	msr	BASEPRI, r3
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	60fb      	str	r3, [r7, #12]
}
 800b982:	bf00      	nop
 800b984:	e7fe      	b.n	800b984 <vTaskStartScheduler+0xa8>
}
 800b986:	bf00      	nop
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	08011ed0 	.word	0x08011ed0
 800b994:	0800bd39 	.word	0x0800bd39
 800b998:	2000146c 	.word	0x2000146c
 800b99c:	20001348 	.word	0x20001348
 800b9a0:	20000068 	.word	0x20000068
 800b9a4:	20001468 	.word	0x20001468
 800b9a8:	20001454 	.word	0x20001454
 800b9ac:	2000144c 	.word	0x2000144c

0800b9b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9b4:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <vTaskSuspendAll+0x18>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	4a03      	ldr	r2, [pc, #12]	; (800b9c8 <vTaskSuspendAll+0x18>)
 800b9bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9be:	bf00      	nop
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	20001470 	.word	0x20001470

0800b9cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9da:	4b41      	ldr	r3, [pc, #260]	; (800bae0 <xTaskResumeAll+0x114>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10a      	bne.n	800b9f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e6:	f383 8811 	msr	BASEPRI, r3
 800b9ea:	f3bf 8f6f 	isb	sy
 800b9ee:	f3bf 8f4f 	dsb	sy
 800b9f2:	603b      	str	r3, [r7, #0]
}
 800b9f4:	bf00      	nop
 800b9f6:	e7fe      	b.n	800b9f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9f8:	f000 fe0c 	bl	800c614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9fc:	4b38      	ldr	r3, [pc, #224]	; (800bae0 <xTaskResumeAll+0x114>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	4a37      	ldr	r2, [pc, #220]	; (800bae0 <xTaskResumeAll+0x114>)
 800ba04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba06:	4b36      	ldr	r3, [pc, #216]	; (800bae0 <xTaskResumeAll+0x114>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d161      	bne.n	800bad2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba0e:	4b35      	ldr	r3, [pc, #212]	; (800bae4 <xTaskResumeAll+0x118>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d05d      	beq.n	800bad2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba16:	e02e      	b.n	800ba76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba18:	4b33      	ldr	r3, [pc, #204]	; (800bae8 <xTaskResumeAll+0x11c>)
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	3318      	adds	r3, #24
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7ff fd50 	bl	800b4ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff fd4b 	bl	800b4ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	2201      	movs	r2, #1
 800ba3a:	409a      	lsls	r2, r3
 800ba3c:	4b2b      	ldr	r3, [pc, #172]	; (800baec <xTaskResumeAll+0x120>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	4a2a      	ldr	r2, [pc, #168]	; (800baec <xTaskResumeAll+0x120>)
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4a27      	ldr	r2, [pc, #156]	; (800baf0 <xTaskResumeAll+0x124>)
 800ba54:	441a      	add	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3304      	adds	r3, #4
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f7ff fcd7 	bl	800b410 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba66:	4b23      	ldr	r3, [pc, #140]	; (800baf4 <xTaskResumeAll+0x128>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d302      	bcc.n	800ba76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ba70:	4b21      	ldr	r3, [pc, #132]	; (800baf8 <xTaskResumeAll+0x12c>)
 800ba72:	2201      	movs	r2, #1
 800ba74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba76:	4b1c      	ldr	r3, [pc, #112]	; (800bae8 <xTaskResumeAll+0x11c>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d1cc      	bne.n	800ba18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba84:	f000 fa12 	bl	800beac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba88:	4b1c      	ldr	r3, [pc, #112]	; (800bafc <xTaskResumeAll+0x130>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d010      	beq.n	800bab6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba94:	f000 f836 	bl	800bb04 <xTaskIncrementTick>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ba9e:	4b16      	ldr	r3, [pc, #88]	; (800baf8 <xTaskResumeAll+0x12c>)
 800baa0:	2201      	movs	r2, #1
 800baa2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	3b01      	subs	r3, #1
 800baa8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1f1      	bne.n	800ba94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bab0:	4b12      	ldr	r3, [pc, #72]	; (800bafc <xTaskResumeAll+0x130>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bab6:	4b10      	ldr	r3, [pc, #64]	; (800baf8 <xTaskResumeAll+0x12c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d009      	beq.n	800bad2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800babe:	2301      	movs	r3, #1
 800bac0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bac2:	4b0f      	ldr	r3, [pc, #60]	; (800bb00 <xTaskResumeAll+0x134>)
 800bac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bad2:	f000 fdcf 	bl	800c674 <vPortExitCritical>

	return xAlreadyYielded;
 800bad6:	68bb      	ldr	r3, [r7, #8]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	20001470 	.word	0x20001470
 800bae4:	20001448 	.word	0x20001448
 800bae8:	20001408 	.word	0x20001408
 800baec:	20001450 	.word	0x20001450
 800baf0:	2000134c 	.word	0x2000134c
 800baf4:	20001348 	.word	0x20001348
 800baf8:	2000145c 	.word	0x2000145c
 800bafc:	20001458 	.word	0x20001458
 800bb00:	e000ed04 	.word	0xe000ed04

0800bb04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb0e:	4b4e      	ldr	r3, [pc, #312]	; (800bc48 <xTaskIncrementTick+0x144>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f040 808e 	bne.w	800bc34 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb18:	4b4c      	ldr	r3, [pc, #304]	; (800bc4c <xTaskIncrementTick+0x148>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb20:	4a4a      	ldr	r2, [pc, #296]	; (800bc4c <xTaskIncrementTick+0x148>)
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d120      	bne.n	800bb6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb2c:	4b48      	ldr	r3, [pc, #288]	; (800bc50 <xTaskIncrementTick+0x14c>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00a      	beq.n	800bb4c <xTaskIncrementTick+0x48>
	__asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	603b      	str	r3, [r7, #0]
}
 800bb48:	bf00      	nop
 800bb4a:	e7fe      	b.n	800bb4a <xTaskIncrementTick+0x46>
 800bb4c:	4b40      	ldr	r3, [pc, #256]	; (800bc50 <xTaskIncrementTick+0x14c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	4b40      	ldr	r3, [pc, #256]	; (800bc54 <xTaskIncrementTick+0x150>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a3e      	ldr	r2, [pc, #248]	; (800bc50 <xTaskIncrementTick+0x14c>)
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	4a3e      	ldr	r2, [pc, #248]	; (800bc54 <xTaskIncrementTick+0x150>)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	4b3d      	ldr	r3, [pc, #244]	; (800bc58 <xTaskIncrementTick+0x154>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3301      	adds	r3, #1
 800bb66:	4a3c      	ldr	r2, [pc, #240]	; (800bc58 <xTaskIncrementTick+0x154>)
 800bb68:	6013      	str	r3, [r2, #0]
 800bb6a:	f000 f99f 	bl	800beac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb6e:	4b3b      	ldr	r3, [pc, #236]	; (800bc5c <xTaskIncrementTick+0x158>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d348      	bcc.n	800bc0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb78:	4b35      	ldr	r3, [pc, #212]	; (800bc50 <xTaskIncrementTick+0x14c>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d104      	bne.n	800bb8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb82:	4b36      	ldr	r3, [pc, #216]	; (800bc5c <xTaskIncrementTick+0x158>)
 800bb84:	f04f 32ff 	mov.w	r2, #4294967295
 800bb88:	601a      	str	r2, [r3, #0]
					break;
 800bb8a:	e03e      	b.n	800bc0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb8c:	4b30      	ldr	r3, [pc, #192]	; (800bc50 <xTaskIncrementTick+0x14c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d203      	bcs.n	800bbac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bba4:	4a2d      	ldr	r2, [pc, #180]	; (800bc5c <xTaskIncrementTick+0x158>)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bbaa:	e02e      	b.n	800bc0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7ff fc8a 	bl	800b4ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d004      	beq.n	800bbc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	3318      	adds	r3, #24
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fc81 	bl	800b4ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	2201      	movs	r2, #1
 800bbce:	409a      	lsls	r2, r3
 800bbd0:	4b23      	ldr	r3, [pc, #140]	; (800bc60 <xTaskIncrementTick+0x15c>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	4a22      	ldr	r2, [pc, #136]	; (800bc60 <xTaskIncrementTick+0x15c>)
 800bbd8:	6013      	str	r3, [r2, #0]
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4a1f      	ldr	r2, [pc, #124]	; (800bc64 <xTaskIncrementTick+0x160>)
 800bbe8:	441a      	add	r2, r3
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	3304      	adds	r3, #4
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	f7ff fc0d 	bl	800b410 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfa:	4b1b      	ldr	r3, [pc, #108]	; (800bc68 <xTaskIncrementTick+0x164>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d3b9      	bcc.n	800bb78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc04:	2301      	movs	r3, #1
 800bc06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc08:	e7b6      	b.n	800bb78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc0a:	4b17      	ldr	r3, [pc, #92]	; (800bc68 <xTaskIncrementTick+0x164>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	4914      	ldr	r1, [pc, #80]	; (800bc64 <xTaskIncrementTick+0x160>)
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	440b      	add	r3, r1
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d901      	bls.n	800bc26 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bc22:	2301      	movs	r3, #1
 800bc24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc26:	4b11      	ldr	r3, [pc, #68]	; (800bc6c <xTaskIncrementTick+0x168>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d007      	beq.n	800bc3e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	617b      	str	r3, [r7, #20]
 800bc32:	e004      	b.n	800bc3e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc34:	4b0e      	ldr	r3, [pc, #56]	; (800bc70 <xTaskIncrementTick+0x16c>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	4a0d      	ldr	r2, [pc, #52]	; (800bc70 <xTaskIncrementTick+0x16c>)
 800bc3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc3e:	697b      	ldr	r3, [r7, #20]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	20001470 	.word	0x20001470
 800bc4c:	2000144c 	.word	0x2000144c
 800bc50:	20001400 	.word	0x20001400
 800bc54:	20001404 	.word	0x20001404
 800bc58:	20001460 	.word	0x20001460
 800bc5c:	20001468 	.word	0x20001468
 800bc60:	20001450 	.word	0x20001450
 800bc64:	2000134c 	.word	0x2000134c
 800bc68:	20001348 	.word	0x20001348
 800bc6c:	2000145c 	.word	0x2000145c
 800bc70:	20001458 	.word	0x20001458

0800bc74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc7a:	4b29      	ldr	r3, [pc, #164]	; (800bd20 <vTaskSwitchContext+0xac>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc82:	4b28      	ldr	r3, [pc, #160]	; (800bd24 <vTaskSwitchContext+0xb0>)
 800bc84:	2201      	movs	r2, #1
 800bc86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc88:	e044      	b.n	800bd14 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800bc8a:	4b26      	ldr	r3, [pc, #152]	; (800bd24 <vTaskSwitchContext+0xb0>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc90:	4b25      	ldr	r3, [pc, #148]	; (800bd28 <vTaskSwitchContext+0xb4>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	fab3 f383 	clz	r3, r3
 800bc9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bc9e:	7afb      	ldrb	r3, [r7, #11]
 800bca0:	f1c3 031f 	rsb	r3, r3, #31
 800bca4:	617b      	str	r3, [r7, #20]
 800bca6:	4921      	ldr	r1, [pc, #132]	; (800bd2c <vTaskSwitchContext+0xb8>)
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	440b      	add	r3, r1
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10a      	bne.n	800bcd0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	607b      	str	r3, [r7, #4]
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <vTaskSwitchContext+0x5a>
 800bcd0:	697a      	ldr	r2, [r7, #20]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4a14      	ldr	r2, [pc, #80]	; (800bd2c <vTaskSwitchContext+0xb8>)
 800bcdc:	4413      	add	r3, r2
 800bcde:	613b      	str	r3, [r7, #16]
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	685a      	ldr	r2, [r3, #4]
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	605a      	str	r2, [r3, #4]
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	3308      	adds	r3, #8
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d104      	bne.n	800bd00 <vTaskSwitchContext+0x8c>
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	605a      	str	r2, [r3, #4]
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	4a0a      	ldr	r2, [pc, #40]	; (800bd30 <vTaskSwitchContext+0xbc>)
 800bd08:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd0a:	4b09      	ldr	r3, [pc, #36]	; (800bd30 <vTaskSwitchContext+0xbc>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	334c      	adds	r3, #76	; 0x4c
 800bd10:	4a08      	ldr	r2, [pc, #32]	; (800bd34 <vTaskSwitchContext+0xc0>)
 800bd12:	6013      	str	r3, [r2, #0]
}
 800bd14:	bf00      	nop
 800bd16:	371c      	adds	r7, #28
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	20001470 	.word	0x20001470
 800bd24:	2000145c 	.word	0x2000145c
 800bd28:	20001450 	.word	0x20001450
 800bd2c:	2000134c 	.word	0x2000134c
 800bd30:	20001348 	.word	0x20001348
 800bd34:	20000068 	.word	0x20000068

0800bd38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd40:	f000 f852 	bl	800bde8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd44:	4b06      	ldr	r3, [pc, #24]	; (800bd60 <prvIdleTask+0x28>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d9f9      	bls.n	800bd40 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd4c:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <prvIdleTask+0x2c>)
 800bd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd52:	601a      	str	r2, [r3, #0]
 800bd54:	f3bf 8f4f 	dsb	sy
 800bd58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd5c:	e7f0      	b.n	800bd40 <prvIdleTask+0x8>
 800bd5e:	bf00      	nop
 800bd60:	2000134c 	.word	0x2000134c
 800bd64:	e000ed04 	.word	0xe000ed04

0800bd68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd6e:	2300      	movs	r3, #0
 800bd70:	607b      	str	r3, [r7, #4]
 800bd72:	e00c      	b.n	800bd8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	4613      	mov	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4413      	add	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4a12      	ldr	r2, [pc, #72]	; (800bdc8 <prvInitialiseTaskLists+0x60>)
 800bd80:	4413      	add	r3, r2
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff fb17 	bl	800b3b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	607b      	str	r3, [r7, #4]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b06      	cmp	r3, #6
 800bd92:	d9ef      	bls.n	800bd74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd94:	480d      	ldr	r0, [pc, #52]	; (800bdcc <prvInitialiseTaskLists+0x64>)
 800bd96:	f7ff fb0e 	bl	800b3b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd9a:	480d      	ldr	r0, [pc, #52]	; (800bdd0 <prvInitialiseTaskLists+0x68>)
 800bd9c:	f7ff fb0b 	bl	800b3b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bda0:	480c      	ldr	r0, [pc, #48]	; (800bdd4 <prvInitialiseTaskLists+0x6c>)
 800bda2:	f7ff fb08 	bl	800b3b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bda6:	480c      	ldr	r0, [pc, #48]	; (800bdd8 <prvInitialiseTaskLists+0x70>)
 800bda8:	f7ff fb05 	bl	800b3b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdac:	480b      	ldr	r0, [pc, #44]	; (800bddc <prvInitialiseTaskLists+0x74>)
 800bdae:	f7ff fb02 	bl	800b3b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdb2:	4b0b      	ldr	r3, [pc, #44]	; (800bde0 <prvInitialiseTaskLists+0x78>)
 800bdb4:	4a05      	ldr	r2, [pc, #20]	; (800bdcc <prvInitialiseTaskLists+0x64>)
 800bdb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdb8:	4b0a      	ldr	r3, [pc, #40]	; (800bde4 <prvInitialiseTaskLists+0x7c>)
 800bdba:	4a05      	ldr	r2, [pc, #20]	; (800bdd0 <prvInitialiseTaskLists+0x68>)
 800bdbc:	601a      	str	r2, [r3, #0]
}
 800bdbe:	bf00      	nop
 800bdc0:	3708      	adds	r7, #8
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	2000134c 	.word	0x2000134c
 800bdcc:	200013d8 	.word	0x200013d8
 800bdd0:	200013ec 	.word	0x200013ec
 800bdd4:	20001408 	.word	0x20001408
 800bdd8:	2000141c 	.word	0x2000141c
 800bddc:	20001434 	.word	0x20001434
 800bde0:	20001400 	.word	0x20001400
 800bde4:	20001404 	.word	0x20001404

0800bde8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdee:	e019      	b.n	800be24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdf0:	f000 fc10 	bl	800c614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf4:	4b10      	ldr	r3, [pc, #64]	; (800be38 <prvCheckTasksWaitingTermination+0x50>)
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	3304      	adds	r3, #4
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fb62 	bl	800b4ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be06:	4b0d      	ldr	r3, [pc, #52]	; (800be3c <prvCheckTasksWaitingTermination+0x54>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	4a0b      	ldr	r2, [pc, #44]	; (800be3c <prvCheckTasksWaitingTermination+0x54>)
 800be0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be10:	4b0b      	ldr	r3, [pc, #44]	; (800be40 <prvCheckTasksWaitingTermination+0x58>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3b01      	subs	r3, #1
 800be16:	4a0a      	ldr	r2, [pc, #40]	; (800be40 <prvCheckTasksWaitingTermination+0x58>)
 800be18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be1a:	f000 fc2b 	bl	800c674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f810 	bl	800be44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be24:	4b06      	ldr	r3, [pc, #24]	; (800be40 <prvCheckTasksWaitingTermination+0x58>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1e1      	bne.n	800bdf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be2c:	bf00      	nop
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	2000141c 	.word	0x2000141c
 800be3c:	20001448 	.word	0x20001448
 800be40:	20001430 	.word	0x20001430

0800be44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	334c      	adds	r3, #76	; 0x4c
 800be50:	4618      	mov	r0, r3
 800be52:	f001 fc93 	bl	800d77c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d108      	bne.n	800be72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be64:	4618      	mov	r0, r3
 800be66:	f000 fdc3 	bl	800c9f0 <vPortFree>
				vPortFree( pxTCB );
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fdc0 	bl	800c9f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be70:	e018      	b.n	800bea4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d103      	bne.n	800be84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fdb7 	bl	800c9f0 <vPortFree>
	}
 800be82:	e00f      	b.n	800bea4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d00a      	beq.n	800bea4 <prvDeleteTCB+0x60>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	60fb      	str	r3, [r7, #12]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <prvDeleteTCB+0x5e>
	}
 800bea4:	bf00      	nop
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beb2:	4b0c      	ldr	r3, [pc, #48]	; (800bee4 <prvResetNextTaskUnblockTime+0x38>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d104      	bne.n	800bec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bebc:	4b0a      	ldr	r3, [pc, #40]	; (800bee8 <prvResetNextTaskUnblockTime+0x3c>)
 800bebe:	f04f 32ff 	mov.w	r2, #4294967295
 800bec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bec4:	e008      	b.n	800bed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bec6:	4b07      	ldr	r3, [pc, #28]	; (800bee4 <prvResetNextTaskUnblockTime+0x38>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	4a04      	ldr	r2, [pc, #16]	; (800bee8 <prvResetNextTaskUnblockTime+0x3c>)
 800bed6:	6013      	str	r3, [r2, #0]
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	20001400 	.word	0x20001400
 800bee8:	20001468 	.word	0x20001468

0800beec <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800befa:	f000 fb8b 	bl	800c614 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800befe:	4b29      	ldr	r3, [pc, #164]	; (800bfa4 <xTaskNotifyWait+0xb8>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d01c      	beq.n	800bf46 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bf0c:	4b25      	ldr	r3, [pc, #148]	; (800bfa4 <xTaskNotifyWait+0xb8>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	43d2      	mvns	r2, r2
 800bf18:	400a      	ands	r2, r1
 800bf1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bf1e:	4b21      	ldr	r3, [pc, #132]	; (800bfa4 <xTaskNotifyWait+0xb8>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00b      	beq.n	800bf46 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf2e:	2101      	movs	r1, #1
 800bf30:	6838      	ldr	r0, [r7, #0]
 800bf32:	f000 f9dd 	bl	800c2f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bf36:	4b1c      	ldr	r3, [pc, #112]	; (800bfa8 <xTaskNotifyWait+0xbc>)
 800bf38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf3c:	601a      	str	r2, [r3, #0]
 800bf3e:	f3bf 8f4f 	dsb	sy
 800bf42:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bf46:	f000 fb95 	bl	800c674 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bf4a:	f000 fb63 	bl	800c614 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d005      	beq.n	800bf60 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bf54:	4b13      	ldr	r3, [pc, #76]	; (800bfa4 <xTaskNotifyWait+0xb8>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bf60:	4b10      	ldr	r3, [pc, #64]	; (800bfa4 <xTaskNotifyWait+0xb8>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d002      	beq.n	800bf74 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	617b      	str	r3, [r7, #20]
 800bf72:	e00a      	b.n	800bf8a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bf74:	4b0b      	ldr	r3, [pc, #44]	; (800bfa4 <xTaskNotifyWait+0xb8>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	43d2      	mvns	r2, r2
 800bf80:	400a      	ands	r2, r1
 800bf82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800bf86:	2301      	movs	r3, #1
 800bf88:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf8a:	4b06      	ldr	r3, [pc, #24]	; (800bfa4 <xTaskNotifyWait+0xb8>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800bf94:	f000 fb6e 	bl	800c674 <vPortExitCritical>

		return xReturn;
 800bf98:	697b      	ldr	r3, [r7, #20]
	}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20001348 	.word	0x20001348
 800bfa8:	e000ed04 	.word	0xe000ed04

0800bfac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b08a      	sub	sp, #40	; 0x28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10a      	bne.n	800bfdc <xTaskGenericNotify+0x30>
	__asm volatile
 800bfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	61bb      	str	r3, [r7, #24]
}
 800bfd8:	bf00      	nop
 800bfda:	e7fe      	b.n	800bfda <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bfe0:	f000 fb18 	bl	800c614 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d004      	beq.n	800bff4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bff4:	6a3b      	ldr	r3, [r7, #32]
 800bff6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bffa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	2202      	movs	r2, #2
 800c000:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800c004:	79fb      	ldrb	r3, [r7, #7]
 800c006:	2b04      	cmp	r3, #4
 800c008:	d82d      	bhi.n	800c066 <xTaskGenericNotify+0xba>
 800c00a:	a201      	add	r2, pc, #4	; (adr r2, 800c010 <xTaskGenericNotify+0x64>)
 800c00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c010:	0800c089 	.word	0x0800c089
 800c014:	0800c025 	.word	0x0800c025
 800c018:	0800c037 	.word	0x0800c037
 800c01c:	0800c047 	.word	0x0800c047
 800c020:	0800c051 	.word	0x0800c051
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	431a      	orrs	r2, r3
 800c02e:	6a3b      	ldr	r3, [r7, #32]
 800c030:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c034:	e02b      	b.n	800c08e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c036:	6a3b      	ldr	r3, [r7, #32]
 800c038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	6a3b      	ldr	r3, [r7, #32]
 800c040:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c044:	e023      	b.n	800c08e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c046:	6a3b      	ldr	r3, [r7, #32]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c04e:	e01e      	b.n	800c08e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c050:	7ffb      	ldrb	r3, [r7, #31]
 800c052:	2b02      	cmp	r3, #2
 800c054:	d004      	beq.n	800c060 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c056:	6a3b      	ldr	r3, [r7, #32]
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c05e:	e016      	b.n	800c08e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800c060:	2300      	movs	r3, #0
 800c062:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c064:	e013      	b.n	800c08e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c070:	d00c      	beq.n	800c08c <xTaskGenericNotify+0xe0>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	617b      	str	r3, [r7, #20]
}
 800c084:	bf00      	nop
 800c086:	e7fe      	b.n	800c086 <xTaskGenericNotify+0xda>
					break;
 800c088:	bf00      	nop
 800c08a:	e000      	b.n	800c08e <xTaskGenericNotify+0xe2>

					break;
 800c08c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c08e:	7ffb      	ldrb	r3, [r7, #31]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d139      	bne.n	800c108 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	3304      	adds	r3, #4
 800c098:	4618      	mov	r0, r3
 800c09a:	f7ff fa16 	bl	800b4ca <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c09e:	6a3b      	ldr	r3, [r7, #32]
 800c0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	409a      	lsls	r2, r3
 800c0a6:	4b1c      	ldr	r3, [pc, #112]	; (800c118 <xTaskGenericNotify+0x16c>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	4a1a      	ldr	r2, [pc, #104]	; (800c118 <xTaskGenericNotify+0x16c>)
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	6a3b      	ldr	r3, [r7, #32]
 800c0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4a17      	ldr	r2, [pc, #92]	; (800c11c <xTaskGenericNotify+0x170>)
 800c0be:	441a      	add	r2, r3
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	f7ff f9a2 	bl	800b410 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00a      	beq.n	800c0ea <xTaskGenericNotify+0x13e>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	613b      	str	r3, [r7, #16]
}
 800c0e6:	bf00      	nop
 800c0e8:	e7fe      	b.n	800c0e8 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0ea:	6a3b      	ldr	r3, [r7, #32]
 800c0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ee:	4b0c      	ldr	r3, [pc, #48]	; (800c120 <xTaskGenericNotify+0x174>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d907      	bls.n	800c108 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c0f8:	4b0a      	ldr	r3, [pc, #40]	; (800c124 <xTaskGenericNotify+0x178>)
 800c0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c108:	f000 fab4 	bl	800c674 <vPortExitCritical>

		return xReturn;
 800c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c10e:	4618      	mov	r0, r3
 800c110:	3728      	adds	r7, #40	; 0x28
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20001450 	.word	0x20001450
 800c11c:	2000134c 	.word	0x2000134c
 800c120:	20001348 	.word	0x20001348
 800c124:	e000ed04 	.word	0xe000ed04

0800c128 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b08e      	sub	sp, #56	; 0x38
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	603b      	str	r3, [r7, #0]
 800c134:	4613      	mov	r3, r2
 800c136:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c138:	2301      	movs	r3, #1
 800c13a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d10a      	bne.n	800c158 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c154:	bf00      	nop
 800c156:	e7fe      	b.n	800c156 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c158:	f000 fb3e 	bl	800c7d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c160:	f3ef 8211 	mrs	r2, BASEPRI
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	623a      	str	r2, [r7, #32]
 800c176:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c178:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c17a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d004      	beq.n	800c18c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	2202      	movs	r2, #2
 800c19a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800c19e:	79fb      	ldrb	r3, [r7, #7]
 800c1a0:	2b04      	cmp	r3, #4
 800c1a2:	d82f      	bhi.n	800c204 <xTaskGenericNotifyFromISR+0xdc>
 800c1a4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ac <xTaskGenericNotifyFromISR+0x84>)
 800c1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1aa:	bf00      	nop
 800c1ac:	0800c227 	.word	0x0800c227
 800c1b0:	0800c1c1 	.word	0x0800c1c1
 800c1b4:	0800c1d3 	.word	0x0800c1d3
 800c1b8:	0800c1e3 	.word	0x0800c1e3
 800c1bc:	0800c1ed 	.word	0x0800c1ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	431a      	orrs	r2, r3
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c1d0:	e02c      	b.n	800c22c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1d8:	1c5a      	adds	r2, r3, #1
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c1e0:	e024      	b.n	800c22c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c1ea:	e01f      	b.n	800c22c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c1ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d004      	beq.n	800c1fe <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c1fc:	e016      	b.n	800c22c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c202:	e013      	b.n	800c22c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20e:	d00c      	beq.n	800c22a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	61bb      	str	r3, [r7, #24]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800c226:	bf00      	nop
 800c228:	e000      	b.n	800c22c <xTaskGenericNotifyFromISR+0x104>
					break;
 800c22a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c22c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c230:	2b01      	cmp	r3, #1
 800c232:	d145      	bne.n	800c2c0 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00a      	beq.n	800c252 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	617b      	str	r3, [r7, #20]
}
 800c24e:	bf00      	nop
 800c250:	e7fe      	b.n	800c250 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c252:	4b21      	ldr	r3, [pc, #132]	; (800c2d8 <xTaskGenericNotifyFromISR+0x1b0>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d11c      	bne.n	800c294 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	3304      	adds	r3, #4
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff f933 	bl	800b4ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	2201      	movs	r2, #1
 800c26a:	409a      	lsls	r2, r3
 800c26c:	4b1b      	ldr	r3, [pc, #108]	; (800c2dc <xTaskGenericNotifyFromISR+0x1b4>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4313      	orrs	r3, r2
 800c272:	4a1a      	ldr	r2, [pc, #104]	; (800c2dc <xTaskGenericNotifyFromISR+0x1b4>)
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27a:	4613      	mov	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4a17      	ldr	r2, [pc, #92]	; (800c2e0 <xTaskGenericNotifyFromISR+0x1b8>)
 800c284:	441a      	add	r2, r3
 800c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c288:	3304      	adds	r3, #4
 800c28a:	4619      	mov	r1, r3
 800c28c:	4610      	mov	r0, r2
 800c28e:	f7ff f8bf 	bl	800b410 <vListInsertEnd>
 800c292:	e005      	b.n	800c2a0 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c296:	3318      	adds	r3, #24
 800c298:	4619      	mov	r1, r3
 800c29a:	4812      	ldr	r0, [pc, #72]	; (800c2e4 <xTaskGenericNotifyFromISR+0x1bc>)
 800c29c:	f7ff f8b8 	bl	800b410 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a4:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <xTaskGenericNotifyFromISR+0x1c0>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d908      	bls.n	800c2c0 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c2ba:	4b0c      	ldr	r3, [pc, #48]	; (800c2ec <xTaskGenericNotifyFromISR+0x1c4>)
 800c2bc:	2201      	movs	r2, #1
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2ca:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3738      	adds	r7, #56	; 0x38
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20001470 	.word	0x20001470
 800c2dc:	20001450 	.word	0x20001450
 800c2e0:	2000134c 	.word	0x2000134c
 800c2e4:	20001408 	.word	0x20001408
 800c2e8:	20001348 	.word	0x20001348
 800c2ec:	2000145c 	.word	0x2000145c

0800c2f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2fa:	4b29      	ldr	r3, [pc, #164]	; (800c3a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c300:	4b28      	ldr	r3, [pc, #160]	; (800c3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3304      	adds	r3, #4
 800c306:	4618      	mov	r0, r3
 800c308:	f7ff f8df 	bl	800b4ca <uxListRemove>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10b      	bne.n	800c32a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c312:	4b24      	ldr	r3, [pc, #144]	; (800c3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c318:	2201      	movs	r2, #1
 800c31a:	fa02 f303 	lsl.w	r3, r2, r3
 800c31e:	43da      	mvns	r2, r3
 800c320:	4b21      	ldr	r3, [pc, #132]	; (800c3a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4013      	ands	r3, r2
 800c326:	4a20      	ldr	r2, [pc, #128]	; (800c3a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c328:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c330:	d10a      	bne.n	800c348 <prvAddCurrentTaskToDelayedList+0x58>
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d007      	beq.n	800c348 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c338:	4b1a      	ldr	r3, [pc, #104]	; (800c3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	3304      	adds	r3, #4
 800c33e:	4619      	mov	r1, r3
 800c340:	481a      	ldr	r0, [pc, #104]	; (800c3ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800c342:	f7ff f865 	bl	800b410 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c346:	e026      	b.n	800c396 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4413      	add	r3, r2
 800c34e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c350:	4b14      	ldr	r3, [pc, #80]	; (800c3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d209      	bcs.n	800c374 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c360:	4b13      	ldr	r3, [pc, #76]	; (800c3b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	4b0f      	ldr	r3, [pc, #60]	; (800c3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3304      	adds	r3, #4
 800c36a:	4619      	mov	r1, r3
 800c36c:	4610      	mov	r0, r2
 800c36e:	f7ff f873 	bl	800b458 <vListInsert>
}
 800c372:	e010      	b.n	800c396 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c374:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3304      	adds	r3, #4
 800c37e:	4619      	mov	r1, r3
 800c380:	4610      	mov	r0, r2
 800c382:	f7ff f869 	bl	800b458 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c386:	4b0c      	ldr	r3, [pc, #48]	; (800c3b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d202      	bcs.n	800c396 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c390:	4a09      	ldr	r2, [pc, #36]	; (800c3b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	6013      	str	r3, [r2, #0]
}
 800c396:	bf00      	nop
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	2000144c 	.word	0x2000144c
 800c3a4:	20001348 	.word	0x20001348
 800c3a8:	20001450 	.word	0x20001450
 800c3ac:	20001434 	.word	0x20001434
 800c3b0:	20001404 	.word	0x20001404
 800c3b4:	20001400 	.word	0x20001400
 800c3b8:	20001468 	.word	0x20001468

0800c3bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3b04      	subs	r3, #4
 800c3cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3b04      	subs	r3, #4
 800c3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	f023 0201 	bic.w	r2, r3, #1
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3b04      	subs	r3, #4
 800c3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3ec:	4a0c      	ldr	r2, [pc, #48]	; (800c420 <pxPortInitialiseStack+0x64>)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	3b14      	subs	r3, #20
 800c3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3b04      	subs	r3, #4
 800c402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f06f 0202 	mvn.w	r2, #2
 800c40a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	3b20      	subs	r3, #32
 800c410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c412:	68fb      	ldr	r3, [r7, #12]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	0800c425 	.word	0x0800c425

0800c424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c42e:	4b12      	ldr	r3, [pc, #72]	; (800c478 <prvTaskExitError+0x54>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c436:	d00a      	beq.n	800c44e <prvTaskExitError+0x2a>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	60fb      	str	r3, [r7, #12]
}
 800c44a:	bf00      	nop
 800c44c:	e7fe      	b.n	800c44c <prvTaskExitError+0x28>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	60bb      	str	r3, [r7, #8]
}
 800c460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c462:	bf00      	nop
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d0fc      	beq.n	800c464 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c46a:	bf00      	nop
 800c46c:	bf00      	nop
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	2000000c 	.word	0x2000000c
 800c47c:	00000000 	.word	0x00000000

0800c480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c480:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <pxCurrentTCBConst2>)
 800c482:	6819      	ldr	r1, [r3, #0]
 800c484:	6808      	ldr	r0, [r1, #0]
 800c486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48a:	f380 8809 	msr	PSP, r0
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f04f 0000 	mov.w	r0, #0
 800c496:	f380 8811 	msr	BASEPRI, r0
 800c49a:	4770      	bx	lr
 800c49c:	f3af 8000 	nop.w

0800c4a0 <pxCurrentTCBConst2>:
 800c4a0:	20001348 	.word	0x20001348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop

0800c4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4a8:	4808      	ldr	r0, [pc, #32]	; (800c4cc <prvPortStartFirstTask+0x24>)
 800c4aa:	6800      	ldr	r0, [r0, #0]
 800c4ac:	6800      	ldr	r0, [r0, #0]
 800c4ae:	f380 8808 	msr	MSP, r0
 800c4b2:	f04f 0000 	mov.w	r0, #0
 800c4b6:	f380 8814 	msr	CONTROL, r0
 800c4ba:	b662      	cpsie	i
 800c4bc:	b661      	cpsie	f
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	df00      	svc	0
 800c4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4ca:	bf00      	nop
 800c4cc:	e000ed08 	.word	0xe000ed08

0800c4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4d6:	4b46      	ldr	r3, [pc, #280]	; (800c5f0 <xPortStartScheduler+0x120>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a46      	ldr	r2, [pc, #280]	; (800c5f4 <xPortStartScheduler+0x124>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d10a      	bne.n	800c4f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	613b      	str	r3, [r7, #16]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4f6:	4b3e      	ldr	r3, [pc, #248]	; (800c5f0 <xPortStartScheduler+0x120>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a3f      	ldr	r2, [pc, #252]	; (800c5f8 <xPortStartScheduler+0x128>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d10a      	bne.n	800c516 <xPortStartScheduler+0x46>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	60fb      	str	r3, [r7, #12]
}
 800c512:	bf00      	nop
 800c514:	e7fe      	b.n	800c514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c516:	4b39      	ldr	r3, [pc, #228]	; (800c5fc <xPortStartScheduler+0x12c>)
 800c518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	22ff      	movs	r2, #255	; 0xff
 800c526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c530:	78fb      	ldrb	r3, [r7, #3]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	4b31      	ldr	r3, [pc, #196]	; (800c600 <xPortStartScheduler+0x130>)
 800c53c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c53e:	4b31      	ldr	r3, [pc, #196]	; (800c604 <xPortStartScheduler+0x134>)
 800c540:	2207      	movs	r2, #7
 800c542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c544:	e009      	b.n	800c55a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c546:	4b2f      	ldr	r3, [pc, #188]	; (800c604 <xPortStartScheduler+0x134>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3b01      	subs	r3, #1
 800c54c:	4a2d      	ldr	r2, [pc, #180]	; (800c604 <xPortStartScheduler+0x134>)
 800c54e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	b2db      	uxtb	r3, r3
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	b2db      	uxtb	r3, r3
 800c558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c55a:	78fb      	ldrb	r3, [r7, #3]
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c562:	2b80      	cmp	r3, #128	; 0x80
 800c564:	d0ef      	beq.n	800c546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c566:	4b27      	ldr	r3, [pc, #156]	; (800c604 <xPortStartScheduler+0x134>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f1c3 0307 	rsb	r3, r3, #7
 800c56e:	2b04      	cmp	r3, #4
 800c570:	d00a      	beq.n	800c588 <xPortStartScheduler+0xb8>
	__asm volatile
 800c572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	60bb      	str	r3, [r7, #8]
}
 800c584:	bf00      	nop
 800c586:	e7fe      	b.n	800c586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c588:	4b1e      	ldr	r3, [pc, #120]	; (800c604 <xPortStartScheduler+0x134>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	021b      	lsls	r3, r3, #8
 800c58e:	4a1d      	ldr	r2, [pc, #116]	; (800c604 <xPortStartScheduler+0x134>)
 800c590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c592:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <xPortStartScheduler+0x134>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c59a:	4a1a      	ldr	r2, [pc, #104]	; (800c604 <xPortStartScheduler+0x134>)
 800c59c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c5a6:	4b18      	ldr	r3, [pc, #96]	; (800c608 <xPortStartScheduler+0x138>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a17      	ldr	r2, [pc, #92]	; (800c608 <xPortStartScheduler+0x138>)
 800c5ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5b2:	4b15      	ldr	r3, [pc, #84]	; (800c608 <xPortStartScheduler+0x138>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a14      	ldr	r2, [pc, #80]	; (800c608 <xPortStartScheduler+0x138>)
 800c5b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c5bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5be:	f000 f8dd 	bl	800c77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5c2:	4b12      	ldr	r3, [pc, #72]	; (800c60c <xPortStartScheduler+0x13c>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5c8:	f000 f8fc 	bl	800c7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5cc:	4b10      	ldr	r3, [pc, #64]	; (800c610 <xPortStartScheduler+0x140>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a0f      	ldr	r2, [pc, #60]	; (800c610 <xPortStartScheduler+0x140>)
 800c5d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5d8:	f7ff ff66 	bl	800c4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5dc:	f7ff fb4a 	bl	800bc74 <vTaskSwitchContext>
	prvTaskExitError();
 800c5e0:	f7ff ff20 	bl	800c424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3718      	adds	r7, #24
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	e000ed00 	.word	0xe000ed00
 800c5f4:	410fc271 	.word	0x410fc271
 800c5f8:	410fc270 	.word	0x410fc270
 800c5fc:	e000e400 	.word	0xe000e400
 800c600:	20001474 	.word	0x20001474
 800c604:	20001478 	.word	0x20001478
 800c608:	e000ed20 	.word	0xe000ed20
 800c60c:	2000000c 	.word	0x2000000c
 800c610:	e000ef34 	.word	0xe000ef34

0800c614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	607b      	str	r3, [r7, #4]
}
 800c62c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c62e:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <vPortEnterCritical+0x58>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3301      	adds	r3, #1
 800c634:	4a0d      	ldr	r2, [pc, #52]	; (800c66c <vPortEnterCritical+0x58>)
 800c636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c638:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <vPortEnterCritical+0x58>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d10f      	bne.n	800c660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c640:	4b0b      	ldr	r3, [pc, #44]	; (800c670 <vPortEnterCritical+0x5c>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	b2db      	uxtb	r3, r3
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <vPortEnterCritical+0x4c>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	603b      	str	r3, [r7, #0]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <vPortEnterCritical+0x4a>
	}
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	2000000c 	.word	0x2000000c
 800c670:	e000ed04 	.word	0xe000ed04

0800c674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c67a:	4b12      	ldr	r3, [pc, #72]	; (800c6c4 <vPortExitCritical+0x50>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10a      	bne.n	800c698 <vPortExitCritical+0x24>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	607b      	str	r3, [r7, #4]
}
 800c694:	bf00      	nop
 800c696:	e7fe      	b.n	800c696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c698:	4b0a      	ldr	r3, [pc, #40]	; (800c6c4 <vPortExitCritical+0x50>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3b01      	subs	r3, #1
 800c69e:	4a09      	ldr	r2, [pc, #36]	; (800c6c4 <vPortExitCritical+0x50>)
 800c6a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6a2:	4b08      	ldr	r3, [pc, #32]	; (800c6c4 <vPortExitCritical+0x50>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d105      	bne.n	800c6b6 <vPortExitCritical+0x42>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	f383 8811 	msr	BASEPRI, r3
}
 800c6b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6b6:	bf00      	nop
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	2000000c 	.word	0x2000000c
	...

0800c6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6d0:	f3ef 8009 	mrs	r0, PSP
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	4b15      	ldr	r3, [pc, #84]	; (800c730 <pxCurrentTCBConst>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	f01e 0f10 	tst.w	lr, #16
 800c6e0:	bf08      	it	eq
 800c6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ea:	6010      	str	r0, [r2, #0]
 800c6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6f4:	f380 8811 	msr	BASEPRI, r0
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f7ff fab8 	bl	800bc74 <vTaskSwitchContext>
 800c704:	f04f 0000 	mov.w	r0, #0
 800c708:	f380 8811 	msr	BASEPRI, r0
 800c70c:	bc09      	pop	{r0, r3}
 800c70e:	6819      	ldr	r1, [r3, #0]
 800c710:	6808      	ldr	r0, [r1, #0]
 800c712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c716:	f01e 0f10 	tst.w	lr, #16
 800c71a:	bf08      	it	eq
 800c71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c720:	f380 8809 	msr	PSP, r0
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	f3af 8000 	nop.w

0800c730 <pxCurrentTCBConst>:
 800c730:	20001348 	.word	0x20001348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c734:	bf00      	nop
 800c736:	bf00      	nop

0800c738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c752:	f7ff f9d7 	bl	800bb04 <xTaskIncrementTick>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c75c:	4b06      	ldr	r3, [pc, #24]	; (800c778 <SysTick_Handler+0x40>)
 800c75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	2300      	movs	r3, #0
 800c766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	f383 8811 	msr	BASEPRI, r3
}
 800c76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	e000ed04 	.word	0xe000ed04

0800c77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c77c:	b480      	push	{r7}
 800c77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c780:	4b0b      	ldr	r3, [pc, #44]	; (800c7b0 <vPortSetupTimerInterrupt+0x34>)
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c786:	4b0b      	ldr	r3, [pc, #44]	; (800c7b4 <vPortSetupTimerInterrupt+0x38>)
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c78c:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <vPortSetupTimerInterrupt+0x3c>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a0a      	ldr	r2, [pc, #40]	; (800c7bc <vPortSetupTimerInterrupt+0x40>)
 800c792:	fba2 2303 	umull	r2, r3, r2, r3
 800c796:	099b      	lsrs	r3, r3, #6
 800c798:	4a09      	ldr	r2, [pc, #36]	; (800c7c0 <vPortSetupTimerInterrupt+0x44>)
 800c79a:	3b01      	subs	r3, #1
 800c79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c79e:	4b04      	ldr	r3, [pc, #16]	; (800c7b0 <vPortSetupTimerInterrupt+0x34>)
 800c7a0:	2207      	movs	r2, #7
 800c7a2:	601a      	str	r2, [r3, #0]
}
 800c7a4:	bf00      	nop
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	e000e010 	.word	0xe000e010
 800c7b4:	e000e018 	.word	0xe000e018
 800c7b8:	20000000 	.word	0x20000000
 800c7bc:	10624dd3 	.word	0x10624dd3
 800c7c0:	e000e014 	.word	0xe000e014

0800c7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7d4 <vPortEnableVFP+0x10>
 800c7c8:	6801      	ldr	r1, [r0, #0]
 800c7ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7ce:	6001      	str	r1, [r0, #0]
 800c7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7d2:	bf00      	nop
 800c7d4:	e000ed88 	.word	0xe000ed88

0800c7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7de:	f3ef 8305 	mrs	r3, IPSR
 800c7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2b0f      	cmp	r3, #15
 800c7e8:	d914      	bls.n	800c814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7ea:	4a17      	ldr	r2, [pc, #92]	; (800c848 <vPortValidateInterruptPriority+0x70>)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7f4:	4b15      	ldr	r3, [pc, #84]	; (800c84c <vPortValidateInterruptPriority+0x74>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	7afa      	ldrb	r2, [r7, #11]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d20a      	bcs.n	800c814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	607b      	str	r3, [r7, #4]
}
 800c810:	bf00      	nop
 800c812:	e7fe      	b.n	800c812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c814:	4b0e      	ldr	r3, [pc, #56]	; (800c850 <vPortValidateInterruptPriority+0x78>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c81c:	4b0d      	ldr	r3, [pc, #52]	; (800c854 <vPortValidateInterruptPriority+0x7c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	429a      	cmp	r2, r3
 800c822:	d90a      	bls.n	800c83a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	603b      	str	r3, [r7, #0]
}
 800c836:	bf00      	nop
 800c838:	e7fe      	b.n	800c838 <vPortValidateInterruptPriority+0x60>
	}
 800c83a:	bf00      	nop
 800c83c:	3714      	adds	r7, #20
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	e000e3f0 	.word	0xe000e3f0
 800c84c:	20001474 	.word	0x20001474
 800c850:	e000ed0c 	.word	0xe000ed0c
 800c854:	20001478 	.word	0x20001478

0800c858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08a      	sub	sp, #40	; 0x28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c860:	2300      	movs	r3, #0
 800c862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c864:	f7ff f8a4 	bl	800b9b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c868:	4b5b      	ldr	r3, [pc, #364]	; (800c9d8 <pvPortMalloc+0x180>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c870:	f000 f920 	bl	800cab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c874:	4b59      	ldr	r3, [pc, #356]	; (800c9dc <pvPortMalloc+0x184>)
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4013      	ands	r3, r2
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f040 8093 	bne.w	800c9a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d01d      	beq.n	800c8c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c888:	2208      	movs	r2, #8
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4413      	add	r3, r2
 800c88e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f003 0307 	and.w	r3, r3, #7
 800c896:	2b00      	cmp	r3, #0
 800c898:	d014      	beq.n	800c8c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f023 0307 	bic.w	r3, r3, #7
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f003 0307 	and.w	r3, r3, #7
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00a      	beq.n	800c8c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	617b      	str	r3, [r7, #20]
}
 800c8c0:	bf00      	nop
 800c8c2:	e7fe      	b.n	800c8c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d06e      	beq.n	800c9a8 <pvPortMalloc+0x150>
 800c8ca:	4b45      	ldr	r3, [pc, #276]	; (800c9e0 <pvPortMalloc+0x188>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d869      	bhi.n	800c9a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8d4:	4b43      	ldr	r3, [pc, #268]	; (800c9e4 <pvPortMalloc+0x18c>)
 800c8d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8d8:	4b42      	ldr	r3, [pc, #264]	; (800c9e4 <pvPortMalloc+0x18c>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8de:	e004      	b.n	800c8ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d903      	bls.n	800c8fc <pvPortMalloc+0xa4>
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1f1      	bne.n	800c8e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8fc:	4b36      	ldr	r3, [pc, #216]	; (800c9d8 <pvPortMalloc+0x180>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c902:	429a      	cmp	r2, r3
 800c904:	d050      	beq.n	800c9a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c906:	6a3b      	ldr	r3, [r7, #32]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2208      	movs	r2, #8
 800c90c:	4413      	add	r3, r2
 800c90e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	6a3b      	ldr	r3, [r7, #32]
 800c916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	1ad2      	subs	r2, r2, r3
 800c920:	2308      	movs	r3, #8
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	429a      	cmp	r2, r3
 800c926:	d91f      	bls.n	800c968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4413      	add	r3, r2
 800c92e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	f003 0307 	and.w	r3, r3, #7
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00a      	beq.n	800c950 <pvPortMalloc+0xf8>
	__asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	613b      	str	r3, [r7, #16]
}
 800c94c:	bf00      	nop
 800c94e:	e7fe      	b.n	800c94e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	1ad2      	subs	r2, r2, r3
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c962:	69b8      	ldr	r0, [r7, #24]
 800c964:	f000 f908 	bl	800cb78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c968:	4b1d      	ldr	r3, [pc, #116]	; (800c9e0 <pvPortMalloc+0x188>)
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	4a1b      	ldr	r2, [pc, #108]	; (800c9e0 <pvPortMalloc+0x188>)
 800c974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c976:	4b1a      	ldr	r3, [pc, #104]	; (800c9e0 <pvPortMalloc+0x188>)
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	4b1b      	ldr	r3, [pc, #108]	; (800c9e8 <pvPortMalloc+0x190>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d203      	bcs.n	800c98a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c982:	4b17      	ldr	r3, [pc, #92]	; (800c9e0 <pvPortMalloc+0x188>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a18      	ldr	r2, [pc, #96]	; (800c9e8 <pvPortMalloc+0x190>)
 800c988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	685a      	ldr	r2, [r3, #4]
 800c98e:	4b13      	ldr	r3, [pc, #76]	; (800c9dc <pvPortMalloc+0x184>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	431a      	orrs	r2, r3
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99a:	2200      	movs	r2, #0
 800c99c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c99e:	4b13      	ldr	r3, [pc, #76]	; (800c9ec <pvPortMalloc+0x194>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	4a11      	ldr	r2, [pc, #68]	; (800c9ec <pvPortMalloc+0x194>)
 800c9a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9a8:	f7ff f810 	bl	800b9cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	f003 0307 	and.w	r3, r3, #7
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00a      	beq.n	800c9cc <pvPortMalloc+0x174>
	__asm volatile
 800c9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	60fb      	str	r3, [r7, #12]
}
 800c9c8:	bf00      	nop
 800c9ca:	e7fe      	b.n	800c9ca <pvPortMalloc+0x172>
	return pvReturn;
 800c9cc:	69fb      	ldr	r3, [r7, #28]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3728      	adds	r7, #40	; 0x28
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20005084 	.word	0x20005084
 800c9dc:	20005098 	.word	0x20005098
 800c9e0:	20005088 	.word	0x20005088
 800c9e4:	2000507c 	.word	0x2000507c
 800c9e8:	2000508c 	.word	0x2000508c
 800c9ec:	20005090 	.word	0x20005090

0800c9f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d04d      	beq.n	800ca9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca02:	2308      	movs	r3, #8
 800ca04:	425b      	negs	r3, r3
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	4413      	add	r3, r2
 800ca0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	4b24      	ldr	r3, [pc, #144]	; (800caa8 <vPortFree+0xb8>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4013      	ands	r3, r2
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10a      	bne.n	800ca34 <vPortFree+0x44>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	60fb      	str	r3, [r7, #12]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00a      	beq.n	800ca52 <vPortFree+0x62>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	60bb      	str	r3, [r7, #8]
}
 800ca4e:	bf00      	nop
 800ca50:	e7fe      	b.n	800ca50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	4b14      	ldr	r3, [pc, #80]	; (800caa8 <vPortFree+0xb8>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d01e      	beq.n	800ca9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d11a      	bne.n	800ca9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	4b0e      	ldr	r3, [pc, #56]	; (800caa8 <vPortFree+0xb8>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	43db      	mvns	r3, r3
 800ca72:	401a      	ands	r2, r3
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca78:	f7fe ff9a 	bl	800b9b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	4b0a      	ldr	r3, [pc, #40]	; (800caac <vPortFree+0xbc>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4413      	add	r3, r2
 800ca86:	4a09      	ldr	r2, [pc, #36]	; (800caac <vPortFree+0xbc>)
 800ca88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca8a:	6938      	ldr	r0, [r7, #16]
 800ca8c:	f000 f874 	bl	800cb78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca90:	4b07      	ldr	r3, [pc, #28]	; (800cab0 <vPortFree+0xc0>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	3301      	adds	r3, #1
 800ca96:	4a06      	ldr	r2, [pc, #24]	; (800cab0 <vPortFree+0xc0>)
 800ca98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca9a:	f7fe ff97 	bl	800b9cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca9e:	bf00      	nop
 800caa0:	3718      	adds	r7, #24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	20005098 	.word	0x20005098
 800caac:	20005088 	.word	0x20005088
 800cab0:	20005094 	.word	0x20005094

0800cab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800caba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cabe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cac0:	4b27      	ldr	r3, [pc, #156]	; (800cb60 <prvHeapInit+0xac>)
 800cac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00c      	beq.n	800cae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3307      	adds	r3, #7
 800cad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f023 0307 	bic.w	r3, r3, #7
 800cada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	4a1f      	ldr	r2, [pc, #124]	; (800cb60 <prvHeapInit+0xac>)
 800cae4:	4413      	add	r3, r2
 800cae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800caec:	4a1d      	ldr	r2, [pc, #116]	; (800cb64 <prvHeapInit+0xb0>)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800caf2:	4b1c      	ldr	r3, [pc, #112]	; (800cb64 <prvHeapInit+0xb0>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	4413      	add	r3, r2
 800cafe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb00:	2208      	movs	r2, #8
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	1a9b      	subs	r3, r3, r2
 800cb06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f023 0307 	bic.w	r3, r3, #7
 800cb0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	4a15      	ldr	r2, [pc, #84]	; (800cb68 <prvHeapInit+0xb4>)
 800cb14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb16:	4b14      	ldr	r3, [pc, #80]	; (800cb68 <prvHeapInit+0xb4>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb1e:	4b12      	ldr	r3, [pc, #72]	; (800cb68 <prvHeapInit+0xb4>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	1ad2      	subs	r2, r2, r3
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb34:	4b0c      	ldr	r3, [pc, #48]	; (800cb68 <prvHeapInit+0xb4>)
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	4a0a      	ldr	r2, [pc, #40]	; (800cb6c <prvHeapInit+0xb8>)
 800cb42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	4a09      	ldr	r2, [pc, #36]	; (800cb70 <prvHeapInit+0xbc>)
 800cb4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb4c:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <prvHeapInit+0xc0>)
 800cb4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb52:	601a      	str	r2, [r3, #0]
}
 800cb54:	bf00      	nop
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	2000147c 	.word	0x2000147c
 800cb64:	2000507c 	.word	0x2000507c
 800cb68:	20005084 	.word	0x20005084
 800cb6c:	2000508c 	.word	0x2000508c
 800cb70:	20005088 	.word	0x20005088
 800cb74:	20005098 	.word	0x20005098

0800cb78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb80:	4b28      	ldr	r3, [pc, #160]	; (800cc24 <prvInsertBlockIntoFreeList+0xac>)
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	e002      	b.n	800cb8c <prvInsertBlockIntoFreeList+0x14>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d8f7      	bhi.n	800cb86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	4413      	add	r3, r2
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d108      	bne.n	800cbba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	441a      	add	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	441a      	add	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d118      	bne.n	800cc00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	4b15      	ldr	r3, [pc, #84]	; (800cc28 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d00d      	beq.n	800cbf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	441a      	add	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	e008      	b.n	800cc08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbf6:	4b0c      	ldr	r3, [pc, #48]	; (800cc28 <prvInsertBlockIntoFreeList+0xb0>)
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	e003      	b.n	800cc08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d002      	beq.n	800cc16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc16:	bf00      	nop
 800cc18:	3714      	adds	r7, #20
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	2000507c 	.word	0x2000507c
 800cc28:	20005084 	.word	0x20005084

0800cc2c <__cvt>:
 800cc2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc30:	ec55 4b10 	vmov	r4, r5, d0
 800cc34:	2d00      	cmp	r5, #0
 800cc36:	460e      	mov	r6, r1
 800cc38:	4619      	mov	r1, r3
 800cc3a:	462b      	mov	r3, r5
 800cc3c:	bfbb      	ittet	lt
 800cc3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cc42:	461d      	movlt	r5, r3
 800cc44:	2300      	movge	r3, #0
 800cc46:	232d      	movlt	r3, #45	; 0x2d
 800cc48:	700b      	strb	r3, [r1, #0]
 800cc4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cc50:	4691      	mov	r9, r2
 800cc52:	f023 0820 	bic.w	r8, r3, #32
 800cc56:	bfbc      	itt	lt
 800cc58:	4622      	movlt	r2, r4
 800cc5a:	4614      	movlt	r4, r2
 800cc5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc60:	d005      	beq.n	800cc6e <__cvt+0x42>
 800cc62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cc66:	d100      	bne.n	800cc6a <__cvt+0x3e>
 800cc68:	3601      	adds	r6, #1
 800cc6a:	2102      	movs	r1, #2
 800cc6c:	e000      	b.n	800cc70 <__cvt+0x44>
 800cc6e:	2103      	movs	r1, #3
 800cc70:	ab03      	add	r3, sp, #12
 800cc72:	9301      	str	r3, [sp, #4]
 800cc74:	ab02      	add	r3, sp, #8
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	ec45 4b10 	vmov	d0, r4, r5
 800cc7c:	4653      	mov	r3, sl
 800cc7e:	4632      	mov	r2, r6
 800cc80:	f000 fed6 	bl	800da30 <_dtoa_r>
 800cc84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cc88:	4607      	mov	r7, r0
 800cc8a:	d102      	bne.n	800cc92 <__cvt+0x66>
 800cc8c:	f019 0f01 	tst.w	r9, #1
 800cc90:	d022      	beq.n	800ccd8 <__cvt+0xac>
 800cc92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc96:	eb07 0906 	add.w	r9, r7, r6
 800cc9a:	d110      	bne.n	800ccbe <__cvt+0x92>
 800cc9c:	783b      	ldrb	r3, [r7, #0]
 800cc9e:	2b30      	cmp	r3, #48	; 0x30
 800cca0:	d10a      	bne.n	800ccb8 <__cvt+0x8c>
 800cca2:	2200      	movs	r2, #0
 800cca4:	2300      	movs	r3, #0
 800cca6:	4620      	mov	r0, r4
 800cca8:	4629      	mov	r1, r5
 800ccaa:	f7f3 ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccae:	b918      	cbnz	r0, 800ccb8 <__cvt+0x8c>
 800ccb0:	f1c6 0601 	rsb	r6, r6, #1
 800ccb4:	f8ca 6000 	str.w	r6, [sl]
 800ccb8:	f8da 3000 	ldr.w	r3, [sl]
 800ccbc:	4499      	add	r9, r3
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	4629      	mov	r1, r5
 800ccc6:	f7f3 feff 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccca:	b108      	cbz	r0, 800ccd0 <__cvt+0xa4>
 800cccc:	f8cd 900c 	str.w	r9, [sp, #12]
 800ccd0:	2230      	movs	r2, #48	; 0x30
 800ccd2:	9b03      	ldr	r3, [sp, #12]
 800ccd4:	454b      	cmp	r3, r9
 800ccd6:	d307      	bcc.n	800cce8 <__cvt+0xbc>
 800ccd8:	9b03      	ldr	r3, [sp, #12]
 800ccda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccdc:	1bdb      	subs	r3, r3, r7
 800ccde:	4638      	mov	r0, r7
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	b004      	add	sp, #16
 800cce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cce8:	1c59      	adds	r1, r3, #1
 800ccea:	9103      	str	r1, [sp, #12]
 800ccec:	701a      	strb	r2, [r3, #0]
 800ccee:	e7f0      	b.n	800ccd2 <__cvt+0xa6>

0800ccf0 <__exponent>:
 800ccf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2900      	cmp	r1, #0
 800ccf6:	bfb8      	it	lt
 800ccf8:	4249      	neglt	r1, r1
 800ccfa:	f803 2b02 	strb.w	r2, [r3], #2
 800ccfe:	bfb4      	ite	lt
 800cd00:	222d      	movlt	r2, #45	; 0x2d
 800cd02:	222b      	movge	r2, #43	; 0x2b
 800cd04:	2909      	cmp	r1, #9
 800cd06:	7042      	strb	r2, [r0, #1]
 800cd08:	dd2a      	ble.n	800cd60 <__exponent+0x70>
 800cd0a:	f10d 0207 	add.w	r2, sp, #7
 800cd0e:	4617      	mov	r7, r2
 800cd10:	260a      	movs	r6, #10
 800cd12:	4694      	mov	ip, r2
 800cd14:	fb91 f5f6 	sdiv	r5, r1, r6
 800cd18:	fb06 1415 	mls	r4, r6, r5, r1
 800cd1c:	3430      	adds	r4, #48	; 0x30
 800cd1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cd22:	460c      	mov	r4, r1
 800cd24:	2c63      	cmp	r4, #99	; 0x63
 800cd26:	f102 32ff 	add.w	r2, r2, #4294967295
 800cd2a:	4629      	mov	r1, r5
 800cd2c:	dcf1      	bgt.n	800cd12 <__exponent+0x22>
 800cd2e:	3130      	adds	r1, #48	; 0x30
 800cd30:	f1ac 0402 	sub.w	r4, ip, #2
 800cd34:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cd38:	1c41      	adds	r1, r0, #1
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	42ba      	cmp	r2, r7
 800cd3e:	d30a      	bcc.n	800cd56 <__exponent+0x66>
 800cd40:	f10d 0209 	add.w	r2, sp, #9
 800cd44:	eba2 020c 	sub.w	r2, r2, ip
 800cd48:	42bc      	cmp	r4, r7
 800cd4a:	bf88      	it	hi
 800cd4c:	2200      	movhi	r2, #0
 800cd4e:	4413      	add	r3, r2
 800cd50:	1a18      	subs	r0, r3, r0
 800cd52:	b003      	add	sp, #12
 800cd54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd56:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cd5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cd5e:	e7ed      	b.n	800cd3c <__exponent+0x4c>
 800cd60:	2330      	movs	r3, #48	; 0x30
 800cd62:	3130      	adds	r1, #48	; 0x30
 800cd64:	7083      	strb	r3, [r0, #2]
 800cd66:	70c1      	strb	r1, [r0, #3]
 800cd68:	1d03      	adds	r3, r0, #4
 800cd6a:	e7f1      	b.n	800cd50 <__exponent+0x60>

0800cd6c <_printf_float>:
 800cd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd70:	ed2d 8b02 	vpush	{d8}
 800cd74:	b08d      	sub	sp, #52	; 0x34
 800cd76:	460c      	mov	r4, r1
 800cd78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cd7c:	4616      	mov	r6, r2
 800cd7e:	461f      	mov	r7, r3
 800cd80:	4605      	mov	r5, r0
 800cd82:	f000 fce7 	bl	800d754 <_localeconv_r>
 800cd86:	f8d0 a000 	ldr.w	sl, [r0]
 800cd8a:	4650      	mov	r0, sl
 800cd8c:	f7f3 fa70 	bl	8000270 <strlen>
 800cd90:	2300      	movs	r3, #0
 800cd92:	930a      	str	r3, [sp, #40]	; 0x28
 800cd94:	6823      	ldr	r3, [r4, #0]
 800cd96:	9305      	str	r3, [sp, #20]
 800cd98:	f8d8 3000 	ldr.w	r3, [r8]
 800cd9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cda0:	3307      	adds	r3, #7
 800cda2:	f023 0307 	bic.w	r3, r3, #7
 800cda6:	f103 0208 	add.w	r2, r3, #8
 800cdaa:	f8c8 2000 	str.w	r2, [r8]
 800cdae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cdb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cdb6:	9307      	str	r3, [sp, #28]
 800cdb8:	f8cd 8018 	str.w	r8, [sp, #24]
 800cdbc:	ee08 0a10 	vmov	s16, r0
 800cdc0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cdc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdc8:	4b9e      	ldr	r3, [pc, #632]	; (800d044 <_printf_float+0x2d8>)
 800cdca:	f04f 32ff 	mov.w	r2, #4294967295
 800cdce:	f7f3 fead 	bl	8000b2c <__aeabi_dcmpun>
 800cdd2:	bb88      	cbnz	r0, 800ce38 <_printf_float+0xcc>
 800cdd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdd8:	4b9a      	ldr	r3, [pc, #616]	; (800d044 <_printf_float+0x2d8>)
 800cdda:	f04f 32ff 	mov.w	r2, #4294967295
 800cdde:	f7f3 fe87 	bl	8000af0 <__aeabi_dcmple>
 800cde2:	bb48      	cbnz	r0, 800ce38 <_printf_float+0xcc>
 800cde4:	2200      	movs	r2, #0
 800cde6:	2300      	movs	r3, #0
 800cde8:	4640      	mov	r0, r8
 800cdea:	4649      	mov	r1, r9
 800cdec:	f7f3 fe76 	bl	8000adc <__aeabi_dcmplt>
 800cdf0:	b110      	cbz	r0, 800cdf8 <_printf_float+0x8c>
 800cdf2:	232d      	movs	r3, #45	; 0x2d
 800cdf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdf8:	4a93      	ldr	r2, [pc, #588]	; (800d048 <_printf_float+0x2dc>)
 800cdfa:	4b94      	ldr	r3, [pc, #592]	; (800d04c <_printf_float+0x2e0>)
 800cdfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ce00:	bf94      	ite	ls
 800ce02:	4690      	movls	r8, r2
 800ce04:	4698      	movhi	r8, r3
 800ce06:	2303      	movs	r3, #3
 800ce08:	6123      	str	r3, [r4, #16]
 800ce0a:	9b05      	ldr	r3, [sp, #20]
 800ce0c:	f023 0304 	bic.w	r3, r3, #4
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	f04f 0900 	mov.w	r9, #0
 800ce16:	9700      	str	r7, [sp, #0]
 800ce18:	4633      	mov	r3, r6
 800ce1a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	4628      	mov	r0, r5
 800ce20:	f000 f9da 	bl	800d1d8 <_printf_common>
 800ce24:	3001      	adds	r0, #1
 800ce26:	f040 8090 	bne.w	800cf4a <_printf_float+0x1de>
 800ce2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2e:	b00d      	add	sp, #52	; 0x34
 800ce30:	ecbd 8b02 	vpop	{d8}
 800ce34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce38:	4642      	mov	r2, r8
 800ce3a:	464b      	mov	r3, r9
 800ce3c:	4640      	mov	r0, r8
 800ce3e:	4649      	mov	r1, r9
 800ce40:	f7f3 fe74 	bl	8000b2c <__aeabi_dcmpun>
 800ce44:	b140      	cbz	r0, 800ce58 <_printf_float+0xec>
 800ce46:	464b      	mov	r3, r9
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	bfbc      	itt	lt
 800ce4c:	232d      	movlt	r3, #45	; 0x2d
 800ce4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ce52:	4a7f      	ldr	r2, [pc, #508]	; (800d050 <_printf_float+0x2e4>)
 800ce54:	4b7f      	ldr	r3, [pc, #508]	; (800d054 <_printf_float+0x2e8>)
 800ce56:	e7d1      	b.n	800cdfc <_printf_float+0x90>
 800ce58:	6863      	ldr	r3, [r4, #4]
 800ce5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ce5e:	9206      	str	r2, [sp, #24]
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	d13f      	bne.n	800cee4 <_printf_float+0x178>
 800ce64:	2306      	movs	r3, #6
 800ce66:	6063      	str	r3, [r4, #4]
 800ce68:	9b05      	ldr	r3, [sp, #20]
 800ce6a:	6861      	ldr	r1, [r4, #4]
 800ce6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ce70:	2300      	movs	r3, #0
 800ce72:	9303      	str	r3, [sp, #12]
 800ce74:	ab0a      	add	r3, sp, #40	; 0x28
 800ce76:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ce7a:	ab09      	add	r3, sp, #36	; 0x24
 800ce7c:	ec49 8b10 	vmov	d0, r8, r9
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	6022      	str	r2, [r4, #0]
 800ce84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f7ff fecf 	bl	800cc2c <__cvt>
 800ce8e:	9b06      	ldr	r3, [sp, #24]
 800ce90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce92:	2b47      	cmp	r3, #71	; 0x47
 800ce94:	4680      	mov	r8, r0
 800ce96:	d108      	bne.n	800ceaa <_printf_float+0x13e>
 800ce98:	1cc8      	adds	r0, r1, #3
 800ce9a:	db02      	blt.n	800cea2 <_printf_float+0x136>
 800ce9c:	6863      	ldr	r3, [r4, #4]
 800ce9e:	4299      	cmp	r1, r3
 800cea0:	dd41      	ble.n	800cf26 <_printf_float+0x1ba>
 800cea2:	f1ab 0302 	sub.w	r3, fp, #2
 800cea6:	fa5f fb83 	uxtb.w	fp, r3
 800ceaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ceae:	d820      	bhi.n	800cef2 <_printf_float+0x186>
 800ceb0:	3901      	subs	r1, #1
 800ceb2:	465a      	mov	r2, fp
 800ceb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ceb8:	9109      	str	r1, [sp, #36]	; 0x24
 800ceba:	f7ff ff19 	bl	800ccf0 <__exponent>
 800cebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cec0:	1813      	adds	r3, r2, r0
 800cec2:	2a01      	cmp	r2, #1
 800cec4:	4681      	mov	r9, r0
 800cec6:	6123      	str	r3, [r4, #16]
 800cec8:	dc02      	bgt.n	800ced0 <_printf_float+0x164>
 800ceca:	6822      	ldr	r2, [r4, #0]
 800cecc:	07d2      	lsls	r2, r2, #31
 800cece:	d501      	bpl.n	800ced4 <_printf_float+0x168>
 800ced0:	3301      	adds	r3, #1
 800ced2:	6123      	str	r3, [r4, #16]
 800ced4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d09c      	beq.n	800ce16 <_printf_float+0xaa>
 800cedc:	232d      	movs	r3, #45	; 0x2d
 800cede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cee2:	e798      	b.n	800ce16 <_printf_float+0xaa>
 800cee4:	9a06      	ldr	r2, [sp, #24]
 800cee6:	2a47      	cmp	r2, #71	; 0x47
 800cee8:	d1be      	bne.n	800ce68 <_printf_float+0xfc>
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1bc      	bne.n	800ce68 <_printf_float+0xfc>
 800ceee:	2301      	movs	r3, #1
 800cef0:	e7b9      	b.n	800ce66 <_printf_float+0xfa>
 800cef2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cef6:	d118      	bne.n	800cf2a <_printf_float+0x1be>
 800cef8:	2900      	cmp	r1, #0
 800cefa:	6863      	ldr	r3, [r4, #4]
 800cefc:	dd0b      	ble.n	800cf16 <_printf_float+0x1aa>
 800cefe:	6121      	str	r1, [r4, #16]
 800cf00:	b913      	cbnz	r3, 800cf08 <_printf_float+0x19c>
 800cf02:	6822      	ldr	r2, [r4, #0]
 800cf04:	07d0      	lsls	r0, r2, #31
 800cf06:	d502      	bpl.n	800cf0e <_printf_float+0x1a2>
 800cf08:	3301      	adds	r3, #1
 800cf0a:	440b      	add	r3, r1
 800cf0c:	6123      	str	r3, [r4, #16]
 800cf0e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cf10:	f04f 0900 	mov.w	r9, #0
 800cf14:	e7de      	b.n	800ced4 <_printf_float+0x168>
 800cf16:	b913      	cbnz	r3, 800cf1e <_printf_float+0x1b2>
 800cf18:	6822      	ldr	r2, [r4, #0]
 800cf1a:	07d2      	lsls	r2, r2, #31
 800cf1c:	d501      	bpl.n	800cf22 <_printf_float+0x1b6>
 800cf1e:	3302      	adds	r3, #2
 800cf20:	e7f4      	b.n	800cf0c <_printf_float+0x1a0>
 800cf22:	2301      	movs	r3, #1
 800cf24:	e7f2      	b.n	800cf0c <_printf_float+0x1a0>
 800cf26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cf2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf2c:	4299      	cmp	r1, r3
 800cf2e:	db05      	blt.n	800cf3c <_printf_float+0x1d0>
 800cf30:	6823      	ldr	r3, [r4, #0]
 800cf32:	6121      	str	r1, [r4, #16]
 800cf34:	07d8      	lsls	r0, r3, #31
 800cf36:	d5ea      	bpl.n	800cf0e <_printf_float+0x1a2>
 800cf38:	1c4b      	adds	r3, r1, #1
 800cf3a:	e7e7      	b.n	800cf0c <_printf_float+0x1a0>
 800cf3c:	2900      	cmp	r1, #0
 800cf3e:	bfd4      	ite	le
 800cf40:	f1c1 0202 	rsble	r2, r1, #2
 800cf44:	2201      	movgt	r2, #1
 800cf46:	4413      	add	r3, r2
 800cf48:	e7e0      	b.n	800cf0c <_printf_float+0x1a0>
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	055a      	lsls	r2, r3, #21
 800cf4e:	d407      	bmi.n	800cf60 <_printf_float+0x1f4>
 800cf50:	6923      	ldr	r3, [r4, #16]
 800cf52:	4642      	mov	r2, r8
 800cf54:	4631      	mov	r1, r6
 800cf56:	4628      	mov	r0, r5
 800cf58:	47b8      	blx	r7
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	d12c      	bne.n	800cfb8 <_printf_float+0x24c>
 800cf5e:	e764      	b.n	800ce2a <_printf_float+0xbe>
 800cf60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf64:	f240 80e0 	bls.w	800d128 <_printf_float+0x3bc>
 800cf68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	2300      	movs	r3, #0
 800cf70:	f7f3 fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d034      	beq.n	800cfe2 <_printf_float+0x276>
 800cf78:	4a37      	ldr	r2, [pc, #220]	; (800d058 <_printf_float+0x2ec>)
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	4628      	mov	r0, r5
 800cf80:	47b8      	blx	r7
 800cf82:	3001      	adds	r0, #1
 800cf84:	f43f af51 	beq.w	800ce2a <_printf_float+0xbe>
 800cf88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	db02      	blt.n	800cf96 <_printf_float+0x22a>
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	07d8      	lsls	r0, r3, #31
 800cf94:	d510      	bpl.n	800cfb8 <_printf_float+0x24c>
 800cf96:	ee18 3a10 	vmov	r3, s16
 800cf9a:	4652      	mov	r2, sl
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	47b8      	blx	r7
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	f43f af41 	beq.w	800ce2a <_printf_float+0xbe>
 800cfa8:	f04f 0800 	mov.w	r8, #0
 800cfac:	f104 091a 	add.w	r9, r4, #26
 800cfb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	4543      	cmp	r3, r8
 800cfb6:	dc09      	bgt.n	800cfcc <_printf_float+0x260>
 800cfb8:	6823      	ldr	r3, [r4, #0]
 800cfba:	079b      	lsls	r3, r3, #30
 800cfbc:	f100 8107 	bmi.w	800d1ce <_printf_float+0x462>
 800cfc0:	68e0      	ldr	r0, [r4, #12]
 800cfc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfc4:	4298      	cmp	r0, r3
 800cfc6:	bfb8      	it	lt
 800cfc8:	4618      	movlt	r0, r3
 800cfca:	e730      	b.n	800ce2e <_printf_float+0xc2>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	464a      	mov	r2, r9
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	47b8      	blx	r7
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	f43f af27 	beq.w	800ce2a <_printf_float+0xbe>
 800cfdc:	f108 0801 	add.w	r8, r8, #1
 800cfe0:	e7e6      	b.n	800cfb0 <_printf_float+0x244>
 800cfe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dc39      	bgt.n	800d05c <_printf_float+0x2f0>
 800cfe8:	4a1b      	ldr	r2, [pc, #108]	; (800d058 <_printf_float+0x2ec>)
 800cfea:	2301      	movs	r3, #1
 800cfec:	4631      	mov	r1, r6
 800cfee:	4628      	mov	r0, r5
 800cff0:	47b8      	blx	r7
 800cff2:	3001      	adds	r0, #1
 800cff4:	f43f af19 	beq.w	800ce2a <_printf_float+0xbe>
 800cff8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cffc:	4313      	orrs	r3, r2
 800cffe:	d102      	bne.n	800d006 <_printf_float+0x29a>
 800d000:	6823      	ldr	r3, [r4, #0]
 800d002:	07d9      	lsls	r1, r3, #31
 800d004:	d5d8      	bpl.n	800cfb8 <_printf_float+0x24c>
 800d006:	ee18 3a10 	vmov	r3, s16
 800d00a:	4652      	mov	r2, sl
 800d00c:	4631      	mov	r1, r6
 800d00e:	4628      	mov	r0, r5
 800d010:	47b8      	blx	r7
 800d012:	3001      	adds	r0, #1
 800d014:	f43f af09 	beq.w	800ce2a <_printf_float+0xbe>
 800d018:	f04f 0900 	mov.w	r9, #0
 800d01c:	f104 0a1a 	add.w	sl, r4, #26
 800d020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d022:	425b      	negs	r3, r3
 800d024:	454b      	cmp	r3, r9
 800d026:	dc01      	bgt.n	800d02c <_printf_float+0x2c0>
 800d028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d02a:	e792      	b.n	800cf52 <_printf_float+0x1e6>
 800d02c:	2301      	movs	r3, #1
 800d02e:	4652      	mov	r2, sl
 800d030:	4631      	mov	r1, r6
 800d032:	4628      	mov	r0, r5
 800d034:	47b8      	blx	r7
 800d036:	3001      	adds	r0, #1
 800d038:	f43f aef7 	beq.w	800ce2a <_printf_float+0xbe>
 800d03c:	f109 0901 	add.w	r9, r9, #1
 800d040:	e7ee      	b.n	800d020 <_printf_float+0x2b4>
 800d042:	bf00      	nop
 800d044:	7fefffff 	.word	0x7fefffff
 800d048:	08011ef8 	.word	0x08011ef8
 800d04c:	08011efc 	.word	0x08011efc
 800d050:	08011f00 	.word	0x08011f00
 800d054:	08011f04 	.word	0x08011f04
 800d058:	08011f08 	.word	0x08011f08
 800d05c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d05e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d060:	429a      	cmp	r2, r3
 800d062:	bfa8      	it	ge
 800d064:	461a      	movge	r2, r3
 800d066:	2a00      	cmp	r2, #0
 800d068:	4691      	mov	r9, r2
 800d06a:	dc37      	bgt.n	800d0dc <_printf_float+0x370>
 800d06c:	f04f 0b00 	mov.w	fp, #0
 800d070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d074:	f104 021a 	add.w	r2, r4, #26
 800d078:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d07a:	9305      	str	r3, [sp, #20]
 800d07c:	eba3 0309 	sub.w	r3, r3, r9
 800d080:	455b      	cmp	r3, fp
 800d082:	dc33      	bgt.n	800d0ec <_printf_float+0x380>
 800d084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d088:	429a      	cmp	r2, r3
 800d08a:	db3b      	blt.n	800d104 <_printf_float+0x398>
 800d08c:	6823      	ldr	r3, [r4, #0]
 800d08e:	07da      	lsls	r2, r3, #31
 800d090:	d438      	bmi.n	800d104 <_printf_float+0x398>
 800d092:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d096:	eba2 0903 	sub.w	r9, r2, r3
 800d09a:	9b05      	ldr	r3, [sp, #20]
 800d09c:	1ad2      	subs	r2, r2, r3
 800d09e:	4591      	cmp	r9, r2
 800d0a0:	bfa8      	it	ge
 800d0a2:	4691      	movge	r9, r2
 800d0a4:	f1b9 0f00 	cmp.w	r9, #0
 800d0a8:	dc35      	bgt.n	800d116 <_printf_float+0x3aa>
 800d0aa:	f04f 0800 	mov.w	r8, #0
 800d0ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0b2:	f104 0a1a 	add.w	sl, r4, #26
 800d0b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d0ba:	1a9b      	subs	r3, r3, r2
 800d0bc:	eba3 0309 	sub.w	r3, r3, r9
 800d0c0:	4543      	cmp	r3, r8
 800d0c2:	f77f af79 	ble.w	800cfb8 <_printf_float+0x24c>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	4652      	mov	r2, sl
 800d0ca:	4631      	mov	r1, r6
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	47b8      	blx	r7
 800d0d0:	3001      	adds	r0, #1
 800d0d2:	f43f aeaa 	beq.w	800ce2a <_printf_float+0xbe>
 800d0d6:	f108 0801 	add.w	r8, r8, #1
 800d0da:	e7ec      	b.n	800d0b6 <_printf_float+0x34a>
 800d0dc:	4613      	mov	r3, r2
 800d0de:	4631      	mov	r1, r6
 800d0e0:	4642      	mov	r2, r8
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	47b8      	blx	r7
 800d0e6:	3001      	adds	r0, #1
 800d0e8:	d1c0      	bne.n	800d06c <_printf_float+0x300>
 800d0ea:	e69e      	b.n	800ce2a <_printf_float+0xbe>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	4631      	mov	r1, r6
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	9205      	str	r2, [sp, #20]
 800d0f4:	47b8      	blx	r7
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	f43f ae97 	beq.w	800ce2a <_printf_float+0xbe>
 800d0fc:	9a05      	ldr	r2, [sp, #20]
 800d0fe:	f10b 0b01 	add.w	fp, fp, #1
 800d102:	e7b9      	b.n	800d078 <_printf_float+0x30c>
 800d104:	ee18 3a10 	vmov	r3, s16
 800d108:	4652      	mov	r2, sl
 800d10a:	4631      	mov	r1, r6
 800d10c:	4628      	mov	r0, r5
 800d10e:	47b8      	blx	r7
 800d110:	3001      	adds	r0, #1
 800d112:	d1be      	bne.n	800d092 <_printf_float+0x326>
 800d114:	e689      	b.n	800ce2a <_printf_float+0xbe>
 800d116:	9a05      	ldr	r2, [sp, #20]
 800d118:	464b      	mov	r3, r9
 800d11a:	4442      	add	r2, r8
 800d11c:	4631      	mov	r1, r6
 800d11e:	4628      	mov	r0, r5
 800d120:	47b8      	blx	r7
 800d122:	3001      	adds	r0, #1
 800d124:	d1c1      	bne.n	800d0aa <_printf_float+0x33e>
 800d126:	e680      	b.n	800ce2a <_printf_float+0xbe>
 800d128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d12a:	2a01      	cmp	r2, #1
 800d12c:	dc01      	bgt.n	800d132 <_printf_float+0x3c6>
 800d12e:	07db      	lsls	r3, r3, #31
 800d130:	d53a      	bpl.n	800d1a8 <_printf_float+0x43c>
 800d132:	2301      	movs	r3, #1
 800d134:	4642      	mov	r2, r8
 800d136:	4631      	mov	r1, r6
 800d138:	4628      	mov	r0, r5
 800d13a:	47b8      	blx	r7
 800d13c:	3001      	adds	r0, #1
 800d13e:	f43f ae74 	beq.w	800ce2a <_printf_float+0xbe>
 800d142:	ee18 3a10 	vmov	r3, s16
 800d146:	4652      	mov	r2, sl
 800d148:	4631      	mov	r1, r6
 800d14a:	4628      	mov	r0, r5
 800d14c:	47b8      	blx	r7
 800d14e:	3001      	adds	r0, #1
 800d150:	f43f ae6b 	beq.w	800ce2a <_printf_float+0xbe>
 800d154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d158:	2200      	movs	r2, #0
 800d15a:	2300      	movs	r3, #0
 800d15c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d160:	f7f3 fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d164:	b9d8      	cbnz	r0, 800d19e <_printf_float+0x432>
 800d166:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d16a:	f108 0201 	add.w	r2, r8, #1
 800d16e:	4631      	mov	r1, r6
 800d170:	4628      	mov	r0, r5
 800d172:	47b8      	blx	r7
 800d174:	3001      	adds	r0, #1
 800d176:	d10e      	bne.n	800d196 <_printf_float+0x42a>
 800d178:	e657      	b.n	800ce2a <_printf_float+0xbe>
 800d17a:	2301      	movs	r3, #1
 800d17c:	4652      	mov	r2, sl
 800d17e:	4631      	mov	r1, r6
 800d180:	4628      	mov	r0, r5
 800d182:	47b8      	blx	r7
 800d184:	3001      	adds	r0, #1
 800d186:	f43f ae50 	beq.w	800ce2a <_printf_float+0xbe>
 800d18a:	f108 0801 	add.w	r8, r8, #1
 800d18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d190:	3b01      	subs	r3, #1
 800d192:	4543      	cmp	r3, r8
 800d194:	dcf1      	bgt.n	800d17a <_printf_float+0x40e>
 800d196:	464b      	mov	r3, r9
 800d198:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d19c:	e6da      	b.n	800cf54 <_printf_float+0x1e8>
 800d19e:	f04f 0800 	mov.w	r8, #0
 800d1a2:	f104 0a1a 	add.w	sl, r4, #26
 800d1a6:	e7f2      	b.n	800d18e <_printf_float+0x422>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	4642      	mov	r2, r8
 800d1ac:	e7df      	b.n	800d16e <_printf_float+0x402>
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	464a      	mov	r2, r9
 800d1b2:	4631      	mov	r1, r6
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	47b8      	blx	r7
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	f43f ae36 	beq.w	800ce2a <_printf_float+0xbe>
 800d1be:	f108 0801 	add.w	r8, r8, #1
 800d1c2:	68e3      	ldr	r3, [r4, #12]
 800d1c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1c6:	1a5b      	subs	r3, r3, r1
 800d1c8:	4543      	cmp	r3, r8
 800d1ca:	dcf0      	bgt.n	800d1ae <_printf_float+0x442>
 800d1cc:	e6f8      	b.n	800cfc0 <_printf_float+0x254>
 800d1ce:	f04f 0800 	mov.w	r8, #0
 800d1d2:	f104 0919 	add.w	r9, r4, #25
 800d1d6:	e7f4      	b.n	800d1c2 <_printf_float+0x456>

0800d1d8 <_printf_common>:
 800d1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1dc:	4616      	mov	r6, r2
 800d1de:	4699      	mov	r9, r3
 800d1e0:	688a      	ldr	r2, [r1, #8]
 800d1e2:	690b      	ldr	r3, [r1, #16]
 800d1e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	bfb8      	it	lt
 800d1ec:	4613      	movlt	r3, r2
 800d1ee:	6033      	str	r3, [r6, #0]
 800d1f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1f4:	4607      	mov	r7, r0
 800d1f6:	460c      	mov	r4, r1
 800d1f8:	b10a      	cbz	r2, 800d1fe <_printf_common+0x26>
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	6033      	str	r3, [r6, #0]
 800d1fe:	6823      	ldr	r3, [r4, #0]
 800d200:	0699      	lsls	r1, r3, #26
 800d202:	bf42      	ittt	mi
 800d204:	6833      	ldrmi	r3, [r6, #0]
 800d206:	3302      	addmi	r3, #2
 800d208:	6033      	strmi	r3, [r6, #0]
 800d20a:	6825      	ldr	r5, [r4, #0]
 800d20c:	f015 0506 	ands.w	r5, r5, #6
 800d210:	d106      	bne.n	800d220 <_printf_common+0x48>
 800d212:	f104 0a19 	add.w	sl, r4, #25
 800d216:	68e3      	ldr	r3, [r4, #12]
 800d218:	6832      	ldr	r2, [r6, #0]
 800d21a:	1a9b      	subs	r3, r3, r2
 800d21c:	42ab      	cmp	r3, r5
 800d21e:	dc26      	bgt.n	800d26e <_printf_common+0x96>
 800d220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d224:	1e13      	subs	r3, r2, #0
 800d226:	6822      	ldr	r2, [r4, #0]
 800d228:	bf18      	it	ne
 800d22a:	2301      	movne	r3, #1
 800d22c:	0692      	lsls	r2, r2, #26
 800d22e:	d42b      	bmi.n	800d288 <_printf_common+0xb0>
 800d230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d234:	4649      	mov	r1, r9
 800d236:	4638      	mov	r0, r7
 800d238:	47c0      	blx	r8
 800d23a:	3001      	adds	r0, #1
 800d23c:	d01e      	beq.n	800d27c <_printf_common+0xa4>
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	6922      	ldr	r2, [r4, #16]
 800d242:	f003 0306 	and.w	r3, r3, #6
 800d246:	2b04      	cmp	r3, #4
 800d248:	bf02      	ittt	eq
 800d24a:	68e5      	ldreq	r5, [r4, #12]
 800d24c:	6833      	ldreq	r3, [r6, #0]
 800d24e:	1aed      	subeq	r5, r5, r3
 800d250:	68a3      	ldr	r3, [r4, #8]
 800d252:	bf0c      	ite	eq
 800d254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d258:	2500      	movne	r5, #0
 800d25a:	4293      	cmp	r3, r2
 800d25c:	bfc4      	itt	gt
 800d25e:	1a9b      	subgt	r3, r3, r2
 800d260:	18ed      	addgt	r5, r5, r3
 800d262:	2600      	movs	r6, #0
 800d264:	341a      	adds	r4, #26
 800d266:	42b5      	cmp	r5, r6
 800d268:	d11a      	bne.n	800d2a0 <_printf_common+0xc8>
 800d26a:	2000      	movs	r0, #0
 800d26c:	e008      	b.n	800d280 <_printf_common+0xa8>
 800d26e:	2301      	movs	r3, #1
 800d270:	4652      	mov	r2, sl
 800d272:	4649      	mov	r1, r9
 800d274:	4638      	mov	r0, r7
 800d276:	47c0      	blx	r8
 800d278:	3001      	adds	r0, #1
 800d27a:	d103      	bne.n	800d284 <_printf_common+0xac>
 800d27c:	f04f 30ff 	mov.w	r0, #4294967295
 800d280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d284:	3501      	adds	r5, #1
 800d286:	e7c6      	b.n	800d216 <_printf_common+0x3e>
 800d288:	18e1      	adds	r1, r4, r3
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	2030      	movs	r0, #48	; 0x30
 800d28e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d292:	4422      	add	r2, r4
 800d294:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d298:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d29c:	3302      	adds	r3, #2
 800d29e:	e7c7      	b.n	800d230 <_printf_common+0x58>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	4622      	mov	r2, r4
 800d2a4:	4649      	mov	r1, r9
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	47c0      	blx	r8
 800d2aa:	3001      	adds	r0, #1
 800d2ac:	d0e6      	beq.n	800d27c <_printf_common+0xa4>
 800d2ae:	3601      	adds	r6, #1
 800d2b0:	e7d9      	b.n	800d266 <_printf_common+0x8e>
	...

0800d2b4 <_printf_i>:
 800d2b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2b8:	7e0f      	ldrb	r7, [r1, #24]
 800d2ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2bc:	2f78      	cmp	r7, #120	; 0x78
 800d2be:	4691      	mov	r9, r2
 800d2c0:	4680      	mov	r8, r0
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	469a      	mov	sl, r3
 800d2c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2ca:	d807      	bhi.n	800d2dc <_printf_i+0x28>
 800d2cc:	2f62      	cmp	r7, #98	; 0x62
 800d2ce:	d80a      	bhi.n	800d2e6 <_printf_i+0x32>
 800d2d0:	2f00      	cmp	r7, #0
 800d2d2:	f000 80d4 	beq.w	800d47e <_printf_i+0x1ca>
 800d2d6:	2f58      	cmp	r7, #88	; 0x58
 800d2d8:	f000 80c0 	beq.w	800d45c <_printf_i+0x1a8>
 800d2dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2e4:	e03a      	b.n	800d35c <_printf_i+0xa8>
 800d2e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2ea:	2b15      	cmp	r3, #21
 800d2ec:	d8f6      	bhi.n	800d2dc <_printf_i+0x28>
 800d2ee:	a101      	add	r1, pc, #4	; (adr r1, 800d2f4 <_printf_i+0x40>)
 800d2f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2f4:	0800d34d 	.word	0x0800d34d
 800d2f8:	0800d361 	.word	0x0800d361
 800d2fc:	0800d2dd 	.word	0x0800d2dd
 800d300:	0800d2dd 	.word	0x0800d2dd
 800d304:	0800d2dd 	.word	0x0800d2dd
 800d308:	0800d2dd 	.word	0x0800d2dd
 800d30c:	0800d361 	.word	0x0800d361
 800d310:	0800d2dd 	.word	0x0800d2dd
 800d314:	0800d2dd 	.word	0x0800d2dd
 800d318:	0800d2dd 	.word	0x0800d2dd
 800d31c:	0800d2dd 	.word	0x0800d2dd
 800d320:	0800d465 	.word	0x0800d465
 800d324:	0800d38d 	.word	0x0800d38d
 800d328:	0800d41f 	.word	0x0800d41f
 800d32c:	0800d2dd 	.word	0x0800d2dd
 800d330:	0800d2dd 	.word	0x0800d2dd
 800d334:	0800d487 	.word	0x0800d487
 800d338:	0800d2dd 	.word	0x0800d2dd
 800d33c:	0800d38d 	.word	0x0800d38d
 800d340:	0800d2dd 	.word	0x0800d2dd
 800d344:	0800d2dd 	.word	0x0800d2dd
 800d348:	0800d427 	.word	0x0800d427
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	1d1a      	adds	r2, r3, #4
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	602a      	str	r2, [r5, #0]
 800d354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d35c:	2301      	movs	r3, #1
 800d35e:	e09f      	b.n	800d4a0 <_printf_i+0x1ec>
 800d360:	6820      	ldr	r0, [r4, #0]
 800d362:	682b      	ldr	r3, [r5, #0]
 800d364:	0607      	lsls	r7, r0, #24
 800d366:	f103 0104 	add.w	r1, r3, #4
 800d36a:	6029      	str	r1, [r5, #0]
 800d36c:	d501      	bpl.n	800d372 <_printf_i+0xbe>
 800d36e:	681e      	ldr	r6, [r3, #0]
 800d370:	e003      	b.n	800d37a <_printf_i+0xc6>
 800d372:	0646      	lsls	r6, r0, #25
 800d374:	d5fb      	bpl.n	800d36e <_printf_i+0xba>
 800d376:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d37a:	2e00      	cmp	r6, #0
 800d37c:	da03      	bge.n	800d386 <_printf_i+0xd2>
 800d37e:	232d      	movs	r3, #45	; 0x2d
 800d380:	4276      	negs	r6, r6
 800d382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d386:	485a      	ldr	r0, [pc, #360]	; (800d4f0 <_printf_i+0x23c>)
 800d388:	230a      	movs	r3, #10
 800d38a:	e012      	b.n	800d3b2 <_printf_i+0xfe>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	6820      	ldr	r0, [r4, #0]
 800d390:	1d19      	adds	r1, r3, #4
 800d392:	6029      	str	r1, [r5, #0]
 800d394:	0605      	lsls	r5, r0, #24
 800d396:	d501      	bpl.n	800d39c <_printf_i+0xe8>
 800d398:	681e      	ldr	r6, [r3, #0]
 800d39a:	e002      	b.n	800d3a2 <_printf_i+0xee>
 800d39c:	0641      	lsls	r1, r0, #25
 800d39e:	d5fb      	bpl.n	800d398 <_printf_i+0xe4>
 800d3a0:	881e      	ldrh	r6, [r3, #0]
 800d3a2:	4853      	ldr	r0, [pc, #332]	; (800d4f0 <_printf_i+0x23c>)
 800d3a4:	2f6f      	cmp	r7, #111	; 0x6f
 800d3a6:	bf0c      	ite	eq
 800d3a8:	2308      	moveq	r3, #8
 800d3aa:	230a      	movne	r3, #10
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3b2:	6865      	ldr	r5, [r4, #4]
 800d3b4:	60a5      	str	r5, [r4, #8]
 800d3b6:	2d00      	cmp	r5, #0
 800d3b8:	bfa2      	ittt	ge
 800d3ba:	6821      	ldrge	r1, [r4, #0]
 800d3bc:	f021 0104 	bicge.w	r1, r1, #4
 800d3c0:	6021      	strge	r1, [r4, #0]
 800d3c2:	b90e      	cbnz	r6, 800d3c8 <_printf_i+0x114>
 800d3c4:	2d00      	cmp	r5, #0
 800d3c6:	d04b      	beq.n	800d460 <_printf_i+0x1ac>
 800d3c8:	4615      	mov	r5, r2
 800d3ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3ce:	fb03 6711 	mls	r7, r3, r1, r6
 800d3d2:	5dc7      	ldrb	r7, [r0, r7]
 800d3d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3d8:	4637      	mov	r7, r6
 800d3da:	42bb      	cmp	r3, r7
 800d3dc:	460e      	mov	r6, r1
 800d3de:	d9f4      	bls.n	800d3ca <_printf_i+0x116>
 800d3e0:	2b08      	cmp	r3, #8
 800d3e2:	d10b      	bne.n	800d3fc <_printf_i+0x148>
 800d3e4:	6823      	ldr	r3, [r4, #0]
 800d3e6:	07de      	lsls	r6, r3, #31
 800d3e8:	d508      	bpl.n	800d3fc <_printf_i+0x148>
 800d3ea:	6923      	ldr	r3, [r4, #16]
 800d3ec:	6861      	ldr	r1, [r4, #4]
 800d3ee:	4299      	cmp	r1, r3
 800d3f0:	bfde      	ittt	le
 800d3f2:	2330      	movle	r3, #48	; 0x30
 800d3f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3fc:	1b52      	subs	r2, r2, r5
 800d3fe:	6122      	str	r2, [r4, #16]
 800d400:	f8cd a000 	str.w	sl, [sp]
 800d404:	464b      	mov	r3, r9
 800d406:	aa03      	add	r2, sp, #12
 800d408:	4621      	mov	r1, r4
 800d40a:	4640      	mov	r0, r8
 800d40c:	f7ff fee4 	bl	800d1d8 <_printf_common>
 800d410:	3001      	adds	r0, #1
 800d412:	d14a      	bne.n	800d4aa <_printf_i+0x1f6>
 800d414:	f04f 30ff 	mov.w	r0, #4294967295
 800d418:	b004      	add	sp, #16
 800d41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	f043 0320 	orr.w	r3, r3, #32
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	4833      	ldr	r0, [pc, #204]	; (800d4f4 <_printf_i+0x240>)
 800d428:	2778      	movs	r7, #120	; 0x78
 800d42a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	6829      	ldr	r1, [r5, #0]
 800d432:	061f      	lsls	r7, r3, #24
 800d434:	f851 6b04 	ldr.w	r6, [r1], #4
 800d438:	d402      	bmi.n	800d440 <_printf_i+0x18c>
 800d43a:	065f      	lsls	r7, r3, #25
 800d43c:	bf48      	it	mi
 800d43e:	b2b6      	uxthmi	r6, r6
 800d440:	07df      	lsls	r7, r3, #31
 800d442:	bf48      	it	mi
 800d444:	f043 0320 	orrmi.w	r3, r3, #32
 800d448:	6029      	str	r1, [r5, #0]
 800d44a:	bf48      	it	mi
 800d44c:	6023      	strmi	r3, [r4, #0]
 800d44e:	b91e      	cbnz	r6, 800d458 <_printf_i+0x1a4>
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	f023 0320 	bic.w	r3, r3, #32
 800d456:	6023      	str	r3, [r4, #0]
 800d458:	2310      	movs	r3, #16
 800d45a:	e7a7      	b.n	800d3ac <_printf_i+0xf8>
 800d45c:	4824      	ldr	r0, [pc, #144]	; (800d4f0 <_printf_i+0x23c>)
 800d45e:	e7e4      	b.n	800d42a <_printf_i+0x176>
 800d460:	4615      	mov	r5, r2
 800d462:	e7bd      	b.n	800d3e0 <_printf_i+0x12c>
 800d464:	682b      	ldr	r3, [r5, #0]
 800d466:	6826      	ldr	r6, [r4, #0]
 800d468:	6961      	ldr	r1, [r4, #20]
 800d46a:	1d18      	adds	r0, r3, #4
 800d46c:	6028      	str	r0, [r5, #0]
 800d46e:	0635      	lsls	r5, r6, #24
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	d501      	bpl.n	800d478 <_printf_i+0x1c4>
 800d474:	6019      	str	r1, [r3, #0]
 800d476:	e002      	b.n	800d47e <_printf_i+0x1ca>
 800d478:	0670      	lsls	r0, r6, #25
 800d47a:	d5fb      	bpl.n	800d474 <_printf_i+0x1c0>
 800d47c:	8019      	strh	r1, [r3, #0]
 800d47e:	2300      	movs	r3, #0
 800d480:	6123      	str	r3, [r4, #16]
 800d482:	4615      	mov	r5, r2
 800d484:	e7bc      	b.n	800d400 <_printf_i+0x14c>
 800d486:	682b      	ldr	r3, [r5, #0]
 800d488:	1d1a      	adds	r2, r3, #4
 800d48a:	602a      	str	r2, [r5, #0]
 800d48c:	681d      	ldr	r5, [r3, #0]
 800d48e:	6862      	ldr	r2, [r4, #4]
 800d490:	2100      	movs	r1, #0
 800d492:	4628      	mov	r0, r5
 800d494:	f7f2 fe9c 	bl	80001d0 <memchr>
 800d498:	b108      	cbz	r0, 800d49e <_printf_i+0x1ea>
 800d49a:	1b40      	subs	r0, r0, r5
 800d49c:	6060      	str	r0, [r4, #4]
 800d49e:	6863      	ldr	r3, [r4, #4]
 800d4a0:	6123      	str	r3, [r4, #16]
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4a8:	e7aa      	b.n	800d400 <_printf_i+0x14c>
 800d4aa:	6923      	ldr	r3, [r4, #16]
 800d4ac:	462a      	mov	r2, r5
 800d4ae:	4649      	mov	r1, r9
 800d4b0:	4640      	mov	r0, r8
 800d4b2:	47d0      	blx	sl
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	d0ad      	beq.n	800d414 <_printf_i+0x160>
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	079b      	lsls	r3, r3, #30
 800d4bc:	d413      	bmi.n	800d4e6 <_printf_i+0x232>
 800d4be:	68e0      	ldr	r0, [r4, #12]
 800d4c0:	9b03      	ldr	r3, [sp, #12]
 800d4c2:	4298      	cmp	r0, r3
 800d4c4:	bfb8      	it	lt
 800d4c6:	4618      	movlt	r0, r3
 800d4c8:	e7a6      	b.n	800d418 <_printf_i+0x164>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	4632      	mov	r2, r6
 800d4ce:	4649      	mov	r1, r9
 800d4d0:	4640      	mov	r0, r8
 800d4d2:	47d0      	blx	sl
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	d09d      	beq.n	800d414 <_printf_i+0x160>
 800d4d8:	3501      	adds	r5, #1
 800d4da:	68e3      	ldr	r3, [r4, #12]
 800d4dc:	9903      	ldr	r1, [sp, #12]
 800d4de:	1a5b      	subs	r3, r3, r1
 800d4e0:	42ab      	cmp	r3, r5
 800d4e2:	dcf2      	bgt.n	800d4ca <_printf_i+0x216>
 800d4e4:	e7eb      	b.n	800d4be <_printf_i+0x20a>
 800d4e6:	2500      	movs	r5, #0
 800d4e8:	f104 0619 	add.w	r6, r4, #25
 800d4ec:	e7f5      	b.n	800d4da <_printf_i+0x226>
 800d4ee:	bf00      	nop
 800d4f0:	08011f0a 	.word	0x08011f0a
 800d4f4:	08011f1b 	.word	0x08011f1b

0800d4f8 <std>:
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	b510      	push	{r4, lr}
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	e9c0 3300 	strd	r3, r3, [r0]
 800d502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d506:	6083      	str	r3, [r0, #8]
 800d508:	8181      	strh	r1, [r0, #12]
 800d50a:	6643      	str	r3, [r0, #100]	; 0x64
 800d50c:	81c2      	strh	r2, [r0, #14]
 800d50e:	6183      	str	r3, [r0, #24]
 800d510:	4619      	mov	r1, r3
 800d512:	2208      	movs	r2, #8
 800d514:	305c      	adds	r0, #92	; 0x5c
 800d516:	f000 f914 	bl	800d742 <memset>
 800d51a:	4b0d      	ldr	r3, [pc, #52]	; (800d550 <std+0x58>)
 800d51c:	6263      	str	r3, [r4, #36]	; 0x24
 800d51e:	4b0d      	ldr	r3, [pc, #52]	; (800d554 <std+0x5c>)
 800d520:	62a3      	str	r3, [r4, #40]	; 0x28
 800d522:	4b0d      	ldr	r3, [pc, #52]	; (800d558 <std+0x60>)
 800d524:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d526:	4b0d      	ldr	r3, [pc, #52]	; (800d55c <std+0x64>)
 800d528:	6323      	str	r3, [r4, #48]	; 0x30
 800d52a:	4b0d      	ldr	r3, [pc, #52]	; (800d560 <std+0x68>)
 800d52c:	6224      	str	r4, [r4, #32]
 800d52e:	429c      	cmp	r4, r3
 800d530:	d006      	beq.n	800d540 <std+0x48>
 800d532:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d536:	4294      	cmp	r4, r2
 800d538:	d002      	beq.n	800d540 <std+0x48>
 800d53a:	33d0      	adds	r3, #208	; 0xd0
 800d53c:	429c      	cmp	r4, r3
 800d53e:	d105      	bne.n	800d54c <std+0x54>
 800d540:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d548:	f000 b9ce 	b.w	800d8e8 <__retarget_lock_init_recursive>
 800d54c:	bd10      	pop	{r4, pc}
 800d54e:	bf00      	nop
 800d550:	0800d6bd 	.word	0x0800d6bd
 800d554:	0800d6df 	.word	0x0800d6df
 800d558:	0800d717 	.word	0x0800d717
 800d55c:	0800d73b 	.word	0x0800d73b
 800d560:	2000509c 	.word	0x2000509c

0800d564 <stdio_exit_handler>:
 800d564:	4a02      	ldr	r2, [pc, #8]	; (800d570 <stdio_exit_handler+0xc>)
 800d566:	4903      	ldr	r1, [pc, #12]	; (800d574 <stdio_exit_handler+0x10>)
 800d568:	4803      	ldr	r0, [pc, #12]	; (800d578 <stdio_exit_handler+0x14>)
 800d56a:	f000 b869 	b.w	800d640 <_fwalk_sglue>
 800d56e:	bf00      	nop
 800d570:	20000010 	.word	0x20000010
 800d574:	0800f2c9 	.word	0x0800f2c9
 800d578:	2000001c 	.word	0x2000001c

0800d57c <cleanup_stdio>:
 800d57c:	6841      	ldr	r1, [r0, #4]
 800d57e:	4b0c      	ldr	r3, [pc, #48]	; (800d5b0 <cleanup_stdio+0x34>)
 800d580:	4299      	cmp	r1, r3
 800d582:	b510      	push	{r4, lr}
 800d584:	4604      	mov	r4, r0
 800d586:	d001      	beq.n	800d58c <cleanup_stdio+0x10>
 800d588:	f001 fe9e 	bl	800f2c8 <_fflush_r>
 800d58c:	68a1      	ldr	r1, [r4, #8]
 800d58e:	4b09      	ldr	r3, [pc, #36]	; (800d5b4 <cleanup_stdio+0x38>)
 800d590:	4299      	cmp	r1, r3
 800d592:	d002      	beq.n	800d59a <cleanup_stdio+0x1e>
 800d594:	4620      	mov	r0, r4
 800d596:	f001 fe97 	bl	800f2c8 <_fflush_r>
 800d59a:	68e1      	ldr	r1, [r4, #12]
 800d59c:	4b06      	ldr	r3, [pc, #24]	; (800d5b8 <cleanup_stdio+0x3c>)
 800d59e:	4299      	cmp	r1, r3
 800d5a0:	d004      	beq.n	800d5ac <cleanup_stdio+0x30>
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5a8:	f001 be8e 	b.w	800f2c8 <_fflush_r>
 800d5ac:	bd10      	pop	{r4, pc}
 800d5ae:	bf00      	nop
 800d5b0:	2000509c 	.word	0x2000509c
 800d5b4:	20005104 	.word	0x20005104
 800d5b8:	2000516c 	.word	0x2000516c

0800d5bc <global_stdio_init.part.0>:
 800d5bc:	b510      	push	{r4, lr}
 800d5be:	4b0b      	ldr	r3, [pc, #44]	; (800d5ec <global_stdio_init.part.0+0x30>)
 800d5c0:	4c0b      	ldr	r4, [pc, #44]	; (800d5f0 <global_stdio_init.part.0+0x34>)
 800d5c2:	4a0c      	ldr	r2, [pc, #48]	; (800d5f4 <global_stdio_init.part.0+0x38>)
 800d5c4:	601a      	str	r2, [r3, #0]
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	2104      	movs	r1, #4
 800d5cc:	f7ff ff94 	bl	800d4f8 <std>
 800d5d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	2109      	movs	r1, #9
 800d5d8:	f7ff ff8e 	bl	800d4f8 <std>
 800d5dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d5e0:	2202      	movs	r2, #2
 800d5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5e6:	2112      	movs	r1, #18
 800d5e8:	f7ff bf86 	b.w	800d4f8 <std>
 800d5ec:	200051d4 	.word	0x200051d4
 800d5f0:	2000509c 	.word	0x2000509c
 800d5f4:	0800d565 	.word	0x0800d565

0800d5f8 <__sfp_lock_acquire>:
 800d5f8:	4801      	ldr	r0, [pc, #4]	; (800d600 <__sfp_lock_acquire+0x8>)
 800d5fa:	f000 b976 	b.w	800d8ea <__retarget_lock_acquire_recursive>
 800d5fe:	bf00      	nop
 800d600:	200051dd 	.word	0x200051dd

0800d604 <__sfp_lock_release>:
 800d604:	4801      	ldr	r0, [pc, #4]	; (800d60c <__sfp_lock_release+0x8>)
 800d606:	f000 b971 	b.w	800d8ec <__retarget_lock_release_recursive>
 800d60a:	bf00      	nop
 800d60c:	200051dd 	.word	0x200051dd

0800d610 <__sinit>:
 800d610:	b510      	push	{r4, lr}
 800d612:	4604      	mov	r4, r0
 800d614:	f7ff fff0 	bl	800d5f8 <__sfp_lock_acquire>
 800d618:	6a23      	ldr	r3, [r4, #32]
 800d61a:	b11b      	cbz	r3, 800d624 <__sinit+0x14>
 800d61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d620:	f7ff bff0 	b.w	800d604 <__sfp_lock_release>
 800d624:	4b04      	ldr	r3, [pc, #16]	; (800d638 <__sinit+0x28>)
 800d626:	6223      	str	r3, [r4, #32]
 800d628:	4b04      	ldr	r3, [pc, #16]	; (800d63c <__sinit+0x2c>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1f5      	bne.n	800d61c <__sinit+0xc>
 800d630:	f7ff ffc4 	bl	800d5bc <global_stdio_init.part.0>
 800d634:	e7f2      	b.n	800d61c <__sinit+0xc>
 800d636:	bf00      	nop
 800d638:	0800d57d 	.word	0x0800d57d
 800d63c:	200051d4 	.word	0x200051d4

0800d640 <_fwalk_sglue>:
 800d640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d644:	4607      	mov	r7, r0
 800d646:	4688      	mov	r8, r1
 800d648:	4614      	mov	r4, r2
 800d64a:	2600      	movs	r6, #0
 800d64c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d650:	f1b9 0901 	subs.w	r9, r9, #1
 800d654:	d505      	bpl.n	800d662 <_fwalk_sglue+0x22>
 800d656:	6824      	ldr	r4, [r4, #0]
 800d658:	2c00      	cmp	r4, #0
 800d65a:	d1f7      	bne.n	800d64c <_fwalk_sglue+0xc>
 800d65c:	4630      	mov	r0, r6
 800d65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d662:	89ab      	ldrh	r3, [r5, #12]
 800d664:	2b01      	cmp	r3, #1
 800d666:	d907      	bls.n	800d678 <_fwalk_sglue+0x38>
 800d668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d66c:	3301      	adds	r3, #1
 800d66e:	d003      	beq.n	800d678 <_fwalk_sglue+0x38>
 800d670:	4629      	mov	r1, r5
 800d672:	4638      	mov	r0, r7
 800d674:	47c0      	blx	r8
 800d676:	4306      	orrs	r6, r0
 800d678:	3568      	adds	r5, #104	; 0x68
 800d67a:	e7e9      	b.n	800d650 <_fwalk_sglue+0x10>

0800d67c <siprintf>:
 800d67c:	b40e      	push	{r1, r2, r3}
 800d67e:	b500      	push	{lr}
 800d680:	b09c      	sub	sp, #112	; 0x70
 800d682:	ab1d      	add	r3, sp, #116	; 0x74
 800d684:	9002      	str	r0, [sp, #8]
 800d686:	9006      	str	r0, [sp, #24]
 800d688:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d68c:	4809      	ldr	r0, [pc, #36]	; (800d6b4 <siprintf+0x38>)
 800d68e:	9107      	str	r1, [sp, #28]
 800d690:	9104      	str	r1, [sp, #16]
 800d692:	4909      	ldr	r1, [pc, #36]	; (800d6b8 <siprintf+0x3c>)
 800d694:	f853 2b04 	ldr.w	r2, [r3], #4
 800d698:	9105      	str	r1, [sp, #20]
 800d69a:	6800      	ldr	r0, [r0, #0]
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	a902      	add	r1, sp, #8
 800d6a0:	f001 fc8e 	bl	800efc0 <_svfiprintf_r>
 800d6a4:	9b02      	ldr	r3, [sp, #8]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	701a      	strb	r2, [r3, #0]
 800d6aa:	b01c      	add	sp, #112	; 0x70
 800d6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6b0:	b003      	add	sp, #12
 800d6b2:	4770      	bx	lr
 800d6b4:	20000068 	.word	0x20000068
 800d6b8:	ffff0208 	.word	0xffff0208

0800d6bc <__sread>:
 800d6bc:	b510      	push	{r4, lr}
 800d6be:	460c      	mov	r4, r1
 800d6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6c4:	f000 f8c2 	bl	800d84c <_read_r>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	bfab      	itete	ge
 800d6cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d6ce:	89a3      	ldrhlt	r3, [r4, #12]
 800d6d0:	181b      	addge	r3, r3, r0
 800d6d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d6d6:	bfac      	ite	ge
 800d6d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d6da:	81a3      	strhlt	r3, [r4, #12]
 800d6dc:	bd10      	pop	{r4, pc}

0800d6de <__swrite>:
 800d6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e2:	461f      	mov	r7, r3
 800d6e4:	898b      	ldrh	r3, [r1, #12]
 800d6e6:	05db      	lsls	r3, r3, #23
 800d6e8:	4605      	mov	r5, r0
 800d6ea:	460c      	mov	r4, r1
 800d6ec:	4616      	mov	r6, r2
 800d6ee:	d505      	bpl.n	800d6fc <__swrite+0x1e>
 800d6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6f4:	2302      	movs	r3, #2
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f000 f896 	bl	800d828 <_lseek_r>
 800d6fc:	89a3      	ldrh	r3, [r4, #12]
 800d6fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d706:	81a3      	strh	r3, [r4, #12]
 800d708:	4632      	mov	r2, r6
 800d70a:	463b      	mov	r3, r7
 800d70c:	4628      	mov	r0, r5
 800d70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d712:	f000 b8ad 	b.w	800d870 <_write_r>

0800d716 <__sseek>:
 800d716:	b510      	push	{r4, lr}
 800d718:	460c      	mov	r4, r1
 800d71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d71e:	f000 f883 	bl	800d828 <_lseek_r>
 800d722:	1c43      	adds	r3, r0, #1
 800d724:	89a3      	ldrh	r3, [r4, #12]
 800d726:	bf15      	itete	ne
 800d728:	6560      	strne	r0, [r4, #84]	; 0x54
 800d72a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d72e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d732:	81a3      	strheq	r3, [r4, #12]
 800d734:	bf18      	it	ne
 800d736:	81a3      	strhne	r3, [r4, #12]
 800d738:	bd10      	pop	{r4, pc}

0800d73a <__sclose>:
 800d73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d73e:	f000 b80d 	b.w	800d75c <_close_r>

0800d742 <memset>:
 800d742:	4402      	add	r2, r0
 800d744:	4603      	mov	r3, r0
 800d746:	4293      	cmp	r3, r2
 800d748:	d100      	bne.n	800d74c <memset+0xa>
 800d74a:	4770      	bx	lr
 800d74c:	f803 1b01 	strb.w	r1, [r3], #1
 800d750:	e7f9      	b.n	800d746 <memset+0x4>
	...

0800d754 <_localeconv_r>:
 800d754:	4800      	ldr	r0, [pc, #0]	; (800d758 <_localeconv_r+0x4>)
 800d756:	4770      	bx	lr
 800d758:	2000015c 	.word	0x2000015c

0800d75c <_close_r>:
 800d75c:	b538      	push	{r3, r4, r5, lr}
 800d75e:	4d06      	ldr	r5, [pc, #24]	; (800d778 <_close_r+0x1c>)
 800d760:	2300      	movs	r3, #0
 800d762:	4604      	mov	r4, r0
 800d764:	4608      	mov	r0, r1
 800d766:	602b      	str	r3, [r5, #0]
 800d768:	f7f8 f883 	bl	8005872 <_close>
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	d102      	bne.n	800d776 <_close_r+0x1a>
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	b103      	cbz	r3, 800d776 <_close_r+0x1a>
 800d774:	6023      	str	r3, [r4, #0]
 800d776:	bd38      	pop	{r3, r4, r5, pc}
 800d778:	200051d8 	.word	0x200051d8

0800d77c <_reclaim_reent>:
 800d77c:	4b29      	ldr	r3, [pc, #164]	; (800d824 <_reclaim_reent+0xa8>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4283      	cmp	r3, r0
 800d782:	b570      	push	{r4, r5, r6, lr}
 800d784:	4604      	mov	r4, r0
 800d786:	d04b      	beq.n	800d820 <_reclaim_reent+0xa4>
 800d788:	69c3      	ldr	r3, [r0, #28]
 800d78a:	b143      	cbz	r3, 800d79e <_reclaim_reent+0x22>
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d144      	bne.n	800d81c <_reclaim_reent+0xa0>
 800d792:	69e3      	ldr	r3, [r4, #28]
 800d794:	6819      	ldr	r1, [r3, #0]
 800d796:	b111      	cbz	r1, 800d79e <_reclaim_reent+0x22>
 800d798:	4620      	mov	r0, r4
 800d79a:	f000 ff3b 	bl	800e614 <_free_r>
 800d79e:	6961      	ldr	r1, [r4, #20]
 800d7a0:	b111      	cbz	r1, 800d7a8 <_reclaim_reent+0x2c>
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f000 ff36 	bl	800e614 <_free_r>
 800d7a8:	69e1      	ldr	r1, [r4, #28]
 800d7aa:	b111      	cbz	r1, 800d7b2 <_reclaim_reent+0x36>
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f000 ff31 	bl	800e614 <_free_r>
 800d7b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d7b4:	b111      	cbz	r1, 800d7bc <_reclaim_reent+0x40>
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f000 ff2c 	bl	800e614 <_free_r>
 800d7bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7be:	b111      	cbz	r1, 800d7c6 <_reclaim_reent+0x4a>
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f000 ff27 	bl	800e614 <_free_r>
 800d7c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d7c8:	b111      	cbz	r1, 800d7d0 <_reclaim_reent+0x54>
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f000 ff22 	bl	800e614 <_free_r>
 800d7d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d7d2:	b111      	cbz	r1, 800d7da <_reclaim_reent+0x5e>
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f000 ff1d 	bl	800e614 <_free_r>
 800d7da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d7dc:	b111      	cbz	r1, 800d7e4 <_reclaim_reent+0x68>
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f000 ff18 	bl	800e614 <_free_r>
 800d7e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d7e6:	b111      	cbz	r1, 800d7ee <_reclaim_reent+0x72>
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f000 ff13 	bl	800e614 <_free_r>
 800d7ee:	6a23      	ldr	r3, [r4, #32]
 800d7f0:	b1b3      	cbz	r3, 800d820 <_reclaim_reent+0xa4>
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7f8:	4718      	bx	r3
 800d7fa:	5949      	ldr	r1, [r1, r5]
 800d7fc:	b941      	cbnz	r1, 800d810 <_reclaim_reent+0x94>
 800d7fe:	3504      	adds	r5, #4
 800d800:	69e3      	ldr	r3, [r4, #28]
 800d802:	2d80      	cmp	r5, #128	; 0x80
 800d804:	68d9      	ldr	r1, [r3, #12]
 800d806:	d1f8      	bne.n	800d7fa <_reclaim_reent+0x7e>
 800d808:	4620      	mov	r0, r4
 800d80a:	f000 ff03 	bl	800e614 <_free_r>
 800d80e:	e7c0      	b.n	800d792 <_reclaim_reent+0x16>
 800d810:	680e      	ldr	r6, [r1, #0]
 800d812:	4620      	mov	r0, r4
 800d814:	f000 fefe 	bl	800e614 <_free_r>
 800d818:	4631      	mov	r1, r6
 800d81a:	e7ef      	b.n	800d7fc <_reclaim_reent+0x80>
 800d81c:	2500      	movs	r5, #0
 800d81e:	e7ef      	b.n	800d800 <_reclaim_reent+0x84>
 800d820:	bd70      	pop	{r4, r5, r6, pc}
 800d822:	bf00      	nop
 800d824:	20000068 	.word	0x20000068

0800d828 <_lseek_r>:
 800d828:	b538      	push	{r3, r4, r5, lr}
 800d82a:	4d07      	ldr	r5, [pc, #28]	; (800d848 <_lseek_r+0x20>)
 800d82c:	4604      	mov	r4, r0
 800d82e:	4608      	mov	r0, r1
 800d830:	4611      	mov	r1, r2
 800d832:	2200      	movs	r2, #0
 800d834:	602a      	str	r2, [r5, #0]
 800d836:	461a      	mov	r2, r3
 800d838:	f7f8 f842 	bl	80058c0 <_lseek>
 800d83c:	1c43      	adds	r3, r0, #1
 800d83e:	d102      	bne.n	800d846 <_lseek_r+0x1e>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	b103      	cbz	r3, 800d846 <_lseek_r+0x1e>
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	200051d8 	.word	0x200051d8

0800d84c <_read_r>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	4d07      	ldr	r5, [pc, #28]	; (800d86c <_read_r+0x20>)
 800d850:	4604      	mov	r4, r0
 800d852:	4608      	mov	r0, r1
 800d854:	4611      	mov	r1, r2
 800d856:	2200      	movs	r2, #0
 800d858:	602a      	str	r2, [r5, #0]
 800d85a:	461a      	mov	r2, r3
 800d85c:	f7f7 ffd0 	bl	8005800 <_read>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d102      	bne.n	800d86a <_read_r+0x1e>
 800d864:	682b      	ldr	r3, [r5, #0]
 800d866:	b103      	cbz	r3, 800d86a <_read_r+0x1e>
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	bd38      	pop	{r3, r4, r5, pc}
 800d86c:	200051d8 	.word	0x200051d8

0800d870 <_write_r>:
 800d870:	b538      	push	{r3, r4, r5, lr}
 800d872:	4d07      	ldr	r5, [pc, #28]	; (800d890 <_write_r+0x20>)
 800d874:	4604      	mov	r4, r0
 800d876:	4608      	mov	r0, r1
 800d878:	4611      	mov	r1, r2
 800d87a:	2200      	movs	r2, #0
 800d87c:	602a      	str	r2, [r5, #0]
 800d87e:	461a      	mov	r2, r3
 800d880:	f7f7 ffdb 	bl	800583a <_write>
 800d884:	1c43      	adds	r3, r0, #1
 800d886:	d102      	bne.n	800d88e <_write_r+0x1e>
 800d888:	682b      	ldr	r3, [r5, #0]
 800d88a:	b103      	cbz	r3, 800d88e <_write_r+0x1e>
 800d88c:	6023      	str	r3, [r4, #0]
 800d88e:	bd38      	pop	{r3, r4, r5, pc}
 800d890:	200051d8 	.word	0x200051d8

0800d894 <__errno>:
 800d894:	4b01      	ldr	r3, [pc, #4]	; (800d89c <__errno+0x8>)
 800d896:	6818      	ldr	r0, [r3, #0]
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	20000068 	.word	0x20000068

0800d8a0 <__libc_init_array>:
 800d8a0:	b570      	push	{r4, r5, r6, lr}
 800d8a2:	4d0d      	ldr	r5, [pc, #52]	; (800d8d8 <__libc_init_array+0x38>)
 800d8a4:	4c0d      	ldr	r4, [pc, #52]	; (800d8dc <__libc_init_array+0x3c>)
 800d8a6:	1b64      	subs	r4, r4, r5
 800d8a8:	10a4      	asrs	r4, r4, #2
 800d8aa:	2600      	movs	r6, #0
 800d8ac:	42a6      	cmp	r6, r4
 800d8ae:	d109      	bne.n	800d8c4 <__libc_init_array+0x24>
 800d8b0:	4d0b      	ldr	r5, [pc, #44]	; (800d8e0 <__libc_init_array+0x40>)
 800d8b2:	4c0c      	ldr	r4, [pc, #48]	; (800d8e4 <__libc_init_array+0x44>)
 800d8b4:	f004 fa80 	bl	8011db8 <_init>
 800d8b8:	1b64      	subs	r4, r4, r5
 800d8ba:	10a4      	asrs	r4, r4, #2
 800d8bc:	2600      	movs	r6, #0
 800d8be:	42a6      	cmp	r6, r4
 800d8c0:	d105      	bne.n	800d8ce <__libc_init_array+0x2e>
 800d8c2:	bd70      	pop	{r4, r5, r6, pc}
 800d8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8c8:	4798      	blx	r3
 800d8ca:	3601      	adds	r6, #1
 800d8cc:	e7ee      	b.n	800d8ac <__libc_init_array+0xc>
 800d8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8d2:	4798      	blx	r3
 800d8d4:	3601      	adds	r6, #1
 800d8d6:	e7f2      	b.n	800d8be <__libc_init_array+0x1e>
 800d8d8:	080124f0 	.word	0x080124f0
 800d8dc:	080124f0 	.word	0x080124f0
 800d8e0:	080124f0 	.word	0x080124f0
 800d8e4:	080124f4 	.word	0x080124f4

0800d8e8 <__retarget_lock_init_recursive>:
 800d8e8:	4770      	bx	lr

0800d8ea <__retarget_lock_acquire_recursive>:
 800d8ea:	4770      	bx	lr

0800d8ec <__retarget_lock_release_recursive>:
 800d8ec:	4770      	bx	lr

0800d8ee <strcpy>:
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8f4:	f803 2b01 	strb.w	r2, [r3], #1
 800d8f8:	2a00      	cmp	r2, #0
 800d8fa:	d1f9      	bne.n	800d8f0 <strcpy+0x2>
 800d8fc:	4770      	bx	lr

0800d8fe <memcpy>:
 800d8fe:	440a      	add	r2, r1
 800d900:	4291      	cmp	r1, r2
 800d902:	f100 33ff 	add.w	r3, r0, #4294967295
 800d906:	d100      	bne.n	800d90a <memcpy+0xc>
 800d908:	4770      	bx	lr
 800d90a:	b510      	push	{r4, lr}
 800d90c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d910:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d914:	4291      	cmp	r1, r2
 800d916:	d1f9      	bne.n	800d90c <memcpy+0xe>
 800d918:	bd10      	pop	{r4, pc}

0800d91a <quorem>:
 800d91a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d91e:	6903      	ldr	r3, [r0, #16]
 800d920:	690c      	ldr	r4, [r1, #16]
 800d922:	42a3      	cmp	r3, r4
 800d924:	4607      	mov	r7, r0
 800d926:	db7e      	blt.n	800da26 <quorem+0x10c>
 800d928:	3c01      	subs	r4, #1
 800d92a:	f101 0814 	add.w	r8, r1, #20
 800d92e:	f100 0514 	add.w	r5, r0, #20
 800d932:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d936:	9301      	str	r3, [sp, #4]
 800d938:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d93c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d940:	3301      	adds	r3, #1
 800d942:	429a      	cmp	r2, r3
 800d944:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d948:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d94c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d950:	d331      	bcc.n	800d9b6 <quorem+0x9c>
 800d952:	f04f 0e00 	mov.w	lr, #0
 800d956:	4640      	mov	r0, r8
 800d958:	46ac      	mov	ip, r5
 800d95a:	46f2      	mov	sl, lr
 800d95c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d960:	b293      	uxth	r3, r2
 800d962:	fb06 e303 	mla	r3, r6, r3, lr
 800d966:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d96a:	0c1a      	lsrs	r2, r3, #16
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	ebaa 0303 	sub.w	r3, sl, r3
 800d972:	f8dc a000 	ldr.w	sl, [ip]
 800d976:	fa13 f38a 	uxtah	r3, r3, sl
 800d97a:	fb06 220e 	mla	r2, r6, lr, r2
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	9b00      	ldr	r3, [sp, #0]
 800d982:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d986:	b292      	uxth	r2, r2
 800d988:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d98c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d990:	f8bd 3000 	ldrh.w	r3, [sp]
 800d994:	4581      	cmp	r9, r0
 800d996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d99a:	f84c 3b04 	str.w	r3, [ip], #4
 800d99e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d9a2:	d2db      	bcs.n	800d95c <quorem+0x42>
 800d9a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d9a8:	b92b      	cbnz	r3, 800d9b6 <quorem+0x9c>
 800d9aa:	9b01      	ldr	r3, [sp, #4]
 800d9ac:	3b04      	subs	r3, #4
 800d9ae:	429d      	cmp	r5, r3
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	d32c      	bcc.n	800da0e <quorem+0xf4>
 800d9b4:	613c      	str	r4, [r7, #16]
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	f001 f9a8 	bl	800ed0c <__mcmp>
 800d9bc:	2800      	cmp	r0, #0
 800d9be:	db22      	blt.n	800da06 <quorem+0xec>
 800d9c0:	3601      	adds	r6, #1
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	2000      	movs	r0, #0
 800d9c6:	f858 2b04 	ldr.w	r2, [r8], #4
 800d9ca:	f8d1 c000 	ldr.w	ip, [r1]
 800d9ce:	b293      	uxth	r3, r2
 800d9d0:	1ac3      	subs	r3, r0, r3
 800d9d2:	0c12      	lsrs	r2, r2, #16
 800d9d4:	fa13 f38c 	uxtah	r3, r3, ip
 800d9d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d9dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9e6:	45c1      	cmp	r9, r8
 800d9e8:	f841 3b04 	str.w	r3, [r1], #4
 800d9ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d9f0:	d2e9      	bcs.n	800d9c6 <quorem+0xac>
 800d9f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9fa:	b922      	cbnz	r2, 800da06 <quorem+0xec>
 800d9fc:	3b04      	subs	r3, #4
 800d9fe:	429d      	cmp	r5, r3
 800da00:	461a      	mov	r2, r3
 800da02:	d30a      	bcc.n	800da1a <quorem+0x100>
 800da04:	613c      	str	r4, [r7, #16]
 800da06:	4630      	mov	r0, r6
 800da08:	b003      	add	sp, #12
 800da0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da0e:	6812      	ldr	r2, [r2, #0]
 800da10:	3b04      	subs	r3, #4
 800da12:	2a00      	cmp	r2, #0
 800da14:	d1ce      	bne.n	800d9b4 <quorem+0x9a>
 800da16:	3c01      	subs	r4, #1
 800da18:	e7c9      	b.n	800d9ae <quorem+0x94>
 800da1a:	6812      	ldr	r2, [r2, #0]
 800da1c:	3b04      	subs	r3, #4
 800da1e:	2a00      	cmp	r2, #0
 800da20:	d1f0      	bne.n	800da04 <quorem+0xea>
 800da22:	3c01      	subs	r4, #1
 800da24:	e7eb      	b.n	800d9fe <quorem+0xe4>
 800da26:	2000      	movs	r0, #0
 800da28:	e7ee      	b.n	800da08 <quorem+0xee>
 800da2a:	0000      	movs	r0, r0
 800da2c:	0000      	movs	r0, r0
	...

0800da30 <_dtoa_r>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	ed2d 8b04 	vpush	{d8-d9}
 800da38:	69c5      	ldr	r5, [r0, #28]
 800da3a:	b093      	sub	sp, #76	; 0x4c
 800da3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800da40:	ec57 6b10 	vmov	r6, r7, d0
 800da44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da48:	9107      	str	r1, [sp, #28]
 800da4a:	4604      	mov	r4, r0
 800da4c:	920a      	str	r2, [sp, #40]	; 0x28
 800da4e:	930d      	str	r3, [sp, #52]	; 0x34
 800da50:	b975      	cbnz	r5, 800da70 <_dtoa_r+0x40>
 800da52:	2010      	movs	r0, #16
 800da54:	f000 fe2a 	bl	800e6ac <malloc>
 800da58:	4602      	mov	r2, r0
 800da5a:	61e0      	str	r0, [r4, #28]
 800da5c:	b920      	cbnz	r0, 800da68 <_dtoa_r+0x38>
 800da5e:	4bae      	ldr	r3, [pc, #696]	; (800dd18 <_dtoa_r+0x2e8>)
 800da60:	21ef      	movs	r1, #239	; 0xef
 800da62:	48ae      	ldr	r0, [pc, #696]	; (800dd1c <_dtoa_r+0x2ec>)
 800da64:	f001 fc82 	bl	800f36c <__assert_func>
 800da68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da6c:	6005      	str	r5, [r0, #0]
 800da6e:	60c5      	str	r5, [r0, #12]
 800da70:	69e3      	ldr	r3, [r4, #28]
 800da72:	6819      	ldr	r1, [r3, #0]
 800da74:	b151      	cbz	r1, 800da8c <_dtoa_r+0x5c>
 800da76:	685a      	ldr	r2, [r3, #4]
 800da78:	604a      	str	r2, [r1, #4]
 800da7a:	2301      	movs	r3, #1
 800da7c:	4093      	lsls	r3, r2
 800da7e:	608b      	str	r3, [r1, #8]
 800da80:	4620      	mov	r0, r4
 800da82:	f000 ff07 	bl	800e894 <_Bfree>
 800da86:	69e3      	ldr	r3, [r4, #28]
 800da88:	2200      	movs	r2, #0
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	1e3b      	subs	r3, r7, #0
 800da8e:	bfbb      	ittet	lt
 800da90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800da94:	9303      	strlt	r3, [sp, #12]
 800da96:	2300      	movge	r3, #0
 800da98:	2201      	movlt	r2, #1
 800da9a:	bfac      	ite	ge
 800da9c:	f8c8 3000 	strge.w	r3, [r8]
 800daa0:	f8c8 2000 	strlt.w	r2, [r8]
 800daa4:	4b9e      	ldr	r3, [pc, #632]	; (800dd20 <_dtoa_r+0x2f0>)
 800daa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800daaa:	ea33 0308 	bics.w	r3, r3, r8
 800daae:	d11b      	bne.n	800dae8 <_dtoa_r+0xb8>
 800dab0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dab2:	f242 730f 	movw	r3, #9999	; 0x270f
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dabc:	4333      	orrs	r3, r6
 800dabe:	f000 8593 	beq.w	800e5e8 <_dtoa_r+0xbb8>
 800dac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dac4:	b963      	cbnz	r3, 800dae0 <_dtoa_r+0xb0>
 800dac6:	4b97      	ldr	r3, [pc, #604]	; (800dd24 <_dtoa_r+0x2f4>)
 800dac8:	e027      	b.n	800db1a <_dtoa_r+0xea>
 800daca:	4b97      	ldr	r3, [pc, #604]	; (800dd28 <_dtoa_r+0x2f8>)
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	3308      	adds	r3, #8
 800dad0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dad2:	6013      	str	r3, [r2, #0]
 800dad4:	9800      	ldr	r0, [sp, #0]
 800dad6:	b013      	add	sp, #76	; 0x4c
 800dad8:	ecbd 8b04 	vpop	{d8-d9}
 800dadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae0:	4b90      	ldr	r3, [pc, #576]	; (800dd24 <_dtoa_r+0x2f4>)
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	3303      	adds	r3, #3
 800dae6:	e7f3      	b.n	800dad0 <_dtoa_r+0xa0>
 800dae8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800daec:	2200      	movs	r2, #0
 800daee:	ec51 0b17 	vmov	r0, r1, d7
 800daf2:	eeb0 8a47 	vmov.f32	s16, s14
 800daf6:	eef0 8a67 	vmov.f32	s17, s15
 800dafa:	2300      	movs	r3, #0
 800dafc:	f7f2 ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 800db00:	4681      	mov	r9, r0
 800db02:	b160      	cbz	r0, 800db1e <_dtoa_r+0xee>
 800db04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db06:	2301      	movs	r3, #1
 800db08:	6013      	str	r3, [r2, #0]
 800db0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f000 8568 	beq.w	800e5e2 <_dtoa_r+0xbb2>
 800db12:	4b86      	ldr	r3, [pc, #536]	; (800dd2c <_dtoa_r+0x2fc>)
 800db14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db16:	6013      	str	r3, [r2, #0]
 800db18:	3b01      	subs	r3, #1
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	e7da      	b.n	800dad4 <_dtoa_r+0xa4>
 800db1e:	aa10      	add	r2, sp, #64	; 0x40
 800db20:	a911      	add	r1, sp, #68	; 0x44
 800db22:	4620      	mov	r0, r4
 800db24:	eeb0 0a48 	vmov.f32	s0, s16
 800db28:	eef0 0a68 	vmov.f32	s1, s17
 800db2c:	f001 f994 	bl	800ee58 <__d2b>
 800db30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800db34:	4682      	mov	sl, r0
 800db36:	2d00      	cmp	r5, #0
 800db38:	d07f      	beq.n	800dc3a <_dtoa_r+0x20a>
 800db3a:	ee18 3a90 	vmov	r3, s17
 800db3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800db46:	ec51 0b18 	vmov	r0, r1, d8
 800db4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800db4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800db56:	4619      	mov	r1, r3
 800db58:	2200      	movs	r2, #0
 800db5a:	4b75      	ldr	r3, [pc, #468]	; (800dd30 <_dtoa_r+0x300>)
 800db5c:	f7f2 fb94 	bl	8000288 <__aeabi_dsub>
 800db60:	a367      	add	r3, pc, #412	; (adr r3, 800dd00 <_dtoa_r+0x2d0>)
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	f7f2 fd47 	bl	80005f8 <__aeabi_dmul>
 800db6a:	a367      	add	r3, pc, #412	; (adr r3, 800dd08 <_dtoa_r+0x2d8>)
 800db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db70:	f7f2 fb8c 	bl	800028c <__adddf3>
 800db74:	4606      	mov	r6, r0
 800db76:	4628      	mov	r0, r5
 800db78:	460f      	mov	r7, r1
 800db7a:	f7f2 fcd3 	bl	8000524 <__aeabi_i2d>
 800db7e:	a364      	add	r3, pc, #400	; (adr r3, 800dd10 <_dtoa_r+0x2e0>)
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	f7f2 fd38 	bl	80005f8 <__aeabi_dmul>
 800db88:	4602      	mov	r2, r0
 800db8a:	460b      	mov	r3, r1
 800db8c:	4630      	mov	r0, r6
 800db8e:	4639      	mov	r1, r7
 800db90:	f7f2 fb7c 	bl	800028c <__adddf3>
 800db94:	4606      	mov	r6, r0
 800db96:	460f      	mov	r7, r1
 800db98:	f7f2 ffde 	bl	8000b58 <__aeabi_d2iz>
 800db9c:	2200      	movs	r2, #0
 800db9e:	4683      	mov	fp, r0
 800dba0:	2300      	movs	r3, #0
 800dba2:	4630      	mov	r0, r6
 800dba4:	4639      	mov	r1, r7
 800dba6:	f7f2 ff99 	bl	8000adc <__aeabi_dcmplt>
 800dbaa:	b148      	cbz	r0, 800dbc0 <_dtoa_r+0x190>
 800dbac:	4658      	mov	r0, fp
 800dbae:	f7f2 fcb9 	bl	8000524 <__aeabi_i2d>
 800dbb2:	4632      	mov	r2, r6
 800dbb4:	463b      	mov	r3, r7
 800dbb6:	f7f2 ff87 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbba:	b908      	cbnz	r0, 800dbc0 <_dtoa_r+0x190>
 800dbbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbc0:	f1bb 0f16 	cmp.w	fp, #22
 800dbc4:	d857      	bhi.n	800dc76 <_dtoa_r+0x246>
 800dbc6:	4b5b      	ldr	r3, [pc, #364]	; (800dd34 <_dtoa_r+0x304>)
 800dbc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd0:	ec51 0b18 	vmov	r0, r1, d8
 800dbd4:	f7f2 ff82 	bl	8000adc <__aeabi_dcmplt>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d04e      	beq.n	800dc7a <_dtoa_r+0x24a>
 800dbdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	930c      	str	r3, [sp, #48]	; 0x30
 800dbe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbe6:	1b5b      	subs	r3, r3, r5
 800dbe8:	1e5a      	subs	r2, r3, #1
 800dbea:	bf45      	ittet	mi
 800dbec:	f1c3 0301 	rsbmi	r3, r3, #1
 800dbf0:	9305      	strmi	r3, [sp, #20]
 800dbf2:	2300      	movpl	r3, #0
 800dbf4:	2300      	movmi	r3, #0
 800dbf6:	9206      	str	r2, [sp, #24]
 800dbf8:	bf54      	ite	pl
 800dbfa:	9305      	strpl	r3, [sp, #20]
 800dbfc:	9306      	strmi	r3, [sp, #24]
 800dbfe:	f1bb 0f00 	cmp.w	fp, #0
 800dc02:	db3c      	blt.n	800dc7e <_dtoa_r+0x24e>
 800dc04:	9b06      	ldr	r3, [sp, #24]
 800dc06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dc0a:	445b      	add	r3, fp
 800dc0c:	9306      	str	r3, [sp, #24]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	9308      	str	r3, [sp, #32]
 800dc12:	9b07      	ldr	r3, [sp, #28]
 800dc14:	2b09      	cmp	r3, #9
 800dc16:	d868      	bhi.n	800dcea <_dtoa_r+0x2ba>
 800dc18:	2b05      	cmp	r3, #5
 800dc1a:	bfc4      	itt	gt
 800dc1c:	3b04      	subgt	r3, #4
 800dc1e:	9307      	strgt	r3, [sp, #28]
 800dc20:	9b07      	ldr	r3, [sp, #28]
 800dc22:	f1a3 0302 	sub.w	r3, r3, #2
 800dc26:	bfcc      	ite	gt
 800dc28:	2500      	movgt	r5, #0
 800dc2a:	2501      	movle	r5, #1
 800dc2c:	2b03      	cmp	r3, #3
 800dc2e:	f200 8085 	bhi.w	800dd3c <_dtoa_r+0x30c>
 800dc32:	e8df f003 	tbb	[pc, r3]
 800dc36:	3b2e      	.short	0x3b2e
 800dc38:	5839      	.short	0x5839
 800dc3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dc3e:	441d      	add	r5, r3
 800dc40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc44:	2b20      	cmp	r3, #32
 800dc46:	bfc1      	itttt	gt
 800dc48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc4c:	fa08 f803 	lslgt.w	r8, r8, r3
 800dc50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dc54:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dc58:	bfd6      	itet	le
 800dc5a:	f1c3 0320 	rsble	r3, r3, #32
 800dc5e:	ea48 0003 	orrgt.w	r0, r8, r3
 800dc62:	fa06 f003 	lslle.w	r0, r6, r3
 800dc66:	f7f2 fc4d 	bl	8000504 <__aeabi_ui2d>
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dc70:	3d01      	subs	r5, #1
 800dc72:	920e      	str	r2, [sp, #56]	; 0x38
 800dc74:	e76f      	b.n	800db56 <_dtoa_r+0x126>
 800dc76:	2301      	movs	r3, #1
 800dc78:	e7b3      	b.n	800dbe2 <_dtoa_r+0x1b2>
 800dc7a:	900c      	str	r0, [sp, #48]	; 0x30
 800dc7c:	e7b2      	b.n	800dbe4 <_dtoa_r+0x1b4>
 800dc7e:	9b05      	ldr	r3, [sp, #20]
 800dc80:	eba3 030b 	sub.w	r3, r3, fp
 800dc84:	9305      	str	r3, [sp, #20]
 800dc86:	f1cb 0300 	rsb	r3, fp, #0
 800dc8a:	9308      	str	r3, [sp, #32]
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc90:	e7bf      	b.n	800dc12 <_dtoa_r+0x1e2>
 800dc92:	2300      	movs	r3, #0
 800dc94:	9309      	str	r3, [sp, #36]	; 0x24
 800dc96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dc52      	bgt.n	800dd42 <_dtoa_r+0x312>
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	9301      	str	r3, [sp, #4]
 800dca0:	9304      	str	r3, [sp, #16]
 800dca2:	461a      	mov	r2, r3
 800dca4:	920a      	str	r2, [sp, #40]	; 0x28
 800dca6:	e00b      	b.n	800dcc0 <_dtoa_r+0x290>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e7f3      	b.n	800dc94 <_dtoa_r+0x264>
 800dcac:	2300      	movs	r3, #0
 800dcae:	9309      	str	r3, [sp, #36]	; 0x24
 800dcb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcb2:	445b      	add	r3, fp
 800dcb4:	9301      	str	r3, [sp, #4]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	9304      	str	r3, [sp, #16]
 800dcbc:	bfb8      	it	lt
 800dcbe:	2301      	movlt	r3, #1
 800dcc0:	69e0      	ldr	r0, [r4, #28]
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	2204      	movs	r2, #4
 800dcc6:	f102 0614 	add.w	r6, r2, #20
 800dcca:	429e      	cmp	r6, r3
 800dccc:	d93d      	bls.n	800dd4a <_dtoa_r+0x31a>
 800dcce:	6041      	str	r1, [r0, #4]
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f000 fd9f 	bl	800e814 <_Balloc>
 800dcd6:	9000      	str	r0, [sp, #0]
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	d139      	bne.n	800dd50 <_dtoa_r+0x320>
 800dcdc:	4b16      	ldr	r3, [pc, #88]	; (800dd38 <_dtoa_r+0x308>)
 800dcde:	4602      	mov	r2, r0
 800dce0:	f240 11af 	movw	r1, #431	; 0x1af
 800dce4:	e6bd      	b.n	800da62 <_dtoa_r+0x32>
 800dce6:	2301      	movs	r3, #1
 800dce8:	e7e1      	b.n	800dcae <_dtoa_r+0x27e>
 800dcea:	2501      	movs	r5, #1
 800dcec:	2300      	movs	r3, #0
 800dcee:	9307      	str	r3, [sp, #28]
 800dcf0:	9509      	str	r5, [sp, #36]	; 0x24
 800dcf2:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	9304      	str	r3, [sp, #16]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	2312      	movs	r3, #18
 800dcfe:	e7d1      	b.n	800dca4 <_dtoa_r+0x274>
 800dd00:	636f4361 	.word	0x636f4361
 800dd04:	3fd287a7 	.word	0x3fd287a7
 800dd08:	8b60c8b3 	.word	0x8b60c8b3
 800dd0c:	3fc68a28 	.word	0x3fc68a28
 800dd10:	509f79fb 	.word	0x509f79fb
 800dd14:	3fd34413 	.word	0x3fd34413
 800dd18:	08011f39 	.word	0x08011f39
 800dd1c:	08011f50 	.word	0x08011f50
 800dd20:	7ff00000 	.word	0x7ff00000
 800dd24:	08011f35 	.word	0x08011f35
 800dd28:	08011f2c 	.word	0x08011f2c
 800dd2c:	08011f09 	.word	0x08011f09
 800dd30:	3ff80000 	.word	0x3ff80000
 800dd34:	08012040 	.word	0x08012040
 800dd38:	08011fa8 	.word	0x08011fa8
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd40:	e7d7      	b.n	800dcf2 <_dtoa_r+0x2c2>
 800dd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	9304      	str	r3, [sp, #16]
 800dd48:	e7ba      	b.n	800dcc0 <_dtoa_r+0x290>
 800dd4a:	3101      	adds	r1, #1
 800dd4c:	0052      	lsls	r2, r2, #1
 800dd4e:	e7ba      	b.n	800dcc6 <_dtoa_r+0x296>
 800dd50:	69e3      	ldr	r3, [r4, #28]
 800dd52:	9a00      	ldr	r2, [sp, #0]
 800dd54:	601a      	str	r2, [r3, #0]
 800dd56:	9b04      	ldr	r3, [sp, #16]
 800dd58:	2b0e      	cmp	r3, #14
 800dd5a:	f200 80a8 	bhi.w	800deae <_dtoa_r+0x47e>
 800dd5e:	2d00      	cmp	r5, #0
 800dd60:	f000 80a5 	beq.w	800deae <_dtoa_r+0x47e>
 800dd64:	f1bb 0f00 	cmp.w	fp, #0
 800dd68:	dd38      	ble.n	800dddc <_dtoa_r+0x3ac>
 800dd6a:	4bc0      	ldr	r3, [pc, #768]	; (800e06c <_dtoa_r+0x63c>)
 800dd6c:	f00b 020f 	and.w	r2, fp, #15
 800dd70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dd78:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dd7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dd80:	d019      	beq.n	800ddb6 <_dtoa_r+0x386>
 800dd82:	4bbb      	ldr	r3, [pc, #748]	; (800e070 <_dtoa_r+0x640>)
 800dd84:	ec51 0b18 	vmov	r0, r1, d8
 800dd88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd8c:	f7f2 fd5e 	bl	800084c <__aeabi_ddiv>
 800dd90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd94:	f008 080f 	and.w	r8, r8, #15
 800dd98:	2503      	movs	r5, #3
 800dd9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e070 <_dtoa_r+0x640>
 800dd9e:	f1b8 0f00 	cmp.w	r8, #0
 800dda2:	d10a      	bne.n	800ddba <_dtoa_r+0x38a>
 800dda4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dda8:	4632      	mov	r2, r6
 800ddaa:	463b      	mov	r3, r7
 800ddac:	f7f2 fd4e 	bl	800084c <__aeabi_ddiv>
 800ddb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddb4:	e02b      	b.n	800de0e <_dtoa_r+0x3de>
 800ddb6:	2502      	movs	r5, #2
 800ddb8:	e7ef      	b.n	800dd9a <_dtoa_r+0x36a>
 800ddba:	f018 0f01 	tst.w	r8, #1
 800ddbe:	d008      	beq.n	800ddd2 <_dtoa_r+0x3a2>
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	4639      	mov	r1, r7
 800ddc4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ddc8:	f7f2 fc16 	bl	80005f8 <__aeabi_dmul>
 800ddcc:	3501      	adds	r5, #1
 800ddce:	4606      	mov	r6, r0
 800ddd0:	460f      	mov	r7, r1
 800ddd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ddd6:	f109 0908 	add.w	r9, r9, #8
 800ddda:	e7e0      	b.n	800dd9e <_dtoa_r+0x36e>
 800dddc:	f000 809f 	beq.w	800df1e <_dtoa_r+0x4ee>
 800dde0:	f1cb 0600 	rsb	r6, fp, #0
 800dde4:	4ba1      	ldr	r3, [pc, #644]	; (800e06c <_dtoa_r+0x63c>)
 800dde6:	4fa2      	ldr	r7, [pc, #648]	; (800e070 <_dtoa_r+0x640>)
 800dde8:	f006 020f 	and.w	r2, r6, #15
 800ddec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf4:	ec51 0b18 	vmov	r0, r1, d8
 800ddf8:	f7f2 fbfe 	bl	80005f8 <__aeabi_dmul>
 800ddfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de00:	1136      	asrs	r6, r6, #4
 800de02:	2300      	movs	r3, #0
 800de04:	2502      	movs	r5, #2
 800de06:	2e00      	cmp	r6, #0
 800de08:	d17e      	bne.n	800df08 <_dtoa_r+0x4d8>
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1d0      	bne.n	800ddb0 <_dtoa_r+0x380>
 800de0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de14:	2b00      	cmp	r3, #0
 800de16:	f000 8084 	beq.w	800df22 <_dtoa_r+0x4f2>
 800de1a:	4b96      	ldr	r3, [pc, #600]	; (800e074 <_dtoa_r+0x644>)
 800de1c:	2200      	movs	r2, #0
 800de1e:	4640      	mov	r0, r8
 800de20:	4649      	mov	r1, r9
 800de22:	f7f2 fe5b 	bl	8000adc <__aeabi_dcmplt>
 800de26:	2800      	cmp	r0, #0
 800de28:	d07b      	beq.n	800df22 <_dtoa_r+0x4f2>
 800de2a:	9b04      	ldr	r3, [sp, #16]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d078      	beq.n	800df22 <_dtoa_r+0x4f2>
 800de30:	9b01      	ldr	r3, [sp, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	dd39      	ble.n	800deaa <_dtoa_r+0x47a>
 800de36:	4b90      	ldr	r3, [pc, #576]	; (800e078 <_dtoa_r+0x648>)
 800de38:	2200      	movs	r2, #0
 800de3a:	4640      	mov	r0, r8
 800de3c:	4649      	mov	r1, r9
 800de3e:	f7f2 fbdb 	bl	80005f8 <__aeabi_dmul>
 800de42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de46:	9e01      	ldr	r6, [sp, #4]
 800de48:	f10b 37ff 	add.w	r7, fp, #4294967295
 800de4c:	3501      	adds	r5, #1
 800de4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de52:	4628      	mov	r0, r5
 800de54:	f7f2 fb66 	bl	8000524 <__aeabi_i2d>
 800de58:	4642      	mov	r2, r8
 800de5a:	464b      	mov	r3, r9
 800de5c:	f7f2 fbcc 	bl	80005f8 <__aeabi_dmul>
 800de60:	4b86      	ldr	r3, [pc, #536]	; (800e07c <_dtoa_r+0x64c>)
 800de62:	2200      	movs	r2, #0
 800de64:	f7f2 fa12 	bl	800028c <__adddf3>
 800de68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800de6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de70:	9303      	str	r3, [sp, #12]
 800de72:	2e00      	cmp	r6, #0
 800de74:	d158      	bne.n	800df28 <_dtoa_r+0x4f8>
 800de76:	4b82      	ldr	r3, [pc, #520]	; (800e080 <_dtoa_r+0x650>)
 800de78:	2200      	movs	r2, #0
 800de7a:	4640      	mov	r0, r8
 800de7c:	4649      	mov	r1, r9
 800de7e:	f7f2 fa03 	bl	8000288 <__aeabi_dsub>
 800de82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de86:	4680      	mov	r8, r0
 800de88:	4689      	mov	r9, r1
 800de8a:	f7f2 fe45 	bl	8000b18 <__aeabi_dcmpgt>
 800de8e:	2800      	cmp	r0, #0
 800de90:	f040 8296 	bne.w	800e3c0 <_dtoa_r+0x990>
 800de94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800de98:	4640      	mov	r0, r8
 800de9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de9e:	4649      	mov	r1, r9
 800dea0:	f7f2 fe1c 	bl	8000adc <__aeabi_dcmplt>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	f040 8289 	bne.w	800e3bc <_dtoa_r+0x98c>
 800deaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800deae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f2c0 814e 	blt.w	800e152 <_dtoa_r+0x722>
 800deb6:	f1bb 0f0e 	cmp.w	fp, #14
 800deba:	f300 814a 	bgt.w	800e152 <_dtoa_r+0x722>
 800debe:	4b6b      	ldr	r3, [pc, #428]	; (800e06c <_dtoa_r+0x63c>)
 800dec0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deca:	2b00      	cmp	r3, #0
 800decc:	f280 80dc 	bge.w	800e088 <_dtoa_r+0x658>
 800ded0:	9b04      	ldr	r3, [sp, #16]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f300 80d8 	bgt.w	800e088 <_dtoa_r+0x658>
 800ded8:	f040 826f 	bne.w	800e3ba <_dtoa_r+0x98a>
 800dedc:	4b68      	ldr	r3, [pc, #416]	; (800e080 <_dtoa_r+0x650>)
 800dede:	2200      	movs	r2, #0
 800dee0:	4640      	mov	r0, r8
 800dee2:	4649      	mov	r1, r9
 800dee4:	f7f2 fb88 	bl	80005f8 <__aeabi_dmul>
 800dee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800deec:	f7f2 fe0a 	bl	8000b04 <__aeabi_dcmpge>
 800def0:	9e04      	ldr	r6, [sp, #16]
 800def2:	4637      	mov	r7, r6
 800def4:	2800      	cmp	r0, #0
 800def6:	f040 8245 	bne.w	800e384 <_dtoa_r+0x954>
 800defa:	9d00      	ldr	r5, [sp, #0]
 800defc:	2331      	movs	r3, #49	; 0x31
 800defe:	f805 3b01 	strb.w	r3, [r5], #1
 800df02:	f10b 0b01 	add.w	fp, fp, #1
 800df06:	e241      	b.n	800e38c <_dtoa_r+0x95c>
 800df08:	07f2      	lsls	r2, r6, #31
 800df0a:	d505      	bpl.n	800df18 <_dtoa_r+0x4e8>
 800df0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df10:	f7f2 fb72 	bl	80005f8 <__aeabi_dmul>
 800df14:	3501      	adds	r5, #1
 800df16:	2301      	movs	r3, #1
 800df18:	1076      	asrs	r6, r6, #1
 800df1a:	3708      	adds	r7, #8
 800df1c:	e773      	b.n	800de06 <_dtoa_r+0x3d6>
 800df1e:	2502      	movs	r5, #2
 800df20:	e775      	b.n	800de0e <_dtoa_r+0x3de>
 800df22:	9e04      	ldr	r6, [sp, #16]
 800df24:	465f      	mov	r7, fp
 800df26:	e792      	b.n	800de4e <_dtoa_r+0x41e>
 800df28:	9900      	ldr	r1, [sp, #0]
 800df2a:	4b50      	ldr	r3, [pc, #320]	; (800e06c <_dtoa_r+0x63c>)
 800df2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df30:	4431      	add	r1, r6
 800df32:	9102      	str	r1, [sp, #8]
 800df34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df36:	eeb0 9a47 	vmov.f32	s18, s14
 800df3a:	eef0 9a67 	vmov.f32	s19, s15
 800df3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800df42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df46:	2900      	cmp	r1, #0
 800df48:	d044      	beq.n	800dfd4 <_dtoa_r+0x5a4>
 800df4a:	494e      	ldr	r1, [pc, #312]	; (800e084 <_dtoa_r+0x654>)
 800df4c:	2000      	movs	r0, #0
 800df4e:	f7f2 fc7d 	bl	800084c <__aeabi_ddiv>
 800df52:	ec53 2b19 	vmov	r2, r3, d9
 800df56:	f7f2 f997 	bl	8000288 <__aeabi_dsub>
 800df5a:	9d00      	ldr	r5, [sp, #0]
 800df5c:	ec41 0b19 	vmov	d9, r0, r1
 800df60:	4649      	mov	r1, r9
 800df62:	4640      	mov	r0, r8
 800df64:	f7f2 fdf8 	bl	8000b58 <__aeabi_d2iz>
 800df68:	4606      	mov	r6, r0
 800df6a:	f7f2 fadb 	bl	8000524 <__aeabi_i2d>
 800df6e:	4602      	mov	r2, r0
 800df70:	460b      	mov	r3, r1
 800df72:	4640      	mov	r0, r8
 800df74:	4649      	mov	r1, r9
 800df76:	f7f2 f987 	bl	8000288 <__aeabi_dsub>
 800df7a:	3630      	adds	r6, #48	; 0x30
 800df7c:	f805 6b01 	strb.w	r6, [r5], #1
 800df80:	ec53 2b19 	vmov	r2, r3, d9
 800df84:	4680      	mov	r8, r0
 800df86:	4689      	mov	r9, r1
 800df88:	f7f2 fda8 	bl	8000adc <__aeabi_dcmplt>
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d164      	bne.n	800e05a <_dtoa_r+0x62a>
 800df90:	4642      	mov	r2, r8
 800df92:	464b      	mov	r3, r9
 800df94:	4937      	ldr	r1, [pc, #220]	; (800e074 <_dtoa_r+0x644>)
 800df96:	2000      	movs	r0, #0
 800df98:	f7f2 f976 	bl	8000288 <__aeabi_dsub>
 800df9c:	ec53 2b19 	vmov	r2, r3, d9
 800dfa0:	f7f2 fd9c 	bl	8000adc <__aeabi_dcmplt>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	f040 80b6 	bne.w	800e116 <_dtoa_r+0x6e6>
 800dfaa:	9b02      	ldr	r3, [sp, #8]
 800dfac:	429d      	cmp	r5, r3
 800dfae:	f43f af7c 	beq.w	800deaa <_dtoa_r+0x47a>
 800dfb2:	4b31      	ldr	r3, [pc, #196]	; (800e078 <_dtoa_r+0x648>)
 800dfb4:	ec51 0b19 	vmov	r0, r1, d9
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f7f2 fb1d 	bl	80005f8 <__aeabi_dmul>
 800dfbe:	4b2e      	ldr	r3, [pc, #184]	; (800e078 <_dtoa_r+0x648>)
 800dfc0:	ec41 0b19 	vmov	d9, r0, r1
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	4640      	mov	r0, r8
 800dfc8:	4649      	mov	r1, r9
 800dfca:	f7f2 fb15 	bl	80005f8 <__aeabi_dmul>
 800dfce:	4680      	mov	r8, r0
 800dfd0:	4689      	mov	r9, r1
 800dfd2:	e7c5      	b.n	800df60 <_dtoa_r+0x530>
 800dfd4:	ec51 0b17 	vmov	r0, r1, d7
 800dfd8:	f7f2 fb0e 	bl	80005f8 <__aeabi_dmul>
 800dfdc:	9b02      	ldr	r3, [sp, #8]
 800dfde:	9d00      	ldr	r5, [sp, #0]
 800dfe0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfe2:	ec41 0b19 	vmov	d9, r0, r1
 800dfe6:	4649      	mov	r1, r9
 800dfe8:	4640      	mov	r0, r8
 800dfea:	f7f2 fdb5 	bl	8000b58 <__aeabi_d2iz>
 800dfee:	4606      	mov	r6, r0
 800dff0:	f7f2 fa98 	bl	8000524 <__aeabi_i2d>
 800dff4:	3630      	adds	r6, #48	; 0x30
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	4640      	mov	r0, r8
 800dffc:	4649      	mov	r1, r9
 800dffe:	f7f2 f943 	bl	8000288 <__aeabi_dsub>
 800e002:	f805 6b01 	strb.w	r6, [r5], #1
 800e006:	9b02      	ldr	r3, [sp, #8]
 800e008:	429d      	cmp	r5, r3
 800e00a:	4680      	mov	r8, r0
 800e00c:	4689      	mov	r9, r1
 800e00e:	f04f 0200 	mov.w	r2, #0
 800e012:	d124      	bne.n	800e05e <_dtoa_r+0x62e>
 800e014:	4b1b      	ldr	r3, [pc, #108]	; (800e084 <_dtoa_r+0x654>)
 800e016:	ec51 0b19 	vmov	r0, r1, d9
 800e01a:	f7f2 f937 	bl	800028c <__adddf3>
 800e01e:	4602      	mov	r2, r0
 800e020:	460b      	mov	r3, r1
 800e022:	4640      	mov	r0, r8
 800e024:	4649      	mov	r1, r9
 800e026:	f7f2 fd77 	bl	8000b18 <__aeabi_dcmpgt>
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d173      	bne.n	800e116 <_dtoa_r+0x6e6>
 800e02e:	ec53 2b19 	vmov	r2, r3, d9
 800e032:	4914      	ldr	r1, [pc, #80]	; (800e084 <_dtoa_r+0x654>)
 800e034:	2000      	movs	r0, #0
 800e036:	f7f2 f927 	bl	8000288 <__aeabi_dsub>
 800e03a:	4602      	mov	r2, r0
 800e03c:	460b      	mov	r3, r1
 800e03e:	4640      	mov	r0, r8
 800e040:	4649      	mov	r1, r9
 800e042:	f7f2 fd4b 	bl	8000adc <__aeabi_dcmplt>
 800e046:	2800      	cmp	r0, #0
 800e048:	f43f af2f 	beq.w	800deaa <_dtoa_r+0x47a>
 800e04c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e04e:	1e6b      	subs	r3, r5, #1
 800e050:	930f      	str	r3, [sp, #60]	; 0x3c
 800e052:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e056:	2b30      	cmp	r3, #48	; 0x30
 800e058:	d0f8      	beq.n	800e04c <_dtoa_r+0x61c>
 800e05a:	46bb      	mov	fp, r7
 800e05c:	e04a      	b.n	800e0f4 <_dtoa_r+0x6c4>
 800e05e:	4b06      	ldr	r3, [pc, #24]	; (800e078 <_dtoa_r+0x648>)
 800e060:	f7f2 faca 	bl	80005f8 <__aeabi_dmul>
 800e064:	4680      	mov	r8, r0
 800e066:	4689      	mov	r9, r1
 800e068:	e7bd      	b.n	800dfe6 <_dtoa_r+0x5b6>
 800e06a:	bf00      	nop
 800e06c:	08012040 	.word	0x08012040
 800e070:	08012018 	.word	0x08012018
 800e074:	3ff00000 	.word	0x3ff00000
 800e078:	40240000 	.word	0x40240000
 800e07c:	401c0000 	.word	0x401c0000
 800e080:	40140000 	.word	0x40140000
 800e084:	3fe00000 	.word	0x3fe00000
 800e088:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e08c:	9d00      	ldr	r5, [sp, #0]
 800e08e:	4642      	mov	r2, r8
 800e090:	464b      	mov	r3, r9
 800e092:	4630      	mov	r0, r6
 800e094:	4639      	mov	r1, r7
 800e096:	f7f2 fbd9 	bl	800084c <__aeabi_ddiv>
 800e09a:	f7f2 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800e09e:	9001      	str	r0, [sp, #4]
 800e0a0:	f7f2 fa40 	bl	8000524 <__aeabi_i2d>
 800e0a4:	4642      	mov	r2, r8
 800e0a6:	464b      	mov	r3, r9
 800e0a8:	f7f2 faa6 	bl	80005f8 <__aeabi_dmul>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	4639      	mov	r1, r7
 800e0b4:	f7f2 f8e8 	bl	8000288 <__aeabi_dsub>
 800e0b8:	9e01      	ldr	r6, [sp, #4]
 800e0ba:	9f04      	ldr	r7, [sp, #16]
 800e0bc:	3630      	adds	r6, #48	; 0x30
 800e0be:	f805 6b01 	strb.w	r6, [r5], #1
 800e0c2:	9e00      	ldr	r6, [sp, #0]
 800e0c4:	1bae      	subs	r6, r5, r6
 800e0c6:	42b7      	cmp	r7, r6
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	d134      	bne.n	800e138 <_dtoa_r+0x708>
 800e0ce:	f7f2 f8dd 	bl	800028c <__adddf3>
 800e0d2:	4642      	mov	r2, r8
 800e0d4:	464b      	mov	r3, r9
 800e0d6:	4606      	mov	r6, r0
 800e0d8:	460f      	mov	r7, r1
 800e0da:	f7f2 fd1d 	bl	8000b18 <__aeabi_dcmpgt>
 800e0de:	b9c8      	cbnz	r0, 800e114 <_dtoa_r+0x6e4>
 800e0e0:	4642      	mov	r2, r8
 800e0e2:	464b      	mov	r3, r9
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	4639      	mov	r1, r7
 800e0e8:	f7f2 fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0ec:	b110      	cbz	r0, 800e0f4 <_dtoa_r+0x6c4>
 800e0ee:	9b01      	ldr	r3, [sp, #4]
 800e0f0:	07db      	lsls	r3, r3, #31
 800e0f2:	d40f      	bmi.n	800e114 <_dtoa_r+0x6e4>
 800e0f4:	4651      	mov	r1, sl
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 fbcc 	bl	800e894 <_Bfree>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e100:	702b      	strb	r3, [r5, #0]
 800e102:	f10b 0301 	add.w	r3, fp, #1
 800e106:	6013      	str	r3, [r2, #0]
 800e108:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f43f ace2 	beq.w	800dad4 <_dtoa_r+0xa4>
 800e110:	601d      	str	r5, [r3, #0]
 800e112:	e4df      	b.n	800dad4 <_dtoa_r+0xa4>
 800e114:	465f      	mov	r7, fp
 800e116:	462b      	mov	r3, r5
 800e118:	461d      	mov	r5, r3
 800e11a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e11e:	2a39      	cmp	r2, #57	; 0x39
 800e120:	d106      	bne.n	800e130 <_dtoa_r+0x700>
 800e122:	9a00      	ldr	r2, [sp, #0]
 800e124:	429a      	cmp	r2, r3
 800e126:	d1f7      	bne.n	800e118 <_dtoa_r+0x6e8>
 800e128:	9900      	ldr	r1, [sp, #0]
 800e12a:	2230      	movs	r2, #48	; 0x30
 800e12c:	3701      	adds	r7, #1
 800e12e:	700a      	strb	r2, [r1, #0]
 800e130:	781a      	ldrb	r2, [r3, #0]
 800e132:	3201      	adds	r2, #1
 800e134:	701a      	strb	r2, [r3, #0]
 800e136:	e790      	b.n	800e05a <_dtoa_r+0x62a>
 800e138:	4ba3      	ldr	r3, [pc, #652]	; (800e3c8 <_dtoa_r+0x998>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	f7f2 fa5c 	bl	80005f8 <__aeabi_dmul>
 800e140:	2200      	movs	r2, #0
 800e142:	2300      	movs	r3, #0
 800e144:	4606      	mov	r6, r0
 800e146:	460f      	mov	r7, r1
 800e148:	f7f2 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d09e      	beq.n	800e08e <_dtoa_r+0x65e>
 800e150:	e7d0      	b.n	800e0f4 <_dtoa_r+0x6c4>
 800e152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e154:	2a00      	cmp	r2, #0
 800e156:	f000 80ca 	beq.w	800e2ee <_dtoa_r+0x8be>
 800e15a:	9a07      	ldr	r2, [sp, #28]
 800e15c:	2a01      	cmp	r2, #1
 800e15e:	f300 80ad 	bgt.w	800e2bc <_dtoa_r+0x88c>
 800e162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e164:	2a00      	cmp	r2, #0
 800e166:	f000 80a5 	beq.w	800e2b4 <_dtoa_r+0x884>
 800e16a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e16e:	9e08      	ldr	r6, [sp, #32]
 800e170:	9d05      	ldr	r5, [sp, #20]
 800e172:	9a05      	ldr	r2, [sp, #20]
 800e174:	441a      	add	r2, r3
 800e176:	9205      	str	r2, [sp, #20]
 800e178:	9a06      	ldr	r2, [sp, #24]
 800e17a:	2101      	movs	r1, #1
 800e17c:	441a      	add	r2, r3
 800e17e:	4620      	mov	r0, r4
 800e180:	9206      	str	r2, [sp, #24]
 800e182:	f000 fc3d 	bl	800ea00 <__i2b>
 800e186:	4607      	mov	r7, r0
 800e188:	b165      	cbz	r5, 800e1a4 <_dtoa_r+0x774>
 800e18a:	9b06      	ldr	r3, [sp, #24]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	dd09      	ble.n	800e1a4 <_dtoa_r+0x774>
 800e190:	42ab      	cmp	r3, r5
 800e192:	9a05      	ldr	r2, [sp, #20]
 800e194:	bfa8      	it	ge
 800e196:	462b      	movge	r3, r5
 800e198:	1ad2      	subs	r2, r2, r3
 800e19a:	9205      	str	r2, [sp, #20]
 800e19c:	9a06      	ldr	r2, [sp, #24]
 800e19e:	1aed      	subs	r5, r5, r3
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	9306      	str	r3, [sp, #24]
 800e1a4:	9b08      	ldr	r3, [sp, #32]
 800e1a6:	b1f3      	cbz	r3, 800e1e6 <_dtoa_r+0x7b6>
 800e1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 80a3 	beq.w	800e2f6 <_dtoa_r+0x8c6>
 800e1b0:	2e00      	cmp	r6, #0
 800e1b2:	dd10      	ble.n	800e1d6 <_dtoa_r+0x7a6>
 800e1b4:	4639      	mov	r1, r7
 800e1b6:	4632      	mov	r2, r6
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 fce1 	bl	800eb80 <__pow5mult>
 800e1be:	4652      	mov	r2, sl
 800e1c0:	4601      	mov	r1, r0
 800e1c2:	4607      	mov	r7, r0
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f000 fc31 	bl	800ea2c <__multiply>
 800e1ca:	4651      	mov	r1, sl
 800e1cc:	4680      	mov	r8, r0
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	f000 fb60 	bl	800e894 <_Bfree>
 800e1d4:	46c2      	mov	sl, r8
 800e1d6:	9b08      	ldr	r3, [sp, #32]
 800e1d8:	1b9a      	subs	r2, r3, r6
 800e1da:	d004      	beq.n	800e1e6 <_dtoa_r+0x7b6>
 800e1dc:	4651      	mov	r1, sl
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f000 fcce 	bl	800eb80 <__pow5mult>
 800e1e4:	4682      	mov	sl, r0
 800e1e6:	2101      	movs	r1, #1
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f000 fc09 	bl	800ea00 <__i2b>
 800e1ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	f340 8081 	ble.w	800e2fa <_dtoa_r+0x8ca>
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	4601      	mov	r1, r0
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f000 fcbf 	bl	800eb80 <__pow5mult>
 800e202:	9b07      	ldr	r3, [sp, #28]
 800e204:	2b01      	cmp	r3, #1
 800e206:	4606      	mov	r6, r0
 800e208:	dd7a      	ble.n	800e300 <_dtoa_r+0x8d0>
 800e20a:	f04f 0800 	mov.w	r8, #0
 800e20e:	6933      	ldr	r3, [r6, #16]
 800e210:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e214:	6918      	ldr	r0, [r3, #16]
 800e216:	f000 fba5 	bl	800e964 <__hi0bits>
 800e21a:	f1c0 0020 	rsb	r0, r0, #32
 800e21e:	9b06      	ldr	r3, [sp, #24]
 800e220:	4418      	add	r0, r3
 800e222:	f010 001f 	ands.w	r0, r0, #31
 800e226:	f000 8094 	beq.w	800e352 <_dtoa_r+0x922>
 800e22a:	f1c0 0320 	rsb	r3, r0, #32
 800e22e:	2b04      	cmp	r3, #4
 800e230:	f340 8085 	ble.w	800e33e <_dtoa_r+0x90e>
 800e234:	9b05      	ldr	r3, [sp, #20]
 800e236:	f1c0 001c 	rsb	r0, r0, #28
 800e23a:	4403      	add	r3, r0
 800e23c:	9305      	str	r3, [sp, #20]
 800e23e:	9b06      	ldr	r3, [sp, #24]
 800e240:	4403      	add	r3, r0
 800e242:	4405      	add	r5, r0
 800e244:	9306      	str	r3, [sp, #24]
 800e246:	9b05      	ldr	r3, [sp, #20]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	dd05      	ble.n	800e258 <_dtoa_r+0x828>
 800e24c:	4651      	mov	r1, sl
 800e24e:	461a      	mov	r2, r3
 800e250:	4620      	mov	r0, r4
 800e252:	f000 fcef 	bl	800ec34 <__lshift>
 800e256:	4682      	mov	sl, r0
 800e258:	9b06      	ldr	r3, [sp, #24]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	dd05      	ble.n	800e26a <_dtoa_r+0x83a>
 800e25e:	4631      	mov	r1, r6
 800e260:	461a      	mov	r2, r3
 800e262:	4620      	mov	r0, r4
 800e264:	f000 fce6 	bl	800ec34 <__lshift>
 800e268:	4606      	mov	r6, r0
 800e26a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d072      	beq.n	800e356 <_dtoa_r+0x926>
 800e270:	4631      	mov	r1, r6
 800e272:	4650      	mov	r0, sl
 800e274:	f000 fd4a 	bl	800ed0c <__mcmp>
 800e278:	2800      	cmp	r0, #0
 800e27a:	da6c      	bge.n	800e356 <_dtoa_r+0x926>
 800e27c:	2300      	movs	r3, #0
 800e27e:	4651      	mov	r1, sl
 800e280:	220a      	movs	r2, #10
 800e282:	4620      	mov	r0, r4
 800e284:	f000 fb28 	bl	800e8d8 <__multadd>
 800e288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e28a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e28e:	4682      	mov	sl, r0
 800e290:	2b00      	cmp	r3, #0
 800e292:	f000 81b0 	beq.w	800e5f6 <_dtoa_r+0xbc6>
 800e296:	2300      	movs	r3, #0
 800e298:	4639      	mov	r1, r7
 800e29a:	220a      	movs	r2, #10
 800e29c:	4620      	mov	r0, r4
 800e29e:	f000 fb1b 	bl	800e8d8 <__multadd>
 800e2a2:	9b01      	ldr	r3, [sp, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	4607      	mov	r7, r0
 800e2a8:	f300 8096 	bgt.w	800e3d8 <_dtoa_r+0x9a8>
 800e2ac:	9b07      	ldr	r3, [sp, #28]
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	dc59      	bgt.n	800e366 <_dtoa_r+0x936>
 800e2b2:	e091      	b.n	800e3d8 <_dtoa_r+0x9a8>
 800e2b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2ba:	e758      	b.n	800e16e <_dtoa_r+0x73e>
 800e2bc:	9b04      	ldr	r3, [sp, #16]
 800e2be:	1e5e      	subs	r6, r3, #1
 800e2c0:	9b08      	ldr	r3, [sp, #32]
 800e2c2:	42b3      	cmp	r3, r6
 800e2c4:	bfbf      	itttt	lt
 800e2c6:	9b08      	ldrlt	r3, [sp, #32]
 800e2c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e2ca:	9608      	strlt	r6, [sp, #32]
 800e2cc:	1af3      	sublt	r3, r6, r3
 800e2ce:	bfb4      	ite	lt
 800e2d0:	18d2      	addlt	r2, r2, r3
 800e2d2:	1b9e      	subge	r6, r3, r6
 800e2d4:	9b04      	ldr	r3, [sp, #16]
 800e2d6:	bfbc      	itt	lt
 800e2d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e2da:	2600      	movlt	r6, #0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	bfb7      	itett	lt
 800e2e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e2e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e2e8:	1a9d      	sublt	r5, r3, r2
 800e2ea:	2300      	movlt	r3, #0
 800e2ec:	e741      	b.n	800e172 <_dtoa_r+0x742>
 800e2ee:	9e08      	ldr	r6, [sp, #32]
 800e2f0:	9d05      	ldr	r5, [sp, #20]
 800e2f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e2f4:	e748      	b.n	800e188 <_dtoa_r+0x758>
 800e2f6:	9a08      	ldr	r2, [sp, #32]
 800e2f8:	e770      	b.n	800e1dc <_dtoa_r+0x7ac>
 800e2fa:	9b07      	ldr	r3, [sp, #28]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	dc19      	bgt.n	800e334 <_dtoa_r+0x904>
 800e300:	9b02      	ldr	r3, [sp, #8]
 800e302:	b9bb      	cbnz	r3, 800e334 <_dtoa_r+0x904>
 800e304:	9b03      	ldr	r3, [sp, #12]
 800e306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e30a:	b99b      	cbnz	r3, 800e334 <_dtoa_r+0x904>
 800e30c:	9b03      	ldr	r3, [sp, #12]
 800e30e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e312:	0d1b      	lsrs	r3, r3, #20
 800e314:	051b      	lsls	r3, r3, #20
 800e316:	b183      	cbz	r3, 800e33a <_dtoa_r+0x90a>
 800e318:	9b05      	ldr	r3, [sp, #20]
 800e31a:	3301      	adds	r3, #1
 800e31c:	9305      	str	r3, [sp, #20]
 800e31e:	9b06      	ldr	r3, [sp, #24]
 800e320:	3301      	adds	r3, #1
 800e322:	9306      	str	r3, [sp, #24]
 800e324:	f04f 0801 	mov.w	r8, #1
 800e328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f47f af6f 	bne.w	800e20e <_dtoa_r+0x7de>
 800e330:	2001      	movs	r0, #1
 800e332:	e774      	b.n	800e21e <_dtoa_r+0x7ee>
 800e334:	f04f 0800 	mov.w	r8, #0
 800e338:	e7f6      	b.n	800e328 <_dtoa_r+0x8f8>
 800e33a:	4698      	mov	r8, r3
 800e33c:	e7f4      	b.n	800e328 <_dtoa_r+0x8f8>
 800e33e:	d082      	beq.n	800e246 <_dtoa_r+0x816>
 800e340:	9a05      	ldr	r2, [sp, #20]
 800e342:	331c      	adds	r3, #28
 800e344:	441a      	add	r2, r3
 800e346:	9205      	str	r2, [sp, #20]
 800e348:	9a06      	ldr	r2, [sp, #24]
 800e34a:	441a      	add	r2, r3
 800e34c:	441d      	add	r5, r3
 800e34e:	9206      	str	r2, [sp, #24]
 800e350:	e779      	b.n	800e246 <_dtoa_r+0x816>
 800e352:	4603      	mov	r3, r0
 800e354:	e7f4      	b.n	800e340 <_dtoa_r+0x910>
 800e356:	9b04      	ldr	r3, [sp, #16]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	dc37      	bgt.n	800e3cc <_dtoa_r+0x99c>
 800e35c:	9b07      	ldr	r3, [sp, #28]
 800e35e:	2b02      	cmp	r3, #2
 800e360:	dd34      	ble.n	800e3cc <_dtoa_r+0x99c>
 800e362:	9b04      	ldr	r3, [sp, #16]
 800e364:	9301      	str	r3, [sp, #4]
 800e366:	9b01      	ldr	r3, [sp, #4]
 800e368:	b963      	cbnz	r3, 800e384 <_dtoa_r+0x954>
 800e36a:	4631      	mov	r1, r6
 800e36c:	2205      	movs	r2, #5
 800e36e:	4620      	mov	r0, r4
 800e370:	f000 fab2 	bl	800e8d8 <__multadd>
 800e374:	4601      	mov	r1, r0
 800e376:	4606      	mov	r6, r0
 800e378:	4650      	mov	r0, sl
 800e37a:	f000 fcc7 	bl	800ed0c <__mcmp>
 800e37e:	2800      	cmp	r0, #0
 800e380:	f73f adbb 	bgt.w	800defa <_dtoa_r+0x4ca>
 800e384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e386:	9d00      	ldr	r5, [sp, #0]
 800e388:	ea6f 0b03 	mvn.w	fp, r3
 800e38c:	f04f 0800 	mov.w	r8, #0
 800e390:	4631      	mov	r1, r6
 800e392:	4620      	mov	r0, r4
 800e394:	f000 fa7e 	bl	800e894 <_Bfree>
 800e398:	2f00      	cmp	r7, #0
 800e39a:	f43f aeab 	beq.w	800e0f4 <_dtoa_r+0x6c4>
 800e39e:	f1b8 0f00 	cmp.w	r8, #0
 800e3a2:	d005      	beq.n	800e3b0 <_dtoa_r+0x980>
 800e3a4:	45b8      	cmp	r8, r7
 800e3a6:	d003      	beq.n	800e3b0 <_dtoa_r+0x980>
 800e3a8:	4641      	mov	r1, r8
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f000 fa72 	bl	800e894 <_Bfree>
 800e3b0:	4639      	mov	r1, r7
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f000 fa6e 	bl	800e894 <_Bfree>
 800e3b8:	e69c      	b.n	800e0f4 <_dtoa_r+0x6c4>
 800e3ba:	2600      	movs	r6, #0
 800e3bc:	4637      	mov	r7, r6
 800e3be:	e7e1      	b.n	800e384 <_dtoa_r+0x954>
 800e3c0:	46bb      	mov	fp, r7
 800e3c2:	4637      	mov	r7, r6
 800e3c4:	e599      	b.n	800defa <_dtoa_r+0x4ca>
 800e3c6:	bf00      	nop
 800e3c8:	40240000 	.word	0x40240000
 800e3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	f000 80c8 	beq.w	800e564 <_dtoa_r+0xb34>
 800e3d4:	9b04      	ldr	r3, [sp, #16]
 800e3d6:	9301      	str	r3, [sp, #4]
 800e3d8:	2d00      	cmp	r5, #0
 800e3da:	dd05      	ble.n	800e3e8 <_dtoa_r+0x9b8>
 800e3dc:	4639      	mov	r1, r7
 800e3de:	462a      	mov	r2, r5
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f000 fc27 	bl	800ec34 <__lshift>
 800e3e6:	4607      	mov	r7, r0
 800e3e8:	f1b8 0f00 	cmp.w	r8, #0
 800e3ec:	d05b      	beq.n	800e4a6 <_dtoa_r+0xa76>
 800e3ee:	6879      	ldr	r1, [r7, #4]
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f000 fa0f 	bl	800e814 <_Balloc>
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	b928      	cbnz	r0, 800e406 <_dtoa_r+0x9d6>
 800e3fa:	4b83      	ldr	r3, [pc, #524]	; (800e608 <_dtoa_r+0xbd8>)
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e402:	f7ff bb2e 	b.w	800da62 <_dtoa_r+0x32>
 800e406:	693a      	ldr	r2, [r7, #16]
 800e408:	3202      	adds	r2, #2
 800e40a:	0092      	lsls	r2, r2, #2
 800e40c:	f107 010c 	add.w	r1, r7, #12
 800e410:	300c      	adds	r0, #12
 800e412:	f7ff fa74 	bl	800d8fe <memcpy>
 800e416:	2201      	movs	r2, #1
 800e418:	4629      	mov	r1, r5
 800e41a:	4620      	mov	r0, r4
 800e41c:	f000 fc0a 	bl	800ec34 <__lshift>
 800e420:	9b00      	ldr	r3, [sp, #0]
 800e422:	3301      	adds	r3, #1
 800e424:	9304      	str	r3, [sp, #16]
 800e426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e42a:	4413      	add	r3, r2
 800e42c:	9308      	str	r3, [sp, #32]
 800e42e:	9b02      	ldr	r3, [sp, #8]
 800e430:	f003 0301 	and.w	r3, r3, #1
 800e434:	46b8      	mov	r8, r7
 800e436:	9306      	str	r3, [sp, #24]
 800e438:	4607      	mov	r7, r0
 800e43a:	9b04      	ldr	r3, [sp, #16]
 800e43c:	4631      	mov	r1, r6
 800e43e:	3b01      	subs	r3, #1
 800e440:	4650      	mov	r0, sl
 800e442:	9301      	str	r3, [sp, #4]
 800e444:	f7ff fa69 	bl	800d91a <quorem>
 800e448:	4641      	mov	r1, r8
 800e44a:	9002      	str	r0, [sp, #8]
 800e44c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e450:	4650      	mov	r0, sl
 800e452:	f000 fc5b 	bl	800ed0c <__mcmp>
 800e456:	463a      	mov	r2, r7
 800e458:	9005      	str	r0, [sp, #20]
 800e45a:	4631      	mov	r1, r6
 800e45c:	4620      	mov	r0, r4
 800e45e:	f000 fc71 	bl	800ed44 <__mdiff>
 800e462:	68c2      	ldr	r2, [r0, #12]
 800e464:	4605      	mov	r5, r0
 800e466:	bb02      	cbnz	r2, 800e4aa <_dtoa_r+0xa7a>
 800e468:	4601      	mov	r1, r0
 800e46a:	4650      	mov	r0, sl
 800e46c:	f000 fc4e 	bl	800ed0c <__mcmp>
 800e470:	4602      	mov	r2, r0
 800e472:	4629      	mov	r1, r5
 800e474:	4620      	mov	r0, r4
 800e476:	9209      	str	r2, [sp, #36]	; 0x24
 800e478:	f000 fa0c 	bl	800e894 <_Bfree>
 800e47c:	9b07      	ldr	r3, [sp, #28]
 800e47e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e480:	9d04      	ldr	r5, [sp, #16]
 800e482:	ea43 0102 	orr.w	r1, r3, r2
 800e486:	9b06      	ldr	r3, [sp, #24]
 800e488:	4319      	orrs	r1, r3
 800e48a:	d110      	bne.n	800e4ae <_dtoa_r+0xa7e>
 800e48c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e490:	d029      	beq.n	800e4e6 <_dtoa_r+0xab6>
 800e492:	9b05      	ldr	r3, [sp, #20]
 800e494:	2b00      	cmp	r3, #0
 800e496:	dd02      	ble.n	800e49e <_dtoa_r+0xa6e>
 800e498:	9b02      	ldr	r3, [sp, #8]
 800e49a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e49e:	9b01      	ldr	r3, [sp, #4]
 800e4a0:	f883 9000 	strb.w	r9, [r3]
 800e4a4:	e774      	b.n	800e390 <_dtoa_r+0x960>
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	e7ba      	b.n	800e420 <_dtoa_r+0x9f0>
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	e7e1      	b.n	800e472 <_dtoa_r+0xa42>
 800e4ae:	9b05      	ldr	r3, [sp, #20]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	db04      	blt.n	800e4be <_dtoa_r+0xa8e>
 800e4b4:	9907      	ldr	r1, [sp, #28]
 800e4b6:	430b      	orrs	r3, r1
 800e4b8:	9906      	ldr	r1, [sp, #24]
 800e4ba:	430b      	orrs	r3, r1
 800e4bc:	d120      	bne.n	800e500 <_dtoa_r+0xad0>
 800e4be:	2a00      	cmp	r2, #0
 800e4c0:	dded      	ble.n	800e49e <_dtoa_r+0xa6e>
 800e4c2:	4651      	mov	r1, sl
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f000 fbb4 	bl	800ec34 <__lshift>
 800e4cc:	4631      	mov	r1, r6
 800e4ce:	4682      	mov	sl, r0
 800e4d0:	f000 fc1c 	bl	800ed0c <__mcmp>
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	dc03      	bgt.n	800e4e0 <_dtoa_r+0xab0>
 800e4d8:	d1e1      	bne.n	800e49e <_dtoa_r+0xa6e>
 800e4da:	f019 0f01 	tst.w	r9, #1
 800e4de:	d0de      	beq.n	800e49e <_dtoa_r+0xa6e>
 800e4e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e4e4:	d1d8      	bne.n	800e498 <_dtoa_r+0xa68>
 800e4e6:	9a01      	ldr	r2, [sp, #4]
 800e4e8:	2339      	movs	r3, #57	; 0x39
 800e4ea:	7013      	strb	r3, [r2, #0]
 800e4ec:	462b      	mov	r3, r5
 800e4ee:	461d      	mov	r5, r3
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e4f6:	2a39      	cmp	r2, #57	; 0x39
 800e4f8:	d06c      	beq.n	800e5d4 <_dtoa_r+0xba4>
 800e4fa:	3201      	adds	r2, #1
 800e4fc:	701a      	strb	r2, [r3, #0]
 800e4fe:	e747      	b.n	800e390 <_dtoa_r+0x960>
 800e500:	2a00      	cmp	r2, #0
 800e502:	dd07      	ble.n	800e514 <_dtoa_r+0xae4>
 800e504:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e508:	d0ed      	beq.n	800e4e6 <_dtoa_r+0xab6>
 800e50a:	9a01      	ldr	r2, [sp, #4]
 800e50c:	f109 0301 	add.w	r3, r9, #1
 800e510:	7013      	strb	r3, [r2, #0]
 800e512:	e73d      	b.n	800e390 <_dtoa_r+0x960>
 800e514:	9b04      	ldr	r3, [sp, #16]
 800e516:	9a08      	ldr	r2, [sp, #32]
 800e518:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d043      	beq.n	800e5a8 <_dtoa_r+0xb78>
 800e520:	4651      	mov	r1, sl
 800e522:	2300      	movs	r3, #0
 800e524:	220a      	movs	r2, #10
 800e526:	4620      	mov	r0, r4
 800e528:	f000 f9d6 	bl	800e8d8 <__multadd>
 800e52c:	45b8      	cmp	r8, r7
 800e52e:	4682      	mov	sl, r0
 800e530:	f04f 0300 	mov.w	r3, #0
 800e534:	f04f 020a 	mov.w	r2, #10
 800e538:	4641      	mov	r1, r8
 800e53a:	4620      	mov	r0, r4
 800e53c:	d107      	bne.n	800e54e <_dtoa_r+0xb1e>
 800e53e:	f000 f9cb 	bl	800e8d8 <__multadd>
 800e542:	4680      	mov	r8, r0
 800e544:	4607      	mov	r7, r0
 800e546:	9b04      	ldr	r3, [sp, #16]
 800e548:	3301      	adds	r3, #1
 800e54a:	9304      	str	r3, [sp, #16]
 800e54c:	e775      	b.n	800e43a <_dtoa_r+0xa0a>
 800e54e:	f000 f9c3 	bl	800e8d8 <__multadd>
 800e552:	4639      	mov	r1, r7
 800e554:	4680      	mov	r8, r0
 800e556:	2300      	movs	r3, #0
 800e558:	220a      	movs	r2, #10
 800e55a:	4620      	mov	r0, r4
 800e55c:	f000 f9bc 	bl	800e8d8 <__multadd>
 800e560:	4607      	mov	r7, r0
 800e562:	e7f0      	b.n	800e546 <_dtoa_r+0xb16>
 800e564:	9b04      	ldr	r3, [sp, #16]
 800e566:	9301      	str	r3, [sp, #4]
 800e568:	9d00      	ldr	r5, [sp, #0]
 800e56a:	4631      	mov	r1, r6
 800e56c:	4650      	mov	r0, sl
 800e56e:	f7ff f9d4 	bl	800d91a <quorem>
 800e572:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e576:	9b00      	ldr	r3, [sp, #0]
 800e578:	f805 9b01 	strb.w	r9, [r5], #1
 800e57c:	1aea      	subs	r2, r5, r3
 800e57e:	9b01      	ldr	r3, [sp, #4]
 800e580:	4293      	cmp	r3, r2
 800e582:	dd07      	ble.n	800e594 <_dtoa_r+0xb64>
 800e584:	4651      	mov	r1, sl
 800e586:	2300      	movs	r3, #0
 800e588:	220a      	movs	r2, #10
 800e58a:	4620      	mov	r0, r4
 800e58c:	f000 f9a4 	bl	800e8d8 <__multadd>
 800e590:	4682      	mov	sl, r0
 800e592:	e7ea      	b.n	800e56a <_dtoa_r+0xb3a>
 800e594:	9b01      	ldr	r3, [sp, #4]
 800e596:	2b00      	cmp	r3, #0
 800e598:	bfc8      	it	gt
 800e59a:	461d      	movgt	r5, r3
 800e59c:	9b00      	ldr	r3, [sp, #0]
 800e59e:	bfd8      	it	le
 800e5a0:	2501      	movle	r5, #1
 800e5a2:	441d      	add	r5, r3
 800e5a4:	f04f 0800 	mov.w	r8, #0
 800e5a8:	4651      	mov	r1, sl
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	f000 fb41 	bl	800ec34 <__lshift>
 800e5b2:	4631      	mov	r1, r6
 800e5b4:	4682      	mov	sl, r0
 800e5b6:	f000 fba9 	bl	800ed0c <__mcmp>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	dc96      	bgt.n	800e4ec <_dtoa_r+0xabc>
 800e5be:	d102      	bne.n	800e5c6 <_dtoa_r+0xb96>
 800e5c0:	f019 0f01 	tst.w	r9, #1
 800e5c4:	d192      	bne.n	800e4ec <_dtoa_r+0xabc>
 800e5c6:	462b      	mov	r3, r5
 800e5c8:	461d      	mov	r5, r3
 800e5ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5ce:	2a30      	cmp	r2, #48	; 0x30
 800e5d0:	d0fa      	beq.n	800e5c8 <_dtoa_r+0xb98>
 800e5d2:	e6dd      	b.n	800e390 <_dtoa_r+0x960>
 800e5d4:	9a00      	ldr	r2, [sp, #0]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d189      	bne.n	800e4ee <_dtoa_r+0xabe>
 800e5da:	f10b 0b01 	add.w	fp, fp, #1
 800e5de:	2331      	movs	r3, #49	; 0x31
 800e5e0:	e796      	b.n	800e510 <_dtoa_r+0xae0>
 800e5e2:	4b0a      	ldr	r3, [pc, #40]	; (800e60c <_dtoa_r+0xbdc>)
 800e5e4:	f7ff ba99 	b.w	800db1a <_dtoa_r+0xea>
 800e5e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f47f aa6d 	bne.w	800daca <_dtoa_r+0x9a>
 800e5f0:	4b07      	ldr	r3, [pc, #28]	; (800e610 <_dtoa_r+0xbe0>)
 800e5f2:	f7ff ba92 	b.w	800db1a <_dtoa_r+0xea>
 800e5f6:	9b01      	ldr	r3, [sp, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	dcb5      	bgt.n	800e568 <_dtoa_r+0xb38>
 800e5fc:	9b07      	ldr	r3, [sp, #28]
 800e5fe:	2b02      	cmp	r3, #2
 800e600:	f73f aeb1 	bgt.w	800e366 <_dtoa_r+0x936>
 800e604:	e7b0      	b.n	800e568 <_dtoa_r+0xb38>
 800e606:	bf00      	nop
 800e608:	08011fa8 	.word	0x08011fa8
 800e60c:	08011f08 	.word	0x08011f08
 800e610:	08011f2c 	.word	0x08011f2c

0800e614 <_free_r>:
 800e614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e616:	2900      	cmp	r1, #0
 800e618:	d044      	beq.n	800e6a4 <_free_r+0x90>
 800e61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e61e:	9001      	str	r0, [sp, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	f1a1 0404 	sub.w	r4, r1, #4
 800e626:	bfb8      	it	lt
 800e628:	18e4      	addlt	r4, r4, r3
 800e62a:	f000 f8e7 	bl	800e7fc <__malloc_lock>
 800e62e:	4a1e      	ldr	r2, [pc, #120]	; (800e6a8 <_free_r+0x94>)
 800e630:	9801      	ldr	r0, [sp, #4]
 800e632:	6813      	ldr	r3, [r2, #0]
 800e634:	b933      	cbnz	r3, 800e644 <_free_r+0x30>
 800e636:	6063      	str	r3, [r4, #4]
 800e638:	6014      	str	r4, [r2, #0]
 800e63a:	b003      	add	sp, #12
 800e63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e640:	f000 b8e2 	b.w	800e808 <__malloc_unlock>
 800e644:	42a3      	cmp	r3, r4
 800e646:	d908      	bls.n	800e65a <_free_r+0x46>
 800e648:	6825      	ldr	r5, [r4, #0]
 800e64a:	1961      	adds	r1, r4, r5
 800e64c:	428b      	cmp	r3, r1
 800e64e:	bf01      	itttt	eq
 800e650:	6819      	ldreq	r1, [r3, #0]
 800e652:	685b      	ldreq	r3, [r3, #4]
 800e654:	1949      	addeq	r1, r1, r5
 800e656:	6021      	streq	r1, [r4, #0]
 800e658:	e7ed      	b.n	800e636 <_free_r+0x22>
 800e65a:	461a      	mov	r2, r3
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	b10b      	cbz	r3, 800e664 <_free_r+0x50>
 800e660:	42a3      	cmp	r3, r4
 800e662:	d9fa      	bls.n	800e65a <_free_r+0x46>
 800e664:	6811      	ldr	r1, [r2, #0]
 800e666:	1855      	adds	r5, r2, r1
 800e668:	42a5      	cmp	r5, r4
 800e66a:	d10b      	bne.n	800e684 <_free_r+0x70>
 800e66c:	6824      	ldr	r4, [r4, #0]
 800e66e:	4421      	add	r1, r4
 800e670:	1854      	adds	r4, r2, r1
 800e672:	42a3      	cmp	r3, r4
 800e674:	6011      	str	r1, [r2, #0]
 800e676:	d1e0      	bne.n	800e63a <_free_r+0x26>
 800e678:	681c      	ldr	r4, [r3, #0]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	6053      	str	r3, [r2, #4]
 800e67e:	440c      	add	r4, r1
 800e680:	6014      	str	r4, [r2, #0]
 800e682:	e7da      	b.n	800e63a <_free_r+0x26>
 800e684:	d902      	bls.n	800e68c <_free_r+0x78>
 800e686:	230c      	movs	r3, #12
 800e688:	6003      	str	r3, [r0, #0]
 800e68a:	e7d6      	b.n	800e63a <_free_r+0x26>
 800e68c:	6825      	ldr	r5, [r4, #0]
 800e68e:	1961      	adds	r1, r4, r5
 800e690:	428b      	cmp	r3, r1
 800e692:	bf04      	itt	eq
 800e694:	6819      	ldreq	r1, [r3, #0]
 800e696:	685b      	ldreq	r3, [r3, #4]
 800e698:	6063      	str	r3, [r4, #4]
 800e69a:	bf04      	itt	eq
 800e69c:	1949      	addeq	r1, r1, r5
 800e69e:	6021      	streq	r1, [r4, #0]
 800e6a0:	6054      	str	r4, [r2, #4]
 800e6a2:	e7ca      	b.n	800e63a <_free_r+0x26>
 800e6a4:	b003      	add	sp, #12
 800e6a6:	bd30      	pop	{r4, r5, pc}
 800e6a8:	200051e0 	.word	0x200051e0

0800e6ac <malloc>:
 800e6ac:	4b02      	ldr	r3, [pc, #8]	; (800e6b8 <malloc+0xc>)
 800e6ae:	4601      	mov	r1, r0
 800e6b0:	6818      	ldr	r0, [r3, #0]
 800e6b2:	f000 b823 	b.w	800e6fc <_malloc_r>
 800e6b6:	bf00      	nop
 800e6b8:	20000068 	.word	0x20000068

0800e6bc <sbrk_aligned>:
 800e6bc:	b570      	push	{r4, r5, r6, lr}
 800e6be:	4e0e      	ldr	r6, [pc, #56]	; (800e6f8 <sbrk_aligned+0x3c>)
 800e6c0:	460c      	mov	r4, r1
 800e6c2:	6831      	ldr	r1, [r6, #0]
 800e6c4:	4605      	mov	r5, r0
 800e6c6:	b911      	cbnz	r1, 800e6ce <sbrk_aligned+0x12>
 800e6c8:	f000 fe40 	bl	800f34c <_sbrk_r>
 800e6cc:	6030      	str	r0, [r6, #0]
 800e6ce:	4621      	mov	r1, r4
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f000 fe3b 	bl	800f34c <_sbrk_r>
 800e6d6:	1c43      	adds	r3, r0, #1
 800e6d8:	d00a      	beq.n	800e6f0 <sbrk_aligned+0x34>
 800e6da:	1cc4      	adds	r4, r0, #3
 800e6dc:	f024 0403 	bic.w	r4, r4, #3
 800e6e0:	42a0      	cmp	r0, r4
 800e6e2:	d007      	beq.n	800e6f4 <sbrk_aligned+0x38>
 800e6e4:	1a21      	subs	r1, r4, r0
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	f000 fe30 	bl	800f34c <_sbrk_r>
 800e6ec:	3001      	adds	r0, #1
 800e6ee:	d101      	bne.n	800e6f4 <sbrk_aligned+0x38>
 800e6f0:	f04f 34ff 	mov.w	r4, #4294967295
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	bd70      	pop	{r4, r5, r6, pc}
 800e6f8:	200051e4 	.word	0x200051e4

0800e6fc <_malloc_r>:
 800e6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e700:	1ccd      	adds	r5, r1, #3
 800e702:	f025 0503 	bic.w	r5, r5, #3
 800e706:	3508      	adds	r5, #8
 800e708:	2d0c      	cmp	r5, #12
 800e70a:	bf38      	it	cc
 800e70c:	250c      	movcc	r5, #12
 800e70e:	2d00      	cmp	r5, #0
 800e710:	4607      	mov	r7, r0
 800e712:	db01      	blt.n	800e718 <_malloc_r+0x1c>
 800e714:	42a9      	cmp	r1, r5
 800e716:	d905      	bls.n	800e724 <_malloc_r+0x28>
 800e718:	230c      	movs	r3, #12
 800e71a:	603b      	str	r3, [r7, #0]
 800e71c:	2600      	movs	r6, #0
 800e71e:	4630      	mov	r0, r6
 800e720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e724:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e7f8 <_malloc_r+0xfc>
 800e728:	f000 f868 	bl	800e7fc <__malloc_lock>
 800e72c:	f8d8 3000 	ldr.w	r3, [r8]
 800e730:	461c      	mov	r4, r3
 800e732:	bb5c      	cbnz	r4, 800e78c <_malloc_r+0x90>
 800e734:	4629      	mov	r1, r5
 800e736:	4638      	mov	r0, r7
 800e738:	f7ff ffc0 	bl	800e6bc <sbrk_aligned>
 800e73c:	1c43      	adds	r3, r0, #1
 800e73e:	4604      	mov	r4, r0
 800e740:	d155      	bne.n	800e7ee <_malloc_r+0xf2>
 800e742:	f8d8 4000 	ldr.w	r4, [r8]
 800e746:	4626      	mov	r6, r4
 800e748:	2e00      	cmp	r6, #0
 800e74a:	d145      	bne.n	800e7d8 <_malloc_r+0xdc>
 800e74c:	2c00      	cmp	r4, #0
 800e74e:	d048      	beq.n	800e7e2 <_malloc_r+0xe6>
 800e750:	6823      	ldr	r3, [r4, #0]
 800e752:	4631      	mov	r1, r6
 800e754:	4638      	mov	r0, r7
 800e756:	eb04 0903 	add.w	r9, r4, r3
 800e75a:	f000 fdf7 	bl	800f34c <_sbrk_r>
 800e75e:	4581      	cmp	r9, r0
 800e760:	d13f      	bne.n	800e7e2 <_malloc_r+0xe6>
 800e762:	6821      	ldr	r1, [r4, #0]
 800e764:	1a6d      	subs	r5, r5, r1
 800e766:	4629      	mov	r1, r5
 800e768:	4638      	mov	r0, r7
 800e76a:	f7ff ffa7 	bl	800e6bc <sbrk_aligned>
 800e76e:	3001      	adds	r0, #1
 800e770:	d037      	beq.n	800e7e2 <_malloc_r+0xe6>
 800e772:	6823      	ldr	r3, [r4, #0]
 800e774:	442b      	add	r3, r5
 800e776:	6023      	str	r3, [r4, #0]
 800e778:	f8d8 3000 	ldr.w	r3, [r8]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d038      	beq.n	800e7f2 <_malloc_r+0xf6>
 800e780:	685a      	ldr	r2, [r3, #4]
 800e782:	42a2      	cmp	r2, r4
 800e784:	d12b      	bne.n	800e7de <_malloc_r+0xe2>
 800e786:	2200      	movs	r2, #0
 800e788:	605a      	str	r2, [r3, #4]
 800e78a:	e00f      	b.n	800e7ac <_malloc_r+0xb0>
 800e78c:	6822      	ldr	r2, [r4, #0]
 800e78e:	1b52      	subs	r2, r2, r5
 800e790:	d41f      	bmi.n	800e7d2 <_malloc_r+0xd6>
 800e792:	2a0b      	cmp	r2, #11
 800e794:	d917      	bls.n	800e7c6 <_malloc_r+0xca>
 800e796:	1961      	adds	r1, r4, r5
 800e798:	42a3      	cmp	r3, r4
 800e79a:	6025      	str	r5, [r4, #0]
 800e79c:	bf18      	it	ne
 800e79e:	6059      	strne	r1, [r3, #4]
 800e7a0:	6863      	ldr	r3, [r4, #4]
 800e7a2:	bf08      	it	eq
 800e7a4:	f8c8 1000 	streq.w	r1, [r8]
 800e7a8:	5162      	str	r2, [r4, r5]
 800e7aa:	604b      	str	r3, [r1, #4]
 800e7ac:	4638      	mov	r0, r7
 800e7ae:	f104 060b 	add.w	r6, r4, #11
 800e7b2:	f000 f829 	bl	800e808 <__malloc_unlock>
 800e7b6:	f026 0607 	bic.w	r6, r6, #7
 800e7ba:	1d23      	adds	r3, r4, #4
 800e7bc:	1af2      	subs	r2, r6, r3
 800e7be:	d0ae      	beq.n	800e71e <_malloc_r+0x22>
 800e7c0:	1b9b      	subs	r3, r3, r6
 800e7c2:	50a3      	str	r3, [r4, r2]
 800e7c4:	e7ab      	b.n	800e71e <_malloc_r+0x22>
 800e7c6:	42a3      	cmp	r3, r4
 800e7c8:	6862      	ldr	r2, [r4, #4]
 800e7ca:	d1dd      	bne.n	800e788 <_malloc_r+0x8c>
 800e7cc:	f8c8 2000 	str.w	r2, [r8]
 800e7d0:	e7ec      	b.n	800e7ac <_malloc_r+0xb0>
 800e7d2:	4623      	mov	r3, r4
 800e7d4:	6864      	ldr	r4, [r4, #4]
 800e7d6:	e7ac      	b.n	800e732 <_malloc_r+0x36>
 800e7d8:	4634      	mov	r4, r6
 800e7da:	6876      	ldr	r6, [r6, #4]
 800e7dc:	e7b4      	b.n	800e748 <_malloc_r+0x4c>
 800e7de:	4613      	mov	r3, r2
 800e7e0:	e7cc      	b.n	800e77c <_malloc_r+0x80>
 800e7e2:	230c      	movs	r3, #12
 800e7e4:	603b      	str	r3, [r7, #0]
 800e7e6:	4638      	mov	r0, r7
 800e7e8:	f000 f80e 	bl	800e808 <__malloc_unlock>
 800e7ec:	e797      	b.n	800e71e <_malloc_r+0x22>
 800e7ee:	6025      	str	r5, [r4, #0]
 800e7f0:	e7dc      	b.n	800e7ac <_malloc_r+0xb0>
 800e7f2:	605b      	str	r3, [r3, #4]
 800e7f4:	deff      	udf	#255	; 0xff
 800e7f6:	bf00      	nop
 800e7f8:	200051e0 	.word	0x200051e0

0800e7fc <__malloc_lock>:
 800e7fc:	4801      	ldr	r0, [pc, #4]	; (800e804 <__malloc_lock+0x8>)
 800e7fe:	f7ff b874 	b.w	800d8ea <__retarget_lock_acquire_recursive>
 800e802:	bf00      	nop
 800e804:	200051dc 	.word	0x200051dc

0800e808 <__malloc_unlock>:
 800e808:	4801      	ldr	r0, [pc, #4]	; (800e810 <__malloc_unlock+0x8>)
 800e80a:	f7ff b86f 	b.w	800d8ec <__retarget_lock_release_recursive>
 800e80e:	bf00      	nop
 800e810:	200051dc 	.word	0x200051dc

0800e814 <_Balloc>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	69c6      	ldr	r6, [r0, #28]
 800e818:	4604      	mov	r4, r0
 800e81a:	460d      	mov	r5, r1
 800e81c:	b976      	cbnz	r6, 800e83c <_Balloc+0x28>
 800e81e:	2010      	movs	r0, #16
 800e820:	f7ff ff44 	bl	800e6ac <malloc>
 800e824:	4602      	mov	r2, r0
 800e826:	61e0      	str	r0, [r4, #28]
 800e828:	b920      	cbnz	r0, 800e834 <_Balloc+0x20>
 800e82a:	4b18      	ldr	r3, [pc, #96]	; (800e88c <_Balloc+0x78>)
 800e82c:	4818      	ldr	r0, [pc, #96]	; (800e890 <_Balloc+0x7c>)
 800e82e:	216b      	movs	r1, #107	; 0x6b
 800e830:	f000 fd9c 	bl	800f36c <__assert_func>
 800e834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e838:	6006      	str	r6, [r0, #0]
 800e83a:	60c6      	str	r6, [r0, #12]
 800e83c:	69e6      	ldr	r6, [r4, #28]
 800e83e:	68f3      	ldr	r3, [r6, #12]
 800e840:	b183      	cbz	r3, 800e864 <_Balloc+0x50>
 800e842:	69e3      	ldr	r3, [r4, #28]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e84a:	b9b8      	cbnz	r0, 800e87c <_Balloc+0x68>
 800e84c:	2101      	movs	r1, #1
 800e84e:	fa01 f605 	lsl.w	r6, r1, r5
 800e852:	1d72      	adds	r2, r6, #5
 800e854:	0092      	lsls	r2, r2, #2
 800e856:	4620      	mov	r0, r4
 800e858:	f000 fda6 	bl	800f3a8 <_calloc_r>
 800e85c:	b160      	cbz	r0, 800e878 <_Balloc+0x64>
 800e85e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e862:	e00e      	b.n	800e882 <_Balloc+0x6e>
 800e864:	2221      	movs	r2, #33	; 0x21
 800e866:	2104      	movs	r1, #4
 800e868:	4620      	mov	r0, r4
 800e86a:	f000 fd9d 	bl	800f3a8 <_calloc_r>
 800e86e:	69e3      	ldr	r3, [r4, #28]
 800e870:	60f0      	str	r0, [r6, #12]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1e4      	bne.n	800e842 <_Balloc+0x2e>
 800e878:	2000      	movs	r0, #0
 800e87a:	bd70      	pop	{r4, r5, r6, pc}
 800e87c:	6802      	ldr	r2, [r0, #0]
 800e87e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e882:	2300      	movs	r3, #0
 800e884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e888:	e7f7      	b.n	800e87a <_Balloc+0x66>
 800e88a:	bf00      	nop
 800e88c:	08011f39 	.word	0x08011f39
 800e890:	08011fb9 	.word	0x08011fb9

0800e894 <_Bfree>:
 800e894:	b570      	push	{r4, r5, r6, lr}
 800e896:	69c6      	ldr	r6, [r0, #28]
 800e898:	4605      	mov	r5, r0
 800e89a:	460c      	mov	r4, r1
 800e89c:	b976      	cbnz	r6, 800e8bc <_Bfree+0x28>
 800e89e:	2010      	movs	r0, #16
 800e8a0:	f7ff ff04 	bl	800e6ac <malloc>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	61e8      	str	r0, [r5, #28]
 800e8a8:	b920      	cbnz	r0, 800e8b4 <_Bfree+0x20>
 800e8aa:	4b09      	ldr	r3, [pc, #36]	; (800e8d0 <_Bfree+0x3c>)
 800e8ac:	4809      	ldr	r0, [pc, #36]	; (800e8d4 <_Bfree+0x40>)
 800e8ae:	218f      	movs	r1, #143	; 0x8f
 800e8b0:	f000 fd5c 	bl	800f36c <__assert_func>
 800e8b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8b8:	6006      	str	r6, [r0, #0]
 800e8ba:	60c6      	str	r6, [r0, #12]
 800e8bc:	b13c      	cbz	r4, 800e8ce <_Bfree+0x3a>
 800e8be:	69eb      	ldr	r3, [r5, #28]
 800e8c0:	6862      	ldr	r2, [r4, #4]
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8c8:	6021      	str	r1, [r4, #0]
 800e8ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8ce:	bd70      	pop	{r4, r5, r6, pc}
 800e8d0:	08011f39 	.word	0x08011f39
 800e8d4:	08011fb9 	.word	0x08011fb9

0800e8d8 <__multadd>:
 800e8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8dc:	690d      	ldr	r5, [r1, #16]
 800e8de:	4607      	mov	r7, r0
 800e8e0:	460c      	mov	r4, r1
 800e8e2:	461e      	mov	r6, r3
 800e8e4:	f101 0c14 	add.w	ip, r1, #20
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	f8dc 3000 	ldr.w	r3, [ip]
 800e8ee:	b299      	uxth	r1, r3
 800e8f0:	fb02 6101 	mla	r1, r2, r1, r6
 800e8f4:	0c1e      	lsrs	r6, r3, #16
 800e8f6:	0c0b      	lsrs	r3, r1, #16
 800e8f8:	fb02 3306 	mla	r3, r2, r6, r3
 800e8fc:	b289      	uxth	r1, r1
 800e8fe:	3001      	adds	r0, #1
 800e900:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e904:	4285      	cmp	r5, r0
 800e906:	f84c 1b04 	str.w	r1, [ip], #4
 800e90a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e90e:	dcec      	bgt.n	800e8ea <__multadd+0x12>
 800e910:	b30e      	cbz	r6, 800e956 <__multadd+0x7e>
 800e912:	68a3      	ldr	r3, [r4, #8]
 800e914:	42ab      	cmp	r3, r5
 800e916:	dc19      	bgt.n	800e94c <__multadd+0x74>
 800e918:	6861      	ldr	r1, [r4, #4]
 800e91a:	4638      	mov	r0, r7
 800e91c:	3101      	adds	r1, #1
 800e91e:	f7ff ff79 	bl	800e814 <_Balloc>
 800e922:	4680      	mov	r8, r0
 800e924:	b928      	cbnz	r0, 800e932 <__multadd+0x5a>
 800e926:	4602      	mov	r2, r0
 800e928:	4b0c      	ldr	r3, [pc, #48]	; (800e95c <__multadd+0x84>)
 800e92a:	480d      	ldr	r0, [pc, #52]	; (800e960 <__multadd+0x88>)
 800e92c:	21ba      	movs	r1, #186	; 0xba
 800e92e:	f000 fd1d 	bl	800f36c <__assert_func>
 800e932:	6922      	ldr	r2, [r4, #16]
 800e934:	3202      	adds	r2, #2
 800e936:	f104 010c 	add.w	r1, r4, #12
 800e93a:	0092      	lsls	r2, r2, #2
 800e93c:	300c      	adds	r0, #12
 800e93e:	f7fe ffde 	bl	800d8fe <memcpy>
 800e942:	4621      	mov	r1, r4
 800e944:	4638      	mov	r0, r7
 800e946:	f7ff ffa5 	bl	800e894 <_Bfree>
 800e94a:	4644      	mov	r4, r8
 800e94c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e950:	3501      	adds	r5, #1
 800e952:	615e      	str	r6, [r3, #20]
 800e954:	6125      	str	r5, [r4, #16]
 800e956:	4620      	mov	r0, r4
 800e958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95c:	08011fa8 	.word	0x08011fa8
 800e960:	08011fb9 	.word	0x08011fb9

0800e964 <__hi0bits>:
 800e964:	0c03      	lsrs	r3, r0, #16
 800e966:	041b      	lsls	r3, r3, #16
 800e968:	b9d3      	cbnz	r3, 800e9a0 <__hi0bits+0x3c>
 800e96a:	0400      	lsls	r0, r0, #16
 800e96c:	2310      	movs	r3, #16
 800e96e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e972:	bf04      	itt	eq
 800e974:	0200      	lsleq	r0, r0, #8
 800e976:	3308      	addeq	r3, #8
 800e978:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e97c:	bf04      	itt	eq
 800e97e:	0100      	lsleq	r0, r0, #4
 800e980:	3304      	addeq	r3, #4
 800e982:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e986:	bf04      	itt	eq
 800e988:	0080      	lsleq	r0, r0, #2
 800e98a:	3302      	addeq	r3, #2
 800e98c:	2800      	cmp	r0, #0
 800e98e:	db05      	blt.n	800e99c <__hi0bits+0x38>
 800e990:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e994:	f103 0301 	add.w	r3, r3, #1
 800e998:	bf08      	it	eq
 800e99a:	2320      	moveq	r3, #32
 800e99c:	4618      	mov	r0, r3
 800e99e:	4770      	bx	lr
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	e7e4      	b.n	800e96e <__hi0bits+0xa>

0800e9a4 <__lo0bits>:
 800e9a4:	6803      	ldr	r3, [r0, #0]
 800e9a6:	f013 0207 	ands.w	r2, r3, #7
 800e9aa:	d00c      	beq.n	800e9c6 <__lo0bits+0x22>
 800e9ac:	07d9      	lsls	r1, r3, #31
 800e9ae:	d422      	bmi.n	800e9f6 <__lo0bits+0x52>
 800e9b0:	079a      	lsls	r2, r3, #30
 800e9b2:	bf49      	itett	mi
 800e9b4:	085b      	lsrmi	r3, r3, #1
 800e9b6:	089b      	lsrpl	r3, r3, #2
 800e9b8:	6003      	strmi	r3, [r0, #0]
 800e9ba:	2201      	movmi	r2, #1
 800e9bc:	bf5c      	itt	pl
 800e9be:	6003      	strpl	r3, [r0, #0]
 800e9c0:	2202      	movpl	r2, #2
 800e9c2:	4610      	mov	r0, r2
 800e9c4:	4770      	bx	lr
 800e9c6:	b299      	uxth	r1, r3
 800e9c8:	b909      	cbnz	r1, 800e9ce <__lo0bits+0x2a>
 800e9ca:	0c1b      	lsrs	r3, r3, #16
 800e9cc:	2210      	movs	r2, #16
 800e9ce:	b2d9      	uxtb	r1, r3
 800e9d0:	b909      	cbnz	r1, 800e9d6 <__lo0bits+0x32>
 800e9d2:	3208      	adds	r2, #8
 800e9d4:	0a1b      	lsrs	r3, r3, #8
 800e9d6:	0719      	lsls	r1, r3, #28
 800e9d8:	bf04      	itt	eq
 800e9da:	091b      	lsreq	r3, r3, #4
 800e9dc:	3204      	addeq	r2, #4
 800e9de:	0799      	lsls	r1, r3, #30
 800e9e0:	bf04      	itt	eq
 800e9e2:	089b      	lsreq	r3, r3, #2
 800e9e4:	3202      	addeq	r2, #2
 800e9e6:	07d9      	lsls	r1, r3, #31
 800e9e8:	d403      	bmi.n	800e9f2 <__lo0bits+0x4e>
 800e9ea:	085b      	lsrs	r3, r3, #1
 800e9ec:	f102 0201 	add.w	r2, r2, #1
 800e9f0:	d003      	beq.n	800e9fa <__lo0bits+0x56>
 800e9f2:	6003      	str	r3, [r0, #0]
 800e9f4:	e7e5      	b.n	800e9c2 <__lo0bits+0x1e>
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	e7e3      	b.n	800e9c2 <__lo0bits+0x1e>
 800e9fa:	2220      	movs	r2, #32
 800e9fc:	e7e1      	b.n	800e9c2 <__lo0bits+0x1e>
	...

0800ea00 <__i2b>:
 800ea00:	b510      	push	{r4, lr}
 800ea02:	460c      	mov	r4, r1
 800ea04:	2101      	movs	r1, #1
 800ea06:	f7ff ff05 	bl	800e814 <_Balloc>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	b928      	cbnz	r0, 800ea1a <__i2b+0x1a>
 800ea0e:	4b05      	ldr	r3, [pc, #20]	; (800ea24 <__i2b+0x24>)
 800ea10:	4805      	ldr	r0, [pc, #20]	; (800ea28 <__i2b+0x28>)
 800ea12:	f240 1145 	movw	r1, #325	; 0x145
 800ea16:	f000 fca9 	bl	800f36c <__assert_func>
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	6144      	str	r4, [r0, #20]
 800ea1e:	6103      	str	r3, [r0, #16]
 800ea20:	bd10      	pop	{r4, pc}
 800ea22:	bf00      	nop
 800ea24:	08011fa8 	.word	0x08011fa8
 800ea28:	08011fb9 	.word	0x08011fb9

0800ea2c <__multiply>:
 800ea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea30:	4691      	mov	r9, r2
 800ea32:	690a      	ldr	r2, [r1, #16]
 800ea34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	bfb8      	it	lt
 800ea3c:	460b      	movlt	r3, r1
 800ea3e:	460c      	mov	r4, r1
 800ea40:	bfbc      	itt	lt
 800ea42:	464c      	movlt	r4, r9
 800ea44:	4699      	movlt	r9, r3
 800ea46:	6927      	ldr	r7, [r4, #16]
 800ea48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea4c:	68a3      	ldr	r3, [r4, #8]
 800ea4e:	6861      	ldr	r1, [r4, #4]
 800ea50:	eb07 060a 	add.w	r6, r7, sl
 800ea54:	42b3      	cmp	r3, r6
 800ea56:	b085      	sub	sp, #20
 800ea58:	bfb8      	it	lt
 800ea5a:	3101      	addlt	r1, #1
 800ea5c:	f7ff feda 	bl	800e814 <_Balloc>
 800ea60:	b930      	cbnz	r0, 800ea70 <__multiply+0x44>
 800ea62:	4602      	mov	r2, r0
 800ea64:	4b44      	ldr	r3, [pc, #272]	; (800eb78 <__multiply+0x14c>)
 800ea66:	4845      	ldr	r0, [pc, #276]	; (800eb7c <__multiply+0x150>)
 800ea68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ea6c:	f000 fc7e 	bl	800f36c <__assert_func>
 800ea70:	f100 0514 	add.w	r5, r0, #20
 800ea74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea78:	462b      	mov	r3, r5
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	4543      	cmp	r3, r8
 800ea7e:	d321      	bcc.n	800eac4 <__multiply+0x98>
 800ea80:	f104 0314 	add.w	r3, r4, #20
 800ea84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea88:	f109 0314 	add.w	r3, r9, #20
 800ea8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea90:	9202      	str	r2, [sp, #8]
 800ea92:	1b3a      	subs	r2, r7, r4
 800ea94:	3a15      	subs	r2, #21
 800ea96:	f022 0203 	bic.w	r2, r2, #3
 800ea9a:	3204      	adds	r2, #4
 800ea9c:	f104 0115 	add.w	r1, r4, #21
 800eaa0:	428f      	cmp	r7, r1
 800eaa2:	bf38      	it	cc
 800eaa4:	2204      	movcc	r2, #4
 800eaa6:	9201      	str	r2, [sp, #4]
 800eaa8:	9a02      	ldr	r2, [sp, #8]
 800eaaa:	9303      	str	r3, [sp, #12]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d80c      	bhi.n	800eaca <__multiply+0x9e>
 800eab0:	2e00      	cmp	r6, #0
 800eab2:	dd03      	ble.n	800eabc <__multiply+0x90>
 800eab4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d05b      	beq.n	800eb74 <__multiply+0x148>
 800eabc:	6106      	str	r6, [r0, #16]
 800eabe:	b005      	add	sp, #20
 800eac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac4:	f843 2b04 	str.w	r2, [r3], #4
 800eac8:	e7d8      	b.n	800ea7c <__multiply+0x50>
 800eaca:	f8b3 a000 	ldrh.w	sl, [r3]
 800eace:	f1ba 0f00 	cmp.w	sl, #0
 800ead2:	d024      	beq.n	800eb1e <__multiply+0xf2>
 800ead4:	f104 0e14 	add.w	lr, r4, #20
 800ead8:	46a9      	mov	r9, r5
 800eada:	f04f 0c00 	mov.w	ip, #0
 800eade:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eae2:	f8d9 1000 	ldr.w	r1, [r9]
 800eae6:	fa1f fb82 	uxth.w	fp, r2
 800eaea:	b289      	uxth	r1, r1
 800eaec:	fb0a 110b 	mla	r1, sl, fp, r1
 800eaf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eaf4:	f8d9 2000 	ldr.w	r2, [r9]
 800eaf8:	4461      	add	r1, ip
 800eafa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eafe:	fb0a c20b 	mla	r2, sl, fp, ip
 800eb02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eb06:	b289      	uxth	r1, r1
 800eb08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb0c:	4577      	cmp	r7, lr
 800eb0e:	f849 1b04 	str.w	r1, [r9], #4
 800eb12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb16:	d8e2      	bhi.n	800eade <__multiply+0xb2>
 800eb18:	9a01      	ldr	r2, [sp, #4]
 800eb1a:	f845 c002 	str.w	ip, [r5, r2]
 800eb1e:	9a03      	ldr	r2, [sp, #12]
 800eb20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb24:	3304      	adds	r3, #4
 800eb26:	f1b9 0f00 	cmp.w	r9, #0
 800eb2a:	d021      	beq.n	800eb70 <__multiply+0x144>
 800eb2c:	6829      	ldr	r1, [r5, #0]
 800eb2e:	f104 0c14 	add.w	ip, r4, #20
 800eb32:	46ae      	mov	lr, r5
 800eb34:	f04f 0a00 	mov.w	sl, #0
 800eb38:	f8bc b000 	ldrh.w	fp, [ip]
 800eb3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb40:	fb09 220b 	mla	r2, r9, fp, r2
 800eb44:	4452      	add	r2, sl
 800eb46:	b289      	uxth	r1, r1
 800eb48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb4c:	f84e 1b04 	str.w	r1, [lr], #4
 800eb50:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eb54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb58:	f8be 1000 	ldrh.w	r1, [lr]
 800eb5c:	fb09 110a 	mla	r1, r9, sl, r1
 800eb60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800eb64:	4567      	cmp	r7, ip
 800eb66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb6a:	d8e5      	bhi.n	800eb38 <__multiply+0x10c>
 800eb6c:	9a01      	ldr	r2, [sp, #4]
 800eb6e:	50a9      	str	r1, [r5, r2]
 800eb70:	3504      	adds	r5, #4
 800eb72:	e799      	b.n	800eaa8 <__multiply+0x7c>
 800eb74:	3e01      	subs	r6, #1
 800eb76:	e79b      	b.n	800eab0 <__multiply+0x84>
 800eb78:	08011fa8 	.word	0x08011fa8
 800eb7c:	08011fb9 	.word	0x08011fb9

0800eb80 <__pow5mult>:
 800eb80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb84:	4615      	mov	r5, r2
 800eb86:	f012 0203 	ands.w	r2, r2, #3
 800eb8a:	4606      	mov	r6, r0
 800eb8c:	460f      	mov	r7, r1
 800eb8e:	d007      	beq.n	800eba0 <__pow5mult+0x20>
 800eb90:	4c25      	ldr	r4, [pc, #148]	; (800ec28 <__pow5mult+0xa8>)
 800eb92:	3a01      	subs	r2, #1
 800eb94:	2300      	movs	r3, #0
 800eb96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb9a:	f7ff fe9d 	bl	800e8d8 <__multadd>
 800eb9e:	4607      	mov	r7, r0
 800eba0:	10ad      	asrs	r5, r5, #2
 800eba2:	d03d      	beq.n	800ec20 <__pow5mult+0xa0>
 800eba4:	69f4      	ldr	r4, [r6, #28]
 800eba6:	b97c      	cbnz	r4, 800ebc8 <__pow5mult+0x48>
 800eba8:	2010      	movs	r0, #16
 800ebaa:	f7ff fd7f 	bl	800e6ac <malloc>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	61f0      	str	r0, [r6, #28]
 800ebb2:	b928      	cbnz	r0, 800ebc0 <__pow5mult+0x40>
 800ebb4:	4b1d      	ldr	r3, [pc, #116]	; (800ec2c <__pow5mult+0xac>)
 800ebb6:	481e      	ldr	r0, [pc, #120]	; (800ec30 <__pow5mult+0xb0>)
 800ebb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ebbc:	f000 fbd6 	bl	800f36c <__assert_func>
 800ebc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebc4:	6004      	str	r4, [r0, #0]
 800ebc6:	60c4      	str	r4, [r0, #12]
 800ebc8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ebcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebd0:	b94c      	cbnz	r4, 800ebe6 <__pow5mult+0x66>
 800ebd2:	f240 2171 	movw	r1, #625	; 0x271
 800ebd6:	4630      	mov	r0, r6
 800ebd8:	f7ff ff12 	bl	800ea00 <__i2b>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebe2:	4604      	mov	r4, r0
 800ebe4:	6003      	str	r3, [r0, #0]
 800ebe6:	f04f 0900 	mov.w	r9, #0
 800ebea:	07eb      	lsls	r3, r5, #31
 800ebec:	d50a      	bpl.n	800ec04 <__pow5mult+0x84>
 800ebee:	4639      	mov	r1, r7
 800ebf0:	4622      	mov	r2, r4
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f7ff ff1a 	bl	800ea2c <__multiply>
 800ebf8:	4639      	mov	r1, r7
 800ebfa:	4680      	mov	r8, r0
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	f7ff fe49 	bl	800e894 <_Bfree>
 800ec02:	4647      	mov	r7, r8
 800ec04:	106d      	asrs	r5, r5, #1
 800ec06:	d00b      	beq.n	800ec20 <__pow5mult+0xa0>
 800ec08:	6820      	ldr	r0, [r4, #0]
 800ec0a:	b938      	cbnz	r0, 800ec1c <__pow5mult+0x9c>
 800ec0c:	4622      	mov	r2, r4
 800ec0e:	4621      	mov	r1, r4
 800ec10:	4630      	mov	r0, r6
 800ec12:	f7ff ff0b 	bl	800ea2c <__multiply>
 800ec16:	6020      	str	r0, [r4, #0]
 800ec18:	f8c0 9000 	str.w	r9, [r0]
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	e7e4      	b.n	800ebea <__pow5mult+0x6a>
 800ec20:	4638      	mov	r0, r7
 800ec22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec26:	bf00      	nop
 800ec28:	08012108 	.word	0x08012108
 800ec2c:	08011f39 	.word	0x08011f39
 800ec30:	08011fb9 	.word	0x08011fb9

0800ec34 <__lshift>:
 800ec34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec38:	460c      	mov	r4, r1
 800ec3a:	6849      	ldr	r1, [r1, #4]
 800ec3c:	6923      	ldr	r3, [r4, #16]
 800ec3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec42:	68a3      	ldr	r3, [r4, #8]
 800ec44:	4607      	mov	r7, r0
 800ec46:	4691      	mov	r9, r2
 800ec48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec4c:	f108 0601 	add.w	r6, r8, #1
 800ec50:	42b3      	cmp	r3, r6
 800ec52:	db0b      	blt.n	800ec6c <__lshift+0x38>
 800ec54:	4638      	mov	r0, r7
 800ec56:	f7ff fddd 	bl	800e814 <_Balloc>
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	b948      	cbnz	r0, 800ec72 <__lshift+0x3e>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	4b28      	ldr	r3, [pc, #160]	; (800ed04 <__lshift+0xd0>)
 800ec62:	4829      	ldr	r0, [pc, #164]	; (800ed08 <__lshift+0xd4>)
 800ec64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ec68:	f000 fb80 	bl	800f36c <__assert_func>
 800ec6c:	3101      	adds	r1, #1
 800ec6e:	005b      	lsls	r3, r3, #1
 800ec70:	e7ee      	b.n	800ec50 <__lshift+0x1c>
 800ec72:	2300      	movs	r3, #0
 800ec74:	f100 0114 	add.w	r1, r0, #20
 800ec78:	f100 0210 	add.w	r2, r0, #16
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	4553      	cmp	r3, sl
 800ec80:	db33      	blt.n	800ecea <__lshift+0xb6>
 800ec82:	6920      	ldr	r0, [r4, #16]
 800ec84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec88:	f104 0314 	add.w	r3, r4, #20
 800ec8c:	f019 091f 	ands.w	r9, r9, #31
 800ec90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec98:	d02b      	beq.n	800ecf2 <__lshift+0xbe>
 800ec9a:	f1c9 0e20 	rsb	lr, r9, #32
 800ec9e:	468a      	mov	sl, r1
 800eca0:	2200      	movs	r2, #0
 800eca2:	6818      	ldr	r0, [r3, #0]
 800eca4:	fa00 f009 	lsl.w	r0, r0, r9
 800eca8:	4310      	orrs	r0, r2
 800ecaa:	f84a 0b04 	str.w	r0, [sl], #4
 800ecae:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecb2:	459c      	cmp	ip, r3
 800ecb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ecb8:	d8f3      	bhi.n	800eca2 <__lshift+0x6e>
 800ecba:	ebac 0304 	sub.w	r3, ip, r4
 800ecbe:	3b15      	subs	r3, #21
 800ecc0:	f023 0303 	bic.w	r3, r3, #3
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	f104 0015 	add.w	r0, r4, #21
 800ecca:	4584      	cmp	ip, r0
 800eccc:	bf38      	it	cc
 800ecce:	2304      	movcc	r3, #4
 800ecd0:	50ca      	str	r2, [r1, r3]
 800ecd2:	b10a      	cbz	r2, 800ecd8 <__lshift+0xa4>
 800ecd4:	f108 0602 	add.w	r6, r8, #2
 800ecd8:	3e01      	subs	r6, #1
 800ecda:	4638      	mov	r0, r7
 800ecdc:	612e      	str	r6, [r5, #16]
 800ecde:	4621      	mov	r1, r4
 800ece0:	f7ff fdd8 	bl	800e894 <_Bfree>
 800ece4:	4628      	mov	r0, r5
 800ece6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecea:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecee:	3301      	adds	r3, #1
 800ecf0:	e7c5      	b.n	800ec7e <__lshift+0x4a>
 800ecf2:	3904      	subs	r1, #4
 800ecf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ecfc:	459c      	cmp	ip, r3
 800ecfe:	d8f9      	bhi.n	800ecf4 <__lshift+0xc0>
 800ed00:	e7ea      	b.n	800ecd8 <__lshift+0xa4>
 800ed02:	bf00      	nop
 800ed04:	08011fa8 	.word	0x08011fa8
 800ed08:	08011fb9 	.word	0x08011fb9

0800ed0c <__mcmp>:
 800ed0c:	b530      	push	{r4, r5, lr}
 800ed0e:	6902      	ldr	r2, [r0, #16]
 800ed10:	690c      	ldr	r4, [r1, #16]
 800ed12:	1b12      	subs	r2, r2, r4
 800ed14:	d10e      	bne.n	800ed34 <__mcmp+0x28>
 800ed16:	f100 0314 	add.w	r3, r0, #20
 800ed1a:	3114      	adds	r1, #20
 800ed1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed2c:	42a5      	cmp	r5, r4
 800ed2e:	d003      	beq.n	800ed38 <__mcmp+0x2c>
 800ed30:	d305      	bcc.n	800ed3e <__mcmp+0x32>
 800ed32:	2201      	movs	r2, #1
 800ed34:	4610      	mov	r0, r2
 800ed36:	bd30      	pop	{r4, r5, pc}
 800ed38:	4283      	cmp	r3, r0
 800ed3a:	d3f3      	bcc.n	800ed24 <__mcmp+0x18>
 800ed3c:	e7fa      	b.n	800ed34 <__mcmp+0x28>
 800ed3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed42:	e7f7      	b.n	800ed34 <__mcmp+0x28>

0800ed44 <__mdiff>:
 800ed44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed48:	460c      	mov	r4, r1
 800ed4a:	4606      	mov	r6, r0
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	4620      	mov	r0, r4
 800ed50:	4690      	mov	r8, r2
 800ed52:	f7ff ffdb 	bl	800ed0c <__mcmp>
 800ed56:	1e05      	subs	r5, r0, #0
 800ed58:	d110      	bne.n	800ed7c <__mdiff+0x38>
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f7ff fd59 	bl	800e814 <_Balloc>
 800ed62:	b930      	cbnz	r0, 800ed72 <__mdiff+0x2e>
 800ed64:	4b3a      	ldr	r3, [pc, #232]	; (800ee50 <__mdiff+0x10c>)
 800ed66:	4602      	mov	r2, r0
 800ed68:	f240 2137 	movw	r1, #567	; 0x237
 800ed6c:	4839      	ldr	r0, [pc, #228]	; (800ee54 <__mdiff+0x110>)
 800ed6e:	f000 fafd 	bl	800f36c <__assert_func>
 800ed72:	2301      	movs	r3, #1
 800ed74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7c:	bfa4      	itt	ge
 800ed7e:	4643      	movge	r3, r8
 800ed80:	46a0      	movge	r8, r4
 800ed82:	4630      	mov	r0, r6
 800ed84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed88:	bfa6      	itte	ge
 800ed8a:	461c      	movge	r4, r3
 800ed8c:	2500      	movge	r5, #0
 800ed8e:	2501      	movlt	r5, #1
 800ed90:	f7ff fd40 	bl	800e814 <_Balloc>
 800ed94:	b920      	cbnz	r0, 800eda0 <__mdiff+0x5c>
 800ed96:	4b2e      	ldr	r3, [pc, #184]	; (800ee50 <__mdiff+0x10c>)
 800ed98:	4602      	mov	r2, r0
 800ed9a:	f240 2145 	movw	r1, #581	; 0x245
 800ed9e:	e7e5      	b.n	800ed6c <__mdiff+0x28>
 800eda0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eda4:	6926      	ldr	r6, [r4, #16]
 800eda6:	60c5      	str	r5, [r0, #12]
 800eda8:	f104 0914 	add.w	r9, r4, #20
 800edac:	f108 0514 	add.w	r5, r8, #20
 800edb0:	f100 0e14 	add.w	lr, r0, #20
 800edb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800edb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800edbc:	f108 0210 	add.w	r2, r8, #16
 800edc0:	46f2      	mov	sl, lr
 800edc2:	2100      	movs	r1, #0
 800edc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800edc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800edcc:	fa11 f88b 	uxtah	r8, r1, fp
 800edd0:	b299      	uxth	r1, r3
 800edd2:	0c1b      	lsrs	r3, r3, #16
 800edd4:	eba8 0801 	sub.w	r8, r8, r1
 800edd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eddc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ede0:	fa1f f888 	uxth.w	r8, r8
 800ede4:	1419      	asrs	r1, r3, #16
 800ede6:	454e      	cmp	r6, r9
 800ede8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800edec:	f84a 3b04 	str.w	r3, [sl], #4
 800edf0:	d8e8      	bhi.n	800edc4 <__mdiff+0x80>
 800edf2:	1b33      	subs	r3, r6, r4
 800edf4:	3b15      	subs	r3, #21
 800edf6:	f023 0303 	bic.w	r3, r3, #3
 800edfa:	3304      	adds	r3, #4
 800edfc:	3415      	adds	r4, #21
 800edfe:	42a6      	cmp	r6, r4
 800ee00:	bf38      	it	cc
 800ee02:	2304      	movcc	r3, #4
 800ee04:	441d      	add	r5, r3
 800ee06:	4473      	add	r3, lr
 800ee08:	469e      	mov	lr, r3
 800ee0a:	462e      	mov	r6, r5
 800ee0c:	4566      	cmp	r6, ip
 800ee0e:	d30e      	bcc.n	800ee2e <__mdiff+0xea>
 800ee10:	f10c 0203 	add.w	r2, ip, #3
 800ee14:	1b52      	subs	r2, r2, r5
 800ee16:	f022 0203 	bic.w	r2, r2, #3
 800ee1a:	3d03      	subs	r5, #3
 800ee1c:	45ac      	cmp	ip, r5
 800ee1e:	bf38      	it	cc
 800ee20:	2200      	movcc	r2, #0
 800ee22:	4413      	add	r3, r2
 800ee24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ee28:	b17a      	cbz	r2, 800ee4a <__mdiff+0x106>
 800ee2a:	6107      	str	r7, [r0, #16]
 800ee2c:	e7a4      	b.n	800ed78 <__mdiff+0x34>
 800ee2e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ee32:	fa11 f288 	uxtah	r2, r1, r8
 800ee36:	1414      	asrs	r4, r2, #16
 800ee38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee3c:	b292      	uxth	r2, r2
 800ee3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee42:	f84e 2b04 	str.w	r2, [lr], #4
 800ee46:	1421      	asrs	r1, r4, #16
 800ee48:	e7e0      	b.n	800ee0c <__mdiff+0xc8>
 800ee4a:	3f01      	subs	r7, #1
 800ee4c:	e7ea      	b.n	800ee24 <__mdiff+0xe0>
 800ee4e:	bf00      	nop
 800ee50:	08011fa8 	.word	0x08011fa8
 800ee54:	08011fb9 	.word	0x08011fb9

0800ee58 <__d2b>:
 800ee58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee5c:	460f      	mov	r7, r1
 800ee5e:	2101      	movs	r1, #1
 800ee60:	ec59 8b10 	vmov	r8, r9, d0
 800ee64:	4616      	mov	r6, r2
 800ee66:	f7ff fcd5 	bl	800e814 <_Balloc>
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	b930      	cbnz	r0, 800ee7c <__d2b+0x24>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	4b24      	ldr	r3, [pc, #144]	; (800ef04 <__d2b+0xac>)
 800ee72:	4825      	ldr	r0, [pc, #148]	; (800ef08 <__d2b+0xb0>)
 800ee74:	f240 310f 	movw	r1, #783	; 0x30f
 800ee78:	f000 fa78 	bl	800f36c <__assert_func>
 800ee7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee84:	bb2d      	cbnz	r5, 800eed2 <__d2b+0x7a>
 800ee86:	9301      	str	r3, [sp, #4]
 800ee88:	f1b8 0300 	subs.w	r3, r8, #0
 800ee8c:	d026      	beq.n	800eedc <__d2b+0x84>
 800ee8e:	4668      	mov	r0, sp
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	f7ff fd87 	bl	800e9a4 <__lo0bits>
 800ee96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ee9a:	b1e8      	cbz	r0, 800eed8 <__d2b+0x80>
 800ee9c:	f1c0 0320 	rsb	r3, r0, #32
 800eea0:	fa02 f303 	lsl.w	r3, r2, r3
 800eea4:	430b      	orrs	r3, r1
 800eea6:	40c2      	lsrs	r2, r0
 800eea8:	6163      	str	r3, [r4, #20]
 800eeaa:	9201      	str	r2, [sp, #4]
 800eeac:	9b01      	ldr	r3, [sp, #4]
 800eeae:	61a3      	str	r3, [r4, #24]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	bf14      	ite	ne
 800eeb4:	2202      	movne	r2, #2
 800eeb6:	2201      	moveq	r2, #1
 800eeb8:	6122      	str	r2, [r4, #16]
 800eeba:	b1bd      	cbz	r5, 800eeec <__d2b+0x94>
 800eebc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eec0:	4405      	add	r5, r0
 800eec2:	603d      	str	r5, [r7, #0]
 800eec4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eec8:	6030      	str	r0, [r6, #0]
 800eeca:	4620      	mov	r0, r4
 800eecc:	b003      	add	sp, #12
 800eece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eed6:	e7d6      	b.n	800ee86 <__d2b+0x2e>
 800eed8:	6161      	str	r1, [r4, #20]
 800eeda:	e7e7      	b.n	800eeac <__d2b+0x54>
 800eedc:	a801      	add	r0, sp, #4
 800eede:	f7ff fd61 	bl	800e9a4 <__lo0bits>
 800eee2:	9b01      	ldr	r3, [sp, #4]
 800eee4:	6163      	str	r3, [r4, #20]
 800eee6:	3020      	adds	r0, #32
 800eee8:	2201      	movs	r2, #1
 800eeea:	e7e5      	b.n	800eeb8 <__d2b+0x60>
 800eeec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eef0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eef4:	6038      	str	r0, [r7, #0]
 800eef6:	6918      	ldr	r0, [r3, #16]
 800eef8:	f7ff fd34 	bl	800e964 <__hi0bits>
 800eefc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ef00:	e7e2      	b.n	800eec8 <__d2b+0x70>
 800ef02:	bf00      	nop
 800ef04:	08011fa8 	.word	0x08011fa8
 800ef08:	08011fb9 	.word	0x08011fb9

0800ef0c <__ssputs_r>:
 800ef0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef10:	688e      	ldr	r6, [r1, #8]
 800ef12:	461f      	mov	r7, r3
 800ef14:	42be      	cmp	r6, r7
 800ef16:	680b      	ldr	r3, [r1, #0]
 800ef18:	4682      	mov	sl, r0
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	4690      	mov	r8, r2
 800ef1e:	d82c      	bhi.n	800ef7a <__ssputs_r+0x6e>
 800ef20:	898a      	ldrh	r2, [r1, #12]
 800ef22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef26:	d026      	beq.n	800ef76 <__ssputs_r+0x6a>
 800ef28:	6965      	ldr	r5, [r4, #20]
 800ef2a:	6909      	ldr	r1, [r1, #16]
 800ef2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef30:	eba3 0901 	sub.w	r9, r3, r1
 800ef34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef38:	1c7b      	adds	r3, r7, #1
 800ef3a:	444b      	add	r3, r9
 800ef3c:	106d      	asrs	r5, r5, #1
 800ef3e:	429d      	cmp	r5, r3
 800ef40:	bf38      	it	cc
 800ef42:	461d      	movcc	r5, r3
 800ef44:	0553      	lsls	r3, r2, #21
 800ef46:	d527      	bpl.n	800ef98 <__ssputs_r+0x8c>
 800ef48:	4629      	mov	r1, r5
 800ef4a:	f7ff fbd7 	bl	800e6fc <_malloc_r>
 800ef4e:	4606      	mov	r6, r0
 800ef50:	b360      	cbz	r0, 800efac <__ssputs_r+0xa0>
 800ef52:	6921      	ldr	r1, [r4, #16]
 800ef54:	464a      	mov	r2, r9
 800ef56:	f7fe fcd2 	bl	800d8fe <memcpy>
 800ef5a:	89a3      	ldrh	r3, [r4, #12]
 800ef5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef64:	81a3      	strh	r3, [r4, #12]
 800ef66:	6126      	str	r6, [r4, #16]
 800ef68:	6165      	str	r5, [r4, #20]
 800ef6a:	444e      	add	r6, r9
 800ef6c:	eba5 0509 	sub.w	r5, r5, r9
 800ef70:	6026      	str	r6, [r4, #0]
 800ef72:	60a5      	str	r5, [r4, #8]
 800ef74:	463e      	mov	r6, r7
 800ef76:	42be      	cmp	r6, r7
 800ef78:	d900      	bls.n	800ef7c <__ssputs_r+0x70>
 800ef7a:	463e      	mov	r6, r7
 800ef7c:	6820      	ldr	r0, [r4, #0]
 800ef7e:	4632      	mov	r2, r6
 800ef80:	4641      	mov	r1, r8
 800ef82:	f000 f9c9 	bl	800f318 <memmove>
 800ef86:	68a3      	ldr	r3, [r4, #8]
 800ef88:	1b9b      	subs	r3, r3, r6
 800ef8a:	60a3      	str	r3, [r4, #8]
 800ef8c:	6823      	ldr	r3, [r4, #0]
 800ef8e:	4433      	add	r3, r6
 800ef90:	6023      	str	r3, [r4, #0]
 800ef92:	2000      	movs	r0, #0
 800ef94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef98:	462a      	mov	r2, r5
 800ef9a:	f000 fa2d 	bl	800f3f8 <_realloc_r>
 800ef9e:	4606      	mov	r6, r0
 800efa0:	2800      	cmp	r0, #0
 800efa2:	d1e0      	bne.n	800ef66 <__ssputs_r+0x5a>
 800efa4:	6921      	ldr	r1, [r4, #16]
 800efa6:	4650      	mov	r0, sl
 800efa8:	f7ff fb34 	bl	800e614 <_free_r>
 800efac:	230c      	movs	r3, #12
 800efae:	f8ca 3000 	str.w	r3, [sl]
 800efb2:	89a3      	ldrh	r3, [r4, #12]
 800efb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efb8:	81a3      	strh	r3, [r4, #12]
 800efba:	f04f 30ff 	mov.w	r0, #4294967295
 800efbe:	e7e9      	b.n	800ef94 <__ssputs_r+0x88>

0800efc0 <_svfiprintf_r>:
 800efc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc4:	4698      	mov	r8, r3
 800efc6:	898b      	ldrh	r3, [r1, #12]
 800efc8:	061b      	lsls	r3, r3, #24
 800efca:	b09d      	sub	sp, #116	; 0x74
 800efcc:	4607      	mov	r7, r0
 800efce:	460d      	mov	r5, r1
 800efd0:	4614      	mov	r4, r2
 800efd2:	d50e      	bpl.n	800eff2 <_svfiprintf_r+0x32>
 800efd4:	690b      	ldr	r3, [r1, #16]
 800efd6:	b963      	cbnz	r3, 800eff2 <_svfiprintf_r+0x32>
 800efd8:	2140      	movs	r1, #64	; 0x40
 800efda:	f7ff fb8f 	bl	800e6fc <_malloc_r>
 800efde:	6028      	str	r0, [r5, #0]
 800efe0:	6128      	str	r0, [r5, #16]
 800efe2:	b920      	cbnz	r0, 800efee <_svfiprintf_r+0x2e>
 800efe4:	230c      	movs	r3, #12
 800efe6:	603b      	str	r3, [r7, #0]
 800efe8:	f04f 30ff 	mov.w	r0, #4294967295
 800efec:	e0d0      	b.n	800f190 <_svfiprintf_r+0x1d0>
 800efee:	2340      	movs	r3, #64	; 0x40
 800eff0:	616b      	str	r3, [r5, #20]
 800eff2:	2300      	movs	r3, #0
 800eff4:	9309      	str	r3, [sp, #36]	; 0x24
 800eff6:	2320      	movs	r3, #32
 800eff8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800effc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f000:	2330      	movs	r3, #48	; 0x30
 800f002:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f1a8 <_svfiprintf_r+0x1e8>
 800f006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f00a:	f04f 0901 	mov.w	r9, #1
 800f00e:	4623      	mov	r3, r4
 800f010:	469a      	mov	sl, r3
 800f012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f016:	b10a      	cbz	r2, 800f01c <_svfiprintf_r+0x5c>
 800f018:	2a25      	cmp	r2, #37	; 0x25
 800f01a:	d1f9      	bne.n	800f010 <_svfiprintf_r+0x50>
 800f01c:	ebba 0b04 	subs.w	fp, sl, r4
 800f020:	d00b      	beq.n	800f03a <_svfiprintf_r+0x7a>
 800f022:	465b      	mov	r3, fp
 800f024:	4622      	mov	r2, r4
 800f026:	4629      	mov	r1, r5
 800f028:	4638      	mov	r0, r7
 800f02a:	f7ff ff6f 	bl	800ef0c <__ssputs_r>
 800f02e:	3001      	adds	r0, #1
 800f030:	f000 80a9 	beq.w	800f186 <_svfiprintf_r+0x1c6>
 800f034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f036:	445a      	add	r2, fp
 800f038:	9209      	str	r2, [sp, #36]	; 0x24
 800f03a:	f89a 3000 	ldrb.w	r3, [sl]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f000 80a1 	beq.w	800f186 <_svfiprintf_r+0x1c6>
 800f044:	2300      	movs	r3, #0
 800f046:	f04f 32ff 	mov.w	r2, #4294967295
 800f04a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f04e:	f10a 0a01 	add.w	sl, sl, #1
 800f052:	9304      	str	r3, [sp, #16]
 800f054:	9307      	str	r3, [sp, #28]
 800f056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f05a:	931a      	str	r3, [sp, #104]	; 0x68
 800f05c:	4654      	mov	r4, sl
 800f05e:	2205      	movs	r2, #5
 800f060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f064:	4850      	ldr	r0, [pc, #320]	; (800f1a8 <_svfiprintf_r+0x1e8>)
 800f066:	f7f1 f8b3 	bl	80001d0 <memchr>
 800f06a:	9a04      	ldr	r2, [sp, #16]
 800f06c:	b9d8      	cbnz	r0, 800f0a6 <_svfiprintf_r+0xe6>
 800f06e:	06d0      	lsls	r0, r2, #27
 800f070:	bf44      	itt	mi
 800f072:	2320      	movmi	r3, #32
 800f074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f078:	0711      	lsls	r1, r2, #28
 800f07a:	bf44      	itt	mi
 800f07c:	232b      	movmi	r3, #43	; 0x2b
 800f07e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f082:	f89a 3000 	ldrb.w	r3, [sl]
 800f086:	2b2a      	cmp	r3, #42	; 0x2a
 800f088:	d015      	beq.n	800f0b6 <_svfiprintf_r+0xf6>
 800f08a:	9a07      	ldr	r2, [sp, #28]
 800f08c:	4654      	mov	r4, sl
 800f08e:	2000      	movs	r0, #0
 800f090:	f04f 0c0a 	mov.w	ip, #10
 800f094:	4621      	mov	r1, r4
 800f096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f09a:	3b30      	subs	r3, #48	; 0x30
 800f09c:	2b09      	cmp	r3, #9
 800f09e:	d94d      	bls.n	800f13c <_svfiprintf_r+0x17c>
 800f0a0:	b1b0      	cbz	r0, 800f0d0 <_svfiprintf_r+0x110>
 800f0a2:	9207      	str	r2, [sp, #28]
 800f0a4:	e014      	b.n	800f0d0 <_svfiprintf_r+0x110>
 800f0a6:	eba0 0308 	sub.w	r3, r0, r8
 800f0aa:	fa09 f303 	lsl.w	r3, r9, r3
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	9304      	str	r3, [sp, #16]
 800f0b2:	46a2      	mov	sl, r4
 800f0b4:	e7d2      	b.n	800f05c <_svfiprintf_r+0x9c>
 800f0b6:	9b03      	ldr	r3, [sp, #12]
 800f0b8:	1d19      	adds	r1, r3, #4
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	9103      	str	r1, [sp, #12]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	bfbb      	ittet	lt
 800f0c2:	425b      	neglt	r3, r3
 800f0c4:	f042 0202 	orrlt.w	r2, r2, #2
 800f0c8:	9307      	strge	r3, [sp, #28]
 800f0ca:	9307      	strlt	r3, [sp, #28]
 800f0cc:	bfb8      	it	lt
 800f0ce:	9204      	strlt	r2, [sp, #16]
 800f0d0:	7823      	ldrb	r3, [r4, #0]
 800f0d2:	2b2e      	cmp	r3, #46	; 0x2e
 800f0d4:	d10c      	bne.n	800f0f0 <_svfiprintf_r+0x130>
 800f0d6:	7863      	ldrb	r3, [r4, #1]
 800f0d8:	2b2a      	cmp	r3, #42	; 0x2a
 800f0da:	d134      	bne.n	800f146 <_svfiprintf_r+0x186>
 800f0dc:	9b03      	ldr	r3, [sp, #12]
 800f0de:	1d1a      	adds	r2, r3, #4
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	9203      	str	r2, [sp, #12]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	bfb8      	it	lt
 800f0e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0ec:	3402      	adds	r4, #2
 800f0ee:	9305      	str	r3, [sp, #20]
 800f0f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f1b8 <_svfiprintf_r+0x1f8>
 800f0f4:	7821      	ldrb	r1, [r4, #0]
 800f0f6:	2203      	movs	r2, #3
 800f0f8:	4650      	mov	r0, sl
 800f0fa:	f7f1 f869 	bl	80001d0 <memchr>
 800f0fe:	b138      	cbz	r0, 800f110 <_svfiprintf_r+0x150>
 800f100:	9b04      	ldr	r3, [sp, #16]
 800f102:	eba0 000a 	sub.w	r0, r0, sl
 800f106:	2240      	movs	r2, #64	; 0x40
 800f108:	4082      	lsls	r2, r0
 800f10a:	4313      	orrs	r3, r2
 800f10c:	3401      	adds	r4, #1
 800f10e:	9304      	str	r3, [sp, #16]
 800f110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f114:	4825      	ldr	r0, [pc, #148]	; (800f1ac <_svfiprintf_r+0x1ec>)
 800f116:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f11a:	2206      	movs	r2, #6
 800f11c:	f7f1 f858 	bl	80001d0 <memchr>
 800f120:	2800      	cmp	r0, #0
 800f122:	d038      	beq.n	800f196 <_svfiprintf_r+0x1d6>
 800f124:	4b22      	ldr	r3, [pc, #136]	; (800f1b0 <_svfiprintf_r+0x1f0>)
 800f126:	bb1b      	cbnz	r3, 800f170 <_svfiprintf_r+0x1b0>
 800f128:	9b03      	ldr	r3, [sp, #12]
 800f12a:	3307      	adds	r3, #7
 800f12c:	f023 0307 	bic.w	r3, r3, #7
 800f130:	3308      	adds	r3, #8
 800f132:	9303      	str	r3, [sp, #12]
 800f134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f136:	4433      	add	r3, r6
 800f138:	9309      	str	r3, [sp, #36]	; 0x24
 800f13a:	e768      	b.n	800f00e <_svfiprintf_r+0x4e>
 800f13c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f140:	460c      	mov	r4, r1
 800f142:	2001      	movs	r0, #1
 800f144:	e7a6      	b.n	800f094 <_svfiprintf_r+0xd4>
 800f146:	2300      	movs	r3, #0
 800f148:	3401      	adds	r4, #1
 800f14a:	9305      	str	r3, [sp, #20]
 800f14c:	4619      	mov	r1, r3
 800f14e:	f04f 0c0a 	mov.w	ip, #10
 800f152:	4620      	mov	r0, r4
 800f154:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f158:	3a30      	subs	r2, #48	; 0x30
 800f15a:	2a09      	cmp	r2, #9
 800f15c:	d903      	bls.n	800f166 <_svfiprintf_r+0x1a6>
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d0c6      	beq.n	800f0f0 <_svfiprintf_r+0x130>
 800f162:	9105      	str	r1, [sp, #20]
 800f164:	e7c4      	b.n	800f0f0 <_svfiprintf_r+0x130>
 800f166:	fb0c 2101 	mla	r1, ip, r1, r2
 800f16a:	4604      	mov	r4, r0
 800f16c:	2301      	movs	r3, #1
 800f16e:	e7f0      	b.n	800f152 <_svfiprintf_r+0x192>
 800f170:	ab03      	add	r3, sp, #12
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	462a      	mov	r2, r5
 800f176:	4b0f      	ldr	r3, [pc, #60]	; (800f1b4 <_svfiprintf_r+0x1f4>)
 800f178:	a904      	add	r1, sp, #16
 800f17a:	4638      	mov	r0, r7
 800f17c:	f7fd fdf6 	bl	800cd6c <_printf_float>
 800f180:	1c42      	adds	r2, r0, #1
 800f182:	4606      	mov	r6, r0
 800f184:	d1d6      	bne.n	800f134 <_svfiprintf_r+0x174>
 800f186:	89ab      	ldrh	r3, [r5, #12]
 800f188:	065b      	lsls	r3, r3, #25
 800f18a:	f53f af2d 	bmi.w	800efe8 <_svfiprintf_r+0x28>
 800f18e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f190:	b01d      	add	sp, #116	; 0x74
 800f192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f196:	ab03      	add	r3, sp, #12
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	462a      	mov	r2, r5
 800f19c:	4b05      	ldr	r3, [pc, #20]	; (800f1b4 <_svfiprintf_r+0x1f4>)
 800f19e:	a904      	add	r1, sp, #16
 800f1a0:	4638      	mov	r0, r7
 800f1a2:	f7fe f887 	bl	800d2b4 <_printf_i>
 800f1a6:	e7eb      	b.n	800f180 <_svfiprintf_r+0x1c0>
 800f1a8:	08012114 	.word	0x08012114
 800f1ac:	0801211e 	.word	0x0801211e
 800f1b0:	0800cd6d 	.word	0x0800cd6d
 800f1b4:	0800ef0d 	.word	0x0800ef0d
 800f1b8:	0801211a 	.word	0x0801211a

0800f1bc <__sflush_r>:
 800f1bc:	898a      	ldrh	r2, [r1, #12]
 800f1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	0710      	lsls	r0, r2, #28
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	d458      	bmi.n	800f27c <__sflush_r+0xc0>
 800f1ca:	684b      	ldr	r3, [r1, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	dc05      	bgt.n	800f1dc <__sflush_r+0x20>
 800f1d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	dc02      	bgt.n	800f1dc <__sflush_r+0x20>
 800f1d6:	2000      	movs	r0, #0
 800f1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1de:	2e00      	cmp	r6, #0
 800f1e0:	d0f9      	beq.n	800f1d6 <__sflush_r+0x1a>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1e8:	682f      	ldr	r7, [r5, #0]
 800f1ea:	6a21      	ldr	r1, [r4, #32]
 800f1ec:	602b      	str	r3, [r5, #0]
 800f1ee:	d032      	beq.n	800f256 <__sflush_r+0x9a>
 800f1f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1f2:	89a3      	ldrh	r3, [r4, #12]
 800f1f4:	075a      	lsls	r2, r3, #29
 800f1f6:	d505      	bpl.n	800f204 <__sflush_r+0x48>
 800f1f8:	6863      	ldr	r3, [r4, #4]
 800f1fa:	1ac0      	subs	r0, r0, r3
 800f1fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1fe:	b10b      	cbz	r3, 800f204 <__sflush_r+0x48>
 800f200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f202:	1ac0      	subs	r0, r0, r3
 800f204:	2300      	movs	r3, #0
 800f206:	4602      	mov	r2, r0
 800f208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f20a:	6a21      	ldr	r1, [r4, #32]
 800f20c:	4628      	mov	r0, r5
 800f20e:	47b0      	blx	r6
 800f210:	1c43      	adds	r3, r0, #1
 800f212:	89a3      	ldrh	r3, [r4, #12]
 800f214:	d106      	bne.n	800f224 <__sflush_r+0x68>
 800f216:	6829      	ldr	r1, [r5, #0]
 800f218:	291d      	cmp	r1, #29
 800f21a:	d82b      	bhi.n	800f274 <__sflush_r+0xb8>
 800f21c:	4a29      	ldr	r2, [pc, #164]	; (800f2c4 <__sflush_r+0x108>)
 800f21e:	410a      	asrs	r2, r1
 800f220:	07d6      	lsls	r6, r2, #31
 800f222:	d427      	bmi.n	800f274 <__sflush_r+0xb8>
 800f224:	2200      	movs	r2, #0
 800f226:	6062      	str	r2, [r4, #4]
 800f228:	04d9      	lsls	r1, r3, #19
 800f22a:	6922      	ldr	r2, [r4, #16]
 800f22c:	6022      	str	r2, [r4, #0]
 800f22e:	d504      	bpl.n	800f23a <__sflush_r+0x7e>
 800f230:	1c42      	adds	r2, r0, #1
 800f232:	d101      	bne.n	800f238 <__sflush_r+0x7c>
 800f234:	682b      	ldr	r3, [r5, #0]
 800f236:	b903      	cbnz	r3, 800f23a <__sflush_r+0x7e>
 800f238:	6560      	str	r0, [r4, #84]	; 0x54
 800f23a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f23c:	602f      	str	r7, [r5, #0]
 800f23e:	2900      	cmp	r1, #0
 800f240:	d0c9      	beq.n	800f1d6 <__sflush_r+0x1a>
 800f242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f246:	4299      	cmp	r1, r3
 800f248:	d002      	beq.n	800f250 <__sflush_r+0x94>
 800f24a:	4628      	mov	r0, r5
 800f24c:	f7ff f9e2 	bl	800e614 <_free_r>
 800f250:	2000      	movs	r0, #0
 800f252:	6360      	str	r0, [r4, #52]	; 0x34
 800f254:	e7c0      	b.n	800f1d8 <__sflush_r+0x1c>
 800f256:	2301      	movs	r3, #1
 800f258:	4628      	mov	r0, r5
 800f25a:	47b0      	blx	r6
 800f25c:	1c41      	adds	r1, r0, #1
 800f25e:	d1c8      	bne.n	800f1f2 <__sflush_r+0x36>
 800f260:	682b      	ldr	r3, [r5, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d0c5      	beq.n	800f1f2 <__sflush_r+0x36>
 800f266:	2b1d      	cmp	r3, #29
 800f268:	d001      	beq.n	800f26e <__sflush_r+0xb2>
 800f26a:	2b16      	cmp	r3, #22
 800f26c:	d101      	bne.n	800f272 <__sflush_r+0xb6>
 800f26e:	602f      	str	r7, [r5, #0]
 800f270:	e7b1      	b.n	800f1d6 <__sflush_r+0x1a>
 800f272:	89a3      	ldrh	r3, [r4, #12]
 800f274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f278:	81a3      	strh	r3, [r4, #12]
 800f27a:	e7ad      	b.n	800f1d8 <__sflush_r+0x1c>
 800f27c:	690f      	ldr	r7, [r1, #16]
 800f27e:	2f00      	cmp	r7, #0
 800f280:	d0a9      	beq.n	800f1d6 <__sflush_r+0x1a>
 800f282:	0793      	lsls	r3, r2, #30
 800f284:	680e      	ldr	r6, [r1, #0]
 800f286:	bf08      	it	eq
 800f288:	694b      	ldreq	r3, [r1, #20]
 800f28a:	600f      	str	r7, [r1, #0]
 800f28c:	bf18      	it	ne
 800f28e:	2300      	movne	r3, #0
 800f290:	eba6 0807 	sub.w	r8, r6, r7
 800f294:	608b      	str	r3, [r1, #8]
 800f296:	f1b8 0f00 	cmp.w	r8, #0
 800f29a:	dd9c      	ble.n	800f1d6 <__sflush_r+0x1a>
 800f29c:	6a21      	ldr	r1, [r4, #32]
 800f29e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2a0:	4643      	mov	r3, r8
 800f2a2:	463a      	mov	r2, r7
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	47b0      	blx	r6
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	dc06      	bgt.n	800f2ba <__sflush_r+0xfe>
 800f2ac:	89a3      	ldrh	r3, [r4, #12]
 800f2ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2b2:	81a3      	strh	r3, [r4, #12]
 800f2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b8:	e78e      	b.n	800f1d8 <__sflush_r+0x1c>
 800f2ba:	4407      	add	r7, r0
 800f2bc:	eba8 0800 	sub.w	r8, r8, r0
 800f2c0:	e7e9      	b.n	800f296 <__sflush_r+0xda>
 800f2c2:	bf00      	nop
 800f2c4:	dfbffffe 	.word	0xdfbffffe

0800f2c8 <_fflush_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	690b      	ldr	r3, [r1, #16]
 800f2cc:	4605      	mov	r5, r0
 800f2ce:	460c      	mov	r4, r1
 800f2d0:	b913      	cbnz	r3, 800f2d8 <_fflush_r+0x10>
 800f2d2:	2500      	movs	r5, #0
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	b118      	cbz	r0, 800f2e2 <_fflush_r+0x1a>
 800f2da:	6a03      	ldr	r3, [r0, #32]
 800f2dc:	b90b      	cbnz	r3, 800f2e2 <_fflush_r+0x1a>
 800f2de:	f7fe f997 	bl	800d610 <__sinit>
 800f2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d0f3      	beq.n	800f2d2 <_fflush_r+0xa>
 800f2ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2ec:	07d0      	lsls	r0, r2, #31
 800f2ee:	d404      	bmi.n	800f2fa <_fflush_r+0x32>
 800f2f0:	0599      	lsls	r1, r3, #22
 800f2f2:	d402      	bmi.n	800f2fa <_fflush_r+0x32>
 800f2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2f6:	f7fe faf8 	bl	800d8ea <__retarget_lock_acquire_recursive>
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	f7ff ff5d 	bl	800f1bc <__sflush_r>
 800f302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f304:	07da      	lsls	r2, r3, #31
 800f306:	4605      	mov	r5, r0
 800f308:	d4e4      	bmi.n	800f2d4 <_fflush_r+0xc>
 800f30a:	89a3      	ldrh	r3, [r4, #12]
 800f30c:	059b      	lsls	r3, r3, #22
 800f30e:	d4e1      	bmi.n	800f2d4 <_fflush_r+0xc>
 800f310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f312:	f7fe faeb 	bl	800d8ec <__retarget_lock_release_recursive>
 800f316:	e7dd      	b.n	800f2d4 <_fflush_r+0xc>

0800f318 <memmove>:
 800f318:	4288      	cmp	r0, r1
 800f31a:	b510      	push	{r4, lr}
 800f31c:	eb01 0402 	add.w	r4, r1, r2
 800f320:	d902      	bls.n	800f328 <memmove+0x10>
 800f322:	4284      	cmp	r4, r0
 800f324:	4623      	mov	r3, r4
 800f326:	d807      	bhi.n	800f338 <memmove+0x20>
 800f328:	1e43      	subs	r3, r0, #1
 800f32a:	42a1      	cmp	r1, r4
 800f32c:	d008      	beq.n	800f340 <memmove+0x28>
 800f32e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f332:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f336:	e7f8      	b.n	800f32a <memmove+0x12>
 800f338:	4402      	add	r2, r0
 800f33a:	4601      	mov	r1, r0
 800f33c:	428a      	cmp	r2, r1
 800f33e:	d100      	bne.n	800f342 <memmove+0x2a>
 800f340:	bd10      	pop	{r4, pc}
 800f342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f34a:	e7f7      	b.n	800f33c <memmove+0x24>

0800f34c <_sbrk_r>:
 800f34c:	b538      	push	{r3, r4, r5, lr}
 800f34e:	4d06      	ldr	r5, [pc, #24]	; (800f368 <_sbrk_r+0x1c>)
 800f350:	2300      	movs	r3, #0
 800f352:	4604      	mov	r4, r0
 800f354:	4608      	mov	r0, r1
 800f356:	602b      	str	r3, [r5, #0]
 800f358:	f7f6 fac0 	bl	80058dc <_sbrk>
 800f35c:	1c43      	adds	r3, r0, #1
 800f35e:	d102      	bne.n	800f366 <_sbrk_r+0x1a>
 800f360:	682b      	ldr	r3, [r5, #0]
 800f362:	b103      	cbz	r3, 800f366 <_sbrk_r+0x1a>
 800f364:	6023      	str	r3, [r4, #0]
 800f366:	bd38      	pop	{r3, r4, r5, pc}
 800f368:	200051d8 	.word	0x200051d8

0800f36c <__assert_func>:
 800f36c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f36e:	4614      	mov	r4, r2
 800f370:	461a      	mov	r2, r3
 800f372:	4b09      	ldr	r3, [pc, #36]	; (800f398 <__assert_func+0x2c>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4605      	mov	r5, r0
 800f378:	68d8      	ldr	r0, [r3, #12]
 800f37a:	b14c      	cbz	r4, 800f390 <__assert_func+0x24>
 800f37c:	4b07      	ldr	r3, [pc, #28]	; (800f39c <__assert_func+0x30>)
 800f37e:	9100      	str	r1, [sp, #0]
 800f380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f384:	4906      	ldr	r1, [pc, #24]	; (800f3a0 <__assert_func+0x34>)
 800f386:	462b      	mov	r3, r5
 800f388:	f000 f872 	bl	800f470 <fiprintf>
 800f38c:	f000 f882 	bl	800f494 <abort>
 800f390:	4b04      	ldr	r3, [pc, #16]	; (800f3a4 <__assert_func+0x38>)
 800f392:	461c      	mov	r4, r3
 800f394:	e7f3      	b.n	800f37e <__assert_func+0x12>
 800f396:	bf00      	nop
 800f398:	20000068 	.word	0x20000068
 800f39c:	0801212f 	.word	0x0801212f
 800f3a0:	0801213c 	.word	0x0801213c
 800f3a4:	0801216a 	.word	0x0801216a

0800f3a8 <_calloc_r>:
 800f3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3aa:	fba1 2402 	umull	r2, r4, r1, r2
 800f3ae:	b94c      	cbnz	r4, 800f3c4 <_calloc_r+0x1c>
 800f3b0:	4611      	mov	r1, r2
 800f3b2:	9201      	str	r2, [sp, #4]
 800f3b4:	f7ff f9a2 	bl	800e6fc <_malloc_r>
 800f3b8:	9a01      	ldr	r2, [sp, #4]
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	b930      	cbnz	r0, 800f3cc <_calloc_r+0x24>
 800f3be:	4628      	mov	r0, r5
 800f3c0:	b003      	add	sp, #12
 800f3c2:	bd30      	pop	{r4, r5, pc}
 800f3c4:	220c      	movs	r2, #12
 800f3c6:	6002      	str	r2, [r0, #0]
 800f3c8:	2500      	movs	r5, #0
 800f3ca:	e7f8      	b.n	800f3be <_calloc_r+0x16>
 800f3cc:	4621      	mov	r1, r4
 800f3ce:	f7fe f9b8 	bl	800d742 <memset>
 800f3d2:	e7f4      	b.n	800f3be <_calloc_r+0x16>

0800f3d4 <__ascii_mbtowc>:
 800f3d4:	b082      	sub	sp, #8
 800f3d6:	b901      	cbnz	r1, 800f3da <__ascii_mbtowc+0x6>
 800f3d8:	a901      	add	r1, sp, #4
 800f3da:	b142      	cbz	r2, 800f3ee <__ascii_mbtowc+0x1a>
 800f3dc:	b14b      	cbz	r3, 800f3f2 <__ascii_mbtowc+0x1e>
 800f3de:	7813      	ldrb	r3, [r2, #0]
 800f3e0:	600b      	str	r3, [r1, #0]
 800f3e2:	7812      	ldrb	r2, [r2, #0]
 800f3e4:	1e10      	subs	r0, r2, #0
 800f3e6:	bf18      	it	ne
 800f3e8:	2001      	movne	r0, #1
 800f3ea:	b002      	add	sp, #8
 800f3ec:	4770      	bx	lr
 800f3ee:	4610      	mov	r0, r2
 800f3f0:	e7fb      	b.n	800f3ea <__ascii_mbtowc+0x16>
 800f3f2:	f06f 0001 	mvn.w	r0, #1
 800f3f6:	e7f8      	b.n	800f3ea <__ascii_mbtowc+0x16>

0800f3f8 <_realloc_r>:
 800f3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3fc:	4680      	mov	r8, r0
 800f3fe:	4614      	mov	r4, r2
 800f400:	460e      	mov	r6, r1
 800f402:	b921      	cbnz	r1, 800f40e <_realloc_r+0x16>
 800f404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f408:	4611      	mov	r1, r2
 800f40a:	f7ff b977 	b.w	800e6fc <_malloc_r>
 800f40e:	b92a      	cbnz	r2, 800f41c <_realloc_r+0x24>
 800f410:	f7ff f900 	bl	800e614 <_free_r>
 800f414:	4625      	mov	r5, r4
 800f416:	4628      	mov	r0, r5
 800f418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f41c:	f000 f841 	bl	800f4a2 <_malloc_usable_size_r>
 800f420:	4284      	cmp	r4, r0
 800f422:	4607      	mov	r7, r0
 800f424:	d802      	bhi.n	800f42c <_realloc_r+0x34>
 800f426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f42a:	d812      	bhi.n	800f452 <_realloc_r+0x5a>
 800f42c:	4621      	mov	r1, r4
 800f42e:	4640      	mov	r0, r8
 800f430:	f7ff f964 	bl	800e6fc <_malloc_r>
 800f434:	4605      	mov	r5, r0
 800f436:	2800      	cmp	r0, #0
 800f438:	d0ed      	beq.n	800f416 <_realloc_r+0x1e>
 800f43a:	42bc      	cmp	r4, r7
 800f43c:	4622      	mov	r2, r4
 800f43e:	4631      	mov	r1, r6
 800f440:	bf28      	it	cs
 800f442:	463a      	movcs	r2, r7
 800f444:	f7fe fa5b 	bl	800d8fe <memcpy>
 800f448:	4631      	mov	r1, r6
 800f44a:	4640      	mov	r0, r8
 800f44c:	f7ff f8e2 	bl	800e614 <_free_r>
 800f450:	e7e1      	b.n	800f416 <_realloc_r+0x1e>
 800f452:	4635      	mov	r5, r6
 800f454:	e7df      	b.n	800f416 <_realloc_r+0x1e>

0800f456 <__ascii_wctomb>:
 800f456:	b149      	cbz	r1, 800f46c <__ascii_wctomb+0x16>
 800f458:	2aff      	cmp	r2, #255	; 0xff
 800f45a:	bf85      	ittet	hi
 800f45c:	238a      	movhi	r3, #138	; 0x8a
 800f45e:	6003      	strhi	r3, [r0, #0]
 800f460:	700a      	strbls	r2, [r1, #0]
 800f462:	f04f 30ff 	movhi.w	r0, #4294967295
 800f466:	bf98      	it	ls
 800f468:	2001      	movls	r0, #1
 800f46a:	4770      	bx	lr
 800f46c:	4608      	mov	r0, r1
 800f46e:	4770      	bx	lr

0800f470 <fiprintf>:
 800f470:	b40e      	push	{r1, r2, r3}
 800f472:	b503      	push	{r0, r1, lr}
 800f474:	4601      	mov	r1, r0
 800f476:	ab03      	add	r3, sp, #12
 800f478:	4805      	ldr	r0, [pc, #20]	; (800f490 <fiprintf+0x20>)
 800f47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f47e:	6800      	ldr	r0, [r0, #0]
 800f480:	9301      	str	r3, [sp, #4]
 800f482:	f000 f83f 	bl	800f504 <_vfiprintf_r>
 800f486:	b002      	add	sp, #8
 800f488:	f85d eb04 	ldr.w	lr, [sp], #4
 800f48c:	b003      	add	sp, #12
 800f48e:	4770      	bx	lr
 800f490:	20000068 	.word	0x20000068

0800f494 <abort>:
 800f494:	b508      	push	{r3, lr}
 800f496:	2006      	movs	r0, #6
 800f498:	f000 fa0c 	bl	800f8b4 <raise>
 800f49c:	2001      	movs	r0, #1
 800f49e:	f7f6 f9a5 	bl	80057ec <_exit>

0800f4a2 <_malloc_usable_size_r>:
 800f4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4a6:	1f18      	subs	r0, r3, #4
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	bfbc      	itt	lt
 800f4ac:	580b      	ldrlt	r3, [r1, r0]
 800f4ae:	18c0      	addlt	r0, r0, r3
 800f4b0:	4770      	bx	lr

0800f4b2 <__sfputc_r>:
 800f4b2:	6893      	ldr	r3, [r2, #8]
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	b410      	push	{r4}
 800f4ba:	6093      	str	r3, [r2, #8]
 800f4bc:	da08      	bge.n	800f4d0 <__sfputc_r+0x1e>
 800f4be:	6994      	ldr	r4, [r2, #24]
 800f4c0:	42a3      	cmp	r3, r4
 800f4c2:	db01      	blt.n	800f4c8 <__sfputc_r+0x16>
 800f4c4:	290a      	cmp	r1, #10
 800f4c6:	d103      	bne.n	800f4d0 <__sfputc_r+0x1e>
 800f4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4cc:	f000 b934 	b.w	800f738 <__swbuf_r>
 800f4d0:	6813      	ldr	r3, [r2, #0]
 800f4d2:	1c58      	adds	r0, r3, #1
 800f4d4:	6010      	str	r0, [r2, #0]
 800f4d6:	7019      	strb	r1, [r3, #0]
 800f4d8:	4608      	mov	r0, r1
 800f4da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <__sfputs_r>:
 800f4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4e2:	4606      	mov	r6, r0
 800f4e4:	460f      	mov	r7, r1
 800f4e6:	4614      	mov	r4, r2
 800f4e8:	18d5      	adds	r5, r2, r3
 800f4ea:	42ac      	cmp	r4, r5
 800f4ec:	d101      	bne.n	800f4f2 <__sfputs_r+0x12>
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	e007      	b.n	800f502 <__sfputs_r+0x22>
 800f4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4f6:	463a      	mov	r2, r7
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	f7ff ffda 	bl	800f4b2 <__sfputc_r>
 800f4fe:	1c43      	adds	r3, r0, #1
 800f500:	d1f3      	bne.n	800f4ea <__sfputs_r+0xa>
 800f502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f504 <_vfiprintf_r>:
 800f504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f508:	460d      	mov	r5, r1
 800f50a:	b09d      	sub	sp, #116	; 0x74
 800f50c:	4614      	mov	r4, r2
 800f50e:	4698      	mov	r8, r3
 800f510:	4606      	mov	r6, r0
 800f512:	b118      	cbz	r0, 800f51c <_vfiprintf_r+0x18>
 800f514:	6a03      	ldr	r3, [r0, #32]
 800f516:	b90b      	cbnz	r3, 800f51c <_vfiprintf_r+0x18>
 800f518:	f7fe f87a 	bl	800d610 <__sinit>
 800f51c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f51e:	07d9      	lsls	r1, r3, #31
 800f520:	d405      	bmi.n	800f52e <_vfiprintf_r+0x2a>
 800f522:	89ab      	ldrh	r3, [r5, #12]
 800f524:	059a      	lsls	r2, r3, #22
 800f526:	d402      	bmi.n	800f52e <_vfiprintf_r+0x2a>
 800f528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f52a:	f7fe f9de 	bl	800d8ea <__retarget_lock_acquire_recursive>
 800f52e:	89ab      	ldrh	r3, [r5, #12]
 800f530:	071b      	lsls	r3, r3, #28
 800f532:	d501      	bpl.n	800f538 <_vfiprintf_r+0x34>
 800f534:	692b      	ldr	r3, [r5, #16]
 800f536:	b99b      	cbnz	r3, 800f560 <_vfiprintf_r+0x5c>
 800f538:	4629      	mov	r1, r5
 800f53a:	4630      	mov	r0, r6
 800f53c:	f000 f93a 	bl	800f7b4 <__swsetup_r>
 800f540:	b170      	cbz	r0, 800f560 <_vfiprintf_r+0x5c>
 800f542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f544:	07dc      	lsls	r4, r3, #31
 800f546:	d504      	bpl.n	800f552 <_vfiprintf_r+0x4e>
 800f548:	f04f 30ff 	mov.w	r0, #4294967295
 800f54c:	b01d      	add	sp, #116	; 0x74
 800f54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f552:	89ab      	ldrh	r3, [r5, #12]
 800f554:	0598      	lsls	r0, r3, #22
 800f556:	d4f7      	bmi.n	800f548 <_vfiprintf_r+0x44>
 800f558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f55a:	f7fe f9c7 	bl	800d8ec <__retarget_lock_release_recursive>
 800f55e:	e7f3      	b.n	800f548 <_vfiprintf_r+0x44>
 800f560:	2300      	movs	r3, #0
 800f562:	9309      	str	r3, [sp, #36]	; 0x24
 800f564:	2320      	movs	r3, #32
 800f566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f56a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f56e:	2330      	movs	r3, #48	; 0x30
 800f570:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f724 <_vfiprintf_r+0x220>
 800f574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f578:	f04f 0901 	mov.w	r9, #1
 800f57c:	4623      	mov	r3, r4
 800f57e:	469a      	mov	sl, r3
 800f580:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f584:	b10a      	cbz	r2, 800f58a <_vfiprintf_r+0x86>
 800f586:	2a25      	cmp	r2, #37	; 0x25
 800f588:	d1f9      	bne.n	800f57e <_vfiprintf_r+0x7a>
 800f58a:	ebba 0b04 	subs.w	fp, sl, r4
 800f58e:	d00b      	beq.n	800f5a8 <_vfiprintf_r+0xa4>
 800f590:	465b      	mov	r3, fp
 800f592:	4622      	mov	r2, r4
 800f594:	4629      	mov	r1, r5
 800f596:	4630      	mov	r0, r6
 800f598:	f7ff ffa2 	bl	800f4e0 <__sfputs_r>
 800f59c:	3001      	adds	r0, #1
 800f59e:	f000 80a9 	beq.w	800f6f4 <_vfiprintf_r+0x1f0>
 800f5a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5a4:	445a      	add	r2, fp
 800f5a6:	9209      	str	r2, [sp, #36]	; 0x24
 800f5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f000 80a1 	beq.w	800f6f4 <_vfiprintf_r+0x1f0>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5bc:	f10a 0a01 	add.w	sl, sl, #1
 800f5c0:	9304      	str	r3, [sp, #16]
 800f5c2:	9307      	str	r3, [sp, #28]
 800f5c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5c8:	931a      	str	r3, [sp, #104]	; 0x68
 800f5ca:	4654      	mov	r4, sl
 800f5cc:	2205      	movs	r2, #5
 800f5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5d2:	4854      	ldr	r0, [pc, #336]	; (800f724 <_vfiprintf_r+0x220>)
 800f5d4:	f7f0 fdfc 	bl	80001d0 <memchr>
 800f5d8:	9a04      	ldr	r2, [sp, #16]
 800f5da:	b9d8      	cbnz	r0, 800f614 <_vfiprintf_r+0x110>
 800f5dc:	06d1      	lsls	r1, r2, #27
 800f5de:	bf44      	itt	mi
 800f5e0:	2320      	movmi	r3, #32
 800f5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5e6:	0713      	lsls	r3, r2, #28
 800f5e8:	bf44      	itt	mi
 800f5ea:	232b      	movmi	r3, #43	; 0x2b
 800f5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f5f4:	2b2a      	cmp	r3, #42	; 0x2a
 800f5f6:	d015      	beq.n	800f624 <_vfiprintf_r+0x120>
 800f5f8:	9a07      	ldr	r2, [sp, #28]
 800f5fa:	4654      	mov	r4, sl
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	f04f 0c0a 	mov.w	ip, #10
 800f602:	4621      	mov	r1, r4
 800f604:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f608:	3b30      	subs	r3, #48	; 0x30
 800f60a:	2b09      	cmp	r3, #9
 800f60c:	d94d      	bls.n	800f6aa <_vfiprintf_r+0x1a6>
 800f60e:	b1b0      	cbz	r0, 800f63e <_vfiprintf_r+0x13a>
 800f610:	9207      	str	r2, [sp, #28]
 800f612:	e014      	b.n	800f63e <_vfiprintf_r+0x13a>
 800f614:	eba0 0308 	sub.w	r3, r0, r8
 800f618:	fa09 f303 	lsl.w	r3, r9, r3
 800f61c:	4313      	orrs	r3, r2
 800f61e:	9304      	str	r3, [sp, #16]
 800f620:	46a2      	mov	sl, r4
 800f622:	e7d2      	b.n	800f5ca <_vfiprintf_r+0xc6>
 800f624:	9b03      	ldr	r3, [sp, #12]
 800f626:	1d19      	adds	r1, r3, #4
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	9103      	str	r1, [sp, #12]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	bfbb      	ittet	lt
 800f630:	425b      	neglt	r3, r3
 800f632:	f042 0202 	orrlt.w	r2, r2, #2
 800f636:	9307      	strge	r3, [sp, #28]
 800f638:	9307      	strlt	r3, [sp, #28]
 800f63a:	bfb8      	it	lt
 800f63c:	9204      	strlt	r2, [sp, #16]
 800f63e:	7823      	ldrb	r3, [r4, #0]
 800f640:	2b2e      	cmp	r3, #46	; 0x2e
 800f642:	d10c      	bne.n	800f65e <_vfiprintf_r+0x15a>
 800f644:	7863      	ldrb	r3, [r4, #1]
 800f646:	2b2a      	cmp	r3, #42	; 0x2a
 800f648:	d134      	bne.n	800f6b4 <_vfiprintf_r+0x1b0>
 800f64a:	9b03      	ldr	r3, [sp, #12]
 800f64c:	1d1a      	adds	r2, r3, #4
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	9203      	str	r2, [sp, #12]
 800f652:	2b00      	cmp	r3, #0
 800f654:	bfb8      	it	lt
 800f656:	f04f 33ff 	movlt.w	r3, #4294967295
 800f65a:	3402      	adds	r4, #2
 800f65c:	9305      	str	r3, [sp, #20]
 800f65e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f734 <_vfiprintf_r+0x230>
 800f662:	7821      	ldrb	r1, [r4, #0]
 800f664:	2203      	movs	r2, #3
 800f666:	4650      	mov	r0, sl
 800f668:	f7f0 fdb2 	bl	80001d0 <memchr>
 800f66c:	b138      	cbz	r0, 800f67e <_vfiprintf_r+0x17a>
 800f66e:	9b04      	ldr	r3, [sp, #16]
 800f670:	eba0 000a 	sub.w	r0, r0, sl
 800f674:	2240      	movs	r2, #64	; 0x40
 800f676:	4082      	lsls	r2, r0
 800f678:	4313      	orrs	r3, r2
 800f67a:	3401      	adds	r4, #1
 800f67c:	9304      	str	r3, [sp, #16]
 800f67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f682:	4829      	ldr	r0, [pc, #164]	; (800f728 <_vfiprintf_r+0x224>)
 800f684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f688:	2206      	movs	r2, #6
 800f68a:	f7f0 fda1 	bl	80001d0 <memchr>
 800f68e:	2800      	cmp	r0, #0
 800f690:	d03f      	beq.n	800f712 <_vfiprintf_r+0x20e>
 800f692:	4b26      	ldr	r3, [pc, #152]	; (800f72c <_vfiprintf_r+0x228>)
 800f694:	bb1b      	cbnz	r3, 800f6de <_vfiprintf_r+0x1da>
 800f696:	9b03      	ldr	r3, [sp, #12]
 800f698:	3307      	adds	r3, #7
 800f69a:	f023 0307 	bic.w	r3, r3, #7
 800f69e:	3308      	adds	r3, #8
 800f6a0:	9303      	str	r3, [sp, #12]
 800f6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6a4:	443b      	add	r3, r7
 800f6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f6a8:	e768      	b.n	800f57c <_vfiprintf_r+0x78>
 800f6aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6ae:	460c      	mov	r4, r1
 800f6b0:	2001      	movs	r0, #1
 800f6b2:	e7a6      	b.n	800f602 <_vfiprintf_r+0xfe>
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	3401      	adds	r4, #1
 800f6b8:	9305      	str	r3, [sp, #20]
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	f04f 0c0a 	mov.w	ip, #10
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6c6:	3a30      	subs	r2, #48	; 0x30
 800f6c8:	2a09      	cmp	r2, #9
 800f6ca:	d903      	bls.n	800f6d4 <_vfiprintf_r+0x1d0>
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d0c6      	beq.n	800f65e <_vfiprintf_r+0x15a>
 800f6d0:	9105      	str	r1, [sp, #20]
 800f6d2:	e7c4      	b.n	800f65e <_vfiprintf_r+0x15a>
 800f6d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6d8:	4604      	mov	r4, r0
 800f6da:	2301      	movs	r3, #1
 800f6dc:	e7f0      	b.n	800f6c0 <_vfiprintf_r+0x1bc>
 800f6de:	ab03      	add	r3, sp, #12
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	462a      	mov	r2, r5
 800f6e4:	4b12      	ldr	r3, [pc, #72]	; (800f730 <_vfiprintf_r+0x22c>)
 800f6e6:	a904      	add	r1, sp, #16
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	f7fd fb3f 	bl	800cd6c <_printf_float>
 800f6ee:	4607      	mov	r7, r0
 800f6f0:	1c78      	adds	r0, r7, #1
 800f6f2:	d1d6      	bne.n	800f6a2 <_vfiprintf_r+0x19e>
 800f6f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6f6:	07d9      	lsls	r1, r3, #31
 800f6f8:	d405      	bmi.n	800f706 <_vfiprintf_r+0x202>
 800f6fa:	89ab      	ldrh	r3, [r5, #12]
 800f6fc:	059a      	lsls	r2, r3, #22
 800f6fe:	d402      	bmi.n	800f706 <_vfiprintf_r+0x202>
 800f700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f702:	f7fe f8f3 	bl	800d8ec <__retarget_lock_release_recursive>
 800f706:	89ab      	ldrh	r3, [r5, #12]
 800f708:	065b      	lsls	r3, r3, #25
 800f70a:	f53f af1d 	bmi.w	800f548 <_vfiprintf_r+0x44>
 800f70e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f710:	e71c      	b.n	800f54c <_vfiprintf_r+0x48>
 800f712:	ab03      	add	r3, sp, #12
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	462a      	mov	r2, r5
 800f718:	4b05      	ldr	r3, [pc, #20]	; (800f730 <_vfiprintf_r+0x22c>)
 800f71a:	a904      	add	r1, sp, #16
 800f71c:	4630      	mov	r0, r6
 800f71e:	f7fd fdc9 	bl	800d2b4 <_printf_i>
 800f722:	e7e4      	b.n	800f6ee <_vfiprintf_r+0x1ea>
 800f724:	08012114 	.word	0x08012114
 800f728:	0801211e 	.word	0x0801211e
 800f72c:	0800cd6d 	.word	0x0800cd6d
 800f730:	0800f4e1 	.word	0x0800f4e1
 800f734:	0801211a 	.word	0x0801211a

0800f738 <__swbuf_r>:
 800f738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f73a:	460e      	mov	r6, r1
 800f73c:	4614      	mov	r4, r2
 800f73e:	4605      	mov	r5, r0
 800f740:	b118      	cbz	r0, 800f74a <__swbuf_r+0x12>
 800f742:	6a03      	ldr	r3, [r0, #32]
 800f744:	b90b      	cbnz	r3, 800f74a <__swbuf_r+0x12>
 800f746:	f7fd ff63 	bl	800d610 <__sinit>
 800f74a:	69a3      	ldr	r3, [r4, #24]
 800f74c:	60a3      	str	r3, [r4, #8]
 800f74e:	89a3      	ldrh	r3, [r4, #12]
 800f750:	071a      	lsls	r2, r3, #28
 800f752:	d525      	bpl.n	800f7a0 <__swbuf_r+0x68>
 800f754:	6923      	ldr	r3, [r4, #16]
 800f756:	b31b      	cbz	r3, 800f7a0 <__swbuf_r+0x68>
 800f758:	6823      	ldr	r3, [r4, #0]
 800f75a:	6922      	ldr	r2, [r4, #16]
 800f75c:	1a98      	subs	r0, r3, r2
 800f75e:	6963      	ldr	r3, [r4, #20]
 800f760:	b2f6      	uxtb	r6, r6
 800f762:	4283      	cmp	r3, r0
 800f764:	4637      	mov	r7, r6
 800f766:	dc04      	bgt.n	800f772 <__swbuf_r+0x3a>
 800f768:	4621      	mov	r1, r4
 800f76a:	4628      	mov	r0, r5
 800f76c:	f7ff fdac 	bl	800f2c8 <_fflush_r>
 800f770:	b9e0      	cbnz	r0, 800f7ac <__swbuf_r+0x74>
 800f772:	68a3      	ldr	r3, [r4, #8]
 800f774:	3b01      	subs	r3, #1
 800f776:	60a3      	str	r3, [r4, #8]
 800f778:	6823      	ldr	r3, [r4, #0]
 800f77a:	1c5a      	adds	r2, r3, #1
 800f77c:	6022      	str	r2, [r4, #0]
 800f77e:	701e      	strb	r6, [r3, #0]
 800f780:	6962      	ldr	r2, [r4, #20]
 800f782:	1c43      	adds	r3, r0, #1
 800f784:	429a      	cmp	r2, r3
 800f786:	d004      	beq.n	800f792 <__swbuf_r+0x5a>
 800f788:	89a3      	ldrh	r3, [r4, #12]
 800f78a:	07db      	lsls	r3, r3, #31
 800f78c:	d506      	bpl.n	800f79c <__swbuf_r+0x64>
 800f78e:	2e0a      	cmp	r6, #10
 800f790:	d104      	bne.n	800f79c <__swbuf_r+0x64>
 800f792:	4621      	mov	r1, r4
 800f794:	4628      	mov	r0, r5
 800f796:	f7ff fd97 	bl	800f2c8 <_fflush_r>
 800f79a:	b938      	cbnz	r0, 800f7ac <__swbuf_r+0x74>
 800f79c:	4638      	mov	r0, r7
 800f79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7a0:	4621      	mov	r1, r4
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	f000 f806 	bl	800f7b4 <__swsetup_r>
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d0d5      	beq.n	800f758 <__swbuf_r+0x20>
 800f7ac:	f04f 37ff 	mov.w	r7, #4294967295
 800f7b0:	e7f4      	b.n	800f79c <__swbuf_r+0x64>
	...

0800f7b4 <__swsetup_r>:
 800f7b4:	b538      	push	{r3, r4, r5, lr}
 800f7b6:	4b2a      	ldr	r3, [pc, #168]	; (800f860 <__swsetup_r+0xac>)
 800f7b8:	4605      	mov	r5, r0
 800f7ba:	6818      	ldr	r0, [r3, #0]
 800f7bc:	460c      	mov	r4, r1
 800f7be:	b118      	cbz	r0, 800f7c8 <__swsetup_r+0x14>
 800f7c0:	6a03      	ldr	r3, [r0, #32]
 800f7c2:	b90b      	cbnz	r3, 800f7c8 <__swsetup_r+0x14>
 800f7c4:	f7fd ff24 	bl	800d610 <__sinit>
 800f7c8:	89a3      	ldrh	r3, [r4, #12]
 800f7ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7ce:	0718      	lsls	r0, r3, #28
 800f7d0:	d422      	bmi.n	800f818 <__swsetup_r+0x64>
 800f7d2:	06d9      	lsls	r1, r3, #27
 800f7d4:	d407      	bmi.n	800f7e6 <__swsetup_r+0x32>
 800f7d6:	2309      	movs	r3, #9
 800f7d8:	602b      	str	r3, [r5, #0]
 800f7da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f7de:	81a3      	strh	r3, [r4, #12]
 800f7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7e4:	e034      	b.n	800f850 <__swsetup_r+0x9c>
 800f7e6:	0758      	lsls	r0, r3, #29
 800f7e8:	d512      	bpl.n	800f810 <__swsetup_r+0x5c>
 800f7ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7ec:	b141      	cbz	r1, 800f800 <__swsetup_r+0x4c>
 800f7ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7f2:	4299      	cmp	r1, r3
 800f7f4:	d002      	beq.n	800f7fc <__swsetup_r+0x48>
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	f7fe ff0c 	bl	800e614 <_free_r>
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	6363      	str	r3, [r4, #52]	; 0x34
 800f800:	89a3      	ldrh	r3, [r4, #12]
 800f802:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f806:	81a3      	strh	r3, [r4, #12]
 800f808:	2300      	movs	r3, #0
 800f80a:	6063      	str	r3, [r4, #4]
 800f80c:	6923      	ldr	r3, [r4, #16]
 800f80e:	6023      	str	r3, [r4, #0]
 800f810:	89a3      	ldrh	r3, [r4, #12]
 800f812:	f043 0308 	orr.w	r3, r3, #8
 800f816:	81a3      	strh	r3, [r4, #12]
 800f818:	6923      	ldr	r3, [r4, #16]
 800f81a:	b94b      	cbnz	r3, 800f830 <__swsetup_r+0x7c>
 800f81c:	89a3      	ldrh	r3, [r4, #12]
 800f81e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f826:	d003      	beq.n	800f830 <__swsetup_r+0x7c>
 800f828:	4621      	mov	r1, r4
 800f82a:	4628      	mov	r0, r5
 800f82c:	f000 f884 	bl	800f938 <__smakebuf_r>
 800f830:	89a0      	ldrh	r0, [r4, #12]
 800f832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f836:	f010 0301 	ands.w	r3, r0, #1
 800f83a:	d00a      	beq.n	800f852 <__swsetup_r+0x9e>
 800f83c:	2300      	movs	r3, #0
 800f83e:	60a3      	str	r3, [r4, #8]
 800f840:	6963      	ldr	r3, [r4, #20]
 800f842:	425b      	negs	r3, r3
 800f844:	61a3      	str	r3, [r4, #24]
 800f846:	6923      	ldr	r3, [r4, #16]
 800f848:	b943      	cbnz	r3, 800f85c <__swsetup_r+0xa8>
 800f84a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f84e:	d1c4      	bne.n	800f7da <__swsetup_r+0x26>
 800f850:	bd38      	pop	{r3, r4, r5, pc}
 800f852:	0781      	lsls	r1, r0, #30
 800f854:	bf58      	it	pl
 800f856:	6963      	ldrpl	r3, [r4, #20]
 800f858:	60a3      	str	r3, [r4, #8]
 800f85a:	e7f4      	b.n	800f846 <__swsetup_r+0x92>
 800f85c:	2000      	movs	r0, #0
 800f85e:	e7f7      	b.n	800f850 <__swsetup_r+0x9c>
 800f860:	20000068 	.word	0x20000068

0800f864 <_raise_r>:
 800f864:	291f      	cmp	r1, #31
 800f866:	b538      	push	{r3, r4, r5, lr}
 800f868:	4604      	mov	r4, r0
 800f86a:	460d      	mov	r5, r1
 800f86c:	d904      	bls.n	800f878 <_raise_r+0x14>
 800f86e:	2316      	movs	r3, #22
 800f870:	6003      	str	r3, [r0, #0]
 800f872:	f04f 30ff 	mov.w	r0, #4294967295
 800f876:	bd38      	pop	{r3, r4, r5, pc}
 800f878:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f87a:	b112      	cbz	r2, 800f882 <_raise_r+0x1e>
 800f87c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f880:	b94b      	cbnz	r3, 800f896 <_raise_r+0x32>
 800f882:	4620      	mov	r0, r4
 800f884:	f000 f830 	bl	800f8e8 <_getpid_r>
 800f888:	462a      	mov	r2, r5
 800f88a:	4601      	mov	r1, r0
 800f88c:	4620      	mov	r0, r4
 800f88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f892:	f000 b817 	b.w	800f8c4 <_kill_r>
 800f896:	2b01      	cmp	r3, #1
 800f898:	d00a      	beq.n	800f8b0 <_raise_r+0x4c>
 800f89a:	1c59      	adds	r1, r3, #1
 800f89c:	d103      	bne.n	800f8a6 <_raise_r+0x42>
 800f89e:	2316      	movs	r3, #22
 800f8a0:	6003      	str	r3, [r0, #0]
 800f8a2:	2001      	movs	r0, #1
 800f8a4:	e7e7      	b.n	800f876 <_raise_r+0x12>
 800f8a6:	2400      	movs	r4, #0
 800f8a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	4798      	blx	r3
 800f8b0:	2000      	movs	r0, #0
 800f8b2:	e7e0      	b.n	800f876 <_raise_r+0x12>

0800f8b4 <raise>:
 800f8b4:	4b02      	ldr	r3, [pc, #8]	; (800f8c0 <raise+0xc>)
 800f8b6:	4601      	mov	r1, r0
 800f8b8:	6818      	ldr	r0, [r3, #0]
 800f8ba:	f7ff bfd3 	b.w	800f864 <_raise_r>
 800f8be:	bf00      	nop
 800f8c0:	20000068 	.word	0x20000068

0800f8c4 <_kill_r>:
 800f8c4:	b538      	push	{r3, r4, r5, lr}
 800f8c6:	4d07      	ldr	r5, [pc, #28]	; (800f8e4 <_kill_r+0x20>)
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	4608      	mov	r0, r1
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	602b      	str	r3, [r5, #0]
 800f8d2:	f7f5 ff7b 	bl	80057cc <_kill>
 800f8d6:	1c43      	adds	r3, r0, #1
 800f8d8:	d102      	bne.n	800f8e0 <_kill_r+0x1c>
 800f8da:	682b      	ldr	r3, [r5, #0]
 800f8dc:	b103      	cbz	r3, 800f8e0 <_kill_r+0x1c>
 800f8de:	6023      	str	r3, [r4, #0]
 800f8e0:	bd38      	pop	{r3, r4, r5, pc}
 800f8e2:	bf00      	nop
 800f8e4:	200051d8 	.word	0x200051d8

0800f8e8 <_getpid_r>:
 800f8e8:	f7f5 bf68 	b.w	80057bc <_getpid>

0800f8ec <__swhatbuf_r>:
 800f8ec:	b570      	push	{r4, r5, r6, lr}
 800f8ee:	460c      	mov	r4, r1
 800f8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8f4:	2900      	cmp	r1, #0
 800f8f6:	b096      	sub	sp, #88	; 0x58
 800f8f8:	4615      	mov	r5, r2
 800f8fa:	461e      	mov	r6, r3
 800f8fc:	da0d      	bge.n	800f91a <__swhatbuf_r+0x2e>
 800f8fe:	89a3      	ldrh	r3, [r4, #12]
 800f900:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f904:	f04f 0100 	mov.w	r1, #0
 800f908:	bf0c      	ite	eq
 800f90a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f90e:	2340      	movne	r3, #64	; 0x40
 800f910:	2000      	movs	r0, #0
 800f912:	6031      	str	r1, [r6, #0]
 800f914:	602b      	str	r3, [r5, #0]
 800f916:	b016      	add	sp, #88	; 0x58
 800f918:	bd70      	pop	{r4, r5, r6, pc}
 800f91a:	466a      	mov	r2, sp
 800f91c:	f000 f848 	bl	800f9b0 <_fstat_r>
 800f920:	2800      	cmp	r0, #0
 800f922:	dbec      	blt.n	800f8fe <__swhatbuf_r+0x12>
 800f924:	9901      	ldr	r1, [sp, #4]
 800f926:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f92a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f92e:	4259      	negs	r1, r3
 800f930:	4159      	adcs	r1, r3
 800f932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f936:	e7eb      	b.n	800f910 <__swhatbuf_r+0x24>

0800f938 <__smakebuf_r>:
 800f938:	898b      	ldrh	r3, [r1, #12]
 800f93a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f93c:	079d      	lsls	r5, r3, #30
 800f93e:	4606      	mov	r6, r0
 800f940:	460c      	mov	r4, r1
 800f942:	d507      	bpl.n	800f954 <__smakebuf_r+0x1c>
 800f944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f948:	6023      	str	r3, [r4, #0]
 800f94a:	6123      	str	r3, [r4, #16]
 800f94c:	2301      	movs	r3, #1
 800f94e:	6163      	str	r3, [r4, #20]
 800f950:	b002      	add	sp, #8
 800f952:	bd70      	pop	{r4, r5, r6, pc}
 800f954:	ab01      	add	r3, sp, #4
 800f956:	466a      	mov	r2, sp
 800f958:	f7ff ffc8 	bl	800f8ec <__swhatbuf_r>
 800f95c:	9900      	ldr	r1, [sp, #0]
 800f95e:	4605      	mov	r5, r0
 800f960:	4630      	mov	r0, r6
 800f962:	f7fe fecb 	bl	800e6fc <_malloc_r>
 800f966:	b948      	cbnz	r0, 800f97c <__smakebuf_r+0x44>
 800f968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f96c:	059a      	lsls	r2, r3, #22
 800f96e:	d4ef      	bmi.n	800f950 <__smakebuf_r+0x18>
 800f970:	f023 0303 	bic.w	r3, r3, #3
 800f974:	f043 0302 	orr.w	r3, r3, #2
 800f978:	81a3      	strh	r3, [r4, #12]
 800f97a:	e7e3      	b.n	800f944 <__smakebuf_r+0xc>
 800f97c:	89a3      	ldrh	r3, [r4, #12]
 800f97e:	6020      	str	r0, [r4, #0]
 800f980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f984:	81a3      	strh	r3, [r4, #12]
 800f986:	9b00      	ldr	r3, [sp, #0]
 800f988:	6163      	str	r3, [r4, #20]
 800f98a:	9b01      	ldr	r3, [sp, #4]
 800f98c:	6120      	str	r0, [r4, #16]
 800f98e:	b15b      	cbz	r3, 800f9a8 <__smakebuf_r+0x70>
 800f990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f994:	4630      	mov	r0, r6
 800f996:	f000 f81d 	bl	800f9d4 <_isatty_r>
 800f99a:	b128      	cbz	r0, 800f9a8 <__smakebuf_r+0x70>
 800f99c:	89a3      	ldrh	r3, [r4, #12]
 800f99e:	f023 0303 	bic.w	r3, r3, #3
 800f9a2:	f043 0301 	orr.w	r3, r3, #1
 800f9a6:	81a3      	strh	r3, [r4, #12]
 800f9a8:	89a3      	ldrh	r3, [r4, #12]
 800f9aa:	431d      	orrs	r5, r3
 800f9ac:	81a5      	strh	r5, [r4, #12]
 800f9ae:	e7cf      	b.n	800f950 <__smakebuf_r+0x18>

0800f9b0 <_fstat_r>:
 800f9b0:	b538      	push	{r3, r4, r5, lr}
 800f9b2:	4d07      	ldr	r5, [pc, #28]	; (800f9d0 <_fstat_r+0x20>)
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	4608      	mov	r0, r1
 800f9ba:	4611      	mov	r1, r2
 800f9bc:	602b      	str	r3, [r5, #0]
 800f9be:	f7f5 ff64 	bl	800588a <_fstat>
 800f9c2:	1c43      	adds	r3, r0, #1
 800f9c4:	d102      	bne.n	800f9cc <_fstat_r+0x1c>
 800f9c6:	682b      	ldr	r3, [r5, #0]
 800f9c8:	b103      	cbz	r3, 800f9cc <_fstat_r+0x1c>
 800f9ca:	6023      	str	r3, [r4, #0]
 800f9cc:	bd38      	pop	{r3, r4, r5, pc}
 800f9ce:	bf00      	nop
 800f9d0:	200051d8 	.word	0x200051d8

0800f9d4 <_isatty_r>:
 800f9d4:	b538      	push	{r3, r4, r5, lr}
 800f9d6:	4d06      	ldr	r5, [pc, #24]	; (800f9f0 <_isatty_r+0x1c>)
 800f9d8:	2300      	movs	r3, #0
 800f9da:	4604      	mov	r4, r0
 800f9dc:	4608      	mov	r0, r1
 800f9de:	602b      	str	r3, [r5, #0]
 800f9e0:	f7f5 ff63 	bl	80058aa <_isatty>
 800f9e4:	1c43      	adds	r3, r0, #1
 800f9e6:	d102      	bne.n	800f9ee <_isatty_r+0x1a>
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	b103      	cbz	r3, 800f9ee <_isatty_r+0x1a>
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	bd38      	pop	{r3, r4, r5, pc}
 800f9f0:	200051d8 	.word	0x200051d8

0800f9f4 <atan2>:
 800f9f4:	f000 bbb8 	b.w	8010168 <__ieee754_atan2>

0800f9f8 <pow>:
 800f9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fa:	ed2d 8b02 	vpush	{d8}
 800f9fe:	eeb0 8a40 	vmov.f32	s16, s0
 800fa02:	eef0 8a60 	vmov.f32	s17, s1
 800fa06:	ec55 4b11 	vmov	r4, r5, d1
 800fa0a:	f000 fc75 	bl	80102f8 <__ieee754_pow>
 800fa0e:	4622      	mov	r2, r4
 800fa10:	462b      	mov	r3, r5
 800fa12:	4620      	mov	r0, r4
 800fa14:	4629      	mov	r1, r5
 800fa16:	ec57 6b10 	vmov	r6, r7, d0
 800fa1a:	f7f1 f887 	bl	8000b2c <__aeabi_dcmpun>
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d13b      	bne.n	800fa9a <pow+0xa2>
 800fa22:	ec51 0b18 	vmov	r0, r1, d8
 800fa26:	2200      	movs	r2, #0
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f7f1 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa2e:	b1b8      	cbz	r0, 800fa60 <pow+0x68>
 800fa30:	2200      	movs	r2, #0
 800fa32:	2300      	movs	r3, #0
 800fa34:	4620      	mov	r0, r4
 800fa36:	4629      	mov	r1, r5
 800fa38:	f7f1 f846 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d146      	bne.n	800face <pow+0xd6>
 800fa40:	ec45 4b10 	vmov	d0, r4, r5
 800fa44:	f000 f920 	bl	800fc88 <finite>
 800fa48:	b338      	cbz	r0, 800fa9a <pow+0xa2>
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	4620      	mov	r0, r4
 800fa50:	4629      	mov	r1, r5
 800fa52:	f7f1 f843 	bl	8000adc <__aeabi_dcmplt>
 800fa56:	b300      	cbz	r0, 800fa9a <pow+0xa2>
 800fa58:	f7fd ff1c 	bl	800d894 <__errno>
 800fa5c:	2322      	movs	r3, #34	; 0x22
 800fa5e:	e01b      	b.n	800fa98 <pow+0xa0>
 800fa60:	ec47 6b10 	vmov	d0, r6, r7
 800fa64:	f000 f910 	bl	800fc88 <finite>
 800fa68:	b9e0      	cbnz	r0, 800faa4 <pow+0xac>
 800fa6a:	eeb0 0a48 	vmov.f32	s0, s16
 800fa6e:	eef0 0a68 	vmov.f32	s1, s17
 800fa72:	f000 f909 	bl	800fc88 <finite>
 800fa76:	b1a8      	cbz	r0, 800faa4 <pow+0xac>
 800fa78:	ec45 4b10 	vmov	d0, r4, r5
 800fa7c:	f000 f904 	bl	800fc88 <finite>
 800fa80:	b180      	cbz	r0, 800faa4 <pow+0xac>
 800fa82:	4632      	mov	r2, r6
 800fa84:	463b      	mov	r3, r7
 800fa86:	4630      	mov	r0, r6
 800fa88:	4639      	mov	r1, r7
 800fa8a:	f7f1 f84f 	bl	8000b2c <__aeabi_dcmpun>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	d0e2      	beq.n	800fa58 <pow+0x60>
 800fa92:	f7fd feff 	bl	800d894 <__errno>
 800fa96:	2321      	movs	r3, #33	; 0x21
 800fa98:	6003      	str	r3, [r0, #0]
 800fa9a:	ecbd 8b02 	vpop	{d8}
 800fa9e:	ec47 6b10 	vmov	d0, r6, r7
 800faa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faa4:	2200      	movs	r2, #0
 800faa6:	2300      	movs	r3, #0
 800faa8:	4630      	mov	r0, r6
 800faaa:	4639      	mov	r1, r7
 800faac:	f7f1 f80c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d0f2      	beq.n	800fa9a <pow+0xa2>
 800fab4:	eeb0 0a48 	vmov.f32	s0, s16
 800fab8:	eef0 0a68 	vmov.f32	s1, s17
 800fabc:	f000 f8e4 	bl	800fc88 <finite>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d0ea      	beq.n	800fa9a <pow+0xa2>
 800fac4:	ec45 4b10 	vmov	d0, r4, r5
 800fac8:	f000 f8de 	bl	800fc88 <finite>
 800facc:	e7c3      	b.n	800fa56 <pow+0x5e>
 800face:	4f01      	ldr	r7, [pc, #4]	; (800fad4 <pow+0xdc>)
 800fad0:	2600      	movs	r6, #0
 800fad2:	e7e2      	b.n	800fa9a <pow+0xa2>
 800fad4:	3ff00000 	.word	0x3ff00000

0800fad8 <sqrt>:
 800fad8:	b538      	push	{r3, r4, r5, lr}
 800fada:	ed2d 8b02 	vpush	{d8}
 800fade:	ec55 4b10 	vmov	r4, r5, d0
 800fae2:	f000 f8dd 	bl	800fca0 <__ieee754_sqrt>
 800fae6:	4622      	mov	r2, r4
 800fae8:	462b      	mov	r3, r5
 800faea:	4620      	mov	r0, r4
 800faec:	4629      	mov	r1, r5
 800faee:	eeb0 8a40 	vmov.f32	s16, s0
 800faf2:	eef0 8a60 	vmov.f32	s17, s1
 800faf6:	f7f1 f819 	bl	8000b2c <__aeabi_dcmpun>
 800fafa:	b990      	cbnz	r0, 800fb22 <sqrt+0x4a>
 800fafc:	2200      	movs	r2, #0
 800fafe:	2300      	movs	r3, #0
 800fb00:	4620      	mov	r0, r4
 800fb02:	4629      	mov	r1, r5
 800fb04:	f7f0 ffea 	bl	8000adc <__aeabi_dcmplt>
 800fb08:	b158      	cbz	r0, 800fb22 <sqrt+0x4a>
 800fb0a:	f7fd fec3 	bl	800d894 <__errno>
 800fb0e:	2321      	movs	r3, #33	; 0x21
 800fb10:	6003      	str	r3, [r0, #0]
 800fb12:	2200      	movs	r2, #0
 800fb14:	2300      	movs	r3, #0
 800fb16:	4610      	mov	r0, r2
 800fb18:	4619      	mov	r1, r3
 800fb1a:	f7f0 fe97 	bl	800084c <__aeabi_ddiv>
 800fb1e:	ec41 0b18 	vmov	d8, r0, r1
 800fb22:	eeb0 0a48 	vmov.f32	s0, s16
 800fb26:	eef0 0a68 	vmov.f32	s1, s17
 800fb2a:	ecbd 8b02 	vpop	{d8}
 800fb2e:	bd38      	pop	{r3, r4, r5, pc}

0800fb30 <cos>:
 800fb30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb32:	ec53 2b10 	vmov	r2, r3, d0
 800fb36:	4826      	ldr	r0, [pc, #152]	; (800fbd0 <cos+0xa0>)
 800fb38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fb3c:	4281      	cmp	r1, r0
 800fb3e:	dc06      	bgt.n	800fb4e <cos+0x1e>
 800fb40:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fbc8 <cos+0x98>
 800fb44:	b005      	add	sp, #20
 800fb46:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb4a:	f000 b985 	b.w	800fe58 <__kernel_cos>
 800fb4e:	4821      	ldr	r0, [pc, #132]	; (800fbd4 <cos+0xa4>)
 800fb50:	4281      	cmp	r1, r0
 800fb52:	dd09      	ble.n	800fb68 <cos+0x38>
 800fb54:	ee10 0a10 	vmov	r0, s0
 800fb58:	4619      	mov	r1, r3
 800fb5a:	f7f0 fb95 	bl	8000288 <__aeabi_dsub>
 800fb5e:	ec41 0b10 	vmov	d0, r0, r1
 800fb62:	b005      	add	sp, #20
 800fb64:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb68:	4668      	mov	r0, sp
 800fb6a:	f001 f8f1 	bl	8010d50 <__ieee754_rem_pio2>
 800fb6e:	f000 0003 	and.w	r0, r0, #3
 800fb72:	2801      	cmp	r0, #1
 800fb74:	d00b      	beq.n	800fb8e <cos+0x5e>
 800fb76:	2802      	cmp	r0, #2
 800fb78:	d016      	beq.n	800fba8 <cos+0x78>
 800fb7a:	b9e0      	cbnz	r0, 800fbb6 <cos+0x86>
 800fb7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb80:	ed9d 0b00 	vldr	d0, [sp]
 800fb84:	f000 f968 	bl	800fe58 <__kernel_cos>
 800fb88:	ec51 0b10 	vmov	r0, r1, d0
 800fb8c:	e7e7      	b.n	800fb5e <cos+0x2e>
 800fb8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb92:	ed9d 0b00 	vldr	d0, [sp]
 800fb96:	f000 fa27 	bl	800ffe8 <__kernel_sin>
 800fb9a:	ec53 2b10 	vmov	r2, r3, d0
 800fb9e:	ee10 0a10 	vmov	r0, s0
 800fba2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fba6:	e7da      	b.n	800fb5e <cos+0x2e>
 800fba8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbac:	ed9d 0b00 	vldr	d0, [sp]
 800fbb0:	f000 f952 	bl	800fe58 <__kernel_cos>
 800fbb4:	e7f1      	b.n	800fb9a <cos+0x6a>
 800fbb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbba:	ed9d 0b00 	vldr	d0, [sp]
 800fbbe:	2001      	movs	r0, #1
 800fbc0:	f000 fa12 	bl	800ffe8 <__kernel_sin>
 800fbc4:	e7e0      	b.n	800fb88 <cos+0x58>
 800fbc6:	bf00      	nop
	...
 800fbd0:	3fe921fb 	.word	0x3fe921fb
 800fbd4:	7fefffff 	.word	0x7fefffff

0800fbd8 <sin>:
 800fbd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fbda:	ec53 2b10 	vmov	r2, r3, d0
 800fbde:	4828      	ldr	r0, [pc, #160]	; (800fc80 <sin+0xa8>)
 800fbe0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fbe4:	4281      	cmp	r1, r0
 800fbe6:	dc07      	bgt.n	800fbf8 <sin+0x20>
 800fbe8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800fc78 <sin+0xa0>
 800fbec:	2000      	movs	r0, #0
 800fbee:	b005      	add	sp, #20
 800fbf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbf4:	f000 b9f8 	b.w	800ffe8 <__kernel_sin>
 800fbf8:	4822      	ldr	r0, [pc, #136]	; (800fc84 <sin+0xac>)
 800fbfa:	4281      	cmp	r1, r0
 800fbfc:	dd09      	ble.n	800fc12 <sin+0x3a>
 800fbfe:	ee10 0a10 	vmov	r0, s0
 800fc02:	4619      	mov	r1, r3
 800fc04:	f7f0 fb40 	bl	8000288 <__aeabi_dsub>
 800fc08:	ec41 0b10 	vmov	d0, r0, r1
 800fc0c:	b005      	add	sp, #20
 800fc0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc12:	4668      	mov	r0, sp
 800fc14:	f001 f89c 	bl	8010d50 <__ieee754_rem_pio2>
 800fc18:	f000 0003 	and.w	r0, r0, #3
 800fc1c:	2801      	cmp	r0, #1
 800fc1e:	d00c      	beq.n	800fc3a <sin+0x62>
 800fc20:	2802      	cmp	r0, #2
 800fc22:	d011      	beq.n	800fc48 <sin+0x70>
 800fc24:	b9f0      	cbnz	r0, 800fc64 <sin+0x8c>
 800fc26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc2a:	ed9d 0b00 	vldr	d0, [sp]
 800fc2e:	2001      	movs	r0, #1
 800fc30:	f000 f9da 	bl	800ffe8 <__kernel_sin>
 800fc34:	ec51 0b10 	vmov	r0, r1, d0
 800fc38:	e7e6      	b.n	800fc08 <sin+0x30>
 800fc3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc3e:	ed9d 0b00 	vldr	d0, [sp]
 800fc42:	f000 f909 	bl	800fe58 <__kernel_cos>
 800fc46:	e7f5      	b.n	800fc34 <sin+0x5c>
 800fc48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc4c:	ed9d 0b00 	vldr	d0, [sp]
 800fc50:	2001      	movs	r0, #1
 800fc52:	f000 f9c9 	bl	800ffe8 <__kernel_sin>
 800fc56:	ec53 2b10 	vmov	r2, r3, d0
 800fc5a:	ee10 0a10 	vmov	r0, s0
 800fc5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fc62:	e7d1      	b.n	800fc08 <sin+0x30>
 800fc64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc68:	ed9d 0b00 	vldr	d0, [sp]
 800fc6c:	f000 f8f4 	bl	800fe58 <__kernel_cos>
 800fc70:	e7f1      	b.n	800fc56 <sin+0x7e>
 800fc72:	bf00      	nop
 800fc74:	f3af 8000 	nop.w
	...
 800fc80:	3fe921fb 	.word	0x3fe921fb
 800fc84:	7fefffff 	.word	0x7fefffff

0800fc88 <finite>:
 800fc88:	b082      	sub	sp, #8
 800fc8a:	ed8d 0b00 	vstr	d0, [sp]
 800fc8e:	9801      	ldr	r0, [sp, #4]
 800fc90:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fc94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fc98:	0fc0      	lsrs	r0, r0, #31
 800fc9a:	b002      	add	sp, #8
 800fc9c:	4770      	bx	lr
	...

0800fca0 <__ieee754_sqrt>:
 800fca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca4:	ec55 4b10 	vmov	r4, r5, d0
 800fca8:	4e67      	ldr	r6, [pc, #412]	; (800fe48 <__ieee754_sqrt+0x1a8>)
 800fcaa:	43ae      	bics	r6, r5
 800fcac:	ee10 0a10 	vmov	r0, s0
 800fcb0:	ee10 2a10 	vmov	r2, s0
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	462b      	mov	r3, r5
 800fcb8:	d10d      	bne.n	800fcd6 <__ieee754_sqrt+0x36>
 800fcba:	f7f0 fc9d 	bl	80005f8 <__aeabi_dmul>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	f7f0 fae1 	bl	800028c <__adddf3>
 800fcca:	4604      	mov	r4, r0
 800fccc:	460d      	mov	r5, r1
 800fcce:	ec45 4b10 	vmov	d0, r4, r5
 800fcd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd6:	2d00      	cmp	r5, #0
 800fcd8:	dc0b      	bgt.n	800fcf2 <__ieee754_sqrt+0x52>
 800fcda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fcde:	4326      	orrs	r6, r4
 800fce0:	d0f5      	beq.n	800fcce <__ieee754_sqrt+0x2e>
 800fce2:	b135      	cbz	r5, 800fcf2 <__ieee754_sqrt+0x52>
 800fce4:	f7f0 fad0 	bl	8000288 <__aeabi_dsub>
 800fce8:	4602      	mov	r2, r0
 800fcea:	460b      	mov	r3, r1
 800fcec:	f7f0 fdae 	bl	800084c <__aeabi_ddiv>
 800fcf0:	e7eb      	b.n	800fcca <__ieee754_sqrt+0x2a>
 800fcf2:	1509      	asrs	r1, r1, #20
 800fcf4:	f000 808d 	beq.w	800fe12 <__ieee754_sqrt+0x172>
 800fcf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcfc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fd00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd04:	07c9      	lsls	r1, r1, #31
 800fd06:	bf5c      	itt	pl
 800fd08:	005b      	lslpl	r3, r3, #1
 800fd0a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fd0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd12:	bf58      	it	pl
 800fd14:	0052      	lslpl	r2, r2, #1
 800fd16:	2500      	movs	r5, #0
 800fd18:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd1c:	1076      	asrs	r6, r6, #1
 800fd1e:	0052      	lsls	r2, r2, #1
 800fd20:	f04f 0e16 	mov.w	lr, #22
 800fd24:	46ac      	mov	ip, r5
 800fd26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fd2a:	eb0c 0001 	add.w	r0, ip, r1
 800fd2e:	4298      	cmp	r0, r3
 800fd30:	bfde      	ittt	le
 800fd32:	1a1b      	suble	r3, r3, r0
 800fd34:	eb00 0c01 	addle.w	ip, r0, r1
 800fd38:	186d      	addle	r5, r5, r1
 800fd3a:	005b      	lsls	r3, r3, #1
 800fd3c:	f1be 0e01 	subs.w	lr, lr, #1
 800fd40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd44:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fd48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fd4c:	d1ed      	bne.n	800fd2a <__ieee754_sqrt+0x8a>
 800fd4e:	4674      	mov	r4, lr
 800fd50:	2720      	movs	r7, #32
 800fd52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fd56:	4563      	cmp	r3, ip
 800fd58:	eb01 000e 	add.w	r0, r1, lr
 800fd5c:	dc02      	bgt.n	800fd64 <__ieee754_sqrt+0xc4>
 800fd5e:	d113      	bne.n	800fd88 <__ieee754_sqrt+0xe8>
 800fd60:	4290      	cmp	r0, r2
 800fd62:	d811      	bhi.n	800fd88 <__ieee754_sqrt+0xe8>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	eb00 0e01 	add.w	lr, r0, r1
 800fd6a:	da57      	bge.n	800fe1c <__ieee754_sqrt+0x17c>
 800fd6c:	f1be 0f00 	cmp.w	lr, #0
 800fd70:	db54      	blt.n	800fe1c <__ieee754_sqrt+0x17c>
 800fd72:	f10c 0801 	add.w	r8, ip, #1
 800fd76:	eba3 030c 	sub.w	r3, r3, ip
 800fd7a:	4290      	cmp	r0, r2
 800fd7c:	bf88      	it	hi
 800fd7e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fd82:	1a12      	subs	r2, r2, r0
 800fd84:	440c      	add	r4, r1
 800fd86:	46c4      	mov	ip, r8
 800fd88:	005b      	lsls	r3, r3, #1
 800fd8a:	3f01      	subs	r7, #1
 800fd8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fd94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fd98:	d1dd      	bne.n	800fd56 <__ieee754_sqrt+0xb6>
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	d01b      	beq.n	800fdd6 <__ieee754_sqrt+0x136>
 800fd9e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fe4c <__ieee754_sqrt+0x1ac>
 800fda2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fe50 <__ieee754_sqrt+0x1b0>
 800fda6:	e9da 0100 	ldrd	r0, r1, [sl]
 800fdaa:	e9db 2300 	ldrd	r2, r3, [fp]
 800fdae:	f7f0 fa6b 	bl	8000288 <__aeabi_dsub>
 800fdb2:	e9da 8900 	ldrd	r8, r9, [sl]
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	4640      	mov	r0, r8
 800fdbc:	4649      	mov	r1, r9
 800fdbe:	f7f0 fe97 	bl	8000af0 <__aeabi_dcmple>
 800fdc2:	b140      	cbz	r0, 800fdd6 <__ieee754_sqrt+0x136>
 800fdc4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fdc8:	e9da 0100 	ldrd	r0, r1, [sl]
 800fdcc:	e9db 2300 	ldrd	r2, r3, [fp]
 800fdd0:	d126      	bne.n	800fe20 <__ieee754_sqrt+0x180>
 800fdd2:	3501      	adds	r5, #1
 800fdd4:	463c      	mov	r4, r7
 800fdd6:	106a      	asrs	r2, r5, #1
 800fdd8:	0863      	lsrs	r3, r4, #1
 800fdda:	07e9      	lsls	r1, r5, #31
 800fddc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fde0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fde4:	bf48      	it	mi
 800fde6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fdea:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fdee:	461c      	mov	r4, r3
 800fdf0:	e76d      	b.n	800fcce <__ieee754_sqrt+0x2e>
 800fdf2:	0ad3      	lsrs	r3, r2, #11
 800fdf4:	3815      	subs	r0, #21
 800fdf6:	0552      	lsls	r2, r2, #21
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d0fa      	beq.n	800fdf2 <__ieee754_sqrt+0x152>
 800fdfc:	02dc      	lsls	r4, r3, #11
 800fdfe:	d50a      	bpl.n	800fe16 <__ieee754_sqrt+0x176>
 800fe00:	f1c1 0420 	rsb	r4, r1, #32
 800fe04:	fa22 f404 	lsr.w	r4, r2, r4
 800fe08:	1e4d      	subs	r5, r1, #1
 800fe0a:	408a      	lsls	r2, r1
 800fe0c:	4323      	orrs	r3, r4
 800fe0e:	1b41      	subs	r1, r0, r5
 800fe10:	e772      	b.n	800fcf8 <__ieee754_sqrt+0x58>
 800fe12:	4608      	mov	r0, r1
 800fe14:	e7f0      	b.n	800fdf8 <__ieee754_sqrt+0x158>
 800fe16:	005b      	lsls	r3, r3, #1
 800fe18:	3101      	adds	r1, #1
 800fe1a:	e7ef      	b.n	800fdfc <__ieee754_sqrt+0x15c>
 800fe1c:	46e0      	mov	r8, ip
 800fe1e:	e7aa      	b.n	800fd76 <__ieee754_sqrt+0xd6>
 800fe20:	f7f0 fa34 	bl	800028c <__adddf3>
 800fe24:	e9da 8900 	ldrd	r8, r9, [sl]
 800fe28:	4602      	mov	r2, r0
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	4649      	mov	r1, r9
 800fe30:	f7f0 fe54 	bl	8000adc <__aeabi_dcmplt>
 800fe34:	b120      	cbz	r0, 800fe40 <__ieee754_sqrt+0x1a0>
 800fe36:	1ca0      	adds	r0, r4, #2
 800fe38:	bf08      	it	eq
 800fe3a:	3501      	addeq	r5, #1
 800fe3c:	3402      	adds	r4, #2
 800fe3e:	e7ca      	b.n	800fdd6 <__ieee754_sqrt+0x136>
 800fe40:	3401      	adds	r4, #1
 800fe42:	f024 0401 	bic.w	r4, r4, #1
 800fe46:	e7c6      	b.n	800fdd6 <__ieee754_sqrt+0x136>
 800fe48:	7ff00000 	.word	0x7ff00000
 800fe4c:	200001d8 	.word	0x200001d8
 800fe50:	200001e0 	.word	0x200001e0
 800fe54:	00000000 	.word	0x00000000

0800fe58 <__kernel_cos>:
 800fe58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	ec57 6b10 	vmov	r6, r7, d0
 800fe60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fe64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fe68:	ed8d 1b00 	vstr	d1, [sp]
 800fe6c:	da07      	bge.n	800fe7e <__kernel_cos+0x26>
 800fe6e:	ee10 0a10 	vmov	r0, s0
 800fe72:	4639      	mov	r1, r7
 800fe74:	f7f0 fe70 	bl	8000b58 <__aeabi_d2iz>
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	f000 8088 	beq.w	800ff8e <__kernel_cos+0x136>
 800fe7e:	4632      	mov	r2, r6
 800fe80:	463b      	mov	r3, r7
 800fe82:	4630      	mov	r0, r6
 800fe84:	4639      	mov	r1, r7
 800fe86:	f7f0 fbb7 	bl	80005f8 <__aeabi_dmul>
 800fe8a:	4b51      	ldr	r3, [pc, #324]	; (800ffd0 <__kernel_cos+0x178>)
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	4604      	mov	r4, r0
 800fe90:	460d      	mov	r5, r1
 800fe92:	f7f0 fbb1 	bl	80005f8 <__aeabi_dmul>
 800fe96:	a340      	add	r3, pc, #256	; (adr r3, 800ff98 <__kernel_cos+0x140>)
 800fe98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9c:	4682      	mov	sl, r0
 800fe9e:	468b      	mov	fp, r1
 800fea0:	4620      	mov	r0, r4
 800fea2:	4629      	mov	r1, r5
 800fea4:	f7f0 fba8 	bl	80005f8 <__aeabi_dmul>
 800fea8:	a33d      	add	r3, pc, #244	; (adr r3, 800ffa0 <__kernel_cos+0x148>)
 800feaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feae:	f7f0 f9ed 	bl	800028c <__adddf3>
 800feb2:	4622      	mov	r2, r4
 800feb4:	462b      	mov	r3, r5
 800feb6:	f7f0 fb9f 	bl	80005f8 <__aeabi_dmul>
 800feba:	a33b      	add	r3, pc, #236	; (adr r3, 800ffa8 <__kernel_cos+0x150>)
 800febc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec0:	f7f0 f9e2 	bl	8000288 <__aeabi_dsub>
 800fec4:	4622      	mov	r2, r4
 800fec6:	462b      	mov	r3, r5
 800fec8:	f7f0 fb96 	bl	80005f8 <__aeabi_dmul>
 800fecc:	a338      	add	r3, pc, #224	; (adr r3, 800ffb0 <__kernel_cos+0x158>)
 800fece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed2:	f7f0 f9db 	bl	800028c <__adddf3>
 800fed6:	4622      	mov	r2, r4
 800fed8:	462b      	mov	r3, r5
 800feda:	f7f0 fb8d 	bl	80005f8 <__aeabi_dmul>
 800fede:	a336      	add	r3, pc, #216	; (adr r3, 800ffb8 <__kernel_cos+0x160>)
 800fee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee4:	f7f0 f9d0 	bl	8000288 <__aeabi_dsub>
 800fee8:	4622      	mov	r2, r4
 800feea:	462b      	mov	r3, r5
 800feec:	f7f0 fb84 	bl	80005f8 <__aeabi_dmul>
 800fef0:	a333      	add	r3, pc, #204	; (adr r3, 800ffc0 <__kernel_cos+0x168>)
 800fef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef6:	f7f0 f9c9 	bl	800028c <__adddf3>
 800fefa:	4622      	mov	r2, r4
 800fefc:	462b      	mov	r3, r5
 800fefe:	f7f0 fb7b 	bl	80005f8 <__aeabi_dmul>
 800ff02:	4622      	mov	r2, r4
 800ff04:	462b      	mov	r3, r5
 800ff06:	f7f0 fb77 	bl	80005f8 <__aeabi_dmul>
 800ff0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff0e:	4604      	mov	r4, r0
 800ff10:	460d      	mov	r5, r1
 800ff12:	4630      	mov	r0, r6
 800ff14:	4639      	mov	r1, r7
 800ff16:	f7f0 fb6f 	bl	80005f8 <__aeabi_dmul>
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	4629      	mov	r1, r5
 800ff20:	4620      	mov	r0, r4
 800ff22:	f7f0 f9b1 	bl	8000288 <__aeabi_dsub>
 800ff26:	4b2b      	ldr	r3, [pc, #172]	; (800ffd4 <__kernel_cos+0x17c>)
 800ff28:	4598      	cmp	r8, r3
 800ff2a:	4606      	mov	r6, r0
 800ff2c:	460f      	mov	r7, r1
 800ff2e:	dc10      	bgt.n	800ff52 <__kernel_cos+0xfa>
 800ff30:	4602      	mov	r2, r0
 800ff32:	460b      	mov	r3, r1
 800ff34:	4650      	mov	r0, sl
 800ff36:	4659      	mov	r1, fp
 800ff38:	f7f0 f9a6 	bl	8000288 <__aeabi_dsub>
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	4926      	ldr	r1, [pc, #152]	; (800ffd8 <__kernel_cos+0x180>)
 800ff40:	4602      	mov	r2, r0
 800ff42:	2000      	movs	r0, #0
 800ff44:	f7f0 f9a0 	bl	8000288 <__aeabi_dsub>
 800ff48:	ec41 0b10 	vmov	d0, r0, r1
 800ff4c:	b003      	add	sp, #12
 800ff4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff52:	4b22      	ldr	r3, [pc, #136]	; (800ffdc <__kernel_cos+0x184>)
 800ff54:	4920      	ldr	r1, [pc, #128]	; (800ffd8 <__kernel_cos+0x180>)
 800ff56:	4598      	cmp	r8, r3
 800ff58:	bfcc      	ite	gt
 800ff5a:	4d21      	ldrgt	r5, [pc, #132]	; (800ffe0 <__kernel_cos+0x188>)
 800ff5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ff60:	2400      	movs	r4, #0
 800ff62:	4622      	mov	r2, r4
 800ff64:	462b      	mov	r3, r5
 800ff66:	2000      	movs	r0, #0
 800ff68:	f7f0 f98e 	bl	8000288 <__aeabi_dsub>
 800ff6c:	4622      	mov	r2, r4
 800ff6e:	4680      	mov	r8, r0
 800ff70:	4689      	mov	r9, r1
 800ff72:	462b      	mov	r3, r5
 800ff74:	4650      	mov	r0, sl
 800ff76:	4659      	mov	r1, fp
 800ff78:	f7f0 f986 	bl	8000288 <__aeabi_dsub>
 800ff7c:	4632      	mov	r2, r6
 800ff7e:	463b      	mov	r3, r7
 800ff80:	f7f0 f982 	bl	8000288 <__aeabi_dsub>
 800ff84:	4602      	mov	r2, r0
 800ff86:	460b      	mov	r3, r1
 800ff88:	4640      	mov	r0, r8
 800ff8a:	4649      	mov	r1, r9
 800ff8c:	e7da      	b.n	800ff44 <__kernel_cos+0xec>
 800ff8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ffc8 <__kernel_cos+0x170>
 800ff92:	e7db      	b.n	800ff4c <__kernel_cos+0xf4>
 800ff94:	f3af 8000 	nop.w
 800ff98:	be8838d4 	.word	0xbe8838d4
 800ff9c:	bda8fae9 	.word	0xbda8fae9
 800ffa0:	bdb4b1c4 	.word	0xbdb4b1c4
 800ffa4:	3e21ee9e 	.word	0x3e21ee9e
 800ffa8:	809c52ad 	.word	0x809c52ad
 800ffac:	3e927e4f 	.word	0x3e927e4f
 800ffb0:	19cb1590 	.word	0x19cb1590
 800ffb4:	3efa01a0 	.word	0x3efa01a0
 800ffb8:	16c15177 	.word	0x16c15177
 800ffbc:	3f56c16c 	.word	0x3f56c16c
 800ffc0:	5555554c 	.word	0x5555554c
 800ffc4:	3fa55555 	.word	0x3fa55555
 800ffc8:	00000000 	.word	0x00000000
 800ffcc:	3ff00000 	.word	0x3ff00000
 800ffd0:	3fe00000 	.word	0x3fe00000
 800ffd4:	3fd33332 	.word	0x3fd33332
 800ffd8:	3ff00000 	.word	0x3ff00000
 800ffdc:	3fe90000 	.word	0x3fe90000
 800ffe0:	3fd20000 	.word	0x3fd20000
 800ffe4:	00000000 	.word	0x00000000

0800ffe8 <__kernel_sin>:
 800ffe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	ed2d 8b04 	vpush	{d8-d9}
 800fff0:	eeb0 8a41 	vmov.f32	s16, s2
 800fff4:	eef0 8a61 	vmov.f32	s17, s3
 800fff8:	ec55 4b10 	vmov	r4, r5, d0
 800fffc:	b083      	sub	sp, #12
 800fffe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010002:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010006:	9001      	str	r0, [sp, #4]
 8010008:	da06      	bge.n	8010018 <__kernel_sin+0x30>
 801000a:	ee10 0a10 	vmov	r0, s0
 801000e:	4629      	mov	r1, r5
 8010010:	f7f0 fda2 	bl	8000b58 <__aeabi_d2iz>
 8010014:	2800      	cmp	r0, #0
 8010016:	d051      	beq.n	80100bc <__kernel_sin+0xd4>
 8010018:	4622      	mov	r2, r4
 801001a:	462b      	mov	r3, r5
 801001c:	4620      	mov	r0, r4
 801001e:	4629      	mov	r1, r5
 8010020:	f7f0 faea 	bl	80005f8 <__aeabi_dmul>
 8010024:	4682      	mov	sl, r0
 8010026:	468b      	mov	fp, r1
 8010028:	4602      	mov	r2, r0
 801002a:	460b      	mov	r3, r1
 801002c:	4620      	mov	r0, r4
 801002e:	4629      	mov	r1, r5
 8010030:	f7f0 fae2 	bl	80005f8 <__aeabi_dmul>
 8010034:	a341      	add	r3, pc, #260	; (adr r3, 801013c <__kernel_sin+0x154>)
 8010036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003a:	4680      	mov	r8, r0
 801003c:	4689      	mov	r9, r1
 801003e:	4650      	mov	r0, sl
 8010040:	4659      	mov	r1, fp
 8010042:	f7f0 fad9 	bl	80005f8 <__aeabi_dmul>
 8010046:	a33f      	add	r3, pc, #252	; (adr r3, 8010144 <__kernel_sin+0x15c>)
 8010048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004c:	f7f0 f91c 	bl	8000288 <__aeabi_dsub>
 8010050:	4652      	mov	r2, sl
 8010052:	465b      	mov	r3, fp
 8010054:	f7f0 fad0 	bl	80005f8 <__aeabi_dmul>
 8010058:	a33c      	add	r3, pc, #240	; (adr r3, 801014c <__kernel_sin+0x164>)
 801005a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005e:	f7f0 f915 	bl	800028c <__adddf3>
 8010062:	4652      	mov	r2, sl
 8010064:	465b      	mov	r3, fp
 8010066:	f7f0 fac7 	bl	80005f8 <__aeabi_dmul>
 801006a:	a33a      	add	r3, pc, #232	; (adr r3, 8010154 <__kernel_sin+0x16c>)
 801006c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010070:	f7f0 f90a 	bl	8000288 <__aeabi_dsub>
 8010074:	4652      	mov	r2, sl
 8010076:	465b      	mov	r3, fp
 8010078:	f7f0 fabe 	bl	80005f8 <__aeabi_dmul>
 801007c:	a337      	add	r3, pc, #220	; (adr r3, 801015c <__kernel_sin+0x174>)
 801007e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010082:	f7f0 f903 	bl	800028c <__adddf3>
 8010086:	9b01      	ldr	r3, [sp, #4]
 8010088:	4606      	mov	r6, r0
 801008a:	460f      	mov	r7, r1
 801008c:	b9eb      	cbnz	r3, 80100ca <__kernel_sin+0xe2>
 801008e:	4602      	mov	r2, r0
 8010090:	460b      	mov	r3, r1
 8010092:	4650      	mov	r0, sl
 8010094:	4659      	mov	r1, fp
 8010096:	f7f0 faaf 	bl	80005f8 <__aeabi_dmul>
 801009a:	a325      	add	r3, pc, #148	; (adr r3, 8010130 <__kernel_sin+0x148>)
 801009c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a0:	f7f0 f8f2 	bl	8000288 <__aeabi_dsub>
 80100a4:	4642      	mov	r2, r8
 80100a6:	464b      	mov	r3, r9
 80100a8:	f7f0 faa6 	bl	80005f8 <__aeabi_dmul>
 80100ac:	4602      	mov	r2, r0
 80100ae:	460b      	mov	r3, r1
 80100b0:	4620      	mov	r0, r4
 80100b2:	4629      	mov	r1, r5
 80100b4:	f7f0 f8ea 	bl	800028c <__adddf3>
 80100b8:	4604      	mov	r4, r0
 80100ba:	460d      	mov	r5, r1
 80100bc:	ec45 4b10 	vmov	d0, r4, r5
 80100c0:	b003      	add	sp, #12
 80100c2:	ecbd 8b04 	vpop	{d8-d9}
 80100c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ca:	4b1b      	ldr	r3, [pc, #108]	; (8010138 <__kernel_sin+0x150>)
 80100cc:	ec51 0b18 	vmov	r0, r1, d8
 80100d0:	2200      	movs	r2, #0
 80100d2:	f7f0 fa91 	bl	80005f8 <__aeabi_dmul>
 80100d6:	4632      	mov	r2, r6
 80100d8:	ec41 0b19 	vmov	d9, r0, r1
 80100dc:	463b      	mov	r3, r7
 80100de:	4640      	mov	r0, r8
 80100e0:	4649      	mov	r1, r9
 80100e2:	f7f0 fa89 	bl	80005f8 <__aeabi_dmul>
 80100e6:	4602      	mov	r2, r0
 80100e8:	460b      	mov	r3, r1
 80100ea:	ec51 0b19 	vmov	r0, r1, d9
 80100ee:	f7f0 f8cb 	bl	8000288 <__aeabi_dsub>
 80100f2:	4652      	mov	r2, sl
 80100f4:	465b      	mov	r3, fp
 80100f6:	f7f0 fa7f 	bl	80005f8 <__aeabi_dmul>
 80100fa:	ec53 2b18 	vmov	r2, r3, d8
 80100fe:	f7f0 f8c3 	bl	8000288 <__aeabi_dsub>
 8010102:	a30b      	add	r3, pc, #44	; (adr r3, 8010130 <__kernel_sin+0x148>)
 8010104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010108:	4606      	mov	r6, r0
 801010a:	460f      	mov	r7, r1
 801010c:	4640      	mov	r0, r8
 801010e:	4649      	mov	r1, r9
 8010110:	f7f0 fa72 	bl	80005f8 <__aeabi_dmul>
 8010114:	4602      	mov	r2, r0
 8010116:	460b      	mov	r3, r1
 8010118:	4630      	mov	r0, r6
 801011a:	4639      	mov	r1, r7
 801011c:	f7f0 f8b6 	bl	800028c <__adddf3>
 8010120:	4602      	mov	r2, r0
 8010122:	460b      	mov	r3, r1
 8010124:	4620      	mov	r0, r4
 8010126:	4629      	mov	r1, r5
 8010128:	f7f0 f8ae 	bl	8000288 <__aeabi_dsub>
 801012c:	e7c4      	b.n	80100b8 <__kernel_sin+0xd0>
 801012e:	bf00      	nop
 8010130:	55555549 	.word	0x55555549
 8010134:	3fc55555 	.word	0x3fc55555
 8010138:	3fe00000 	.word	0x3fe00000
 801013c:	5acfd57c 	.word	0x5acfd57c
 8010140:	3de5d93a 	.word	0x3de5d93a
 8010144:	8a2b9ceb 	.word	0x8a2b9ceb
 8010148:	3e5ae5e6 	.word	0x3e5ae5e6
 801014c:	57b1fe7d 	.word	0x57b1fe7d
 8010150:	3ec71de3 	.word	0x3ec71de3
 8010154:	19c161d5 	.word	0x19c161d5
 8010158:	3f2a01a0 	.word	0x3f2a01a0
 801015c:	1110f8a6 	.word	0x1110f8a6
 8010160:	3f811111 	.word	0x3f811111
 8010164:	00000000 	.word	0x00000000

08010168 <__ieee754_atan2>:
 8010168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801016c:	ec57 6b11 	vmov	r6, r7, d1
 8010170:	4273      	negs	r3, r6
 8010172:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80102f0 <__ieee754_atan2+0x188>
 8010176:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801017a:	4333      	orrs	r3, r6
 801017c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010180:	4543      	cmp	r3, r8
 8010182:	ec51 0b10 	vmov	r0, r1, d0
 8010186:	ee11 5a10 	vmov	r5, s2
 801018a:	d80a      	bhi.n	80101a2 <__ieee754_atan2+0x3a>
 801018c:	4244      	negs	r4, r0
 801018e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010192:	4304      	orrs	r4, r0
 8010194:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010198:	4544      	cmp	r4, r8
 801019a:	ee10 9a10 	vmov	r9, s0
 801019e:	468e      	mov	lr, r1
 80101a0:	d907      	bls.n	80101b2 <__ieee754_atan2+0x4a>
 80101a2:	4632      	mov	r2, r6
 80101a4:	463b      	mov	r3, r7
 80101a6:	f7f0 f871 	bl	800028c <__adddf3>
 80101aa:	ec41 0b10 	vmov	d0, r0, r1
 80101ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101b2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80101b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80101ba:	4334      	orrs	r4, r6
 80101bc:	d103      	bne.n	80101c6 <__ieee754_atan2+0x5e>
 80101be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101c2:	f000 bfcd 	b.w	8011160 <atan>
 80101c6:	17bc      	asrs	r4, r7, #30
 80101c8:	f004 0402 	and.w	r4, r4, #2
 80101cc:	ea53 0909 	orrs.w	r9, r3, r9
 80101d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80101d4:	d107      	bne.n	80101e6 <__ieee754_atan2+0x7e>
 80101d6:	2c02      	cmp	r4, #2
 80101d8:	d05f      	beq.n	801029a <__ieee754_atan2+0x132>
 80101da:	2c03      	cmp	r4, #3
 80101dc:	d1e5      	bne.n	80101aa <__ieee754_atan2+0x42>
 80101de:	a140      	add	r1, pc, #256	; (adr r1, 80102e0 <__ieee754_atan2+0x178>)
 80101e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101e4:	e7e1      	b.n	80101aa <__ieee754_atan2+0x42>
 80101e6:	4315      	orrs	r5, r2
 80101e8:	d106      	bne.n	80101f8 <__ieee754_atan2+0x90>
 80101ea:	f1be 0f00 	cmp.w	lr, #0
 80101ee:	da5f      	bge.n	80102b0 <__ieee754_atan2+0x148>
 80101f0:	a13d      	add	r1, pc, #244	; (adr r1, 80102e8 <__ieee754_atan2+0x180>)
 80101f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101f6:	e7d8      	b.n	80101aa <__ieee754_atan2+0x42>
 80101f8:	4542      	cmp	r2, r8
 80101fa:	d10f      	bne.n	801021c <__ieee754_atan2+0xb4>
 80101fc:	4293      	cmp	r3, r2
 80101fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8010202:	d107      	bne.n	8010214 <__ieee754_atan2+0xac>
 8010204:	2c02      	cmp	r4, #2
 8010206:	d84c      	bhi.n	80102a2 <__ieee754_atan2+0x13a>
 8010208:	4b33      	ldr	r3, [pc, #204]	; (80102d8 <__ieee754_atan2+0x170>)
 801020a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801020e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010212:	e7ca      	b.n	80101aa <__ieee754_atan2+0x42>
 8010214:	2c02      	cmp	r4, #2
 8010216:	d848      	bhi.n	80102aa <__ieee754_atan2+0x142>
 8010218:	4b30      	ldr	r3, [pc, #192]	; (80102dc <__ieee754_atan2+0x174>)
 801021a:	e7f6      	b.n	801020a <__ieee754_atan2+0xa2>
 801021c:	4543      	cmp	r3, r8
 801021e:	d0e4      	beq.n	80101ea <__ieee754_atan2+0x82>
 8010220:	1a9b      	subs	r3, r3, r2
 8010222:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010226:	ea4f 5223 	mov.w	r2, r3, asr #20
 801022a:	da1e      	bge.n	801026a <__ieee754_atan2+0x102>
 801022c:	2f00      	cmp	r7, #0
 801022e:	da01      	bge.n	8010234 <__ieee754_atan2+0xcc>
 8010230:	323c      	adds	r2, #60	; 0x3c
 8010232:	db1e      	blt.n	8010272 <__ieee754_atan2+0x10a>
 8010234:	4632      	mov	r2, r6
 8010236:	463b      	mov	r3, r7
 8010238:	f7f0 fb08 	bl	800084c <__aeabi_ddiv>
 801023c:	ec41 0b10 	vmov	d0, r0, r1
 8010240:	f001 f92e 	bl	80114a0 <fabs>
 8010244:	f000 ff8c 	bl	8011160 <atan>
 8010248:	ec51 0b10 	vmov	r0, r1, d0
 801024c:	2c01      	cmp	r4, #1
 801024e:	d013      	beq.n	8010278 <__ieee754_atan2+0x110>
 8010250:	2c02      	cmp	r4, #2
 8010252:	d015      	beq.n	8010280 <__ieee754_atan2+0x118>
 8010254:	2c00      	cmp	r4, #0
 8010256:	d0a8      	beq.n	80101aa <__ieee754_atan2+0x42>
 8010258:	a317      	add	r3, pc, #92	; (adr r3, 80102b8 <__ieee754_atan2+0x150>)
 801025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025e:	f7f0 f813 	bl	8000288 <__aeabi_dsub>
 8010262:	a317      	add	r3, pc, #92	; (adr r3, 80102c0 <__ieee754_atan2+0x158>)
 8010264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010268:	e014      	b.n	8010294 <__ieee754_atan2+0x12c>
 801026a:	a117      	add	r1, pc, #92	; (adr r1, 80102c8 <__ieee754_atan2+0x160>)
 801026c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010270:	e7ec      	b.n	801024c <__ieee754_atan2+0xe4>
 8010272:	2000      	movs	r0, #0
 8010274:	2100      	movs	r1, #0
 8010276:	e7e9      	b.n	801024c <__ieee754_atan2+0xe4>
 8010278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801027c:	4619      	mov	r1, r3
 801027e:	e794      	b.n	80101aa <__ieee754_atan2+0x42>
 8010280:	a30d      	add	r3, pc, #52	; (adr r3, 80102b8 <__ieee754_atan2+0x150>)
 8010282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010286:	f7ef ffff 	bl	8000288 <__aeabi_dsub>
 801028a:	4602      	mov	r2, r0
 801028c:	460b      	mov	r3, r1
 801028e:	a10c      	add	r1, pc, #48	; (adr r1, 80102c0 <__ieee754_atan2+0x158>)
 8010290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010294:	f7ef fff8 	bl	8000288 <__aeabi_dsub>
 8010298:	e787      	b.n	80101aa <__ieee754_atan2+0x42>
 801029a:	a109      	add	r1, pc, #36	; (adr r1, 80102c0 <__ieee754_atan2+0x158>)
 801029c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102a0:	e783      	b.n	80101aa <__ieee754_atan2+0x42>
 80102a2:	a10b      	add	r1, pc, #44	; (adr r1, 80102d0 <__ieee754_atan2+0x168>)
 80102a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102a8:	e77f      	b.n	80101aa <__ieee754_atan2+0x42>
 80102aa:	2000      	movs	r0, #0
 80102ac:	2100      	movs	r1, #0
 80102ae:	e77c      	b.n	80101aa <__ieee754_atan2+0x42>
 80102b0:	a105      	add	r1, pc, #20	; (adr r1, 80102c8 <__ieee754_atan2+0x160>)
 80102b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102b6:	e778      	b.n	80101aa <__ieee754_atan2+0x42>
 80102b8:	33145c07 	.word	0x33145c07
 80102bc:	3ca1a626 	.word	0x3ca1a626
 80102c0:	54442d18 	.word	0x54442d18
 80102c4:	400921fb 	.word	0x400921fb
 80102c8:	54442d18 	.word	0x54442d18
 80102cc:	3ff921fb 	.word	0x3ff921fb
 80102d0:	54442d18 	.word	0x54442d18
 80102d4:	3fe921fb 	.word	0x3fe921fb
 80102d8:	08012270 	.word	0x08012270
 80102dc:	08012288 	.word	0x08012288
 80102e0:	54442d18 	.word	0x54442d18
 80102e4:	c00921fb 	.word	0xc00921fb
 80102e8:	54442d18 	.word	0x54442d18
 80102ec:	bff921fb 	.word	0xbff921fb
 80102f0:	7ff00000 	.word	0x7ff00000
 80102f4:	00000000 	.word	0x00000000

080102f8 <__ieee754_pow>:
 80102f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fc:	ed2d 8b06 	vpush	{d8-d10}
 8010300:	b089      	sub	sp, #36	; 0x24
 8010302:	ed8d 1b00 	vstr	d1, [sp]
 8010306:	e9dd 2900 	ldrd	r2, r9, [sp]
 801030a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801030e:	ea58 0102 	orrs.w	r1, r8, r2
 8010312:	ec57 6b10 	vmov	r6, r7, d0
 8010316:	d115      	bne.n	8010344 <__ieee754_pow+0x4c>
 8010318:	19b3      	adds	r3, r6, r6
 801031a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801031e:	4152      	adcs	r2, r2
 8010320:	4299      	cmp	r1, r3
 8010322:	4b89      	ldr	r3, [pc, #548]	; (8010548 <__ieee754_pow+0x250>)
 8010324:	4193      	sbcs	r3, r2
 8010326:	f080 84d1 	bcs.w	8010ccc <__ieee754_pow+0x9d4>
 801032a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801032e:	4630      	mov	r0, r6
 8010330:	4639      	mov	r1, r7
 8010332:	f7ef ffab 	bl	800028c <__adddf3>
 8010336:	ec41 0b10 	vmov	d0, r0, r1
 801033a:	b009      	add	sp, #36	; 0x24
 801033c:	ecbd 8b06 	vpop	{d8-d10}
 8010340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010344:	4b81      	ldr	r3, [pc, #516]	; (801054c <__ieee754_pow+0x254>)
 8010346:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801034a:	429c      	cmp	r4, r3
 801034c:	ee10 aa10 	vmov	sl, s0
 8010350:	463d      	mov	r5, r7
 8010352:	dc06      	bgt.n	8010362 <__ieee754_pow+0x6a>
 8010354:	d101      	bne.n	801035a <__ieee754_pow+0x62>
 8010356:	2e00      	cmp	r6, #0
 8010358:	d1e7      	bne.n	801032a <__ieee754_pow+0x32>
 801035a:	4598      	cmp	r8, r3
 801035c:	dc01      	bgt.n	8010362 <__ieee754_pow+0x6a>
 801035e:	d10f      	bne.n	8010380 <__ieee754_pow+0x88>
 8010360:	b172      	cbz	r2, 8010380 <__ieee754_pow+0x88>
 8010362:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010366:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801036a:	ea55 050a 	orrs.w	r5, r5, sl
 801036e:	d1dc      	bne.n	801032a <__ieee754_pow+0x32>
 8010370:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010374:	18db      	adds	r3, r3, r3
 8010376:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801037a:	4152      	adcs	r2, r2
 801037c:	429d      	cmp	r5, r3
 801037e:	e7d0      	b.n	8010322 <__ieee754_pow+0x2a>
 8010380:	2d00      	cmp	r5, #0
 8010382:	da3b      	bge.n	80103fc <__ieee754_pow+0x104>
 8010384:	4b72      	ldr	r3, [pc, #456]	; (8010550 <__ieee754_pow+0x258>)
 8010386:	4598      	cmp	r8, r3
 8010388:	dc51      	bgt.n	801042e <__ieee754_pow+0x136>
 801038a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801038e:	4598      	cmp	r8, r3
 8010390:	f340 84ab 	ble.w	8010cea <__ieee754_pow+0x9f2>
 8010394:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010398:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801039c:	2b14      	cmp	r3, #20
 801039e:	dd0f      	ble.n	80103c0 <__ieee754_pow+0xc8>
 80103a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80103a4:	fa22 f103 	lsr.w	r1, r2, r3
 80103a8:	fa01 f303 	lsl.w	r3, r1, r3
 80103ac:	4293      	cmp	r3, r2
 80103ae:	f040 849c 	bne.w	8010cea <__ieee754_pow+0x9f2>
 80103b2:	f001 0101 	and.w	r1, r1, #1
 80103b6:	f1c1 0302 	rsb	r3, r1, #2
 80103ba:	9304      	str	r3, [sp, #16]
 80103bc:	b182      	cbz	r2, 80103e0 <__ieee754_pow+0xe8>
 80103be:	e05f      	b.n	8010480 <__ieee754_pow+0x188>
 80103c0:	2a00      	cmp	r2, #0
 80103c2:	d15b      	bne.n	801047c <__ieee754_pow+0x184>
 80103c4:	f1c3 0314 	rsb	r3, r3, #20
 80103c8:	fa48 f103 	asr.w	r1, r8, r3
 80103cc:	fa01 f303 	lsl.w	r3, r1, r3
 80103d0:	4543      	cmp	r3, r8
 80103d2:	f040 8487 	bne.w	8010ce4 <__ieee754_pow+0x9ec>
 80103d6:	f001 0101 	and.w	r1, r1, #1
 80103da:	f1c1 0302 	rsb	r3, r1, #2
 80103de:	9304      	str	r3, [sp, #16]
 80103e0:	4b5c      	ldr	r3, [pc, #368]	; (8010554 <__ieee754_pow+0x25c>)
 80103e2:	4598      	cmp	r8, r3
 80103e4:	d132      	bne.n	801044c <__ieee754_pow+0x154>
 80103e6:	f1b9 0f00 	cmp.w	r9, #0
 80103ea:	f280 8477 	bge.w	8010cdc <__ieee754_pow+0x9e4>
 80103ee:	4959      	ldr	r1, [pc, #356]	; (8010554 <__ieee754_pow+0x25c>)
 80103f0:	4632      	mov	r2, r6
 80103f2:	463b      	mov	r3, r7
 80103f4:	2000      	movs	r0, #0
 80103f6:	f7f0 fa29 	bl	800084c <__aeabi_ddiv>
 80103fa:	e79c      	b.n	8010336 <__ieee754_pow+0x3e>
 80103fc:	2300      	movs	r3, #0
 80103fe:	9304      	str	r3, [sp, #16]
 8010400:	2a00      	cmp	r2, #0
 8010402:	d13d      	bne.n	8010480 <__ieee754_pow+0x188>
 8010404:	4b51      	ldr	r3, [pc, #324]	; (801054c <__ieee754_pow+0x254>)
 8010406:	4598      	cmp	r8, r3
 8010408:	d1ea      	bne.n	80103e0 <__ieee754_pow+0xe8>
 801040a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801040e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010412:	ea53 030a 	orrs.w	r3, r3, sl
 8010416:	f000 8459 	beq.w	8010ccc <__ieee754_pow+0x9d4>
 801041a:	4b4f      	ldr	r3, [pc, #316]	; (8010558 <__ieee754_pow+0x260>)
 801041c:	429c      	cmp	r4, r3
 801041e:	dd08      	ble.n	8010432 <__ieee754_pow+0x13a>
 8010420:	f1b9 0f00 	cmp.w	r9, #0
 8010424:	f2c0 8456 	blt.w	8010cd4 <__ieee754_pow+0x9dc>
 8010428:	e9dd 0100 	ldrd	r0, r1, [sp]
 801042c:	e783      	b.n	8010336 <__ieee754_pow+0x3e>
 801042e:	2302      	movs	r3, #2
 8010430:	e7e5      	b.n	80103fe <__ieee754_pow+0x106>
 8010432:	f1b9 0f00 	cmp.w	r9, #0
 8010436:	f04f 0000 	mov.w	r0, #0
 801043a:	f04f 0100 	mov.w	r1, #0
 801043e:	f6bf af7a 	bge.w	8010336 <__ieee754_pow+0x3e>
 8010442:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010446:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801044a:	e774      	b.n	8010336 <__ieee754_pow+0x3e>
 801044c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010450:	d106      	bne.n	8010460 <__ieee754_pow+0x168>
 8010452:	4632      	mov	r2, r6
 8010454:	463b      	mov	r3, r7
 8010456:	4630      	mov	r0, r6
 8010458:	4639      	mov	r1, r7
 801045a:	f7f0 f8cd 	bl	80005f8 <__aeabi_dmul>
 801045e:	e76a      	b.n	8010336 <__ieee754_pow+0x3e>
 8010460:	4b3e      	ldr	r3, [pc, #248]	; (801055c <__ieee754_pow+0x264>)
 8010462:	4599      	cmp	r9, r3
 8010464:	d10c      	bne.n	8010480 <__ieee754_pow+0x188>
 8010466:	2d00      	cmp	r5, #0
 8010468:	db0a      	blt.n	8010480 <__ieee754_pow+0x188>
 801046a:	ec47 6b10 	vmov	d0, r6, r7
 801046e:	b009      	add	sp, #36	; 0x24
 8010470:	ecbd 8b06 	vpop	{d8-d10}
 8010474:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010478:	f7ff bc12 	b.w	800fca0 <__ieee754_sqrt>
 801047c:	2300      	movs	r3, #0
 801047e:	9304      	str	r3, [sp, #16]
 8010480:	ec47 6b10 	vmov	d0, r6, r7
 8010484:	f001 f80c 	bl	80114a0 <fabs>
 8010488:	ec51 0b10 	vmov	r0, r1, d0
 801048c:	f1ba 0f00 	cmp.w	sl, #0
 8010490:	d129      	bne.n	80104e6 <__ieee754_pow+0x1ee>
 8010492:	b124      	cbz	r4, 801049e <__ieee754_pow+0x1a6>
 8010494:	4b2f      	ldr	r3, [pc, #188]	; (8010554 <__ieee754_pow+0x25c>)
 8010496:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801049a:	429a      	cmp	r2, r3
 801049c:	d123      	bne.n	80104e6 <__ieee754_pow+0x1ee>
 801049e:	f1b9 0f00 	cmp.w	r9, #0
 80104a2:	da05      	bge.n	80104b0 <__ieee754_pow+0x1b8>
 80104a4:	4602      	mov	r2, r0
 80104a6:	460b      	mov	r3, r1
 80104a8:	2000      	movs	r0, #0
 80104aa:	492a      	ldr	r1, [pc, #168]	; (8010554 <__ieee754_pow+0x25c>)
 80104ac:	f7f0 f9ce 	bl	800084c <__aeabi_ddiv>
 80104b0:	2d00      	cmp	r5, #0
 80104b2:	f6bf af40 	bge.w	8010336 <__ieee754_pow+0x3e>
 80104b6:	9b04      	ldr	r3, [sp, #16]
 80104b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80104bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80104c0:	431c      	orrs	r4, r3
 80104c2:	d108      	bne.n	80104d6 <__ieee754_pow+0x1de>
 80104c4:	4602      	mov	r2, r0
 80104c6:	460b      	mov	r3, r1
 80104c8:	4610      	mov	r0, r2
 80104ca:	4619      	mov	r1, r3
 80104cc:	f7ef fedc 	bl	8000288 <__aeabi_dsub>
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	e78f      	b.n	80103f6 <__ieee754_pow+0xfe>
 80104d6:	9b04      	ldr	r3, [sp, #16]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	f47f af2c 	bne.w	8010336 <__ieee754_pow+0x3e>
 80104de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104e2:	4619      	mov	r1, r3
 80104e4:	e727      	b.n	8010336 <__ieee754_pow+0x3e>
 80104e6:	0feb      	lsrs	r3, r5, #31
 80104e8:	3b01      	subs	r3, #1
 80104ea:	9306      	str	r3, [sp, #24]
 80104ec:	9a06      	ldr	r2, [sp, #24]
 80104ee:	9b04      	ldr	r3, [sp, #16]
 80104f0:	4313      	orrs	r3, r2
 80104f2:	d102      	bne.n	80104fa <__ieee754_pow+0x202>
 80104f4:	4632      	mov	r2, r6
 80104f6:	463b      	mov	r3, r7
 80104f8:	e7e6      	b.n	80104c8 <__ieee754_pow+0x1d0>
 80104fa:	4b19      	ldr	r3, [pc, #100]	; (8010560 <__ieee754_pow+0x268>)
 80104fc:	4598      	cmp	r8, r3
 80104fe:	f340 80fb 	ble.w	80106f8 <__ieee754_pow+0x400>
 8010502:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010506:	4598      	cmp	r8, r3
 8010508:	4b13      	ldr	r3, [pc, #76]	; (8010558 <__ieee754_pow+0x260>)
 801050a:	dd0c      	ble.n	8010526 <__ieee754_pow+0x22e>
 801050c:	429c      	cmp	r4, r3
 801050e:	dc0f      	bgt.n	8010530 <__ieee754_pow+0x238>
 8010510:	f1b9 0f00 	cmp.w	r9, #0
 8010514:	da0f      	bge.n	8010536 <__ieee754_pow+0x23e>
 8010516:	2000      	movs	r0, #0
 8010518:	b009      	add	sp, #36	; 0x24
 801051a:	ecbd 8b06 	vpop	{d8-d10}
 801051e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010522:	f001 b86e 	b.w	8011602 <__math_oflow>
 8010526:	429c      	cmp	r4, r3
 8010528:	dbf2      	blt.n	8010510 <__ieee754_pow+0x218>
 801052a:	4b0a      	ldr	r3, [pc, #40]	; (8010554 <__ieee754_pow+0x25c>)
 801052c:	429c      	cmp	r4, r3
 801052e:	dd19      	ble.n	8010564 <__ieee754_pow+0x26c>
 8010530:	f1b9 0f00 	cmp.w	r9, #0
 8010534:	dcef      	bgt.n	8010516 <__ieee754_pow+0x21e>
 8010536:	2000      	movs	r0, #0
 8010538:	b009      	add	sp, #36	; 0x24
 801053a:	ecbd 8b06 	vpop	{d8-d10}
 801053e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010542:	f001 b855 	b.w	80115f0 <__math_uflow>
 8010546:	bf00      	nop
 8010548:	fff00000 	.word	0xfff00000
 801054c:	7ff00000 	.word	0x7ff00000
 8010550:	433fffff 	.word	0x433fffff
 8010554:	3ff00000 	.word	0x3ff00000
 8010558:	3fefffff 	.word	0x3fefffff
 801055c:	3fe00000 	.word	0x3fe00000
 8010560:	41e00000 	.word	0x41e00000
 8010564:	4b60      	ldr	r3, [pc, #384]	; (80106e8 <__ieee754_pow+0x3f0>)
 8010566:	2200      	movs	r2, #0
 8010568:	f7ef fe8e 	bl	8000288 <__aeabi_dsub>
 801056c:	a354      	add	r3, pc, #336	; (adr r3, 80106c0 <__ieee754_pow+0x3c8>)
 801056e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010572:	4604      	mov	r4, r0
 8010574:	460d      	mov	r5, r1
 8010576:	f7f0 f83f 	bl	80005f8 <__aeabi_dmul>
 801057a:	a353      	add	r3, pc, #332	; (adr r3, 80106c8 <__ieee754_pow+0x3d0>)
 801057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010580:	4606      	mov	r6, r0
 8010582:	460f      	mov	r7, r1
 8010584:	4620      	mov	r0, r4
 8010586:	4629      	mov	r1, r5
 8010588:	f7f0 f836 	bl	80005f8 <__aeabi_dmul>
 801058c:	4b57      	ldr	r3, [pc, #348]	; (80106ec <__ieee754_pow+0x3f4>)
 801058e:	4682      	mov	sl, r0
 8010590:	468b      	mov	fp, r1
 8010592:	2200      	movs	r2, #0
 8010594:	4620      	mov	r0, r4
 8010596:	4629      	mov	r1, r5
 8010598:	f7f0 f82e 	bl	80005f8 <__aeabi_dmul>
 801059c:	4602      	mov	r2, r0
 801059e:	460b      	mov	r3, r1
 80105a0:	a14b      	add	r1, pc, #300	; (adr r1, 80106d0 <__ieee754_pow+0x3d8>)
 80105a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105a6:	f7ef fe6f 	bl	8000288 <__aeabi_dsub>
 80105aa:	4622      	mov	r2, r4
 80105ac:	462b      	mov	r3, r5
 80105ae:	f7f0 f823 	bl	80005f8 <__aeabi_dmul>
 80105b2:	4602      	mov	r2, r0
 80105b4:	460b      	mov	r3, r1
 80105b6:	2000      	movs	r0, #0
 80105b8:	494d      	ldr	r1, [pc, #308]	; (80106f0 <__ieee754_pow+0x3f8>)
 80105ba:	f7ef fe65 	bl	8000288 <__aeabi_dsub>
 80105be:	4622      	mov	r2, r4
 80105c0:	4680      	mov	r8, r0
 80105c2:	4689      	mov	r9, r1
 80105c4:	462b      	mov	r3, r5
 80105c6:	4620      	mov	r0, r4
 80105c8:	4629      	mov	r1, r5
 80105ca:	f7f0 f815 	bl	80005f8 <__aeabi_dmul>
 80105ce:	4602      	mov	r2, r0
 80105d0:	460b      	mov	r3, r1
 80105d2:	4640      	mov	r0, r8
 80105d4:	4649      	mov	r1, r9
 80105d6:	f7f0 f80f 	bl	80005f8 <__aeabi_dmul>
 80105da:	a33f      	add	r3, pc, #252	; (adr r3, 80106d8 <__ieee754_pow+0x3e0>)
 80105dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e0:	f7f0 f80a 	bl	80005f8 <__aeabi_dmul>
 80105e4:	4602      	mov	r2, r0
 80105e6:	460b      	mov	r3, r1
 80105e8:	4650      	mov	r0, sl
 80105ea:	4659      	mov	r1, fp
 80105ec:	f7ef fe4c 	bl	8000288 <__aeabi_dsub>
 80105f0:	4602      	mov	r2, r0
 80105f2:	460b      	mov	r3, r1
 80105f4:	4680      	mov	r8, r0
 80105f6:	4689      	mov	r9, r1
 80105f8:	4630      	mov	r0, r6
 80105fa:	4639      	mov	r1, r7
 80105fc:	f7ef fe46 	bl	800028c <__adddf3>
 8010600:	2000      	movs	r0, #0
 8010602:	4632      	mov	r2, r6
 8010604:	463b      	mov	r3, r7
 8010606:	4604      	mov	r4, r0
 8010608:	460d      	mov	r5, r1
 801060a:	f7ef fe3d 	bl	8000288 <__aeabi_dsub>
 801060e:	4602      	mov	r2, r0
 8010610:	460b      	mov	r3, r1
 8010612:	4640      	mov	r0, r8
 8010614:	4649      	mov	r1, r9
 8010616:	f7ef fe37 	bl	8000288 <__aeabi_dsub>
 801061a:	9b04      	ldr	r3, [sp, #16]
 801061c:	9a06      	ldr	r2, [sp, #24]
 801061e:	3b01      	subs	r3, #1
 8010620:	4313      	orrs	r3, r2
 8010622:	4682      	mov	sl, r0
 8010624:	468b      	mov	fp, r1
 8010626:	f040 81e7 	bne.w	80109f8 <__ieee754_pow+0x700>
 801062a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80106e0 <__ieee754_pow+0x3e8>
 801062e:	eeb0 8a47 	vmov.f32	s16, s14
 8010632:	eef0 8a67 	vmov.f32	s17, s15
 8010636:	e9dd 6700 	ldrd	r6, r7, [sp]
 801063a:	2600      	movs	r6, #0
 801063c:	4632      	mov	r2, r6
 801063e:	463b      	mov	r3, r7
 8010640:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010644:	f7ef fe20 	bl	8000288 <__aeabi_dsub>
 8010648:	4622      	mov	r2, r4
 801064a:	462b      	mov	r3, r5
 801064c:	f7ef ffd4 	bl	80005f8 <__aeabi_dmul>
 8010650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010654:	4680      	mov	r8, r0
 8010656:	4689      	mov	r9, r1
 8010658:	4650      	mov	r0, sl
 801065a:	4659      	mov	r1, fp
 801065c:	f7ef ffcc 	bl	80005f8 <__aeabi_dmul>
 8010660:	4602      	mov	r2, r0
 8010662:	460b      	mov	r3, r1
 8010664:	4640      	mov	r0, r8
 8010666:	4649      	mov	r1, r9
 8010668:	f7ef fe10 	bl	800028c <__adddf3>
 801066c:	4632      	mov	r2, r6
 801066e:	463b      	mov	r3, r7
 8010670:	4680      	mov	r8, r0
 8010672:	4689      	mov	r9, r1
 8010674:	4620      	mov	r0, r4
 8010676:	4629      	mov	r1, r5
 8010678:	f7ef ffbe 	bl	80005f8 <__aeabi_dmul>
 801067c:	460b      	mov	r3, r1
 801067e:	4604      	mov	r4, r0
 8010680:	460d      	mov	r5, r1
 8010682:	4602      	mov	r2, r0
 8010684:	4649      	mov	r1, r9
 8010686:	4640      	mov	r0, r8
 8010688:	f7ef fe00 	bl	800028c <__adddf3>
 801068c:	4b19      	ldr	r3, [pc, #100]	; (80106f4 <__ieee754_pow+0x3fc>)
 801068e:	4299      	cmp	r1, r3
 8010690:	ec45 4b19 	vmov	d9, r4, r5
 8010694:	4606      	mov	r6, r0
 8010696:	460f      	mov	r7, r1
 8010698:	468b      	mov	fp, r1
 801069a:	f340 82f0 	ble.w	8010c7e <__ieee754_pow+0x986>
 801069e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80106a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80106a6:	4303      	orrs	r3, r0
 80106a8:	f000 81e4 	beq.w	8010a74 <__ieee754_pow+0x77c>
 80106ac:	ec51 0b18 	vmov	r0, r1, d8
 80106b0:	2200      	movs	r2, #0
 80106b2:	2300      	movs	r3, #0
 80106b4:	f7f0 fa12 	bl	8000adc <__aeabi_dcmplt>
 80106b8:	3800      	subs	r0, #0
 80106ba:	bf18      	it	ne
 80106bc:	2001      	movne	r0, #1
 80106be:	e72b      	b.n	8010518 <__ieee754_pow+0x220>
 80106c0:	60000000 	.word	0x60000000
 80106c4:	3ff71547 	.word	0x3ff71547
 80106c8:	f85ddf44 	.word	0xf85ddf44
 80106cc:	3e54ae0b 	.word	0x3e54ae0b
 80106d0:	55555555 	.word	0x55555555
 80106d4:	3fd55555 	.word	0x3fd55555
 80106d8:	652b82fe 	.word	0x652b82fe
 80106dc:	3ff71547 	.word	0x3ff71547
 80106e0:	00000000 	.word	0x00000000
 80106e4:	bff00000 	.word	0xbff00000
 80106e8:	3ff00000 	.word	0x3ff00000
 80106ec:	3fd00000 	.word	0x3fd00000
 80106f0:	3fe00000 	.word	0x3fe00000
 80106f4:	408fffff 	.word	0x408fffff
 80106f8:	4bd5      	ldr	r3, [pc, #852]	; (8010a50 <__ieee754_pow+0x758>)
 80106fa:	402b      	ands	r3, r5
 80106fc:	2200      	movs	r2, #0
 80106fe:	b92b      	cbnz	r3, 801070c <__ieee754_pow+0x414>
 8010700:	4bd4      	ldr	r3, [pc, #848]	; (8010a54 <__ieee754_pow+0x75c>)
 8010702:	f7ef ff79 	bl	80005f8 <__aeabi_dmul>
 8010706:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801070a:	460c      	mov	r4, r1
 801070c:	1523      	asrs	r3, r4, #20
 801070e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010712:	4413      	add	r3, r2
 8010714:	9305      	str	r3, [sp, #20]
 8010716:	4bd0      	ldr	r3, [pc, #832]	; (8010a58 <__ieee754_pow+0x760>)
 8010718:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801071c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010720:	429c      	cmp	r4, r3
 8010722:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010726:	dd08      	ble.n	801073a <__ieee754_pow+0x442>
 8010728:	4bcc      	ldr	r3, [pc, #816]	; (8010a5c <__ieee754_pow+0x764>)
 801072a:	429c      	cmp	r4, r3
 801072c:	f340 8162 	ble.w	80109f4 <__ieee754_pow+0x6fc>
 8010730:	9b05      	ldr	r3, [sp, #20]
 8010732:	3301      	adds	r3, #1
 8010734:	9305      	str	r3, [sp, #20]
 8010736:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801073a:	2400      	movs	r4, #0
 801073c:	00e3      	lsls	r3, r4, #3
 801073e:	9307      	str	r3, [sp, #28]
 8010740:	4bc7      	ldr	r3, [pc, #796]	; (8010a60 <__ieee754_pow+0x768>)
 8010742:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010746:	ed93 7b00 	vldr	d7, [r3]
 801074a:	4629      	mov	r1, r5
 801074c:	ec53 2b17 	vmov	r2, r3, d7
 8010750:	eeb0 9a47 	vmov.f32	s18, s14
 8010754:	eef0 9a67 	vmov.f32	s19, s15
 8010758:	4682      	mov	sl, r0
 801075a:	f7ef fd95 	bl	8000288 <__aeabi_dsub>
 801075e:	4652      	mov	r2, sl
 8010760:	4606      	mov	r6, r0
 8010762:	460f      	mov	r7, r1
 8010764:	462b      	mov	r3, r5
 8010766:	ec51 0b19 	vmov	r0, r1, d9
 801076a:	f7ef fd8f 	bl	800028c <__adddf3>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	2000      	movs	r0, #0
 8010774:	49bb      	ldr	r1, [pc, #748]	; (8010a64 <__ieee754_pow+0x76c>)
 8010776:	f7f0 f869 	bl	800084c <__aeabi_ddiv>
 801077a:	ec41 0b1a 	vmov	d10, r0, r1
 801077e:	4602      	mov	r2, r0
 8010780:	460b      	mov	r3, r1
 8010782:	4630      	mov	r0, r6
 8010784:	4639      	mov	r1, r7
 8010786:	f7ef ff37 	bl	80005f8 <__aeabi_dmul>
 801078a:	2300      	movs	r3, #0
 801078c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010790:	9302      	str	r3, [sp, #8]
 8010792:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010796:	46ab      	mov	fp, r5
 8010798:	106d      	asrs	r5, r5, #1
 801079a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801079e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80107a2:	ec41 0b18 	vmov	d8, r0, r1
 80107a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80107aa:	2200      	movs	r2, #0
 80107ac:	4640      	mov	r0, r8
 80107ae:	4649      	mov	r1, r9
 80107b0:	4614      	mov	r4, r2
 80107b2:	461d      	mov	r5, r3
 80107b4:	f7ef ff20 	bl	80005f8 <__aeabi_dmul>
 80107b8:	4602      	mov	r2, r0
 80107ba:	460b      	mov	r3, r1
 80107bc:	4630      	mov	r0, r6
 80107be:	4639      	mov	r1, r7
 80107c0:	f7ef fd62 	bl	8000288 <__aeabi_dsub>
 80107c4:	ec53 2b19 	vmov	r2, r3, d9
 80107c8:	4606      	mov	r6, r0
 80107ca:	460f      	mov	r7, r1
 80107cc:	4620      	mov	r0, r4
 80107ce:	4629      	mov	r1, r5
 80107d0:	f7ef fd5a 	bl	8000288 <__aeabi_dsub>
 80107d4:	4602      	mov	r2, r0
 80107d6:	460b      	mov	r3, r1
 80107d8:	4650      	mov	r0, sl
 80107da:	4659      	mov	r1, fp
 80107dc:	f7ef fd54 	bl	8000288 <__aeabi_dsub>
 80107e0:	4642      	mov	r2, r8
 80107e2:	464b      	mov	r3, r9
 80107e4:	f7ef ff08 	bl	80005f8 <__aeabi_dmul>
 80107e8:	4602      	mov	r2, r0
 80107ea:	460b      	mov	r3, r1
 80107ec:	4630      	mov	r0, r6
 80107ee:	4639      	mov	r1, r7
 80107f0:	f7ef fd4a 	bl	8000288 <__aeabi_dsub>
 80107f4:	ec53 2b1a 	vmov	r2, r3, d10
 80107f8:	f7ef fefe 	bl	80005f8 <__aeabi_dmul>
 80107fc:	ec53 2b18 	vmov	r2, r3, d8
 8010800:	ec41 0b19 	vmov	d9, r0, r1
 8010804:	ec51 0b18 	vmov	r0, r1, d8
 8010808:	f7ef fef6 	bl	80005f8 <__aeabi_dmul>
 801080c:	a37c      	add	r3, pc, #496	; (adr r3, 8010a00 <__ieee754_pow+0x708>)
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	4604      	mov	r4, r0
 8010814:	460d      	mov	r5, r1
 8010816:	f7ef feef 	bl	80005f8 <__aeabi_dmul>
 801081a:	a37b      	add	r3, pc, #492	; (adr r3, 8010a08 <__ieee754_pow+0x710>)
 801081c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010820:	f7ef fd34 	bl	800028c <__adddf3>
 8010824:	4622      	mov	r2, r4
 8010826:	462b      	mov	r3, r5
 8010828:	f7ef fee6 	bl	80005f8 <__aeabi_dmul>
 801082c:	a378      	add	r3, pc, #480	; (adr r3, 8010a10 <__ieee754_pow+0x718>)
 801082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010832:	f7ef fd2b 	bl	800028c <__adddf3>
 8010836:	4622      	mov	r2, r4
 8010838:	462b      	mov	r3, r5
 801083a:	f7ef fedd 	bl	80005f8 <__aeabi_dmul>
 801083e:	a376      	add	r3, pc, #472	; (adr r3, 8010a18 <__ieee754_pow+0x720>)
 8010840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010844:	f7ef fd22 	bl	800028c <__adddf3>
 8010848:	4622      	mov	r2, r4
 801084a:	462b      	mov	r3, r5
 801084c:	f7ef fed4 	bl	80005f8 <__aeabi_dmul>
 8010850:	a373      	add	r3, pc, #460	; (adr r3, 8010a20 <__ieee754_pow+0x728>)
 8010852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010856:	f7ef fd19 	bl	800028c <__adddf3>
 801085a:	4622      	mov	r2, r4
 801085c:	462b      	mov	r3, r5
 801085e:	f7ef fecb 	bl	80005f8 <__aeabi_dmul>
 8010862:	a371      	add	r3, pc, #452	; (adr r3, 8010a28 <__ieee754_pow+0x730>)
 8010864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010868:	f7ef fd10 	bl	800028c <__adddf3>
 801086c:	4622      	mov	r2, r4
 801086e:	4606      	mov	r6, r0
 8010870:	460f      	mov	r7, r1
 8010872:	462b      	mov	r3, r5
 8010874:	4620      	mov	r0, r4
 8010876:	4629      	mov	r1, r5
 8010878:	f7ef febe 	bl	80005f8 <__aeabi_dmul>
 801087c:	4602      	mov	r2, r0
 801087e:	460b      	mov	r3, r1
 8010880:	4630      	mov	r0, r6
 8010882:	4639      	mov	r1, r7
 8010884:	f7ef feb8 	bl	80005f8 <__aeabi_dmul>
 8010888:	4642      	mov	r2, r8
 801088a:	4604      	mov	r4, r0
 801088c:	460d      	mov	r5, r1
 801088e:	464b      	mov	r3, r9
 8010890:	ec51 0b18 	vmov	r0, r1, d8
 8010894:	f7ef fcfa 	bl	800028c <__adddf3>
 8010898:	ec53 2b19 	vmov	r2, r3, d9
 801089c:	f7ef feac 	bl	80005f8 <__aeabi_dmul>
 80108a0:	4622      	mov	r2, r4
 80108a2:	462b      	mov	r3, r5
 80108a4:	f7ef fcf2 	bl	800028c <__adddf3>
 80108a8:	4642      	mov	r2, r8
 80108aa:	4682      	mov	sl, r0
 80108ac:	468b      	mov	fp, r1
 80108ae:	464b      	mov	r3, r9
 80108b0:	4640      	mov	r0, r8
 80108b2:	4649      	mov	r1, r9
 80108b4:	f7ef fea0 	bl	80005f8 <__aeabi_dmul>
 80108b8:	4b6b      	ldr	r3, [pc, #428]	; (8010a68 <__ieee754_pow+0x770>)
 80108ba:	2200      	movs	r2, #0
 80108bc:	4606      	mov	r6, r0
 80108be:	460f      	mov	r7, r1
 80108c0:	f7ef fce4 	bl	800028c <__adddf3>
 80108c4:	4652      	mov	r2, sl
 80108c6:	465b      	mov	r3, fp
 80108c8:	f7ef fce0 	bl	800028c <__adddf3>
 80108cc:	2000      	movs	r0, #0
 80108ce:	4604      	mov	r4, r0
 80108d0:	460d      	mov	r5, r1
 80108d2:	4602      	mov	r2, r0
 80108d4:	460b      	mov	r3, r1
 80108d6:	4640      	mov	r0, r8
 80108d8:	4649      	mov	r1, r9
 80108da:	f7ef fe8d 	bl	80005f8 <__aeabi_dmul>
 80108de:	4b62      	ldr	r3, [pc, #392]	; (8010a68 <__ieee754_pow+0x770>)
 80108e0:	4680      	mov	r8, r0
 80108e2:	4689      	mov	r9, r1
 80108e4:	2200      	movs	r2, #0
 80108e6:	4620      	mov	r0, r4
 80108e8:	4629      	mov	r1, r5
 80108ea:	f7ef fccd 	bl	8000288 <__aeabi_dsub>
 80108ee:	4632      	mov	r2, r6
 80108f0:	463b      	mov	r3, r7
 80108f2:	f7ef fcc9 	bl	8000288 <__aeabi_dsub>
 80108f6:	4602      	mov	r2, r0
 80108f8:	460b      	mov	r3, r1
 80108fa:	4650      	mov	r0, sl
 80108fc:	4659      	mov	r1, fp
 80108fe:	f7ef fcc3 	bl	8000288 <__aeabi_dsub>
 8010902:	ec53 2b18 	vmov	r2, r3, d8
 8010906:	f7ef fe77 	bl	80005f8 <__aeabi_dmul>
 801090a:	4622      	mov	r2, r4
 801090c:	4606      	mov	r6, r0
 801090e:	460f      	mov	r7, r1
 8010910:	462b      	mov	r3, r5
 8010912:	ec51 0b19 	vmov	r0, r1, d9
 8010916:	f7ef fe6f 	bl	80005f8 <__aeabi_dmul>
 801091a:	4602      	mov	r2, r0
 801091c:	460b      	mov	r3, r1
 801091e:	4630      	mov	r0, r6
 8010920:	4639      	mov	r1, r7
 8010922:	f7ef fcb3 	bl	800028c <__adddf3>
 8010926:	4606      	mov	r6, r0
 8010928:	460f      	mov	r7, r1
 801092a:	4602      	mov	r2, r0
 801092c:	460b      	mov	r3, r1
 801092e:	4640      	mov	r0, r8
 8010930:	4649      	mov	r1, r9
 8010932:	f7ef fcab 	bl	800028c <__adddf3>
 8010936:	a33e      	add	r3, pc, #248	; (adr r3, 8010a30 <__ieee754_pow+0x738>)
 8010938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093c:	2000      	movs	r0, #0
 801093e:	4604      	mov	r4, r0
 8010940:	460d      	mov	r5, r1
 8010942:	f7ef fe59 	bl	80005f8 <__aeabi_dmul>
 8010946:	4642      	mov	r2, r8
 8010948:	ec41 0b18 	vmov	d8, r0, r1
 801094c:	464b      	mov	r3, r9
 801094e:	4620      	mov	r0, r4
 8010950:	4629      	mov	r1, r5
 8010952:	f7ef fc99 	bl	8000288 <__aeabi_dsub>
 8010956:	4602      	mov	r2, r0
 8010958:	460b      	mov	r3, r1
 801095a:	4630      	mov	r0, r6
 801095c:	4639      	mov	r1, r7
 801095e:	f7ef fc93 	bl	8000288 <__aeabi_dsub>
 8010962:	a335      	add	r3, pc, #212	; (adr r3, 8010a38 <__ieee754_pow+0x740>)
 8010964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010968:	f7ef fe46 	bl	80005f8 <__aeabi_dmul>
 801096c:	a334      	add	r3, pc, #208	; (adr r3, 8010a40 <__ieee754_pow+0x748>)
 801096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010972:	4606      	mov	r6, r0
 8010974:	460f      	mov	r7, r1
 8010976:	4620      	mov	r0, r4
 8010978:	4629      	mov	r1, r5
 801097a:	f7ef fe3d 	bl	80005f8 <__aeabi_dmul>
 801097e:	4602      	mov	r2, r0
 8010980:	460b      	mov	r3, r1
 8010982:	4630      	mov	r0, r6
 8010984:	4639      	mov	r1, r7
 8010986:	f7ef fc81 	bl	800028c <__adddf3>
 801098a:	9a07      	ldr	r2, [sp, #28]
 801098c:	4b37      	ldr	r3, [pc, #220]	; (8010a6c <__ieee754_pow+0x774>)
 801098e:	4413      	add	r3, r2
 8010990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010994:	f7ef fc7a 	bl	800028c <__adddf3>
 8010998:	4682      	mov	sl, r0
 801099a:	9805      	ldr	r0, [sp, #20]
 801099c:	468b      	mov	fp, r1
 801099e:	f7ef fdc1 	bl	8000524 <__aeabi_i2d>
 80109a2:	9a07      	ldr	r2, [sp, #28]
 80109a4:	4b32      	ldr	r3, [pc, #200]	; (8010a70 <__ieee754_pow+0x778>)
 80109a6:	4413      	add	r3, r2
 80109a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80109ac:	4606      	mov	r6, r0
 80109ae:	460f      	mov	r7, r1
 80109b0:	4652      	mov	r2, sl
 80109b2:	465b      	mov	r3, fp
 80109b4:	ec51 0b18 	vmov	r0, r1, d8
 80109b8:	f7ef fc68 	bl	800028c <__adddf3>
 80109bc:	4642      	mov	r2, r8
 80109be:	464b      	mov	r3, r9
 80109c0:	f7ef fc64 	bl	800028c <__adddf3>
 80109c4:	4632      	mov	r2, r6
 80109c6:	463b      	mov	r3, r7
 80109c8:	f7ef fc60 	bl	800028c <__adddf3>
 80109cc:	2000      	movs	r0, #0
 80109ce:	4632      	mov	r2, r6
 80109d0:	463b      	mov	r3, r7
 80109d2:	4604      	mov	r4, r0
 80109d4:	460d      	mov	r5, r1
 80109d6:	f7ef fc57 	bl	8000288 <__aeabi_dsub>
 80109da:	4642      	mov	r2, r8
 80109dc:	464b      	mov	r3, r9
 80109de:	f7ef fc53 	bl	8000288 <__aeabi_dsub>
 80109e2:	ec53 2b18 	vmov	r2, r3, d8
 80109e6:	f7ef fc4f 	bl	8000288 <__aeabi_dsub>
 80109ea:	4602      	mov	r2, r0
 80109ec:	460b      	mov	r3, r1
 80109ee:	4650      	mov	r0, sl
 80109f0:	4659      	mov	r1, fp
 80109f2:	e610      	b.n	8010616 <__ieee754_pow+0x31e>
 80109f4:	2401      	movs	r4, #1
 80109f6:	e6a1      	b.n	801073c <__ieee754_pow+0x444>
 80109f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010a48 <__ieee754_pow+0x750>
 80109fc:	e617      	b.n	801062e <__ieee754_pow+0x336>
 80109fe:	bf00      	nop
 8010a00:	4a454eef 	.word	0x4a454eef
 8010a04:	3fca7e28 	.word	0x3fca7e28
 8010a08:	93c9db65 	.word	0x93c9db65
 8010a0c:	3fcd864a 	.word	0x3fcd864a
 8010a10:	a91d4101 	.word	0xa91d4101
 8010a14:	3fd17460 	.word	0x3fd17460
 8010a18:	518f264d 	.word	0x518f264d
 8010a1c:	3fd55555 	.word	0x3fd55555
 8010a20:	db6fabff 	.word	0xdb6fabff
 8010a24:	3fdb6db6 	.word	0x3fdb6db6
 8010a28:	33333303 	.word	0x33333303
 8010a2c:	3fe33333 	.word	0x3fe33333
 8010a30:	e0000000 	.word	0xe0000000
 8010a34:	3feec709 	.word	0x3feec709
 8010a38:	dc3a03fd 	.word	0xdc3a03fd
 8010a3c:	3feec709 	.word	0x3feec709
 8010a40:	145b01f5 	.word	0x145b01f5
 8010a44:	be3e2fe0 	.word	0xbe3e2fe0
 8010a48:	00000000 	.word	0x00000000
 8010a4c:	3ff00000 	.word	0x3ff00000
 8010a50:	7ff00000 	.word	0x7ff00000
 8010a54:	43400000 	.word	0x43400000
 8010a58:	0003988e 	.word	0x0003988e
 8010a5c:	000bb679 	.word	0x000bb679
 8010a60:	080122a0 	.word	0x080122a0
 8010a64:	3ff00000 	.word	0x3ff00000
 8010a68:	40080000 	.word	0x40080000
 8010a6c:	080122c0 	.word	0x080122c0
 8010a70:	080122b0 	.word	0x080122b0
 8010a74:	a3b3      	add	r3, pc, #716	; (adr r3, 8010d44 <__ieee754_pow+0xa4c>)
 8010a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a7a:	4640      	mov	r0, r8
 8010a7c:	4649      	mov	r1, r9
 8010a7e:	f7ef fc05 	bl	800028c <__adddf3>
 8010a82:	4622      	mov	r2, r4
 8010a84:	ec41 0b1a 	vmov	d10, r0, r1
 8010a88:	462b      	mov	r3, r5
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	4639      	mov	r1, r7
 8010a8e:	f7ef fbfb 	bl	8000288 <__aeabi_dsub>
 8010a92:	4602      	mov	r2, r0
 8010a94:	460b      	mov	r3, r1
 8010a96:	ec51 0b1a 	vmov	r0, r1, d10
 8010a9a:	f7f0 f83d 	bl	8000b18 <__aeabi_dcmpgt>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	f47f ae04 	bne.w	80106ac <__ieee754_pow+0x3b4>
 8010aa4:	4aa2      	ldr	r2, [pc, #648]	; (8010d30 <__ieee754_pow+0xa38>)
 8010aa6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	f340 8107 	ble.w	8010cbe <__ieee754_pow+0x9c6>
 8010ab0:	151b      	asrs	r3, r3, #20
 8010ab2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010ab6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010aba:	fa4a fa03 	asr.w	sl, sl, r3
 8010abe:	44da      	add	sl, fp
 8010ac0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010ac4:	489b      	ldr	r0, [pc, #620]	; (8010d34 <__ieee754_pow+0xa3c>)
 8010ac6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010aca:	4108      	asrs	r0, r1
 8010acc:	ea00 030a 	and.w	r3, r0, sl
 8010ad0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010ad4:	f1c1 0114 	rsb	r1, r1, #20
 8010ad8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010adc:	fa4a fa01 	asr.w	sl, sl, r1
 8010ae0:	f1bb 0f00 	cmp.w	fp, #0
 8010ae4:	f04f 0200 	mov.w	r2, #0
 8010ae8:	4620      	mov	r0, r4
 8010aea:	4629      	mov	r1, r5
 8010aec:	bfb8      	it	lt
 8010aee:	f1ca 0a00 	rsblt	sl, sl, #0
 8010af2:	f7ef fbc9 	bl	8000288 <__aeabi_dsub>
 8010af6:	ec41 0b19 	vmov	d9, r0, r1
 8010afa:	4642      	mov	r2, r8
 8010afc:	464b      	mov	r3, r9
 8010afe:	ec51 0b19 	vmov	r0, r1, d9
 8010b02:	f7ef fbc3 	bl	800028c <__adddf3>
 8010b06:	a37a      	add	r3, pc, #488	; (adr r3, 8010cf0 <__ieee754_pow+0x9f8>)
 8010b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	4604      	mov	r4, r0
 8010b10:	460d      	mov	r5, r1
 8010b12:	f7ef fd71 	bl	80005f8 <__aeabi_dmul>
 8010b16:	ec53 2b19 	vmov	r2, r3, d9
 8010b1a:	4606      	mov	r6, r0
 8010b1c:	460f      	mov	r7, r1
 8010b1e:	4620      	mov	r0, r4
 8010b20:	4629      	mov	r1, r5
 8010b22:	f7ef fbb1 	bl	8000288 <__aeabi_dsub>
 8010b26:	4602      	mov	r2, r0
 8010b28:	460b      	mov	r3, r1
 8010b2a:	4640      	mov	r0, r8
 8010b2c:	4649      	mov	r1, r9
 8010b2e:	f7ef fbab 	bl	8000288 <__aeabi_dsub>
 8010b32:	a371      	add	r3, pc, #452	; (adr r3, 8010cf8 <__ieee754_pow+0xa00>)
 8010b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b38:	f7ef fd5e 	bl	80005f8 <__aeabi_dmul>
 8010b3c:	a370      	add	r3, pc, #448	; (adr r3, 8010d00 <__ieee754_pow+0xa08>)
 8010b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b42:	4680      	mov	r8, r0
 8010b44:	4689      	mov	r9, r1
 8010b46:	4620      	mov	r0, r4
 8010b48:	4629      	mov	r1, r5
 8010b4a:	f7ef fd55 	bl	80005f8 <__aeabi_dmul>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	460b      	mov	r3, r1
 8010b52:	4640      	mov	r0, r8
 8010b54:	4649      	mov	r1, r9
 8010b56:	f7ef fb99 	bl	800028c <__adddf3>
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	460d      	mov	r5, r1
 8010b5e:	4602      	mov	r2, r0
 8010b60:	460b      	mov	r3, r1
 8010b62:	4630      	mov	r0, r6
 8010b64:	4639      	mov	r1, r7
 8010b66:	f7ef fb91 	bl	800028c <__adddf3>
 8010b6a:	4632      	mov	r2, r6
 8010b6c:	463b      	mov	r3, r7
 8010b6e:	4680      	mov	r8, r0
 8010b70:	4689      	mov	r9, r1
 8010b72:	f7ef fb89 	bl	8000288 <__aeabi_dsub>
 8010b76:	4602      	mov	r2, r0
 8010b78:	460b      	mov	r3, r1
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	4629      	mov	r1, r5
 8010b7e:	f7ef fb83 	bl	8000288 <__aeabi_dsub>
 8010b82:	4642      	mov	r2, r8
 8010b84:	4606      	mov	r6, r0
 8010b86:	460f      	mov	r7, r1
 8010b88:	464b      	mov	r3, r9
 8010b8a:	4640      	mov	r0, r8
 8010b8c:	4649      	mov	r1, r9
 8010b8e:	f7ef fd33 	bl	80005f8 <__aeabi_dmul>
 8010b92:	a35d      	add	r3, pc, #372	; (adr r3, 8010d08 <__ieee754_pow+0xa10>)
 8010b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b98:	4604      	mov	r4, r0
 8010b9a:	460d      	mov	r5, r1
 8010b9c:	f7ef fd2c 	bl	80005f8 <__aeabi_dmul>
 8010ba0:	a35b      	add	r3, pc, #364	; (adr r3, 8010d10 <__ieee754_pow+0xa18>)
 8010ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba6:	f7ef fb6f 	bl	8000288 <__aeabi_dsub>
 8010baa:	4622      	mov	r2, r4
 8010bac:	462b      	mov	r3, r5
 8010bae:	f7ef fd23 	bl	80005f8 <__aeabi_dmul>
 8010bb2:	a359      	add	r3, pc, #356	; (adr r3, 8010d18 <__ieee754_pow+0xa20>)
 8010bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb8:	f7ef fb68 	bl	800028c <__adddf3>
 8010bbc:	4622      	mov	r2, r4
 8010bbe:	462b      	mov	r3, r5
 8010bc0:	f7ef fd1a 	bl	80005f8 <__aeabi_dmul>
 8010bc4:	a356      	add	r3, pc, #344	; (adr r3, 8010d20 <__ieee754_pow+0xa28>)
 8010bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bca:	f7ef fb5d 	bl	8000288 <__aeabi_dsub>
 8010bce:	4622      	mov	r2, r4
 8010bd0:	462b      	mov	r3, r5
 8010bd2:	f7ef fd11 	bl	80005f8 <__aeabi_dmul>
 8010bd6:	a354      	add	r3, pc, #336	; (adr r3, 8010d28 <__ieee754_pow+0xa30>)
 8010bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bdc:	f7ef fb56 	bl	800028c <__adddf3>
 8010be0:	4622      	mov	r2, r4
 8010be2:	462b      	mov	r3, r5
 8010be4:	f7ef fd08 	bl	80005f8 <__aeabi_dmul>
 8010be8:	4602      	mov	r2, r0
 8010bea:	460b      	mov	r3, r1
 8010bec:	4640      	mov	r0, r8
 8010bee:	4649      	mov	r1, r9
 8010bf0:	f7ef fb4a 	bl	8000288 <__aeabi_dsub>
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	460d      	mov	r5, r1
 8010bf8:	4602      	mov	r2, r0
 8010bfa:	460b      	mov	r3, r1
 8010bfc:	4640      	mov	r0, r8
 8010bfe:	4649      	mov	r1, r9
 8010c00:	f7ef fcfa 	bl	80005f8 <__aeabi_dmul>
 8010c04:	2200      	movs	r2, #0
 8010c06:	ec41 0b19 	vmov	d9, r0, r1
 8010c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c0e:	4620      	mov	r0, r4
 8010c10:	4629      	mov	r1, r5
 8010c12:	f7ef fb39 	bl	8000288 <__aeabi_dsub>
 8010c16:	4602      	mov	r2, r0
 8010c18:	460b      	mov	r3, r1
 8010c1a:	ec51 0b19 	vmov	r0, r1, d9
 8010c1e:	f7ef fe15 	bl	800084c <__aeabi_ddiv>
 8010c22:	4632      	mov	r2, r6
 8010c24:	4604      	mov	r4, r0
 8010c26:	460d      	mov	r5, r1
 8010c28:	463b      	mov	r3, r7
 8010c2a:	4640      	mov	r0, r8
 8010c2c:	4649      	mov	r1, r9
 8010c2e:	f7ef fce3 	bl	80005f8 <__aeabi_dmul>
 8010c32:	4632      	mov	r2, r6
 8010c34:	463b      	mov	r3, r7
 8010c36:	f7ef fb29 	bl	800028c <__adddf3>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	4620      	mov	r0, r4
 8010c40:	4629      	mov	r1, r5
 8010c42:	f7ef fb21 	bl	8000288 <__aeabi_dsub>
 8010c46:	4642      	mov	r2, r8
 8010c48:	464b      	mov	r3, r9
 8010c4a:	f7ef fb1d 	bl	8000288 <__aeabi_dsub>
 8010c4e:	460b      	mov	r3, r1
 8010c50:	4602      	mov	r2, r0
 8010c52:	4939      	ldr	r1, [pc, #228]	; (8010d38 <__ieee754_pow+0xa40>)
 8010c54:	2000      	movs	r0, #0
 8010c56:	f7ef fb17 	bl	8000288 <__aeabi_dsub>
 8010c5a:	ec41 0b10 	vmov	d0, r0, r1
 8010c5e:	ee10 3a90 	vmov	r3, s1
 8010c62:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c6a:	da2b      	bge.n	8010cc4 <__ieee754_pow+0x9cc>
 8010c6c:	4650      	mov	r0, sl
 8010c6e:	f000 fc23 	bl	80114b8 <scalbn>
 8010c72:	ec51 0b10 	vmov	r0, r1, d0
 8010c76:	ec53 2b18 	vmov	r2, r3, d8
 8010c7a:	f7ff bbee 	b.w	801045a <__ieee754_pow+0x162>
 8010c7e:	4b2f      	ldr	r3, [pc, #188]	; (8010d3c <__ieee754_pow+0xa44>)
 8010c80:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010c84:	429e      	cmp	r6, r3
 8010c86:	f77f af0d 	ble.w	8010aa4 <__ieee754_pow+0x7ac>
 8010c8a:	4b2d      	ldr	r3, [pc, #180]	; (8010d40 <__ieee754_pow+0xa48>)
 8010c8c:	440b      	add	r3, r1
 8010c8e:	4303      	orrs	r3, r0
 8010c90:	d009      	beq.n	8010ca6 <__ieee754_pow+0x9ae>
 8010c92:	ec51 0b18 	vmov	r0, r1, d8
 8010c96:	2200      	movs	r2, #0
 8010c98:	2300      	movs	r3, #0
 8010c9a:	f7ef ff1f 	bl	8000adc <__aeabi_dcmplt>
 8010c9e:	3800      	subs	r0, #0
 8010ca0:	bf18      	it	ne
 8010ca2:	2001      	movne	r0, #1
 8010ca4:	e448      	b.n	8010538 <__ieee754_pow+0x240>
 8010ca6:	4622      	mov	r2, r4
 8010ca8:	462b      	mov	r3, r5
 8010caa:	f7ef faed 	bl	8000288 <__aeabi_dsub>
 8010cae:	4642      	mov	r2, r8
 8010cb0:	464b      	mov	r3, r9
 8010cb2:	f7ef ff27 	bl	8000b04 <__aeabi_dcmpge>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	f43f aef4 	beq.w	8010aa4 <__ieee754_pow+0x7ac>
 8010cbc:	e7e9      	b.n	8010c92 <__ieee754_pow+0x99a>
 8010cbe:	f04f 0a00 	mov.w	sl, #0
 8010cc2:	e71a      	b.n	8010afa <__ieee754_pow+0x802>
 8010cc4:	ec51 0b10 	vmov	r0, r1, d0
 8010cc8:	4619      	mov	r1, r3
 8010cca:	e7d4      	b.n	8010c76 <__ieee754_pow+0x97e>
 8010ccc:	491a      	ldr	r1, [pc, #104]	; (8010d38 <__ieee754_pow+0xa40>)
 8010cce:	2000      	movs	r0, #0
 8010cd0:	f7ff bb31 	b.w	8010336 <__ieee754_pow+0x3e>
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	2100      	movs	r1, #0
 8010cd8:	f7ff bb2d 	b.w	8010336 <__ieee754_pow+0x3e>
 8010cdc:	4630      	mov	r0, r6
 8010cde:	4639      	mov	r1, r7
 8010ce0:	f7ff bb29 	b.w	8010336 <__ieee754_pow+0x3e>
 8010ce4:	9204      	str	r2, [sp, #16]
 8010ce6:	f7ff bb7b 	b.w	80103e0 <__ieee754_pow+0xe8>
 8010cea:	2300      	movs	r3, #0
 8010cec:	f7ff bb65 	b.w	80103ba <__ieee754_pow+0xc2>
 8010cf0:	00000000 	.word	0x00000000
 8010cf4:	3fe62e43 	.word	0x3fe62e43
 8010cf8:	fefa39ef 	.word	0xfefa39ef
 8010cfc:	3fe62e42 	.word	0x3fe62e42
 8010d00:	0ca86c39 	.word	0x0ca86c39
 8010d04:	be205c61 	.word	0xbe205c61
 8010d08:	72bea4d0 	.word	0x72bea4d0
 8010d0c:	3e663769 	.word	0x3e663769
 8010d10:	c5d26bf1 	.word	0xc5d26bf1
 8010d14:	3ebbbd41 	.word	0x3ebbbd41
 8010d18:	af25de2c 	.word	0xaf25de2c
 8010d1c:	3f11566a 	.word	0x3f11566a
 8010d20:	16bebd93 	.word	0x16bebd93
 8010d24:	3f66c16c 	.word	0x3f66c16c
 8010d28:	5555553e 	.word	0x5555553e
 8010d2c:	3fc55555 	.word	0x3fc55555
 8010d30:	3fe00000 	.word	0x3fe00000
 8010d34:	fff00000 	.word	0xfff00000
 8010d38:	3ff00000 	.word	0x3ff00000
 8010d3c:	4090cbff 	.word	0x4090cbff
 8010d40:	3f6f3400 	.word	0x3f6f3400
 8010d44:	652b82fe 	.word	0x652b82fe
 8010d48:	3c971547 	.word	0x3c971547
 8010d4c:	00000000 	.word	0x00000000

08010d50 <__ieee754_rem_pio2>:
 8010d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d54:	ed2d 8b02 	vpush	{d8}
 8010d58:	ec55 4b10 	vmov	r4, r5, d0
 8010d5c:	4bca      	ldr	r3, [pc, #808]	; (8011088 <__ieee754_rem_pio2+0x338>)
 8010d5e:	b08b      	sub	sp, #44	; 0x2c
 8010d60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010d64:	4598      	cmp	r8, r3
 8010d66:	4682      	mov	sl, r0
 8010d68:	9502      	str	r5, [sp, #8]
 8010d6a:	dc08      	bgt.n	8010d7e <__ieee754_rem_pio2+0x2e>
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	2300      	movs	r3, #0
 8010d70:	ed80 0b00 	vstr	d0, [r0]
 8010d74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010d78:	f04f 0b00 	mov.w	fp, #0
 8010d7c:	e028      	b.n	8010dd0 <__ieee754_rem_pio2+0x80>
 8010d7e:	4bc3      	ldr	r3, [pc, #780]	; (801108c <__ieee754_rem_pio2+0x33c>)
 8010d80:	4598      	cmp	r8, r3
 8010d82:	dc78      	bgt.n	8010e76 <__ieee754_rem_pio2+0x126>
 8010d84:	9b02      	ldr	r3, [sp, #8]
 8010d86:	4ec2      	ldr	r6, [pc, #776]	; (8011090 <__ieee754_rem_pio2+0x340>)
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	ee10 0a10 	vmov	r0, s0
 8010d8e:	a3b0      	add	r3, pc, #704	; (adr r3, 8011050 <__ieee754_rem_pio2+0x300>)
 8010d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d94:	4629      	mov	r1, r5
 8010d96:	dd39      	ble.n	8010e0c <__ieee754_rem_pio2+0xbc>
 8010d98:	f7ef fa76 	bl	8000288 <__aeabi_dsub>
 8010d9c:	45b0      	cmp	r8, r6
 8010d9e:	4604      	mov	r4, r0
 8010da0:	460d      	mov	r5, r1
 8010da2:	d01b      	beq.n	8010ddc <__ieee754_rem_pio2+0x8c>
 8010da4:	a3ac      	add	r3, pc, #688	; (adr r3, 8011058 <__ieee754_rem_pio2+0x308>)
 8010da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010daa:	f7ef fa6d 	bl	8000288 <__aeabi_dsub>
 8010dae:	4602      	mov	r2, r0
 8010db0:	460b      	mov	r3, r1
 8010db2:	e9ca 2300 	strd	r2, r3, [sl]
 8010db6:	4620      	mov	r0, r4
 8010db8:	4629      	mov	r1, r5
 8010dba:	f7ef fa65 	bl	8000288 <__aeabi_dsub>
 8010dbe:	a3a6      	add	r3, pc, #664	; (adr r3, 8011058 <__ieee754_rem_pio2+0x308>)
 8010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc4:	f7ef fa60 	bl	8000288 <__aeabi_dsub>
 8010dc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010dcc:	f04f 0b01 	mov.w	fp, #1
 8010dd0:	4658      	mov	r0, fp
 8010dd2:	b00b      	add	sp, #44	; 0x2c
 8010dd4:	ecbd 8b02 	vpop	{d8}
 8010dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ddc:	a3a0      	add	r3, pc, #640	; (adr r3, 8011060 <__ieee754_rem_pio2+0x310>)
 8010dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de2:	f7ef fa51 	bl	8000288 <__aeabi_dsub>
 8010de6:	a3a0      	add	r3, pc, #640	; (adr r3, 8011068 <__ieee754_rem_pio2+0x318>)
 8010de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dec:	4604      	mov	r4, r0
 8010dee:	460d      	mov	r5, r1
 8010df0:	f7ef fa4a 	bl	8000288 <__aeabi_dsub>
 8010df4:	4602      	mov	r2, r0
 8010df6:	460b      	mov	r3, r1
 8010df8:	e9ca 2300 	strd	r2, r3, [sl]
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	4629      	mov	r1, r5
 8010e00:	f7ef fa42 	bl	8000288 <__aeabi_dsub>
 8010e04:	a398      	add	r3, pc, #608	; (adr r3, 8011068 <__ieee754_rem_pio2+0x318>)
 8010e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0a:	e7db      	b.n	8010dc4 <__ieee754_rem_pio2+0x74>
 8010e0c:	f7ef fa3e 	bl	800028c <__adddf3>
 8010e10:	45b0      	cmp	r8, r6
 8010e12:	4604      	mov	r4, r0
 8010e14:	460d      	mov	r5, r1
 8010e16:	d016      	beq.n	8010e46 <__ieee754_rem_pio2+0xf6>
 8010e18:	a38f      	add	r3, pc, #572	; (adr r3, 8011058 <__ieee754_rem_pio2+0x308>)
 8010e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1e:	f7ef fa35 	bl	800028c <__adddf3>
 8010e22:	4602      	mov	r2, r0
 8010e24:	460b      	mov	r3, r1
 8010e26:	e9ca 2300 	strd	r2, r3, [sl]
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	4629      	mov	r1, r5
 8010e2e:	f7ef fa2b 	bl	8000288 <__aeabi_dsub>
 8010e32:	a389      	add	r3, pc, #548	; (adr r3, 8011058 <__ieee754_rem_pio2+0x308>)
 8010e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e38:	f7ef fa28 	bl	800028c <__adddf3>
 8010e3c:	f04f 3bff 	mov.w	fp, #4294967295
 8010e40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e44:	e7c4      	b.n	8010dd0 <__ieee754_rem_pio2+0x80>
 8010e46:	a386      	add	r3, pc, #536	; (adr r3, 8011060 <__ieee754_rem_pio2+0x310>)
 8010e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4c:	f7ef fa1e 	bl	800028c <__adddf3>
 8010e50:	a385      	add	r3, pc, #532	; (adr r3, 8011068 <__ieee754_rem_pio2+0x318>)
 8010e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e56:	4604      	mov	r4, r0
 8010e58:	460d      	mov	r5, r1
 8010e5a:	f7ef fa17 	bl	800028c <__adddf3>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	460b      	mov	r3, r1
 8010e62:	e9ca 2300 	strd	r2, r3, [sl]
 8010e66:	4620      	mov	r0, r4
 8010e68:	4629      	mov	r1, r5
 8010e6a:	f7ef fa0d 	bl	8000288 <__aeabi_dsub>
 8010e6e:	a37e      	add	r3, pc, #504	; (adr r3, 8011068 <__ieee754_rem_pio2+0x318>)
 8010e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e74:	e7e0      	b.n	8010e38 <__ieee754_rem_pio2+0xe8>
 8010e76:	4b87      	ldr	r3, [pc, #540]	; (8011094 <__ieee754_rem_pio2+0x344>)
 8010e78:	4598      	cmp	r8, r3
 8010e7a:	f300 80d8 	bgt.w	801102e <__ieee754_rem_pio2+0x2de>
 8010e7e:	f000 fb0f 	bl	80114a0 <fabs>
 8010e82:	ec55 4b10 	vmov	r4, r5, d0
 8010e86:	ee10 0a10 	vmov	r0, s0
 8010e8a:	a379      	add	r3, pc, #484	; (adr r3, 8011070 <__ieee754_rem_pio2+0x320>)
 8010e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e90:	4629      	mov	r1, r5
 8010e92:	f7ef fbb1 	bl	80005f8 <__aeabi_dmul>
 8010e96:	4b80      	ldr	r3, [pc, #512]	; (8011098 <__ieee754_rem_pio2+0x348>)
 8010e98:	2200      	movs	r2, #0
 8010e9a:	f7ef f9f7 	bl	800028c <__adddf3>
 8010e9e:	f7ef fe5b 	bl	8000b58 <__aeabi_d2iz>
 8010ea2:	4683      	mov	fp, r0
 8010ea4:	f7ef fb3e 	bl	8000524 <__aeabi_i2d>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	460b      	mov	r3, r1
 8010eac:	ec43 2b18 	vmov	d8, r2, r3
 8010eb0:	a367      	add	r3, pc, #412	; (adr r3, 8011050 <__ieee754_rem_pio2+0x300>)
 8010eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb6:	f7ef fb9f 	bl	80005f8 <__aeabi_dmul>
 8010eba:	4602      	mov	r2, r0
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	4629      	mov	r1, r5
 8010ec2:	f7ef f9e1 	bl	8000288 <__aeabi_dsub>
 8010ec6:	a364      	add	r3, pc, #400	; (adr r3, 8011058 <__ieee754_rem_pio2+0x308>)
 8010ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ecc:	4606      	mov	r6, r0
 8010ece:	460f      	mov	r7, r1
 8010ed0:	ec51 0b18 	vmov	r0, r1, d8
 8010ed4:	f7ef fb90 	bl	80005f8 <__aeabi_dmul>
 8010ed8:	f1bb 0f1f 	cmp.w	fp, #31
 8010edc:	4604      	mov	r4, r0
 8010ede:	460d      	mov	r5, r1
 8010ee0:	dc0d      	bgt.n	8010efe <__ieee754_rem_pio2+0x1ae>
 8010ee2:	4b6e      	ldr	r3, [pc, #440]	; (801109c <__ieee754_rem_pio2+0x34c>)
 8010ee4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eec:	4543      	cmp	r3, r8
 8010eee:	d006      	beq.n	8010efe <__ieee754_rem_pio2+0x1ae>
 8010ef0:	4622      	mov	r2, r4
 8010ef2:	462b      	mov	r3, r5
 8010ef4:	4630      	mov	r0, r6
 8010ef6:	4639      	mov	r1, r7
 8010ef8:	f7ef f9c6 	bl	8000288 <__aeabi_dsub>
 8010efc:	e00e      	b.n	8010f1c <__ieee754_rem_pio2+0x1cc>
 8010efe:	462b      	mov	r3, r5
 8010f00:	4622      	mov	r2, r4
 8010f02:	4630      	mov	r0, r6
 8010f04:	4639      	mov	r1, r7
 8010f06:	f7ef f9bf 	bl	8000288 <__aeabi_dsub>
 8010f0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010f0e:	9303      	str	r3, [sp, #12]
 8010f10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010f14:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010f18:	2b10      	cmp	r3, #16
 8010f1a:	dc02      	bgt.n	8010f22 <__ieee754_rem_pio2+0x1d2>
 8010f1c:	e9ca 0100 	strd	r0, r1, [sl]
 8010f20:	e039      	b.n	8010f96 <__ieee754_rem_pio2+0x246>
 8010f22:	a34f      	add	r3, pc, #316	; (adr r3, 8011060 <__ieee754_rem_pio2+0x310>)
 8010f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f28:	ec51 0b18 	vmov	r0, r1, d8
 8010f2c:	f7ef fb64 	bl	80005f8 <__aeabi_dmul>
 8010f30:	4604      	mov	r4, r0
 8010f32:	460d      	mov	r5, r1
 8010f34:	4602      	mov	r2, r0
 8010f36:	460b      	mov	r3, r1
 8010f38:	4630      	mov	r0, r6
 8010f3a:	4639      	mov	r1, r7
 8010f3c:	f7ef f9a4 	bl	8000288 <__aeabi_dsub>
 8010f40:	4602      	mov	r2, r0
 8010f42:	460b      	mov	r3, r1
 8010f44:	4680      	mov	r8, r0
 8010f46:	4689      	mov	r9, r1
 8010f48:	4630      	mov	r0, r6
 8010f4a:	4639      	mov	r1, r7
 8010f4c:	f7ef f99c 	bl	8000288 <__aeabi_dsub>
 8010f50:	4622      	mov	r2, r4
 8010f52:	462b      	mov	r3, r5
 8010f54:	f7ef f998 	bl	8000288 <__aeabi_dsub>
 8010f58:	a343      	add	r3, pc, #268	; (adr r3, 8011068 <__ieee754_rem_pio2+0x318>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	4604      	mov	r4, r0
 8010f60:	460d      	mov	r5, r1
 8010f62:	ec51 0b18 	vmov	r0, r1, d8
 8010f66:	f7ef fb47 	bl	80005f8 <__aeabi_dmul>
 8010f6a:	4622      	mov	r2, r4
 8010f6c:	462b      	mov	r3, r5
 8010f6e:	f7ef f98b 	bl	8000288 <__aeabi_dsub>
 8010f72:	4602      	mov	r2, r0
 8010f74:	460b      	mov	r3, r1
 8010f76:	4604      	mov	r4, r0
 8010f78:	460d      	mov	r5, r1
 8010f7a:	4640      	mov	r0, r8
 8010f7c:	4649      	mov	r1, r9
 8010f7e:	f7ef f983 	bl	8000288 <__aeabi_dsub>
 8010f82:	9a03      	ldr	r2, [sp, #12]
 8010f84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010f88:	1ad3      	subs	r3, r2, r3
 8010f8a:	2b31      	cmp	r3, #49	; 0x31
 8010f8c:	dc24      	bgt.n	8010fd8 <__ieee754_rem_pio2+0x288>
 8010f8e:	e9ca 0100 	strd	r0, r1, [sl]
 8010f92:	4646      	mov	r6, r8
 8010f94:	464f      	mov	r7, r9
 8010f96:	e9da 8900 	ldrd	r8, r9, [sl]
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	4642      	mov	r2, r8
 8010f9e:	464b      	mov	r3, r9
 8010fa0:	4639      	mov	r1, r7
 8010fa2:	f7ef f971 	bl	8000288 <__aeabi_dsub>
 8010fa6:	462b      	mov	r3, r5
 8010fa8:	4622      	mov	r2, r4
 8010faa:	f7ef f96d 	bl	8000288 <__aeabi_dsub>
 8010fae:	9b02      	ldr	r3, [sp, #8]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010fb6:	f6bf af0b 	bge.w	8010dd0 <__ieee754_rem_pio2+0x80>
 8010fba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010fbe:	f8ca 3004 	str.w	r3, [sl, #4]
 8010fc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fc6:	f8ca 8000 	str.w	r8, [sl]
 8010fca:	f8ca 0008 	str.w	r0, [sl, #8]
 8010fce:	f8ca 300c 	str.w	r3, [sl, #12]
 8010fd2:	f1cb 0b00 	rsb	fp, fp, #0
 8010fd6:	e6fb      	b.n	8010dd0 <__ieee754_rem_pio2+0x80>
 8010fd8:	a327      	add	r3, pc, #156	; (adr r3, 8011078 <__ieee754_rem_pio2+0x328>)
 8010fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fde:	ec51 0b18 	vmov	r0, r1, d8
 8010fe2:	f7ef fb09 	bl	80005f8 <__aeabi_dmul>
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	460d      	mov	r5, r1
 8010fea:	4602      	mov	r2, r0
 8010fec:	460b      	mov	r3, r1
 8010fee:	4640      	mov	r0, r8
 8010ff0:	4649      	mov	r1, r9
 8010ff2:	f7ef f949 	bl	8000288 <__aeabi_dsub>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	4606      	mov	r6, r0
 8010ffc:	460f      	mov	r7, r1
 8010ffe:	4640      	mov	r0, r8
 8011000:	4649      	mov	r1, r9
 8011002:	f7ef f941 	bl	8000288 <__aeabi_dsub>
 8011006:	4622      	mov	r2, r4
 8011008:	462b      	mov	r3, r5
 801100a:	f7ef f93d 	bl	8000288 <__aeabi_dsub>
 801100e:	a31c      	add	r3, pc, #112	; (adr r3, 8011080 <__ieee754_rem_pio2+0x330>)
 8011010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011014:	4604      	mov	r4, r0
 8011016:	460d      	mov	r5, r1
 8011018:	ec51 0b18 	vmov	r0, r1, d8
 801101c:	f7ef faec 	bl	80005f8 <__aeabi_dmul>
 8011020:	4622      	mov	r2, r4
 8011022:	462b      	mov	r3, r5
 8011024:	f7ef f930 	bl	8000288 <__aeabi_dsub>
 8011028:	4604      	mov	r4, r0
 801102a:	460d      	mov	r5, r1
 801102c:	e760      	b.n	8010ef0 <__ieee754_rem_pio2+0x1a0>
 801102e:	4b1c      	ldr	r3, [pc, #112]	; (80110a0 <__ieee754_rem_pio2+0x350>)
 8011030:	4598      	cmp	r8, r3
 8011032:	dd37      	ble.n	80110a4 <__ieee754_rem_pio2+0x354>
 8011034:	ee10 2a10 	vmov	r2, s0
 8011038:	462b      	mov	r3, r5
 801103a:	4620      	mov	r0, r4
 801103c:	4629      	mov	r1, r5
 801103e:	f7ef f923 	bl	8000288 <__aeabi_dsub>
 8011042:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011046:	e9ca 0100 	strd	r0, r1, [sl]
 801104a:	e695      	b.n	8010d78 <__ieee754_rem_pio2+0x28>
 801104c:	f3af 8000 	nop.w
 8011050:	54400000 	.word	0x54400000
 8011054:	3ff921fb 	.word	0x3ff921fb
 8011058:	1a626331 	.word	0x1a626331
 801105c:	3dd0b461 	.word	0x3dd0b461
 8011060:	1a600000 	.word	0x1a600000
 8011064:	3dd0b461 	.word	0x3dd0b461
 8011068:	2e037073 	.word	0x2e037073
 801106c:	3ba3198a 	.word	0x3ba3198a
 8011070:	6dc9c883 	.word	0x6dc9c883
 8011074:	3fe45f30 	.word	0x3fe45f30
 8011078:	2e000000 	.word	0x2e000000
 801107c:	3ba3198a 	.word	0x3ba3198a
 8011080:	252049c1 	.word	0x252049c1
 8011084:	397b839a 	.word	0x397b839a
 8011088:	3fe921fb 	.word	0x3fe921fb
 801108c:	4002d97b 	.word	0x4002d97b
 8011090:	3ff921fb 	.word	0x3ff921fb
 8011094:	413921fb 	.word	0x413921fb
 8011098:	3fe00000 	.word	0x3fe00000
 801109c:	080122d0 	.word	0x080122d0
 80110a0:	7fefffff 	.word	0x7fefffff
 80110a4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80110a8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80110ac:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80110b0:	4620      	mov	r0, r4
 80110b2:	460d      	mov	r5, r1
 80110b4:	f7ef fd50 	bl	8000b58 <__aeabi_d2iz>
 80110b8:	f7ef fa34 	bl	8000524 <__aeabi_i2d>
 80110bc:	4602      	mov	r2, r0
 80110be:	460b      	mov	r3, r1
 80110c0:	4620      	mov	r0, r4
 80110c2:	4629      	mov	r1, r5
 80110c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80110c8:	f7ef f8de 	bl	8000288 <__aeabi_dsub>
 80110cc:	4b21      	ldr	r3, [pc, #132]	; (8011154 <__ieee754_rem_pio2+0x404>)
 80110ce:	2200      	movs	r2, #0
 80110d0:	f7ef fa92 	bl	80005f8 <__aeabi_dmul>
 80110d4:	460d      	mov	r5, r1
 80110d6:	4604      	mov	r4, r0
 80110d8:	f7ef fd3e 	bl	8000b58 <__aeabi_d2iz>
 80110dc:	f7ef fa22 	bl	8000524 <__aeabi_i2d>
 80110e0:	4602      	mov	r2, r0
 80110e2:	460b      	mov	r3, r1
 80110e4:	4620      	mov	r0, r4
 80110e6:	4629      	mov	r1, r5
 80110e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80110ec:	f7ef f8cc 	bl	8000288 <__aeabi_dsub>
 80110f0:	4b18      	ldr	r3, [pc, #96]	; (8011154 <__ieee754_rem_pio2+0x404>)
 80110f2:	2200      	movs	r2, #0
 80110f4:	f7ef fa80 	bl	80005f8 <__aeabi_dmul>
 80110f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80110fc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8011100:	2703      	movs	r7, #3
 8011102:	2400      	movs	r4, #0
 8011104:	2500      	movs	r5, #0
 8011106:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801110a:	4622      	mov	r2, r4
 801110c:	462b      	mov	r3, r5
 801110e:	46b9      	mov	r9, r7
 8011110:	3f01      	subs	r7, #1
 8011112:	f7ef fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8011116:	2800      	cmp	r0, #0
 8011118:	d1f5      	bne.n	8011106 <__ieee754_rem_pio2+0x3b6>
 801111a:	4b0f      	ldr	r3, [pc, #60]	; (8011158 <__ieee754_rem_pio2+0x408>)
 801111c:	9301      	str	r3, [sp, #4]
 801111e:	2302      	movs	r3, #2
 8011120:	9300      	str	r3, [sp, #0]
 8011122:	4632      	mov	r2, r6
 8011124:	464b      	mov	r3, r9
 8011126:	4651      	mov	r1, sl
 8011128:	a804      	add	r0, sp, #16
 801112a:	f000 fa75 	bl	8011618 <__kernel_rem_pio2>
 801112e:	9b02      	ldr	r3, [sp, #8]
 8011130:	2b00      	cmp	r3, #0
 8011132:	4683      	mov	fp, r0
 8011134:	f6bf ae4c 	bge.w	8010dd0 <__ieee754_rem_pio2+0x80>
 8011138:	e9da 2100 	ldrd	r2, r1, [sl]
 801113c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011140:	e9ca 2300 	strd	r2, r3, [sl]
 8011144:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011148:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801114c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011150:	e73f      	b.n	8010fd2 <__ieee754_rem_pio2+0x282>
 8011152:	bf00      	nop
 8011154:	41700000 	.word	0x41700000
 8011158:	08012350 	.word	0x08012350
 801115c:	00000000 	.word	0x00000000

08011160 <atan>:
 8011160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011164:	ec55 4b10 	vmov	r4, r5, d0
 8011168:	4bc3      	ldr	r3, [pc, #780]	; (8011478 <atan+0x318>)
 801116a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801116e:	429e      	cmp	r6, r3
 8011170:	46ab      	mov	fp, r5
 8011172:	dd18      	ble.n	80111a6 <atan+0x46>
 8011174:	4bc1      	ldr	r3, [pc, #772]	; (801147c <atan+0x31c>)
 8011176:	429e      	cmp	r6, r3
 8011178:	dc01      	bgt.n	801117e <atan+0x1e>
 801117a:	d109      	bne.n	8011190 <atan+0x30>
 801117c:	b144      	cbz	r4, 8011190 <atan+0x30>
 801117e:	4622      	mov	r2, r4
 8011180:	462b      	mov	r3, r5
 8011182:	4620      	mov	r0, r4
 8011184:	4629      	mov	r1, r5
 8011186:	f7ef f881 	bl	800028c <__adddf3>
 801118a:	4604      	mov	r4, r0
 801118c:	460d      	mov	r5, r1
 801118e:	e006      	b.n	801119e <atan+0x3e>
 8011190:	f1bb 0f00 	cmp.w	fp, #0
 8011194:	f300 8131 	bgt.w	80113fa <atan+0x29a>
 8011198:	a59b      	add	r5, pc, #620	; (adr r5, 8011408 <atan+0x2a8>)
 801119a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801119e:	ec45 4b10 	vmov	d0, r4, r5
 80111a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a6:	4bb6      	ldr	r3, [pc, #728]	; (8011480 <atan+0x320>)
 80111a8:	429e      	cmp	r6, r3
 80111aa:	dc14      	bgt.n	80111d6 <atan+0x76>
 80111ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80111b0:	429e      	cmp	r6, r3
 80111b2:	dc0d      	bgt.n	80111d0 <atan+0x70>
 80111b4:	a396      	add	r3, pc, #600	; (adr r3, 8011410 <atan+0x2b0>)
 80111b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ba:	ee10 0a10 	vmov	r0, s0
 80111be:	4629      	mov	r1, r5
 80111c0:	f7ef f864 	bl	800028c <__adddf3>
 80111c4:	4baf      	ldr	r3, [pc, #700]	; (8011484 <atan+0x324>)
 80111c6:	2200      	movs	r2, #0
 80111c8:	f7ef fca6 	bl	8000b18 <__aeabi_dcmpgt>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	d1e6      	bne.n	801119e <atan+0x3e>
 80111d0:	f04f 3aff 	mov.w	sl, #4294967295
 80111d4:	e02b      	b.n	801122e <atan+0xce>
 80111d6:	f000 f963 	bl	80114a0 <fabs>
 80111da:	4bab      	ldr	r3, [pc, #684]	; (8011488 <atan+0x328>)
 80111dc:	429e      	cmp	r6, r3
 80111de:	ec55 4b10 	vmov	r4, r5, d0
 80111e2:	f300 80bf 	bgt.w	8011364 <atan+0x204>
 80111e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80111ea:	429e      	cmp	r6, r3
 80111ec:	f300 80a0 	bgt.w	8011330 <atan+0x1d0>
 80111f0:	ee10 2a10 	vmov	r2, s0
 80111f4:	ee10 0a10 	vmov	r0, s0
 80111f8:	462b      	mov	r3, r5
 80111fa:	4629      	mov	r1, r5
 80111fc:	f7ef f846 	bl	800028c <__adddf3>
 8011200:	4ba0      	ldr	r3, [pc, #640]	; (8011484 <atan+0x324>)
 8011202:	2200      	movs	r2, #0
 8011204:	f7ef f840 	bl	8000288 <__aeabi_dsub>
 8011208:	2200      	movs	r2, #0
 801120a:	4606      	mov	r6, r0
 801120c:	460f      	mov	r7, r1
 801120e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011212:	4620      	mov	r0, r4
 8011214:	4629      	mov	r1, r5
 8011216:	f7ef f839 	bl	800028c <__adddf3>
 801121a:	4602      	mov	r2, r0
 801121c:	460b      	mov	r3, r1
 801121e:	4630      	mov	r0, r6
 8011220:	4639      	mov	r1, r7
 8011222:	f7ef fb13 	bl	800084c <__aeabi_ddiv>
 8011226:	f04f 0a00 	mov.w	sl, #0
 801122a:	4604      	mov	r4, r0
 801122c:	460d      	mov	r5, r1
 801122e:	4622      	mov	r2, r4
 8011230:	462b      	mov	r3, r5
 8011232:	4620      	mov	r0, r4
 8011234:	4629      	mov	r1, r5
 8011236:	f7ef f9df 	bl	80005f8 <__aeabi_dmul>
 801123a:	4602      	mov	r2, r0
 801123c:	460b      	mov	r3, r1
 801123e:	4680      	mov	r8, r0
 8011240:	4689      	mov	r9, r1
 8011242:	f7ef f9d9 	bl	80005f8 <__aeabi_dmul>
 8011246:	a374      	add	r3, pc, #464	; (adr r3, 8011418 <atan+0x2b8>)
 8011248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124c:	4606      	mov	r6, r0
 801124e:	460f      	mov	r7, r1
 8011250:	f7ef f9d2 	bl	80005f8 <__aeabi_dmul>
 8011254:	a372      	add	r3, pc, #456	; (adr r3, 8011420 <atan+0x2c0>)
 8011256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125a:	f7ef f817 	bl	800028c <__adddf3>
 801125e:	4632      	mov	r2, r6
 8011260:	463b      	mov	r3, r7
 8011262:	f7ef f9c9 	bl	80005f8 <__aeabi_dmul>
 8011266:	a370      	add	r3, pc, #448	; (adr r3, 8011428 <atan+0x2c8>)
 8011268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126c:	f7ef f80e 	bl	800028c <__adddf3>
 8011270:	4632      	mov	r2, r6
 8011272:	463b      	mov	r3, r7
 8011274:	f7ef f9c0 	bl	80005f8 <__aeabi_dmul>
 8011278:	a36d      	add	r3, pc, #436	; (adr r3, 8011430 <atan+0x2d0>)
 801127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127e:	f7ef f805 	bl	800028c <__adddf3>
 8011282:	4632      	mov	r2, r6
 8011284:	463b      	mov	r3, r7
 8011286:	f7ef f9b7 	bl	80005f8 <__aeabi_dmul>
 801128a:	a36b      	add	r3, pc, #428	; (adr r3, 8011438 <atan+0x2d8>)
 801128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011290:	f7ee fffc 	bl	800028c <__adddf3>
 8011294:	4632      	mov	r2, r6
 8011296:	463b      	mov	r3, r7
 8011298:	f7ef f9ae 	bl	80005f8 <__aeabi_dmul>
 801129c:	a368      	add	r3, pc, #416	; (adr r3, 8011440 <atan+0x2e0>)
 801129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a2:	f7ee fff3 	bl	800028c <__adddf3>
 80112a6:	4642      	mov	r2, r8
 80112a8:	464b      	mov	r3, r9
 80112aa:	f7ef f9a5 	bl	80005f8 <__aeabi_dmul>
 80112ae:	a366      	add	r3, pc, #408	; (adr r3, 8011448 <atan+0x2e8>)
 80112b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b4:	4680      	mov	r8, r0
 80112b6:	4689      	mov	r9, r1
 80112b8:	4630      	mov	r0, r6
 80112ba:	4639      	mov	r1, r7
 80112bc:	f7ef f99c 	bl	80005f8 <__aeabi_dmul>
 80112c0:	a363      	add	r3, pc, #396	; (adr r3, 8011450 <atan+0x2f0>)
 80112c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c6:	f7ee ffdf 	bl	8000288 <__aeabi_dsub>
 80112ca:	4632      	mov	r2, r6
 80112cc:	463b      	mov	r3, r7
 80112ce:	f7ef f993 	bl	80005f8 <__aeabi_dmul>
 80112d2:	a361      	add	r3, pc, #388	; (adr r3, 8011458 <atan+0x2f8>)
 80112d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d8:	f7ee ffd6 	bl	8000288 <__aeabi_dsub>
 80112dc:	4632      	mov	r2, r6
 80112de:	463b      	mov	r3, r7
 80112e0:	f7ef f98a 	bl	80005f8 <__aeabi_dmul>
 80112e4:	a35e      	add	r3, pc, #376	; (adr r3, 8011460 <atan+0x300>)
 80112e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ea:	f7ee ffcd 	bl	8000288 <__aeabi_dsub>
 80112ee:	4632      	mov	r2, r6
 80112f0:	463b      	mov	r3, r7
 80112f2:	f7ef f981 	bl	80005f8 <__aeabi_dmul>
 80112f6:	a35c      	add	r3, pc, #368	; (adr r3, 8011468 <atan+0x308>)
 80112f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fc:	f7ee ffc4 	bl	8000288 <__aeabi_dsub>
 8011300:	4632      	mov	r2, r6
 8011302:	463b      	mov	r3, r7
 8011304:	f7ef f978 	bl	80005f8 <__aeabi_dmul>
 8011308:	4602      	mov	r2, r0
 801130a:	460b      	mov	r3, r1
 801130c:	4640      	mov	r0, r8
 801130e:	4649      	mov	r1, r9
 8011310:	f7ee ffbc 	bl	800028c <__adddf3>
 8011314:	4622      	mov	r2, r4
 8011316:	462b      	mov	r3, r5
 8011318:	f7ef f96e 	bl	80005f8 <__aeabi_dmul>
 801131c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011320:	4602      	mov	r2, r0
 8011322:	460b      	mov	r3, r1
 8011324:	d14b      	bne.n	80113be <atan+0x25e>
 8011326:	4620      	mov	r0, r4
 8011328:	4629      	mov	r1, r5
 801132a:	f7ee ffad 	bl	8000288 <__aeabi_dsub>
 801132e:	e72c      	b.n	801118a <atan+0x2a>
 8011330:	ee10 0a10 	vmov	r0, s0
 8011334:	4b53      	ldr	r3, [pc, #332]	; (8011484 <atan+0x324>)
 8011336:	2200      	movs	r2, #0
 8011338:	4629      	mov	r1, r5
 801133a:	f7ee ffa5 	bl	8000288 <__aeabi_dsub>
 801133e:	4b51      	ldr	r3, [pc, #324]	; (8011484 <atan+0x324>)
 8011340:	4606      	mov	r6, r0
 8011342:	460f      	mov	r7, r1
 8011344:	2200      	movs	r2, #0
 8011346:	4620      	mov	r0, r4
 8011348:	4629      	mov	r1, r5
 801134a:	f7ee ff9f 	bl	800028c <__adddf3>
 801134e:	4602      	mov	r2, r0
 8011350:	460b      	mov	r3, r1
 8011352:	4630      	mov	r0, r6
 8011354:	4639      	mov	r1, r7
 8011356:	f7ef fa79 	bl	800084c <__aeabi_ddiv>
 801135a:	f04f 0a01 	mov.w	sl, #1
 801135e:	4604      	mov	r4, r0
 8011360:	460d      	mov	r5, r1
 8011362:	e764      	b.n	801122e <atan+0xce>
 8011364:	4b49      	ldr	r3, [pc, #292]	; (801148c <atan+0x32c>)
 8011366:	429e      	cmp	r6, r3
 8011368:	da1d      	bge.n	80113a6 <atan+0x246>
 801136a:	ee10 0a10 	vmov	r0, s0
 801136e:	4b48      	ldr	r3, [pc, #288]	; (8011490 <atan+0x330>)
 8011370:	2200      	movs	r2, #0
 8011372:	4629      	mov	r1, r5
 8011374:	f7ee ff88 	bl	8000288 <__aeabi_dsub>
 8011378:	4b45      	ldr	r3, [pc, #276]	; (8011490 <atan+0x330>)
 801137a:	4606      	mov	r6, r0
 801137c:	460f      	mov	r7, r1
 801137e:	2200      	movs	r2, #0
 8011380:	4620      	mov	r0, r4
 8011382:	4629      	mov	r1, r5
 8011384:	f7ef f938 	bl	80005f8 <__aeabi_dmul>
 8011388:	4b3e      	ldr	r3, [pc, #248]	; (8011484 <atan+0x324>)
 801138a:	2200      	movs	r2, #0
 801138c:	f7ee ff7e 	bl	800028c <__adddf3>
 8011390:	4602      	mov	r2, r0
 8011392:	460b      	mov	r3, r1
 8011394:	4630      	mov	r0, r6
 8011396:	4639      	mov	r1, r7
 8011398:	f7ef fa58 	bl	800084c <__aeabi_ddiv>
 801139c:	f04f 0a02 	mov.w	sl, #2
 80113a0:	4604      	mov	r4, r0
 80113a2:	460d      	mov	r5, r1
 80113a4:	e743      	b.n	801122e <atan+0xce>
 80113a6:	462b      	mov	r3, r5
 80113a8:	ee10 2a10 	vmov	r2, s0
 80113ac:	4939      	ldr	r1, [pc, #228]	; (8011494 <atan+0x334>)
 80113ae:	2000      	movs	r0, #0
 80113b0:	f7ef fa4c 	bl	800084c <__aeabi_ddiv>
 80113b4:	f04f 0a03 	mov.w	sl, #3
 80113b8:	4604      	mov	r4, r0
 80113ba:	460d      	mov	r5, r1
 80113bc:	e737      	b.n	801122e <atan+0xce>
 80113be:	4b36      	ldr	r3, [pc, #216]	; (8011498 <atan+0x338>)
 80113c0:	4e36      	ldr	r6, [pc, #216]	; (801149c <atan+0x33c>)
 80113c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80113c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ca:	f7ee ff5d 	bl	8000288 <__aeabi_dsub>
 80113ce:	4622      	mov	r2, r4
 80113d0:	462b      	mov	r3, r5
 80113d2:	f7ee ff59 	bl	8000288 <__aeabi_dsub>
 80113d6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80113da:	4602      	mov	r2, r0
 80113dc:	460b      	mov	r3, r1
 80113de:	e9d6 0100 	ldrd	r0, r1, [r6]
 80113e2:	f7ee ff51 	bl	8000288 <__aeabi_dsub>
 80113e6:	f1bb 0f00 	cmp.w	fp, #0
 80113ea:	4604      	mov	r4, r0
 80113ec:	460d      	mov	r5, r1
 80113ee:	f6bf aed6 	bge.w	801119e <atan+0x3e>
 80113f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113f6:	461d      	mov	r5, r3
 80113f8:	e6d1      	b.n	801119e <atan+0x3e>
 80113fa:	a51d      	add	r5, pc, #116	; (adr r5, 8011470 <atan+0x310>)
 80113fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011400:	e6cd      	b.n	801119e <atan+0x3e>
 8011402:	bf00      	nop
 8011404:	f3af 8000 	nop.w
 8011408:	54442d18 	.word	0x54442d18
 801140c:	bff921fb 	.word	0xbff921fb
 8011410:	8800759c 	.word	0x8800759c
 8011414:	7e37e43c 	.word	0x7e37e43c
 8011418:	e322da11 	.word	0xe322da11
 801141c:	3f90ad3a 	.word	0x3f90ad3a
 8011420:	24760deb 	.word	0x24760deb
 8011424:	3fa97b4b 	.word	0x3fa97b4b
 8011428:	a0d03d51 	.word	0xa0d03d51
 801142c:	3fb10d66 	.word	0x3fb10d66
 8011430:	c54c206e 	.word	0xc54c206e
 8011434:	3fb745cd 	.word	0x3fb745cd
 8011438:	920083ff 	.word	0x920083ff
 801143c:	3fc24924 	.word	0x3fc24924
 8011440:	5555550d 	.word	0x5555550d
 8011444:	3fd55555 	.word	0x3fd55555
 8011448:	2c6a6c2f 	.word	0x2c6a6c2f
 801144c:	bfa2b444 	.word	0xbfa2b444
 8011450:	52defd9a 	.word	0x52defd9a
 8011454:	3fadde2d 	.word	0x3fadde2d
 8011458:	af749a6d 	.word	0xaf749a6d
 801145c:	3fb3b0f2 	.word	0x3fb3b0f2
 8011460:	fe231671 	.word	0xfe231671
 8011464:	3fbc71c6 	.word	0x3fbc71c6
 8011468:	9998ebc4 	.word	0x9998ebc4
 801146c:	3fc99999 	.word	0x3fc99999
 8011470:	54442d18 	.word	0x54442d18
 8011474:	3ff921fb 	.word	0x3ff921fb
 8011478:	440fffff 	.word	0x440fffff
 801147c:	7ff00000 	.word	0x7ff00000
 8011480:	3fdbffff 	.word	0x3fdbffff
 8011484:	3ff00000 	.word	0x3ff00000
 8011488:	3ff2ffff 	.word	0x3ff2ffff
 801148c:	40038000 	.word	0x40038000
 8011490:	3ff80000 	.word	0x3ff80000
 8011494:	bff00000 	.word	0xbff00000
 8011498:	08012478 	.word	0x08012478
 801149c:	08012458 	.word	0x08012458

080114a0 <fabs>:
 80114a0:	ec51 0b10 	vmov	r0, r1, d0
 80114a4:	ee10 2a10 	vmov	r2, s0
 80114a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80114ac:	ec43 2b10 	vmov	d0, r2, r3
 80114b0:	4770      	bx	lr
 80114b2:	0000      	movs	r0, r0
 80114b4:	0000      	movs	r0, r0
	...

080114b8 <scalbn>:
 80114b8:	b570      	push	{r4, r5, r6, lr}
 80114ba:	ec55 4b10 	vmov	r4, r5, d0
 80114be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80114c2:	4606      	mov	r6, r0
 80114c4:	462b      	mov	r3, r5
 80114c6:	b999      	cbnz	r1, 80114f0 <scalbn+0x38>
 80114c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80114cc:	4323      	orrs	r3, r4
 80114ce:	d03f      	beq.n	8011550 <scalbn+0x98>
 80114d0:	4b35      	ldr	r3, [pc, #212]	; (80115a8 <scalbn+0xf0>)
 80114d2:	4629      	mov	r1, r5
 80114d4:	ee10 0a10 	vmov	r0, s0
 80114d8:	2200      	movs	r2, #0
 80114da:	f7ef f88d 	bl	80005f8 <__aeabi_dmul>
 80114de:	4b33      	ldr	r3, [pc, #204]	; (80115ac <scalbn+0xf4>)
 80114e0:	429e      	cmp	r6, r3
 80114e2:	4604      	mov	r4, r0
 80114e4:	460d      	mov	r5, r1
 80114e6:	da10      	bge.n	801150a <scalbn+0x52>
 80114e8:	a327      	add	r3, pc, #156	; (adr r3, 8011588 <scalbn+0xd0>)
 80114ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ee:	e01f      	b.n	8011530 <scalbn+0x78>
 80114f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80114f4:	4291      	cmp	r1, r2
 80114f6:	d10c      	bne.n	8011512 <scalbn+0x5a>
 80114f8:	ee10 2a10 	vmov	r2, s0
 80114fc:	4620      	mov	r0, r4
 80114fe:	4629      	mov	r1, r5
 8011500:	f7ee fec4 	bl	800028c <__adddf3>
 8011504:	4604      	mov	r4, r0
 8011506:	460d      	mov	r5, r1
 8011508:	e022      	b.n	8011550 <scalbn+0x98>
 801150a:	460b      	mov	r3, r1
 801150c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011510:	3936      	subs	r1, #54	; 0x36
 8011512:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011516:	4296      	cmp	r6, r2
 8011518:	dd0d      	ble.n	8011536 <scalbn+0x7e>
 801151a:	2d00      	cmp	r5, #0
 801151c:	a11c      	add	r1, pc, #112	; (adr r1, 8011590 <scalbn+0xd8>)
 801151e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011522:	da02      	bge.n	801152a <scalbn+0x72>
 8011524:	a11c      	add	r1, pc, #112	; (adr r1, 8011598 <scalbn+0xe0>)
 8011526:	e9d1 0100 	ldrd	r0, r1, [r1]
 801152a:	a319      	add	r3, pc, #100	; (adr r3, 8011590 <scalbn+0xd8>)
 801152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011530:	f7ef f862 	bl	80005f8 <__aeabi_dmul>
 8011534:	e7e6      	b.n	8011504 <scalbn+0x4c>
 8011536:	1872      	adds	r2, r6, r1
 8011538:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801153c:	428a      	cmp	r2, r1
 801153e:	dcec      	bgt.n	801151a <scalbn+0x62>
 8011540:	2a00      	cmp	r2, #0
 8011542:	dd08      	ble.n	8011556 <scalbn+0x9e>
 8011544:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011548:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801154c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011550:	ec45 4b10 	vmov	d0, r4, r5
 8011554:	bd70      	pop	{r4, r5, r6, pc}
 8011556:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801155a:	da08      	bge.n	801156e <scalbn+0xb6>
 801155c:	2d00      	cmp	r5, #0
 801155e:	a10a      	add	r1, pc, #40	; (adr r1, 8011588 <scalbn+0xd0>)
 8011560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011564:	dac0      	bge.n	80114e8 <scalbn+0x30>
 8011566:	a10e      	add	r1, pc, #56	; (adr r1, 80115a0 <scalbn+0xe8>)
 8011568:	e9d1 0100 	ldrd	r0, r1, [r1]
 801156c:	e7bc      	b.n	80114e8 <scalbn+0x30>
 801156e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011572:	3236      	adds	r2, #54	; 0x36
 8011574:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011578:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801157c:	4620      	mov	r0, r4
 801157e:	4b0c      	ldr	r3, [pc, #48]	; (80115b0 <scalbn+0xf8>)
 8011580:	2200      	movs	r2, #0
 8011582:	e7d5      	b.n	8011530 <scalbn+0x78>
 8011584:	f3af 8000 	nop.w
 8011588:	c2f8f359 	.word	0xc2f8f359
 801158c:	01a56e1f 	.word	0x01a56e1f
 8011590:	8800759c 	.word	0x8800759c
 8011594:	7e37e43c 	.word	0x7e37e43c
 8011598:	8800759c 	.word	0x8800759c
 801159c:	fe37e43c 	.word	0xfe37e43c
 80115a0:	c2f8f359 	.word	0xc2f8f359
 80115a4:	81a56e1f 	.word	0x81a56e1f
 80115a8:	43500000 	.word	0x43500000
 80115ac:	ffff3cb0 	.word	0xffff3cb0
 80115b0:	3c900000 	.word	0x3c900000

080115b4 <with_errno>:
 80115b4:	b570      	push	{r4, r5, r6, lr}
 80115b6:	4604      	mov	r4, r0
 80115b8:	460d      	mov	r5, r1
 80115ba:	4616      	mov	r6, r2
 80115bc:	f7fc f96a 	bl	800d894 <__errno>
 80115c0:	4629      	mov	r1, r5
 80115c2:	6006      	str	r6, [r0, #0]
 80115c4:	4620      	mov	r0, r4
 80115c6:	bd70      	pop	{r4, r5, r6, pc}

080115c8 <xflow>:
 80115c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115ca:	4614      	mov	r4, r2
 80115cc:	461d      	mov	r5, r3
 80115ce:	b108      	cbz	r0, 80115d4 <xflow+0xc>
 80115d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80115d4:	e9cd 2300 	strd	r2, r3, [sp]
 80115d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115dc:	4620      	mov	r0, r4
 80115de:	4629      	mov	r1, r5
 80115e0:	f7ef f80a 	bl	80005f8 <__aeabi_dmul>
 80115e4:	2222      	movs	r2, #34	; 0x22
 80115e6:	b003      	add	sp, #12
 80115e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80115ec:	f7ff bfe2 	b.w	80115b4 <with_errno>

080115f0 <__math_uflow>:
 80115f0:	b508      	push	{r3, lr}
 80115f2:	2200      	movs	r2, #0
 80115f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80115f8:	f7ff ffe6 	bl	80115c8 <xflow>
 80115fc:	ec41 0b10 	vmov	d0, r0, r1
 8011600:	bd08      	pop	{r3, pc}

08011602 <__math_oflow>:
 8011602:	b508      	push	{r3, lr}
 8011604:	2200      	movs	r2, #0
 8011606:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801160a:	f7ff ffdd 	bl	80115c8 <xflow>
 801160e:	ec41 0b10 	vmov	d0, r0, r1
 8011612:	bd08      	pop	{r3, pc}
 8011614:	0000      	movs	r0, r0
	...

08011618 <__kernel_rem_pio2>:
 8011618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161c:	ed2d 8b02 	vpush	{d8}
 8011620:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011624:	f112 0f14 	cmn.w	r2, #20
 8011628:	9306      	str	r3, [sp, #24]
 801162a:	9104      	str	r1, [sp, #16]
 801162c:	4bc2      	ldr	r3, [pc, #776]	; (8011938 <__kernel_rem_pio2+0x320>)
 801162e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011630:	9009      	str	r0, [sp, #36]	; 0x24
 8011632:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011636:	9300      	str	r3, [sp, #0]
 8011638:	9b06      	ldr	r3, [sp, #24]
 801163a:	f103 33ff 	add.w	r3, r3, #4294967295
 801163e:	bfa8      	it	ge
 8011640:	1ed4      	subge	r4, r2, #3
 8011642:	9305      	str	r3, [sp, #20]
 8011644:	bfb2      	itee	lt
 8011646:	2400      	movlt	r4, #0
 8011648:	2318      	movge	r3, #24
 801164a:	fb94 f4f3 	sdivge	r4, r4, r3
 801164e:	f06f 0317 	mvn.w	r3, #23
 8011652:	fb04 3303 	mla	r3, r4, r3, r3
 8011656:	eb03 0a02 	add.w	sl, r3, r2
 801165a:	9b00      	ldr	r3, [sp, #0]
 801165c:	9a05      	ldr	r2, [sp, #20]
 801165e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8011928 <__kernel_rem_pio2+0x310>
 8011662:	eb03 0802 	add.w	r8, r3, r2
 8011666:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011668:	1aa7      	subs	r7, r4, r2
 801166a:	ae20      	add	r6, sp, #128	; 0x80
 801166c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011670:	2500      	movs	r5, #0
 8011672:	4545      	cmp	r5, r8
 8011674:	dd13      	ble.n	801169e <__kernel_rem_pio2+0x86>
 8011676:	9b06      	ldr	r3, [sp, #24]
 8011678:	aa20      	add	r2, sp, #128	; 0x80
 801167a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801167e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011682:	f04f 0800 	mov.w	r8, #0
 8011686:	9b00      	ldr	r3, [sp, #0]
 8011688:	4598      	cmp	r8, r3
 801168a:	dc31      	bgt.n	80116f0 <__kernel_rem_pio2+0xd8>
 801168c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8011928 <__kernel_rem_pio2+0x310>
 8011690:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011694:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011698:	462f      	mov	r7, r5
 801169a:	2600      	movs	r6, #0
 801169c:	e01b      	b.n	80116d6 <__kernel_rem_pio2+0xbe>
 801169e:	42ef      	cmn	r7, r5
 80116a0:	d407      	bmi.n	80116b2 <__kernel_rem_pio2+0x9a>
 80116a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80116a6:	f7ee ff3d 	bl	8000524 <__aeabi_i2d>
 80116aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80116ae:	3501      	adds	r5, #1
 80116b0:	e7df      	b.n	8011672 <__kernel_rem_pio2+0x5a>
 80116b2:	ec51 0b18 	vmov	r0, r1, d8
 80116b6:	e7f8      	b.n	80116aa <__kernel_rem_pio2+0x92>
 80116b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80116c0:	f7ee ff9a 	bl	80005f8 <__aeabi_dmul>
 80116c4:	4602      	mov	r2, r0
 80116c6:	460b      	mov	r3, r1
 80116c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116cc:	f7ee fdde 	bl	800028c <__adddf3>
 80116d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116d4:	3601      	adds	r6, #1
 80116d6:	9b05      	ldr	r3, [sp, #20]
 80116d8:	429e      	cmp	r6, r3
 80116da:	f1a7 0708 	sub.w	r7, r7, #8
 80116de:	ddeb      	ble.n	80116b8 <__kernel_rem_pio2+0xa0>
 80116e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80116e4:	f108 0801 	add.w	r8, r8, #1
 80116e8:	ecab 7b02 	vstmia	fp!, {d7}
 80116ec:	3508      	adds	r5, #8
 80116ee:	e7ca      	b.n	8011686 <__kernel_rem_pio2+0x6e>
 80116f0:	9b00      	ldr	r3, [sp, #0]
 80116f2:	aa0c      	add	r2, sp, #48	; 0x30
 80116f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80116f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80116fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80116fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011700:	9c00      	ldr	r4, [sp, #0]
 8011702:	930a      	str	r3, [sp, #40]	; 0x28
 8011704:	00e3      	lsls	r3, r4, #3
 8011706:	9308      	str	r3, [sp, #32]
 8011708:	ab98      	add	r3, sp, #608	; 0x260
 801170a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801170e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011712:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8011716:	ab70      	add	r3, sp, #448	; 0x1c0
 8011718:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801171c:	46c3      	mov	fp, r8
 801171e:	46a1      	mov	r9, r4
 8011720:	f1b9 0f00 	cmp.w	r9, #0
 8011724:	f1a5 0508 	sub.w	r5, r5, #8
 8011728:	dc77      	bgt.n	801181a <__kernel_rem_pio2+0x202>
 801172a:	ec47 6b10 	vmov	d0, r6, r7
 801172e:	4650      	mov	r0, sl
 8011730:	f7ff fec2 	bl	80114b8 <scalbn>
 8011734:	ec57 6b10 	vmov	r6, r7, d0
 8011738:	2200      	movs	r2, #0
 801173a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801173e:	ee10 0a10 	vmov	r0, s0
 8011742:	4639      	mov	r1, r7
 8011744:	f7ee ff58 	bl	80005f8 <__aeabi_dmul>
 8011748:	ec41 0b10 	vmov	d0, r0, r1
 801174c:	f000 fab4 	bl	8011cb8 <floor>
 8011750:	4b7a      	ldr	r3, [pc, #488]	; (801193c <__kernel_rem_pio2+0x324>)
 8011752:	ec51 0b10 	vmov	r0, r1, d0
 8011756:	2200      	movs	r2, #0
 8011758:	f7ee ff4e 	bl	80005f8 <__aeabi_dmul>
 801175c:	4602      	mov	r2, r0
 801175e:	460b      	mov	r3, r1
 8011760:	4630      	mov	r0, r6
 8011762:	4639      	mov	r1, r7
 8011764:	f7ee fd90 	bl	8000288 <__aeabi_dsub>
 8011768:	460f      	mov	r7, r1
 801176a:	4606      	mov	r6, r0
 801176c:	f7ef f9f4 	bl	8000b58 <__aeabi_d2iz>
 8011770:	9002      	str	r0, [sp, #8]
 8011772:	f7ee fed7 	bl	8000524 <__aeabi_i2d>
 8011776:	4602      	mov	r2, r0
 8011778:	460b      	mov	r3, r1
 801177a:	4630      	mov	r0, r6
 801177c:	4639      	mov	r1, r7
 801177e:	f7ee fd83 	bl	8000288 <__aeabi_dsub>
 8011782:	f1ba 0f00 	cmp.w	sl, #0
 8011786:	4606      	mov	r6, r0
 8011788:	460f      	mov	r7, r1
 801178a:	dd6d      	ble.n	8011868 <__kernel_rem_pio2+0x250>
 801178c:	1e61      	subs	r1, r4, #1
 801178e:	ab0c      	add	r3, sp, #48	; 0x30
 8011790:	9d02      	ldr	r5, [sp, #8]
 8011792:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011796:	f1ca 0018 	rsb	r0, sl, #24
 801179a:	fa43 f200 	asr.w	r2, r3, r0
 801179e:	4415      	add	r5, r2
 80117a0:	4082      	lsls	r2, r0
 80117a2:	1a9b      	subs	r3, r3, r2
 80117a4:	aa0c      	add	r2, sp, #48	; 0x30
 80117a6:	9502      	str	r5, [sp, #8]
 80117a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80117ac:	f1ca 0217 	rsb	r2, sl, #23
 80117b0:	fa43 fb02 	asr.w	fp, r3, r2
 80117b4:	f1bb 0f00 	cmp.w	fp, #0
 80117b8:	dd65      	ble.n	8011886 <__kernel_rem_pio2+0x26e>
 80117ba:	9b02      	ldr	r3, [sp, #8]
 80117bc:	2200      	movs	r2, #0
 80117be:	3301      	adds	r3, #1
 80117c0:	9302      	str	r3, [sp, #8]
 80117c2:	4615      	mov	r5, r2
 80117c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80117c8:	4294      	cmp	r4, r2
 80117ca:	f300 809f 	bgt.w	801190c <__kernel_rem_pio2+0x2f4>
 80117ce:	f1ba 0f00 	cmp.w	sl, #0
 80117d2:	dd07      	ble.n	80117e4 <__kernel_rem_pio2+0x1cc>
 80117d4:	f1ba 0f01 	cmp.w	sl, #1
 80117d8:	f000 80c1 	beq.w	801195e <__kernel_rem_pio2+0x346>
 80117dc:	f1ba 0f02 	cmp.w	sl, #2
 80117e0:	f000 80c7 	beq.w	8011972 <__kernel_rem_pio2+0x35a>
 80117e4:	f1bb 0f02 	cmp.w	fp, #2
 80117e8:	d14d      	bne.n	8011886 <__kernel_rem_pio2+0x26e>
 80117ea:	4632      	mov	r2, r6
 80117ec:	463b      	mov	r3, r7
 80117ee:	4954      	ldr	r1, [pc, #336]	; (8011940 <__kernel_rem_pio2+0x328>)
 80117f0:	2000      	movs	r0, #0
 80117f2:	f7ee fd49 	bl	8000288 <__aeabi_dsub>
 80117f6:	4606      	mov	r6, r0
 80117f8:	460f      	mov	r7, r1
 80117fa:	2d00      	cmp	r5, #0
 80117fc:	d043      	beq.n	8011886 <__kernel_rem_pio2+0x26e>
 80117fe:	4650      	mov	r0, sl
 8011800:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011930 <__kernel_rem_pio2+0x318>
 8011804:	f7ff fe58 	bl	80114b8 <scalbn>
 8011808:	4630      	mov	r0, r6
 801180a:	4639      	mov	r1, r7
 801180c:	ec53 2b10 	vmov	r2, r3, d0
 8011810:	f7ee fd3a 	bl	8000288 <__aeabi_dsub>
 8011814:	4606      	mov	r6, r0
 8011816:	460f      	mov	r7, r1
 8011818:	e035      	b.n	8011886 <__kernel_rem_pio2+0x26e>
 801181a:	4b4a      	ldr	r3, [pc, #296]	; (8011944 <__kernel_rem_pio2+0x32c>)
 801181c:	2200      	movs	r2, #0
 801181e:	4630      	mov	r0, r6
 8011820:	4639      	mov	r1, r7
 8011822:	f7ee fee9 	bl	80005f8 <__aeabi_dmul>
 8011826:	f7ef f997 	bl	8000b58 <__aeabi_d2iz>
 801182a:	f7ee fe7b 	bl	8000524 <__aeabi_i2d>
 801182e:	4602      	mov	r2, r0
 8011830:	460b      	mov	r3, r1
 8011832:	ec43 2b18 	vmov	d8, r2, r3
 8011836:	4b44      	ldr	r3, [pc, #272]	; (8011948 <__kernel_rem_pio2+0x330>)
 8011838:	2200      	movs	r2, #0
 801183a:	f7ee fedd 	bl	80005f8 <__aeabi_dmul>
 801183e:	4602      	mov	r2, r0
 8011840:	460b      	mov	r3, r1
 8011842:	4630      	mov	r0, r6
 8011844:	4639      	mov	r1, r7
 8011846:	f7ee fd1f 	bl	8000288 <__aeabi_dsub>
 801184a:	f7ef f985 	bl	8000b58 <__aeabi_d2iz>
 801184e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011852:	f84b 0b04 	str.w	r0, [fp], #4
 8011856:	ec51 0b18 	vmov	r0, r1, d8
 801185a:	f7ee fd17 	bl	800028c <__adddf3>
 801185e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011862:	4606      	mov	r6, r0
 8011864:	460f      	mov	r7, r1
 8011866:	e75b      	b.n	8011720 <__kernel_rem_pio2+0x108>
 8011868:	d106      	bne.n	8011878 <__kernel_rem_pio2+0x260>
 801186a:	1e63      	subs	r3, r4, #1
 801186c:	aa0c      	add	r2, sp, #48	; 0x30
 801186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011872:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8011876:	e79d      	b.n	80117b4 <__kernel_rem_pio2+0x19c>
 8011878:	4b34      	ldr	r3, [pc, #208]	; (801194c <__kernel_rem_pio2+0x334>)
 801187a:	2200      	movs	r2, #0
 801187c:	f7ef f942 	bl	8000b04 <__aeabi_dcmpge>
 8011880:	2800      	cmp	r0, #0
 8011882:	d140      	bne.n	8011906 <__kernel_rem_pio2+0x2ee>
 8011884:	4683      	mov	fp, r0
 8011886:	2200      	movs	r2, #0
 8011888:	2300      	movs	r3, #0
 801188a:	4630      	mov	r0, r6
 801188c:	4639      	mov	r1, r7
 801188e:	f7ef f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011892:	2800      	cmp	r0, #0
 8011894:	f000 80c1 	beq.w	8011a1a <__kernel_rem_pio2+0x402>
 8011898:	1e65      	subs	r5, r4, #1
 801189a:	462b      	mov	r3, r5
 801189c:	2200      	movs	r2, #0
 801189e:	9900      	ldr	r1, [sp, #0]
 80118a0:	428b      	cmp	r3, r1
 80118a2:	da6d      	bge.n	8011980 <__kernel_rem_pio2+0x368>
 80118a4:	2a00      	cmp	r2, #0
 80118a6:	f000 808a 	beq.w	80119be <__kernel_rem_pio2+0x3a6>
 80118aa:	ab0c      	add	r3, sp, #48	; 0x30
 80118ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80118b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f000 80ae 	beq.w	8011a16 <__kernel_rem_pio2+0x3fe>
 80118ba:	4650      	mov	r0, sl
 80118bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011930 <__kernel_rem_pio2+0x318>
 80118c0:	f7ff fdfa 	bl	80114b8 <scalbn>
 80118c4:	1c6b      	adds	r3, r5, #1
 80118c6:	00da      	lsls	r2, r3, #3
 80118c8:	9205      	str	r2, [sp, #20]
 80118ca:	ec57 6b10 	vmov	r6, r7, d0
 80118ce:	aa70      	add	r2, sp, #448	; 0x1c0
 80118d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8011944 <__kernel_rem_pio2+0x32c>
 80118d4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80118d8:	462c      	mov	r4, r5
 80118da:	f04f 0800 	mov.w	r8, #0
 80118de:	2c00      	cmp	r4, #0
 80118e0:	f280 80d4 	bge.w	8011a8c <__kernel_rem_pio2+0x474>
 80118e4:	462c      	mov	r4, r5
 80118e6:	2c00      	cmp	r4, #0
 80118e8:	f2c0 8102 	blt.w	8011af0 <__kernel_rem_pio2+0x4d8>
 80118ec:	4b18      	ldr	r3, [pc, #96]	; (8011950 <__kernel_rem_pio2+0x338>)
 80118ee:	461e      	mov	r6, r3
 80118f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80118f2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80118f6:	1b2b      	subs	r3, r5, r4
 80118f8:	f04f 0900 	mov.w	r9, #0
 80118fc:	f04f 0a00 	mov.w	sl, #0
 8011900:	2700      	movs	r7, #0
 8011902:	9306      	str	r3, [sp, #24]
 8011904:	e0e6      	b.n	8011ad4 <__kernel_rem_pio2+0x4bc>
 8011906:	f04f 0b02 	mov.w	fp, #2
 801190a:	e756      	b.n	80117ba <__kernel_rem_pio2+0x1a2>
 801190c:	f8d8 3000 	ldr.w	r3, [r8]
 8011910:	bb05      	cbnz	r5, 8011954 <__kernel_rem_pio2+0x33c>
 8011912:	b123      	cbz	r3, 801191e <__kernel_rem_pio2+0x306>
 8011914:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011918:	f8c8 3000 	str.w	r3, [r8]
 801191c:	2301      	movs	r3, #1
 801191e:	3201      	adds	r2, #1
 8011920:	f108 0804 	add.w	r8, r8, #4
 8011924:	461d      	mov	r5, r3
 8011926:	e74f      	b.n	80117c8 <__kernel_rem_pio2+0x1b0>
	...
 8011934:	3ff00000 	.word	0x3ff00000
 8011938:	080124d8 	.word	0x080124d8
 801193c:	40200000 	.word	0x40200000
 8011940:	3ff00000 	.word	0x3ff00000
 8011944:	3e700000 	.word	0x3e700000
 8011948:	41700000 	.word	0x41700000
 801194c:	3fe00000 	.word	0x3fe00000
 8011950:	08012498 	.word	0x08012498
 8011954:	1acb      	subs	r3, r1, r3
 8011956:	f8c8 3000 	str.w	r3, [r8]
 801195a:	462b      	mov	r3, r5
 801195c:	e7df      	b.n	801191e <__kernel_rem_pio2+0x306>
 801195e:	1e62      	subs	r2, r4, #1
 8011960:	ab0c      	add	r3, sp, #48	; 0x30
 8011962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011966:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801196a:	a90c      	add	r1, sp, #48	; 0x30
 801196c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011970:	e738      	b.n	80117e4 <__kernel_rem_pio2+0x1cc>
 8011972:	1e62      	subs	r2, r4, #1
 8011974:	ab0c      	add	r3, sp, #48	; 0x30
 8011976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801197a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801197e:	e7f4      	b.n	801196a <__kernel_rem_pio2+0x352>
 8011980:	a90c      	add	r1, sp, #48	; 0x30
 8011982:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011986:	3b01      	subs	r3, #1
 8011988:	430a      	orrs	r2, r1
 801198a:	e788      	b.n	801189e <__kernel_rem_pio2+0x286>
 801198c:	3301      	adds	r3, #1
 801198e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011992:	2900      	cmp	r1, #0
 8011994:	d0fa      	beq.n	801198c <__kernel_rem_pio2+0x374>
 8011996:	9a08      	ldr	r2, [sp, #32]
 8011998:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801199c:	446a      	add	r2, sp
 801199e:	3a98      	subs	r2, #152	; 0x98
 80119a0:	9208      	str	r2, [sp, #32]
 80119a2:	9a06      	ldr	r2, [sp, #24]
 80119a4:	a920      	add	r1, sp, #128	; 0x80
 80119a6:	18a2      	adds	r2, r4, r2
 80119a8:	18e3      	adds	r3, r4, r3
 80119aa:	f104 0801 	add.w	r8, r4, #1
 80119ae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80119b2:	9302      	str	r3, [sp, #8]
 80119b4:	9b02      	ldr	r3, [sp, #8]
 80119b6:	4543      	cmp	r3, r8
 80119b8:	da04      	bge.n	80119c4 <__kernel_rem_pio2+0x3ac>
 80119ba:	461c      	mov	r4, r3
 80119bc:	e6a2      	b.n	8011704 <__kernel_rem_pio2+0xec>
 80119be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80119c0:	2301      	movs	r3, #1
 80119c2:	e7e4      	b.n	801198e <__kernel_rem_pio2+0x376>
 80119c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80119ca:	f7ee fdab 	bl	8000524 <__aeabi_i2d>
 80119ce:	e8e5 0102 	strd	r0, r1, [r5], #8
 80119d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119d4:	46ab      	mov	fp, r5
 80119d6:	461c      	mov	r4, r3
 80119d8:	f04f 0900 	mov.w	r9, #0
 80119dc:	2600      	movs	r6, #0
 80119de:	2700      	movs	r7, #0
 80119e0:	9b05      	ldr	r3, [sp, #20]
 80119e2:	4599      	cmp	r9, r3
 80119e4:	dd06      	ble.n	80119f4 <__kernel_rem_pio2+0x3dc>
 80119e6:	9b08      	ldr	r3, [sp, #32]
 80119e8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80119ec:	f108 0801 	add.w	r8, r8, #1
 80119f0:	9308      	str	r3, [sp, #32]
 80119f2:	e7df      	b.n	80119b4 <__kernel_rem_pio2+0x39c>
 80119f4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80119f8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80119fc:	f7ee fdfc 	bl	80005f8 <__aeabi_dmul>
 8011a00:	4602      	mov	r2, r0
 8011a02:	460b      	mov	r3, r1
 8011a04:	4630      	mov	r0, r6
 8011a06:	4639      	mov	r1, r7
 8011a08:	f7ee fc40 	bl	800028c <__adddf3>
 8011a0c:	f109 0901 	add.w	r9, r9, #1
 8011a10:	4606      	mov	r6, r0
 8011a12:	460f      	mov	r7, r1
 8011a14:	e7e4      	b.n	80119e0 <__kernel_rem_pio2+0x3c8>
 8011a16:	3d01      	subs	r5, #1
 8011a18:	e747      	b.n	80118aa <__kernel_rem_pio2+0x292>
 8011a1a:	ec47 6b10 	vmov	d0, r6, r7
 8011a1e:	f1ca 0000 	rsb	r0, sl, #0
 8011a22:	f7ff fd49 	bl	80114b8 <scalbn>
 8011a26:	ec57 6b10 	vmov	r6, r7, d0
 8011a2a:	4ba0      	ldr	r3, [pc, #640]	; (8011cac <__kernel_rem_pio2+0x694>)
 8011a2c:	ee10 0a10 	vmov	r0, s0
 8011a30:	2200      	movs	r2, #0
 8011a32:	4639      	mov	r1, r7
 8011a34:	f7ef f866 	bl	8000b04 <__aeabi_dcmpge>
 8011a38:	b1f8      	cbz	r0, 8011a7a <__kernel_rem_pio2+0x462>
 8011a3a:	4b9d      	ldr	r3, [pc, #628]	; (8011cb0 <__kernel_rem_pio2+0x698>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	4630      	mov	r0, r6
 8011a40:	4639      	mov	r1, r7
 8011a42:	f7ee fdd9 	bl	80005f8 <__aeabi_dmul>
 8011a46:	f7ef f887 	bl	8000b58 <__aeabi_d2iz>
 8011a4a:	4680      	mov	r8, r0
 8011a4c:	f7ee fd6a 	bl	8000524 <__aeabi_i2d>
 8011a50:	4b96      	ldr	r3, [pc, #600]	; (8011cac <__kernel_rem_pio2+0x694>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	f7ee fdd0 	bl	80005f8 <__aeabi_dmul>
 8011a58:	460b      	mov	r3, r1
 8011a5a:	4602      	mov	r2, r0
 8011a5c:	4639      	mov	r1, r7
 8011a5e:	4630      	mov	r0, r6
 8011a60:	f7ee fc12 	bl	8000288 <__aeabi_dsub>
 8011a64:	f7ef f878 	bl	8000b58 <__aeabi_d2iz>
 8011a68:	1c65      	adds	r5, r4, #1
 8011a6a:	ab0c      	add	r3, sp, #48	; 0x30
 8011a6c:	f10a 0a18 	add.w	sl, sl, #24
 8011a70:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011a74:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011a78:	e71f      	b.n	80118ba <__kernel_rem_pio2+0x2a2>
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	4639      	mov	r1, r7
 8011a7e:	f7ef f86b 	bl	8000b58 <__aeabi_d2iz>
 8011a82:	ab0c      	add	r3, sp, #48	; 0x30
 8011a84:	4625      	mov	r5, r4
 8011a86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011a8a:	e716      	b.n	80118ba <__kernel_rem_pio2+0x2a2>
 8011a8c:	ab0c      	add	r3, sp, #48	; 0x30
 8011a8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011a92:	f7ee fd47 	bl	8000524 <__aeabi_i2d>
 8011a96:	4632      	mov	r2, r6
 8011a98:	463b      	mov	r3, r7
 8011a9a:	f7ee fdad 	bl	80005f8 <__aeabi_dmul>
 8011a9e:	4642      	mov	r2, r8
 8011aa0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011aa4:	464b      	mov	r3, r9
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	4639      	mov	r1, r7
 8011aaa:	f7ee fda5 	bl	80005f8 <__aeabi_dmul>
 8011aae:	3c01      	subs	r4, #1
 8011ab0:	4606      	mov	r6, r0
 8011ab2:	460f      	mov	r7, r1
 8011ab4:	e713      	b.n	80118de <__kernel_rem_pio2+0x2c6>
 8011ab6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011aba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011abe:	f7ee fd9b 	bl	80005f8 <__aeabi_dmul>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	4648      	mov	r0, r9
 8011ac8:	4651      	mov	r1, sl
 8011aca:	f7ee fbdf 	bl	800028c <__adddf3>
 8011ace:	3701      	adds	r7, #1
 8011ad0:	4681      	mov	r9, r0
 8011ad2:	468a      	mov	sl, r1
 8011ad4:	9b00      	ldr	r3, [sp, #0]
 8011ad6:	429f      	cmp	r7, r3
 8011ad8:	dc02      	bgt.n	8011ae0 <__kernel_rem_pio2+0x4c8>
 8011ada:	9b06      	ldr	r3, [sp, #24]
 8011adc:	429f      	cmp	r7, r3
 8011ade:	ddea      	ble.n	8011ab6 <__kernel_rem_pio2+0x49e>
 8011ae0:	9a06      	ldr	r2, [sp, #24]
 8011ae2:	ab48      	add	r3, sp, #288	; 0x120
 8011ae4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8011ae8:	e9c6 9a00 	strd	r9, sl, [r6]
 8011aec:	3c01      	subs	r4, #1
 8011aee:	e6fa      	b.n	80118e6 <__kernel_rem_pio2+0x2ce>
 8011af0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011af2:	2b02      	cmp	r3, #2
 8011af4:	dc0b      	bgt.n	8011b0e <__kernel_rem_pio2+0x4f6>
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	dc39      	bgt.n	8011b6e <__kernel_rem_pio2+0x556>
 8011afa:	d05d      	beq.n	8011bb8 <__kernel_rem_pio2+0x5a0>
 8011afc:	9b02      	ldr	r3, [sp, #8]
 8011afe:	f003 0007 	and.w	r0, r3, #7
 8011b02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011b06:	ecbd 8b02 	vpop	{d8}
 8011b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b0e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011b10:	2b03      	cmp	r3, #3
 8011b12:	d1f3      	bne.n	8011afc <__kernel_rem_pio2+0x4e4>
 8011b14:	9b05      	ldr	r3, [sp, #20]
 8011b16:	9500      	str	r5, [sp, #0]
 8011b18:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011b1c:	eb0d 0403 	add.w	r4, sp, r3
 8011b20:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8011b24:	46a2      	mov	sl, r4
 8011b26:	9b00      	ldr	r3, [sp, #0]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	f1aa 0a08 	sub.w	sl, sl, #8
 8011b2e:	dc69      	bgt.n	8011c04 <__kernel_rem_pio2+0x5ec>
 8011b30:	46aa      	mov	sl, r5
 8011b32:	f1ba 0f01 	cmp.w	sl, #1
 8011b36:	f1a4 0408 	sub.w	r4, r4, #8
 8011b3a:	f300 8083 	bgt.w	8011c44 <__kernel_rem_pio2+0x62c>
 8011b3e:	9c05      	ldr	r4, [sp, #20]
 8011b40:	ab48      	add	r3, sp, #288	; 0x120
 8011b42:	441c      	add	r4, r3
 8011b44:	2000      	movs	r0, #0
 8011b46:	2100      	movs	r1, #0
 8011b48:	2d01      	cmp	r5, #1
 8011b4a:	f300 809a 	bgt.w	8011c82 <__kernel_rem_pio2+0x66a>
 8011b4e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8011b52:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011b56:	f1bb 0f00 	cmp.w	fp, #0
 8011b5a:	f040 8098 	bne.w	8011c8e <__kernel_rem_pio2+0x676>
 8011b5e:	9b04      	ldr	r3, [sp, #16]
 8011b60:	e9c3 7800 	strd	r7, r8, [r3]
 8011b64:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011b68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011b6c:	e7c6      	b.n	8011afc <__kernel_rem_pio2+0x4e4>
 8011b6e:	9e05      	ldr	r6, [sp, #20]
 8011b70:	ab48      	add	r3, sp, #288	; 0x120
 8011b72:	441e      	add	r6, r3
 8011b74:	462c      	mov	r4, r5
 8011b76:	2000      	movs	r0, #0
 8011b78:	2100      	movs	r1, #0
 8011b7a:	2c00      	cmp	r4, #0
 8011b7c:	da33      	bge.n	8011be6 <__kernel_rem_pio2+0x5ce>
 8011b7e:	f1bb 0f00 	cmp.w	fp, #0
 8011b82:	d036      	beq.n	8011bf2 <__kernel_rem_pio2+0x5da>
 8011b84:	4602      	mov	r2, r0
 8011b86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b8a:	9c04      	ldr	r4, [sp, #16]
 8011b8c:	e9c4 2300 	strd	r2, r3, [r4]
 8011b90:	4602      	mov	r2, r0
 8011b92:	460b      	mov	r3, r1
 8011b94:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011b98:	f7ee fb76 	bl	8000288 <__aeabi_dsub>
 8011b9c:	ae4a      	add	r6, sp, #296	; 0x128
 8011b9e:	2401      	movs	r4, #1
 8011ba0:	42a5      	cmp	r5, r4
 8011ba2:	da29      	bge.n	8011bf8 <__kernel_rem_pio2+0x5e0>
 8011ba4:	f1bb 0f00 	cmp.w	fp, #0
 8011ba8:	d002      	beq.n	8011bb0 <__kernel_rem_pio2+0x598>
 8011baa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bae:	4619      	mov	r1, r3
 8011bb0:	9b04      	ldr	r3, [sp, #16]
 8011bb2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011bb6:	e7a1      	b.n	8011afc <__kernel_rem_pio2+0x4e4>
 8011bb8:	9c05      	ldr	r4, [sp, #20]
 8011bba:	ab48      	add	r3, sp, #288	; 0x120
 8011bbc:	441c      	add	r4, r3
 8011bbe:	2000      	movs	r0, #0
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	2d00      	cmp	r5, #0
 8011bc4:	da09      	bge.n	8011bda <__kernel_rem_pio2+0x5c2>
 8011bc6:	f1bb 0f00 	cmp.w	fp, #0
 8011bca:	d002      	beq.n	8011bd2 <__kernel_rem_pio2+0x5ba>
 8011bcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	9b04      	ldr	r3, [sp, #16]
 8011bd4:	e9c3 0100 	strd	r0, r1, [r3]
 8011bd8:	e790      	b.n	8011afc <__kernel_rem_pio2+0x4e4>
 8011bda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011bde:	f7ee fb55 	bl	800028c <__adddf3>
 8011be2:	3d01      	subs	r5, #1
 8011be4:	e7ed      	b.n	8011bc2 <__kernel_rem_pio2+0x5aa>
 8011be6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011bea:	f7ee fb4f 	bl	800028c <__adddf3>
 8011bee:	3c01      	subs	r4, #1
 8011bf0:	e7c3      	b.n	8011b7a <__kernel_rem_pio2+0x562>
 8011bf2:	4602      	mov	r2, r0
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	e7c8      	b.n	8011b8a <__kernel_rem_pio2+0x572>
 8011bf8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011bfc:	f7ee fb46 	bl	800028c <__adddf3>
 8011c00:	3401      	adds	r4, #1
 8011c02:	e7cd      	b.n	8011ba0 <__kernel_rem_pio2+0x588>
 8011c04:	e9da 8900 	ldrd	r8, r9, [sl]
 8011c08:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011c0c:	9b00      	ldr	r3, [sp, #0]
 8011c0e:	3b01      	subs	r3, #1
 8011c10:	9300      	str	r3, [sp, #0]
 8011c12:	4632      	mov	r2, r6
 8011c14:	463b      	mov	r3, r7
 8011c16:	4640      	mov	r0, r8
 8011c18:	4649      	mov	r1, r9
 8011c1a:	f7ee fb37 	bl	800028c <__adddf3>
 8011c1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011c22:	4602      	mov	r2, r0
 8011c24:	460b      	mov	r3, r1
 8011c26:	4640      	mov	r0, r8
 8011c28:	4649      	mov	r1, r9
 8011c2a:	f7ee fb2d 	bl	8000288 <__aeabi_dsub>
 8011c2e:	4632      	mov	r2, r6
 8011c30:	463b      	mov	r3, r7
 8011c32:	f7ee fb2b 	bl	800028c <__adddf3>
 8011c36:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011c3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011c3e:	ed8a 7b00 	vstr	d7, [sl]
 8011c42:	e770      	b.n	8011b26 <__kernel_rem_pio2+0x50e>
 8011c44:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011c48:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011c4c:	4640      	mov	r0, r8
 8011c4e:	4632      	mov	r2, r6
 8011c50:	463b      	mov	r3, r7
 8011c52:	4649      	mov	r1, r9
 8011c54:	f7ee fb1a 	bl	800028c <__adddf3>
 8011c58:	e9cd 0100 	strd	r0, r1, [sp]
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	460b      	mov	r3, r1
 8011c60:	4640      	mov	r0, r8
 8011c62:	4649      	mov	r1, r9
 8011c64:	f7ee fb10 	bl	8000288 <__aeabi_dsub>
 8011c68:	4632      	mov	r2, r6
 8011c6a:	463b      	mov	r3, r7
 8011c6c:	f7ee fb0e 	bl	800028c <__adddf3>
 8011c70:	ed9d 7b00 	vldr	d7, [sp]
 8011c74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011c78:	ed84 7b00 	vstr	d7, [r4]
 8011c7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c80:	e757      	b.n	8011b32 <__kernel_rem_pio2+0x51a>
 8011c82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011c86:	f7ee fb01 	bl	800028c <__adddf3>
 8011c8a:	3d01      	subs	r5, #1
 8011c8c:	e75c      	b.n	8011b48 <__kernel_rem_pio2+0x530>
 8011c8e:	9b04      	ldr	r3, [sp, #16]
 8011c90:	9a04      	ldr	r2, [sp, #16]
 8011c92:	601f      	str	r7, [r3, #0]
 8011c94:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011c98:	605c      	str	r4, [r3, #4]
 8011c9a:	609d      	str	r5, [r3, #8]
 8011c9c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011ca0:	60d3      	str	r3, [r2, #12]
 8011ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ca6:	6110      	str	r0, [r2, #16]
 8011ca8:	6153      	str	r3, [r2, #20]
 8011caa:	e727      	b.n	8011afc <__kernel_rem_pio2+0x4e4>
 8011cac:	41700000 	.word	0x41700000
 8011cb0:	3e700000 	.word	0x3e700000
 8011cb4:	00000000 	.word	0x00000000

08011cb8 <floor>:
 8011cb8:	ec51 0b10 	vmov	r0, r1, d0
 8011cbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011cc8:	2e13      	cmp	r6, #19
 8011cca:	ee10 5a10 	vmov	r5, s0
 8011cce:	ee10 8a10 	vmov	r8, s0
 8011cd2:	460c      	mov	r4, r1
 8011cd4:	dc31      	bgt.n	8011d3a <floor+0x82>
 8011cd6:	2e00      	cmp	r6, #0
 8011cd8:	da14      	bge.n	8011d04 <floor+0x4c>
 8011cda:	a333      	add	r3, pc, #204	; (adr r3, 8011da8 <floor+0xf0>)
 8011cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce0:	f7ee fad4 	bl	800028c <__adddf3>
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	f7ee ff16 	bl	8000b18 <__aeabi_dcmpgt>
 8011cec:	b138      	cbz	r0, 8011cfe <floor+0x46>
 8011cee:	2c00      	cmp	r4, #0
 8011cf0:	da53      	bge.n	8011d9a <floor+0xe2>
 8011cf2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011cf6:	4325      	orrs	r5, r4
 8011cf8:	d052      	beq.n	8011da0 <floor+0xe8>
 8011cfa:	4c2d      	ldr	r4, [pc, #180]	; (8011db0 <floor+0xf8>)
 8011cfc:	2500      	movs	r5, #0
 8011cfe:	4621      	mov	r1, r4
 8011d00:	4628      	mov	r0, r5
 8011d02:	e024      	b.n	8011d4e <floor+0x96>
 8011d04:	4f2b      	ldr	r7, [pc, #172]	; (8011db4 <floor+0xfc>)
 8011d06:	4137      	asrs	r7, r6
 8011d08:	ea01 0307 	and.w	r3, r1, r7
 8011d0c:	4303      	orrs	r3, r0
 8011d0e:	d01e      	beq.n	8011d4e <floor+0x96>
 8011d10:	a325      	add	r3, pc, #148	; (adr r3, 8011da8 <floor+0xf0>)
 8011d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d16:	f7ee fab9 	bl	800028c <__adddf3>
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	f7ee fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8011d22:	2800      	cmp	r0, #0
 8011d24:	d0eb      	beq.n	8011cfe <floor+0x46>
 8011d26:	2c00      	cmp	r4, #0
 8011d28:	bfbe      	ittt	lt
 8011d2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011d2e:	4133      	asrlt	r3, r6
 8011d30:	18e4      	addlt	r4, r4, r3
 8011d32:	ea24 0407 	bic.w	r4, r4, r7
 8011d36:	2500      	movs	r5, #0
 8011d38:	e7e1      	b.n	8011cfe <floor+0x46>
 8011d3a:	2e33      	cmp	r6, #51	; 0x33
 8011d3c:	dd0b      	ble.n	8011d56 <floor+0x9e>
 8011d3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011d42:	d104      	bne.n	8011d4e <floor+0x96>
 8011d44:	ee10 2a10 	vmov	r2, s0
 8011d48:	460b      	mov	r3, r1
 8011d4a:	f7ee fa9f 	bl	800028c <__adddf3>
 8011d4e:	ec41 0b10 	vmov	d0, r0, r1
 8011d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d56:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011d5a:	f04f 37ff 	mov.w	r7, #4294967295
 8011d5e:	40df      	lsrs	r7, r3
 8011d60:	4238      	tst	r0, r7
 8011d62:	d0f4      	beq.n	8011d4e <floor+0x96>
 8011d64:	a310      	add	r3, pc, #64	; (adr r3, 8011da8 <floor+0xf0>)
 8011d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6a:	f7ee fa8f 	bl	800028c <__adddf3>
 8011d6e:	2200      	movs	r2, #0
 8011d70:	2300      	movs	r3, #0
 8011d72:	f7ee fed1 	bl	8000b18 <__aeabi_dcmpgt>
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d0c1      	beq.n	8011cfe <floor+0x46>
 8011d7a:	2c00      	cmp	r4, #0
 8011d7c:	da0a      	bge.n	8011d94 <floor+0xdc>
 8011d7e:	2e14      	cmp	r6, #20
 8011d80:	d101      	bne.n	8011d86 <floor+0xce>
 8011d82:	3401      	adds	r4, #1
 8011d84:	e006      	b.n	8011d94 <floor+0xdc>
 8011d86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	40b3      	lsls	r3, r6
 8011d8e:	441d      	add	r5, r3
 8011d90:	45a8      	cmp	r8, r5
 8011d92:	d8f6      	bhi.n	8011d82 <floor+0xca>
 8011d94:	ea25 0507 	bic.w	r5, r5, r7
 8011d98:	e7b1      	b.n	8011cfe <floor+0x46>
 8011d9a:	2500      	movs	r5, #0
 8011d9c:	462c      	mov	r4, r5
 8011d9e:	e7ae      	b.n	8011cfe <floor+0x46>
 8011da0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011da4:	e7ab      	b.n	8011cfe <floor+0x46>
 8011da6:	bf00      	nop
 8011da8:	8800759c 	.word	0x8800759c
 8011dac:	7e37e43c 	.word	0x7e37e43c
 8011db0:	bff00000 	.word	0xbff00000
 8011db4:	000fffff 	.word	0x000fffff

08011db8 <_init>:
 8011db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dba:	bf00      	nop
 8011dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dbe:	bc08      	pop	{r3}
 8011dc0:	469e      	mov	lr, r3
 8011dc2:	4770      	bx	lr

08011dc4 <_fini>:
 8011dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dc6:	bf00      	nop
 8011dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dca:	bc08      	pop	{r3}
 8011dcc:	469e      	mov	lr, r3
 8011dce:	4770      	bx	lr
