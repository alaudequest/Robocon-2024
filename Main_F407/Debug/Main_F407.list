
Main_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  080111a0  080111a0  000211a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118b8  080118b8  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080118b8  080118b8  000218b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118c0  080118c0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118c0  080118c0  000218c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080118c4  080118c4  000218c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080118c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f0  2**0
                  CONTENTS
 10 .bss          00004fb8  200001f0  200001f0  000301f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200051a8  200051a8  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f024  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d0f  00000000  00000000  0004f287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019f8  00000000  00000000  00053f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013eb  00000000  00000000  00055990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002827b  00000000  00000000  00056d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021a26  00000000  00000000  0007eff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e72b1  00000000  00000000  000a0a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000081a4  00000000  00000000  00187cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0018fe74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011188 	.word	0x08011188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08011188 	.word	0x08011188

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <Accel_Cal>:
#include "Accel.h"
#include "stdlib.h"
#define deltaT 0.001

void Accel_Cal(AccelParam_t *accel, float target_vel, float target_time)
{
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f54:	edc7 0a01 	vstr	s1, [r7, #4]
	if(target_vel != accel->target_vel_Pre)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f62:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	d021      	beq.n	8000fb0 <Accel_Cal+0x68>
	{
		if(target_vel < accel->target_vel_Pre)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f72:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	d503      	bpl.n	8000f88 <Accel_Cal+0x40>
		{
			accel->Flag = 1;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2201      	movs	r2, #1
 8000f84:	741a      	strb	r2, [r3, #16]
 8000f86:	e002      	b.n	8000f8e <Accel_Cal+0x46>
		}
		else
		{
			accel->Flag = 0;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	741a      	strb	r2, [r3, #16]
		}
		accel->accel = (target_vel - accel->vel_controller)/target_time;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f94:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	edc3 7a00 	vstr	s15, [r3]
		accel->target_vel_Pre = target_vel;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	60da      	str	r2, [r3, #12]
	}
		accel->vel_controller +=  accel->accel * deltaT;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fac7 	bl	8000548 <__aeabi_f2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fac0 	bl	8000548 <__aeabi_f2d>
 8000fc8:	a31d      	add	r3, pc, #116	; (adr r3, 8001040 <Accel_Cal+0xf8>)
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	f7ff fb13 	bl	80005f8 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	4629      	mov	r1, r5
 8000fda:	f7ff f957 	bl	800028c <__adddf3>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fddf 	bl	8000ba8 <__aeabi_d2f>
 8000fea:	4602      	mov	r2, r0
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	605a      	str	r2, [r3, #4]

			if(accel->Flag)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	7c1b      	ldrb	r3, [r3, #16]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00e      	beq.n	8001016 <Accel_Cal+0xce>
			{
				if(accel->vel_controller < target_vel) accel->vel_controller = target_vel;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ffe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	dc00      	bgt.n	800100e <Accel_Cal+0xc6>
			}
			else
			{
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
			}
}
 800100c:	e011      	b.n	8001032 <Accel_Cal+0xea>
				if(accel->vel_controller < target_vel) accel->vel_controller = target_vel;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	605a      	str	r2, [r3, #4]
}
 8001014:	e00d      	b.n	8001032 <Accel_Cal+0xea>
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	edd3 7a01 	vldr	s15, [r3, #4]
 800101c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	d400      	bmi.n	800102c <Accel_Cal+0xe4>
}
 800102a:	e002      	b.n	8001032 <Accel_Cal+0xea>
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	605a      	str	r2, [r3, #4]
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bdb0      	pop	{r4, r5, r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	d2f1a9fc 	.word	0xd2f1a9fc
 8001044:	3f50624d 	.word	0x3f50624d

08001048 <encoder_Init>:
#include "stdbool.h"
#include "stdlib.h"


void encoder_Init(Encoder_t *enc,TIM_HandleTypeDef *htim, uint16_t pulPerRev, float deltaT)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	ed87 0a00 	vstr	s0, [r7]
 8001058:	80fb      	strh	r3, [r7, #6]
	enc->htim = htim;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = pulPerRev;
 8001060:	88fa      	ldrh	r2, [r7, #6]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	611a      	str	r2, [r3, #16]
	enc->deltaT = deltaT;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <encoder_ResetCount>:
		return enc->Degree;
	}
	return 0;
}
void encoder_ResetCount(Encoder_t *enc)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
	enc->count_X4 = 0;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
	enc->vel_Pre = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
	enc->vel_Real = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
	enc->Distance = 0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <encoder_GetFloatingDis>:
{
	enc->Radius = R;
}

float encoder_GetFloatingDis(Encoder_t *enc)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	enc->Distance += abs((int16_t)__HAL_TIM_GET_COUNTER(enc->htim));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bfb8      	it	lt
 80010c8:	425b      	neglt	r3, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	441a      	add	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
	return enc->Distance;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <MotorDC_Init>:
 * @param pwmMode The PWM mode to be used for the motor.
 * @param channel1 The channel number for the first PWM output.
 * @param channel2 The channel number for the second PWM output.
 */
void MotorDC_Init(MotorDC *dcMotor, TIM_HandleTypeDef *htim, PWM_Mode pwmMode, uint32_t channel1, uint32_t channel2)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	4613      	mov	r3, r2
 800110a:	80fb      	strh	r3, [r7, #6]
	dcMotor->Channel1 = channel1;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	609a      	str	r2, [r3, #8]
	dcMotor->Channel2 = channel2;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]
	dcMotor->invPWM = pwmMode;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	88fa      	ldrh	r2, [r7, #6]
 800111c:	809a      	strh	r2, [r3, #4]
	dcMotor->timDC = htim;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <MotorDC_Drive>:

void MotorDC_Drive(MotorDC *dcMotor, int32_t speedInput)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	uint16_t invPWM = dcMotor->invPWM;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	81fb      	strh	r3, [r7, #14]
	uint32_t pwm = abs(speedInput);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	bfb8      	it	lt
 8001146:	425b      	neglt	r3, r3
 8001148:	60bb      	str	r3, [r7, #8]
	switch (dcMotor->invPWM) {
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	889b      	ldrh	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <MotorDC_Drive+0x2c>
 8001152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001156:	f000 8097 	beq.w	8001288 <MotorDC_Drive+0x158>
			if (speedInput < 0)
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
		break;
	}
}
 800115a:	e13d      	b.n	80013d8 <MotorDC_Drive+0x2a8>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, 0);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <MotorDC_Drive+0x40>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
 800116e:	e018      	b.n	80011a2 <MotorDC_Drive+0x72>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d105      	bne.n	8001184 <MotorDC_Drive+0x54>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	6393      	str	r3, [r2, #56]	; 0x38
 8001182:	e00e      	b.n	80011a2 <MotorDC_Drive+0x72>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b08      	cmp	r3, #8
 800118a:	d105      	bne.n	8001198 <MotorDC_Drive+0x68>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	2300      	movs	r3, #0
 8001194:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001196:	e004      	b.n	80011a2 <MotorDC_Drive+0x72>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	2300      	movs	r3, #0
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, 0);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d105      	bne.n	80011b6 <MotorDC_Drive+0x86>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2200      	movs	r2, #0
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
 80011b4:	e018      	b.n	80011e8 <MotorDC_Drive+0xb8>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d105      	bne.n	80011ca <MotorDC_Drive+0x9a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2300      	movs	r3, #0
 80011c6:	6393      	str	r3, [r2, #56]	; 0x38
 80011c8:	e00e      	b.n	80011e8 <MotorDC_Drive+0xb8>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d105      	bne.n	80011de <MotorDC_Drive+0xae>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011dc:	e004      	b.n	80011e8 <MotorDC_Drive+0xb8>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da23      	bge.n	8001236 <MotorDC_Drive+0x106>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d105      	bne.n	8001202 <MotorDC_Drive+0xd2>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001200:	e0e7      	b.n	80013d2 <MotorDC_Drive+0x2a2>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d105      	bne.n	8001216 <MotorDC_Drive+0xe6>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	6393      	str	r3, [r2, #56]	; 0x38
 8001214:	e037      	b.n	8001286 <MotorDC_Drive+0x156>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b08      	cmp	r3, #8
 800121c:	d105      	bne.n	800122a <MotorDC_Drive+0xfa>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001228:	e02d      	b.n	8001286 <MotorDC_Drive+0x156>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001234:	e0cd      	b.n	80013d2 <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	f340 80ca 	ble.w	80013d2 <MotorDC_Drive+0x2a2>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <MotorDC_Drive+0x122>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001250:	e0bf      	b.n	80013d2 <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d105      	bne.n	8001266 <MotorDC_Drive+0x136>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001264:	e0b5      	b.n	80013d2 <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d105      	bne.n	800127a <MotorDC_Drive+0x14a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001278:	e0ab      	b.n	80013d2 <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001284:	e0a5      	b.n	80013d2 <MotorDC_Drive+0x2a2>
 8001286:	e0a4      	b.n	80013d2 <MotorDC_Drive+0x2a2>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <MotorDC_Drive+0x16c>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	89fa      	ldrh	r2, [r7, #14]
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
 800129a:	e018      	b.n	80012ce <MotorDC_Drive+0x19e>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d105      	bne.n	80012b0 <MotorDC_Drive+0x180>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	6393      	str	r3, [r2, #56]	; 0x38
 80012ae:	e00e      	b.n	80012ce <MotorDC_Drive+0x19e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d105      	bne.n	80012c4 <MotorDC_Drive+0x194>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012c2:	e004      	b.n	80012ce <MotorDC_Drive+0x19e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <MotorDC_Drive+0x1b2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	89fa      	ldrh	r2, [r7, #14]
 80012de:	635a      	str	r2, [r3, #52]	; 0x34
 80012e0:	e018      	b.n	8001314 <MotorDC_Drive+0x1e4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d105      	bne.n	80012f6 <MotorDC_Drive+0x1c6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	6393      	str	r3, [r2, #56]	; 0x38
 80012f4:	e00e      	b.n	8001314 <MotorDC_Drive+0x1e4>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d105      	bne.n	800130a <MotorDC_Drive+0x1da>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	89fb      	ldrh	r3, [r7, #14]
 8001306:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001308:	e004      	b.n	8001314 <MotorDC_Drive+0x1e4>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	da2b      	bge.n	8001372 <MotorDC_Drive+0x242>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d107      	bne.n	8001332 <MotorDC_Drive+0x202>
 8001322:	89f9      	ldrh	r1, [r7, #14]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	1a8a      	subs	r2, r1, r2
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001330:	e051      	b.n	80013d6 <MotorDC_Drive+0x2a6>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b04      	cmp	r3, #4
 8001338:	d107      	bne.n	800134a <MotorDC_Drive+0x21a>
 800133a:	89f9      	ldrh	r1, [r7, #14]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1acb      	subs	r3, r1, r3
 8001346:	6393      	str	r3, [r2, #56]	; 0x38
 8001348:	e042      	b.n	80013d0 <MotorDC_Drive+0x2a0>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b08      	cmp	r3, #8
 8001350:	d107      	bne.n	8001362 <MotorDC_Drive+0x232>
 8001352:	89f9      	ldrh	r1, [r7, #14]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1acb      	subs	r3, r1, r3
 800135e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001360:	e036      	b.n	80013d0 <MotorDC_Drive+0x2a0>
 8001362:	89f9      	ldrh	r1, [r7, #14]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1acb      	subs	r3, r1, r3
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001370:	e031      	b.n	80013d6 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd2e      	ble.n	80013d6 <MotorDC_Drive+0x2a6>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d107      	bne.n	8001390 <MotorDC_Drive+0x260>
 8001380:	89f9      	ldrh	r1, [r7, #14]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	1a8a      	subs	r2, r1, r2
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800138e:	e022      	b.n	80013d6 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d107      	bne.n	80013a8 <MotorDC_Drive+0x278>
 8001398:	89f9      	ldrh	r1, [r7, #14]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1acb      	subs	r3, r1, r3
 80013a4:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80013a6:	e016      	b.n	80013d6 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d107      	bne.n	80013c0 <MotorDC_Drive+0x290>
 80013b0:	89f9      	ldrh	r1, [r7, #14]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1acb      	subs	r3, r1, r3
 80013bc:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80013be:	e00a      	b.n	80013d6 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80013c0:	89f9      	ldrh	r1, [r7, #14]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1acb      	subs	r3, r1, r3
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80013ce:	e002      	b.n	80013d6 <MotorDC_Drive+0x2a6>
 80013d0:	e001      	b.n	80013d6 <MotorDC_Drive+0x2a6>
		break;
 80013d2:	bf00      	nop
 80013d4:	e000      	b.n	80013d8 <MotorDC_Drive+0x2a8>
		break;
 80013d6:	bf00      	nop
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <startPutBall>:
extern TIM_HandleTypeDef htim5;
PutParam_t putBall;
GetParam_t getBall;

void startPutBall(uint8_t state)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]

	MotorDC_Init(&putBall.mdc, &htim3, MOTOR_PWM_INVERSE, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80013ee:	2304      	movs	r3, #4
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2300      	movs	r3, #0
 80013f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f8:	499c      	ldr	r1, [pc, #624]	; (800166c <startPutBall+0x288>)
 80013fa:	489d      	ldr	r0, [pc, #628]	; (8001670 <startPutBall+0x28c>)
 80013fc:	f7ff fe7e 	bl	80010fc <MotorDC_Init>
	MotorDC_Init(&getBall.mdc, &htim5, MOTOR_PWM_NORMAL, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001400:	2304      	movs	r3, #4
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2200      	movs	r2, #0
 8001408:	499a      	ldr	r1, [pc, #616]	; (8001674 <startPutBall+0x290>)
 800140a:	489b      	ldr	r0, [pc, #620]	; (8001678 <startPutBall+0x294>)
 800140c:	f7ff fe76 	bl	80010fc <MotorDC_Init>
	encoder_Init(&putBall.enc, &htim2, 19200, 0.001);
 8001410:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800167c <startPutBall+0x298>
 8001414:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001418:	4999      	ldr	r1, [pc, #612]	; (8001680 <startPutBall+0x29c>)
 800141a:	489a      	ldr	r0, [pc, #616]	; (8001684 <startPutBall+0x2a0>)
 800141c:	f7ff fe14 	bl	8001048 <encoder_Init>
	if(state == 0)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d133      	bne.n	800148e <startPutBall+0xaa>
	{
		putBall.count = 0;
 8001426:	4b97      	ldr	r3, [pc, #604]	; (8001684 <startPutBall+0x2a0>)
 8001428:	2200      	movs	r2, #0
 800142a:	659a      	str	r2, [r3, #88]	; 0x58
		putBall.StopPutFlag = 0;
 800142c:	4b95      	ldr	r3, [pc, #596]	; (8001684 <startPutBall+0x2a0>)
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if(putBall.accel.vel_controller > -600)
 8001434:	4b93      	ldr	r3, [pc, #588]	; (8001684 <startPutBall+0x2a0>)
 8001436:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800143a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001688 <startPutBall+0x2a4>
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	dd15      	ble.n	8001474 <startPutBall+0x90>
		{
			Accel_Cal(&putBall.accel, -600, 2.25);
 8001448:	eef0 0a02 	vmov.f32	s1, #2	; 0x40100000  2.250
 800144c:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8001688 <startPutBall+0x2a4>
 8001450:	488e      	ldr	r0, [pc, #568]	; (800168c <startPutBall+0x2a8>)
 8001452:	f7ff fd79 	bl	8000f48 <Accel_Cal>
			MotorDC_Drive(&putBall.mdc, putBall.accel.vel_controller);
 8001456:	4b8b      	ldr	r3, [pc, #556]	; (8001684 <startPutBall+0x2a0>)
 8001458:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800145c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001460:	ee17 1a90 	vmov	r1, s15
 8001464:	4882      	ldr	r0, [pc, #520]	; (8001670 <startPutBall+0x28c>)
 8001466:	f7ff fe63 	bl	8001130 <MotorDC_Drive>
			putBall.flag = 0;
 800146a:	4b86      	ldr	r3, [pc, #536]	; (8001684 <startPutBall+0x2a0>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001472:	e007      	b.n	8001484 <startPutBall+0xa0>
		}
		else
		{
			MotorDC_Drive(&putBall.mdc, 0);
 8001474:	2100      	movs	r1, #0
 8001476:	487e      	ldr	r0, [pc, #504]	; (8001670 <startPutBall+0x28c>)
 8001478:	f7ff fe5a 	bl	8001130 <MotorDC_Drive>
			putBall.flag = 1;
 800147c:	4b81      	ldr	r3, [pc, #516]	; (8001684 <startPutBall+0x2a0>)
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		MotorDC_Drive(&getBall.mdc, -1000);
 8001484:	4982      	ldr	r1, [pc, #520]	; (8001690 <startPutBall+0x2ac>)
 8001486:	487c      	ldr	r0, [pc, #496]	; (8001678 <startPutBall+0x294>)
 8001488:	f7ff fe52 	bl	8001130 <MotorDC_Drive>
		}else{
			MotorDC_Drive(&putBall.mdc, -200);
			MotorDC_Drive(&getBall.mdc, -1000);
		}
	}
}
 800148c:	e0ea      	b.n	8001664 <startPutBall+0x280>
	else if(state == 1)
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d140      	bne.n	8001516 <startPutBall+0x132>
		putBall.count = 0;
 8001494:	4b7b      	ldr	r3, [pc, #492]	; (8001684 <startPutBall+0x2a0>)
 8001496:	2200      	movs	r2, #0
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
		putBall.flag = 0;
 800149a:	4b7a      	ldr	r3, [pc, #488]	; (8001684 <startPutBall+0x2a0>)
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		putBall.accel.vel_controller = 0;
 80014a2:	4b78      	ldr	r3, [pc, #480]	; (8001684 <startPutBall+0x2a0>)
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
		getBall.accel.vel_controller = 0;
 80014aa:	4b7a      	ldr	r3, [pc, #488]	; (8001694 <startPutBall+0x2b0>)
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
		if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin))
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4878      	ldr	r0, [pc, #480]	; (8001698 <startPutBall+0x2b4>)
 80014b8:	f005 ff0c 	bl	80072d4 <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00e      	beq.n	80014e0 <startPutBall+0xfc>
			osDelay(5);
 80014c2:	2005      	movs	r0, #5
 80014c4:	f009 f949 	bl	800a75a <osDelay>
			if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin)){
 80014c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014cc:	4872      	ldr	r0, [pc, #456]	; (8001698 <startPutBall+0x2b4>)
 80014ce:	f005 ff01 	bl	80072d4 <HAL_GPIO_ReadPin>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <startPutBall+0xfc>
				putBall.StopPutFlag = 1;
 80014d8:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <startPutBall+0x2a0>)
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if (putBall.StopPutFlag)
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <startPutBall+0x2a0>)
 80014e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <startPutBall+0x11e>
			MotorDC_Drive(&putBall.mdc, 0);
 80014ea:	2100      	movs	r1, #0
 80014ec:	4860      	ldr	r0, [pc, #384]	; (8001670 <startPutBall+0x28c>)
 80014ee:	f7ff fe1f 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, 0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	4860      	ldr	r0, [pc, #384]	; (8001678 <startPutBall+0x294>)
 80014f6:	f7ff fe1b 	bl	8001130 <MotorDC_Drive>
			encoder_ResetCount(&putBall.enc);
 80014fa:	4862      	ldr	r0, [pc, #392]	; (8001684 <startPutBall+0x2a0>)
 80014fc:	f7ff fdbc 	bl	8001078 <encoder_ResetCount>
}
 8001500:	e0b0      	b.n	8001664 <startPutBall+0x280>
			MotorDC_Drive(&putBall.mdc, 400);
 8001502:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001506:	485a      	ldr	r0, [pc, #360]	; (8001670 <startPutBall+0x28c>)
 8001508:	f7ff fe12 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, -1000);
 800150c:	4960      	ldr	r1, [pc, #384]	; (8001690 <startPutBall+0x2ac>)
 800150e:	485a      	ldr	r0, [pc, #360]	; (8001678 <startPutBall+0x294>)
 8001510:	f7ff fe0e 	bl	8001130 <MotorDC_Drive>
}
 8001514:	e0a6      	b.n	8001664 <startPutBall+0x280>
	else if(state == 2)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d160      	bne.n	80015de <startPutBall+0x1fa>
		putBall.StopPutFlag = 0;
 800151c:	4b59      	ldr	r3, [pc, #356]	; (8001684 <startPutBall+0x2a0>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		putBall.count += 1;
 8001524:	4b57      	ldr	r3, [pc, #348]	; (8001684 <startPutBall+0x2a0>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	3301      	adds	r3, #1
 800152a:	4a56      	ldr	r2, [pc, #344]	; (8001684 <startPutBall+0x2a0>)
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
		if(putBall.count >= 1000)
 800152e:	4b55      	ldr	r3, [pc, #340]	; (8001684 <startPutBall+0x2a0>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001536:	db03      	blt.n	8001540 <startPutBall+0x15c>
			putBall.StopPutFlag = 2;
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <startPutBall+0x2a0>)
 800153a:	2202      	movs	r2, #2
 800153c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if (putBall.StopPutFlag == 2)
 8001540:	4b50      	ldr	r3, [pc, #320]	; (8001684 <startPutBall+0x2a0>)
 8001542:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001546:	2b02      	cmp	r3, #2
 8001548:	d126      	bne.n	8001598 <startPutBall+0x1b4>
			putBall.StopPutFlag = 0;
 800154a:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <startPutBall+0x2a0>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			Accel_Cal(&putBall.accel, 0, 0.75);
 8001552:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 8001556:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800169c <startPutBall+0x2b8>
 800155a:	484c      	ldr	r0, [pc, #304]	; (800168c <startPutBall+0x2a8>)
 800155c:	f7ff fcf4 	bl	8000f48 <Accel_Cal>
			Accel_Cal(&getBall.accel, 0, 2);
 8001560:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001564:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800169c <startPutBall+0x2b8>
 8001568:	484d      	ldr	r0, [pc, #308]	; (80016a0 <startPutBall+0x2bc>)
 800156a:	f7ff fced 	bl	8000f48 <Accel_Cal>
			MotorDC_Drive(&putBall.mdc, putBall.accel.vel_controller);
 800156e:	4b45      	ldr	r3, [pc, #276]	; (8001684 <startPutBall+0x2a0>)
 8001570:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001578:	ee17 1a90 	vmov	r1, s15
 800157c:	483c      	ldr	r0, [pc, #240]	; (8001670 <startPutBall+0x28c>)
 800157e:	f7ff fdd7 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, getBall.accel.vel_controller);
 8001582:	4b44      	ldr	r3, [pc, #272]	; (8001694 <startPutBall+0x2b0>)
 8001584:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158c:	ee17 1a90 	vmov	r1, s15
 8001590:	4839      	ldr	r0, [pc, #228]	; (8001678 <startPutBall+0x294>)
 8001592:	f7ff fdcd 	bl	8001130 <MotorDC_Drive>
}
 8001596:	e065      	b.n	8001664 <startPutBall+0x280>
			Accel_Cal(&putBall.accel, 450, 1);
 8001598:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800159c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80016a4 <startPutBall+0x2c0>
 80015a0:	483a      	ldr	r0, [pc, #232]	; (800168c <startPutBall+0x2a8>)
 80015a2:	f7ff fcd1 	bl	8000f48 <Accel_Cal>
			Accel_Cal(&getBall.accel, -1000, 0.5);
 80015a6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80015aa:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80016a8 <startPutBall+0x2c4>
 80015ae:	483c      	ldr	r0, [pc, #240]	; (80016a0 <startPutBall+0x2bc>)
 80015b0:	f7ff fcca 	bl	8000f48 <Accel_Cal>
			MotorDC_Drive(&putBall.mdc, putBall.accel.vel_controller);
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <startPutBall+0x2a0>)
 80015b6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80015ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015be:	ee17 1a90 	vmov	r1, s15
 80015c2:	482b      	ldr	r0, [pc, #172]	; (8001670 <startPutBall+0x28c>)
 80015c4:	f7ff fdb4 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, getBall.accel.vel_controller);
 80015c8:	4b32      	ldr	r3, [pc, #200]	; (8001694 <startPutBall+0x2b0>)
 80015ca:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80015ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d2:	ee17 1a90 	vmov	r1, s15
 80015d6:	4828      	ldr	r0, [pc, #160]	; (8001678 <startPutBall+0x294>)
 80015d8:	f7ff fdaa 	bl	8001130 <MotorDC_Drive>
}
 80015dc:	e042      	b.n	8001664 <startPutBall+0x280>
	else if(state == 3)
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d13f      	bne.n	8001664 <startPutBall+0x280>
		putBall.count = 0;
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <startPutBall+0x2a0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58
		putBall.flag = 0;
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <startPutBall+0x2a0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		putBall.accel.vel_controller = 0;
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <startPutBall+0x2a0>)
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
		getBall.accel.vel_controller = 0;
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <startPutBall+0x2b0>)
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	645a      	str	r2, [r3, #68]	; 0x44
		if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin))
 8001602:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001606:	4824      	ldr	r0, [pc, #144]	; (8001698 <startPutBall+0x2b4>)
 8001608:	f005 fe64 	bl	80072d4 <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00e      	beq.n	8001630 <startPutBall+0x24c>
			osDelay(5);
 8001612:	2005      	movs	r0, #5
 8001614:	f009 f8a1 	bl	800a75a <osDelay>
			if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin)){
 8001618:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161c:	481e      	ldr	r0, [pc, #120]	; (8001698 <startPutBall+0x2b4>)
 800161e:	f005 fe59 	bl	80072d4 <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <startPutBall+0x24c>
				putBall.StopPutFlag = 1;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <startPutBall+0x2a0>)
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if (putBall.StopPutFlag)
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <startPutBall+0x2a0>)
 8001632:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <startPutBall+0x26e>
			MotorDC_Drive(&putBall.mdc, 0);
 800163a:	2100      	movs	r1, #0
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <startPutBall+0x28c>)
 800163e:	f7ff fd77 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, 0);
 8001642:	2100      	movs	r1, #0
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <startPutBall+0x294>)
 8001646:	f7ff fd73 	bl	8001130 <MotorDC_Drive>
			encoder_ResetCount(&putBall.enc);
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <startPutBall+0x2a0>)
 800164c:	f7ff fd14 	bl	8001078 <encoder_ResetCount>
}
 8001650:	e008      	b.n	8001664 <startPutBall+0x280>
			MotorDC_Drive(&putBall.mdc, -200);
 8001652:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <startPutBall+0x28c>)
 8001658:	f7ff fd6a 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, -1000);
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <startPutBall+0x2ac>)
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <startPutBall+0x294>)
 8001660:	f7ff fd66 	bl	8001130 <MotorDC_Drive>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000740 	.word	0x20000740
 8001670:	2000023c 	.word	0x2000023c
 8001674:	200007d0 	.word	0x200007d0
 8001678:	20000298 	.word	0x20000298
 800167c:	3a83126f 	.word	0x3a83126f
 8001680:	200006f8 	.word	0x200006f8
 8001684:	2000020c 	.word	0x2000020c
 8001688:	c4160000 	.word	0xc4160000
 800168c:	2000024c 	.word	0x2000024c
 8001690:	fffffc18 	.word	0xfffffc18
 8001694:	20000268 	.word	0x20000268
 8001698:	40021000 	.word	0x40021000
 800169c:	00000000 	.word	0x00000000
 80016a0:	200002a8 	.word	0x200002a8
 80016a4:	43e10000 	.word	0x43e10000
 80016a8:	c47a0000 	.word	0xc47a0000

080016ac <modulo360>:
 *  Created on: Oct 12, 2023
 *      Author: Admin
 */

#include "AngleOptimizer.h"
float modulo360(float Angle){
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	ed87 0a01 	vstr	s0, [r7, #4]
	int Result = (int)Angle/360.0;
 80016b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016be:	ee17 0a90 	vmov	r0, s15
 80016c2:	f7fe ff2f 	bl	8000524 <__aeabi_i2d>
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <modulo360+0x78>)
 80016cc:	f7ff f8be 	bl	800084c <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff fa3e 	bl	8000b58 <__aeabi_d2iz>
 80016dc:	4603      	mov	r3, r0
 80016de:	60fb      	str	r3, [r7, #12]
	return Angle-Result*360.0;
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7fe ff31 	bl	8000548 <__aeabi_f2d>
 80016e6:	4604      	mov	r4, r0
 80016e8:	460d      	mov	r5, r1
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7fe ff1a 	bl	8000524 <__aeabi_i2d>
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <modulo360+0x78>)
 80016f6:	f7fe ff7f 	bl	80005f8 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4620      	mov	r0, r4
 8001700:	4629      	mov	r1, r5
 8001702:	f7fe fdc1 	bl	8000288 <__aeabi_dsub>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fa4b 	bl	8000ba8 <__aeabi_d2f>
 8001712:	4603      	mov	r3, r0
 8001714:	ee07 3a90 	vmov	s15, r3
}
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bdb0      	pop	{r4, r5, r7, pc}
 8001722:	bf00      	nop
 8001724:	40768000 	.word	0x40768000

08001728 <absf>:

float absf(float num)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (num>=0)return num;
 8001732:	edd7 7a01 	vldr	s15, [r7, #4]
 8001736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173e:	db02      	blt.n	8001746 <absf+0x1e>
 8001740:	edd7 7a01 	vldr	s15, [r7, #4]
 8001744:	e003      	b.n	800174e <absf+0x26>
	else return num*-1;
 8001746:	edd7 7a01 	vldr	s15, [r7, #4]
 800174a:	eef1 7a67 	vneg.f32	s15, s15
}
 800174e:	eeb0 0a67 	vmov.f32	s0, s15
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	0000      	movs	r0, r0
	...

08001760 <angopt_QuadrantCheckInput>:
	int Result = (int)Angle/180.0;
	return Angle-Result*180.0;
}

int angopt_QuadrantCheckInput(float x, float y)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
 800176a:	edc7 0a00 	vstr	s1, [r7]
	float xT = x,yT = y;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	60bb      	str	r3, [r7, #8]
	if(absf(xT)<0.0001) xT = 0;
 8001776:	ed97 0a03 	vldr	s0, [r7, #12]
 800177a:	f7ff ffd5 	bl	8001728 <absf>
 800177e:	ee10 3a10 	vmov	r3, s0
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fee0 	bl	8000548 <__aeabi_f2d>
 8001788:	a353      	add	r3, pc, #332	; (adr r3, 80018d8 <angopt_QuadrantCheckInput+0x178>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7ff f9a5 	bl	8000adc <__aeabi_dcmplt>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <angopt_QuadrantCheckInput+0x3e>
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
	if(absf(yT)<0.0001) yT = 0;
 800179e:	ed97 0a02 	vldr	s0, [r7, #8]
 80017a2:	f7ff ffc1 	bl	8001728 <absf>
 80017a6:	ee10 3a10 	vmov	r3, s0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fecc 	bl	8000548 <__aeabi_f2d>
 80017b0:	a349      	add	r3, pc, #292	; (adr r3, 80018d8 <angopt_QuadrantCheckInput+0x178>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7ff f991 	bl	8000adc <__aeabi_dcmplt>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <angopt_QuadrantCheckInput+0x66>
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]

	if((xT>0)&&(yT>0))return 1;
 80017c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d2:	dd08      	ble.n	80017e6 <angopt_QuadrantCheckInput+0x86>
 80017d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80017d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	dd01      	ble.n	80017e6 <angopt_QuadrantCheckInput+0x86>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e074      	b.n	80018d0 <angopt_QuadrantCheckInput+0x170>
	else if((xT>0)&&(yT<0))return 2;
 80017e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	dd08      	ble.n	8001806 <angopt_QuadrantCheckInput+0xa6>
 80017f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	d501      	bpl.n	8001806 <angopt_QuadrantCheckInput+0xa6>
 8001802:	2302      	movs	r3, #2
 8001804:	e064      	b.n	80018d0 <angopt_QuadrantCheckInput+0x170>
	else if((xT<0)&&(yT<0))return 3;
 8001806:	edd7 7a03 	vldr	s15, [r7, #12]
 800180a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	d508      	bpl.n	8001826 <angopt_QuadrantCheckInput+0xc6>
 8001814:	edd7 7a02 	vldr	s15, [r7, #8]
 8001818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	d501      	bpl.n	8001826 <angopt_QuadrantCheckInput+0xc6>
 8001822:	2303      	movs	r3, #3
 8001824:	e054      	b.n	80018d0 <angopt_QuadrantCheckInput+0x170>
	else if((xT<0)&&(yT>0))return 4;
 8001826:	edd7 7a03 	vldr	s15, [r7, #12]
 800182a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	d508      	bpl.n	8001846 <angopt_QuadrantCheckInput+0xe6>
 8001834:	edd7 7a02 	vldr	s15, [r7, #8]
 8001838:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	dd01      	ble.n	8001846 <angopt_QuadrantCheckInput+0xe6>
 8001842:	2304      	movs	r3, #4
 8001844:	e044      	b.n	80018d0 <angopt_QuadrantCheckInput+0x170>
	else if((xT==0)&&(yT>0))return -1;
 8001846:	edd7 7a03 	vldr	s15, [r7, #12]
 800184a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d109      	bne.n	8001868 <angopt_QuadrantCheckInput+0x108>
 8001854:	edd7 7a02 	vldr	s15, [r7, #8]
 8001858:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	dd02      	ble.n	8001868 <angopt_QuadrantCheckInput+0x108>
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e033      	b.n	80018d0 <angopt_QuadrantCheckInput+0x170>
	else if((xT==0)&&(yT<0))return -2;
 8001868:	edd7 7a03 	vldr	s15, [r7, #12]
 800186c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001874:	d109      	bne.n	800188a <angopt_QuadrantCheckInput+0x12a>
 8001876:	edd7 7a02 	vldr	s15, [r7, #8]
 800187a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	d502      	bpl.n	800188a <angopt_QuadrantCheckInput+0x12a>
 8001884:	f06f 0301 	mvn.w	r3, #1
 8001888:	e022      	b.n	80018d0 <angopt_QuadrantCheckInput+0x170>
	else if((xT>0)&&(yT==0))return -3;
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	dd09      	ble.n	80018ac <angopt_QuadrantCheckInput+0x14c>
 8001898:	edd7 7a02 	vldr	s15, [r7, #8]
 800189c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	d102      	bne.n	80018ac <angopt_QuadrantCheckInput+0x14c>
 80018a6:	f06f 0302 	mvn.w	r3, #2
 80018aa:	e011      	b.n	80018d0 <angopt_QuadrantCheckInput+0x170>
	else if((xT<0)&&(yT==0))return -4;
 80018ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	d509      	bpl.n	80018ce <angopt_QuadrantCheckInput+0x16e>
 80018ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80018be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	d102      	bne.n	80018ce <angopt_QuadrantCheckInput+0x16e>
 80018c8:	f06f 0303 	mvn.w	r3, #3
 80018cc:	e000      	b.n	80018d0 <angopt_QuadrantCheckInput+0x170>

	return 0;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	eb1c432d 	.word	0xeb1c432d
 80018dc:	3f1a36e2 	.word	0x3f1a36e2

080018e0 <angopt_QuadRantCheckOutput>:
//{
//
//}

void angopt_QuadRantCheckOutput(ModuleID ID,float Input)
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b09b      	sub	sp, #108	; 0x6c
 80018e4:	af0a      	add	r7, sp, #40	; 0x28
 80018e6:	4603      	mov	r3, r0
 80018e8:	ed87 0a00 	vstr	s0, [r7]
 80018ec:	71fb      	strb	r3, [r7, #7]
	Angle_Opt_Param opt = swer_GetOptAngle(ID);
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fe28 	bl	800254c <swer_GetOptAngle>
#define Case1		opt.Case1
#define Case2		opt.Case2
#define Direc 		opt.direct

	float XCurr = cos(Input);
 80018fc:	6838      	ldr	r0, [r7, #0]
 80018fe:	f7fe fe23 	bl	8000548 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	ec43 2b10 	vmov	d0, r2, r3
 800190a:	f00d faf9 	bl	800ef00 <cos>
 800190e:	ec53 2b10 	vmov	r2, r3, d0
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff f947 	bl	8000ba8 <__aeabi_d2f>
 800191a:	4603      	mov	r3, r0
 800191c:	63fb      	str	r3, [r7, #60]	; 0x3c
	float YCurr = sin(Input);
 800191e:	6838      	ldr	r0, [r7, #0]
 8001920:	f7fe fe12 	bl	8000548 <__aeabi_f2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	ec43 2b10 	vmov	d0, r2, r3
 800192c:	f00d fb3c 	bl	800efa8 <sin>
 8001930:	ec53 2b10 	vmov	r2, r3, d0
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f936 	bl	8000ba8 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
//	float AngleCheck=modulo360(Input);

	Case2 = angopt_QuadrantCheckInput(XCurr, YCurr);
 8001940:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8001944:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001948:	f7ff ff0a 	bl	8001760 <angopt_QuadrantCheckInput>
 800194c:	4603      	mov	r3, r0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
//	if (absf(AngleCheck)<0.001) Case2 = -2;
//	else if (absf(AngleCheck-90.0)<0.001) Case2 = -1;
//	else if (absf(AngleCheck-180.0)<0.001) Case2 = -4;
//	else if (absf(AngleCheck-270.0)<0.001) Case2 = -3;

	if (Case1 == 0)Direc = 0;
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <angopt_QuadRantCheckOutput+0x7c>
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	e009      	b.n	8001970 <angopt_QuadRantCheckOutput+0x90>
//		}else if(Case1 == 4){
//			if ((Case2 == 2)||(Case2 == -2)||(Case2 == -3))Direc = -1;
//			else Direc = 1;
//		}
		else {
			if(Case2 == Case1)Direc = 1;
 800195c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001960:	429a      	cmp	r2, r3
 8001962:	d102      	bne.n	800196a <angopt_QuadRantCheckOutput+0x8a>
 8001964:	2301      	movs	r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	e002      	b.n	8001970 <angopt_QuadRantCheckOutput+0x90>
			else Direc = -1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	60bb      	str	r3, [r7, #8]
		}
//	}
	swer_SetOptAngle(ID, opt);
 8001970:	79fe      	ldrb	r6, [r7, #7]
 8001972:	466d      	mov	r5, sp
 8001974:	f107 0414 	add.w	r4, r7, #20
 8001978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	602b      	str	r3, [r5, #0]
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800198a:	4630      	mov	r0, r6
 800198c:	f000 fdb8 	bl	8002500 <swer_SetOptAngle>
}
 8001990:	bf00      	nop
 8001992:	3744      	adds	r7, #68	; 0x44
 8001994:	46bd      	mov	sp, r7
 8001996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001998 <angopt_Cal>:


void angopt_Cal(ModuleID ID,float input)
{
 8001998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199a:	ed2d 8b02 	vpush	{d8}
 800199e:	b099      	sub	sp, #100	; 0x64
 80019a0:	af0a      	add	r7, sp, #40	; 0x28
 80019a2:	4603      	mov	r3, r0
 80019a4:	ed87 0a00 	vstr	s0, [r7]
 80019a8:	71fb      	strb	r3, [r7, #7]
	Angle_Opt_Param opt = swer_GetOptAngle(ID);
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	79fa      	ldrb	r2, [r7, #7]
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fdca 	bl	800254c <swer_GetOptAngle>
#define outputAngle 	opt.outputAngle
#define preAngle 		opt.preAngle
#define calInput		opt.calInput
#define preCal			opt.preCal
#define deltaCal		opt.deltaCal
	if(input != preAngle){
 80019b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019bc:	ed97 7a00 	vldr	s14, [r7]
 80019c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	f000 80d7 	beq.w	8001b7a <angopt_Cal+0x1e2>
		calInput = input;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	61fb      	str	r3, [r7, #28]

		if((currentAngle>=0)&&(calInput<0))
 80019d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	db0f      	blt.n	80019fe <angopt_Cal+0x66>
 80019de:	edd7 7a07 	vldr	s15, [r7, #28]
 80019e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d508      	bpl.n	80019fe <angopt_Cal+0x66>
		{
			calInput+=360;
 80019ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80019f0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001b88 <angopt_Cal+0x1f0>
 80019f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019f8:	edc7 7a07 	vstr	s15, [r7, #28]
 80019fc:	e015      	b.n	8001a2a <angopt_Cal+0x92>
		}
		else if ((currentAngle<0)&&(calInput>0))
 80019fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	d50e      	bpl.n	8001a2a <angopt_Cal+0x92>
 8001a0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	dd07      	ble.n	8001a2a <angopt_Cal+0x92>
		{
			calInput-=360;
 8001a1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a1e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001b88 <angopt_Cal+0x1f0>
 8001a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a26:	edc7 7a07 	vstr	s15, [r7, #28]
		}

		deltaAngle = calInput - modulo360(currentAngle);
 8001a2a:	ed97 8a07 	vldr	s16, [r7, #28]
 8001a2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a32:	eeb0 0a67 	vmov.f32	s0, s15
 8001a36:	f7ff fe39 	bl	80016ac <modulo360>
 8001a3a:	eef0 7a40 	vmov.f32	s15, s0
 8001a3e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001a42:	edc7 7a04 	vstr	s15, [r7, #16]

		if(deltaAngle>180)
 8001a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a4a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001b8c <angopt_Cal+0x1f4>
 8001a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	dd08      	ble.n	8001a6a <angopt_Cal+0xd2>
		{
			deltaAngle+=-360;
 8001a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a5c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001b88 <angopt_Cal+0x1f0>
 8001a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a64:	edc7 7a04 	vstr	s15, [r7, #16]
 8001a68:	e010      	b.n	8001a8c <angopt_Cal+0xf4>
		}
		else if(deltaAngle<-180)
 8001a6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a6e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001b90 <angopt_Cal+0x1f8>
 8001a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	d507      	bpl.n	8001a8c <angopt_Cal+0xf4>
		{
			deltaAngle+=360;
 8001a7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a80:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001b88 <angopt_Cal+0x1f0>
 8001a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a88:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		if((deltaAngle<=90)&&(deltaAngle>=-90))deltaAngle = deltaAngle;
 8001a8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a90:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001b94 <angopt_Cal+0x1fc>
 8001a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	d80b      	bhi.n	8001ab6 <angopt_Cal+0x11e>
 8001a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001b98 <angopt_Cal+0x200>
 8001aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	db02      	blt.n	8001ab6 <angopt_Cal+0x11e>
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	e034      	b.n	8001b20 <angopt_Cal+0x188>
		else if ((deltaAngle>90)&&(deltaAngle<=180))deltaAngle += -180.0;
 8001ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b94 <angopt_Cal+0x1fc>
 8001abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	dd11      	ble.n	8001aec <angopt_Cal+0x154>
 8001ac8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001acc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001b8c <angopt_Cal+0x1f4>
 8001ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	d808      	bhi.n	8001aec <angopt_Cal+0x154>
 8001ada:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ade:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001b8c <angopt_Cal+0x1f4>
 8001ae2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ae6:	edc7 7a04 	vstr	s15, [r7, #16]
 8001aea:	e019      	b.n	8001b20 <angopt_Cal+0x188>
		else if ((deltaAngle<-90)&&(deltaAngle>=-180))deltaAngle += 180.0;
 8001aec:	edd7 7a04 	vldr	s15, [r7, #16]
 8001af0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001b98 <angopt_Cal+0x200>
 8001af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	d510      	bpl.n	8001b20 <angopt_Cal+0x188>
 8001afe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b02:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001b90 <angopt_Cal+0x1f8>
 8001b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	db07      	blt.n	8001b20 <angopt_Cal+0x188>
 8001b10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b14:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001b8c <angopt_Cal+0x1f4>
 8001b18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b1c:	edc7 7a04 	vstr	s15, [r7, #16]

		preAngle = input;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	61bb      	str	r3, [r7, #24]
		preCal = calInput;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	623b      	str	r3, [r7, #32]
		currentAngle += deltaAngle;
 8001b28:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b34:	edc7 7a03 	vstr	s15, [r7, #12]
		if(currentAngle>=1080) currentAngle-=360;
 8001b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b3c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001b9c <angopt_Cal+0x204>
 8001b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	db07      	blt.n	8001b5a <angopt_Cal+0x1c2>
 8001b4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b4e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001b88 <angopt_Cal+0x1f0>
 8001b52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b56:	edc7 7a03 	vstr	s15, [r7, #12]
		swer_SetOptAngle(ID, opt);
 8001b5a:	79fe      	ldrb	r6, [r7, #7]
 8001b5c:	466d      	mov	r5, sp
 8001b5e:	f107 0414 	add.w	r4, r7, #20
 8001b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	602b      	str	r3, [r5, #0]
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b74:	4630      	mov	r0, r6
 8001b76:	f000 fcc3 	bl	8002500 <swer_SetOptAngle>
	}
}
 8001b7a:	bf00      	nop
 8001b7c:	373c      	adds	r7, #60	; 0x3c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	ecbd 8b02 	vpop	{d8}
 8001b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	43b40000 	.word	0x43b40000
 8001b8c:	43340000 	.word	0x43340000
 8001b90:	c3340000 	.word	0xc3340000
 8001b94:	42b40000 	.word	0x42b40000
 8001b98:	c2b40000 	.word	0xc2b40000
 8001b9c:	44870000 	.word	0x44870000

08001ba0 <invkine_CalWheelVector>:
#include "main.h"
int Count;
extern TIM_HandleTypeDef htim10;
InverseKinematicProcedure InvCalcStep = 0;

void invkine_CalWheelVector(ModuleID ID, float u, float v, float r){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bac:	edc7 0a01 	vstr	s1, [r7, #4]
 8001bb0:	ed87 1a00 	vstr	s2, [r7]
 8001bb4:	73fb      	strb	r3, [r7, #15]
	pVectorCalXY pVectXY = swer_GetFuncHandle(ID);
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fce7 	bl	800258c <swer_GetFuncHandle>
 8001bbe:	6178      	str	r0, [r7, #20]
	pVectXY(u,v,r);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	ed97 1a00 	vldr	s2, [r7]
 8001bc6:	edd7 0a01 	vldr	s1, [r7, #4]
 8001bca:	ed97 0a02 	vldr	s0, [r7, #8]
 8001bce:	4798      	blx	r3
}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <invkine_CalOptAngle>:

void invkine_CalOptAngle(ModuleID ID){
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b09d      	sub	sp, #116	; 0x74
 8001bdc:	af0a      	add	r7, sp, #40	; 0x28
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
	WheelVector vect = swer_GetWheelVector(ID);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fc65 	bl	80024b4 <swer_GetWheelVector>
 8001bea:	eeb0 7a40 	vmov.f32	s14, s0
 8001bee:	eef0 7a60 	vmov.f32	s15, s1
 8001bf2:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8001bf6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fca2 	bl	800254c <swer_GetOptAngle>
	angopt.Case1 = angopt_QuadrantCheckInput(vect.wheelVelX,vect.wheelVelY);
 8001c08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c0c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c10:	eef0 0a47 	vmov.f32	s1, s14
 8001c14:	eeb0 0a67 	vmov.f32	s0, s15
 8001c18:	f7ff fda2 	bl	8001760 <angopt_QuadrantCheckInput>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30
	swer_SetOptAngle(ID, angopt);
 8001c20:	79fe      	ldrb	r6, [r7, #7]
 8001c22:	466d      	mov	r5, sp
 8001c24:	f107 0418 	add.w	r4, r7, #24
 8001c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	602b      	str	r3, [r5, #0]
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	f000 fc60 	bl	8002500 <swer_SetOptAngle>

	//------------------------------------------------------------------
	float rawAngle = atan2(vect.wheelVelY,vect.wheelVelX)*180.0/M_PI;
 8001c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc80 	bl	8000548 <__aeabi_f2d>
 8001c48:	4604      	mov	r4, r0
 8001c4a:	460d      	mov	r5, r1
 8001c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc7a 	bl	8000548 <__aeabi_f2d>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	ec43 2b11 	vmov	d1, r2, r3
 8001c5c:	ec45 4b10 	vmov	d0, r4, r5
 8001c60:	f00d f8b0 	bl	800edc4 <atan2>
 8001c64:	ec51 0b10 	vmov	r0, r1, d0
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <invkine_CalOptAngle+0xd8>)
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	a30b      	add	r3, pc, #44	; (adr r3, 8001ca8 <invkine_CalOptAngle+0xd0>)
 8001c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c80:	f7fe fde4 	bl	800084c <__aeabi_ddiv>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f7fe ff8c 	bl	8000ba8 <__aeabi_d2f>
 8001c90:	4603      	mov	r3, r0
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
	angopt_Cal(ID, rawAngle);
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fe7c 	bl	8001998 <angopt_Cal>
	//------------------------------------------------------------------

}
 8001ca0:	bf00      	nop
 8001ca2:	374c      	adds	r7, #76	; 0x4c
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca8:	54442d18 	.word	0x54442d18
 8001cac:	400921fb 	.word	0x400921fb
 8001cb0:	40668000 	.word	0x40668000
 8001cb4:	00000000 	.word	0x00000000

08001cb8 <invkine_CalSpeedVectorControl>:

float invkine_CalSpeedVectorControl(ModuleID ID)
{
 8001cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cbc:	b092      	sub	sp, #72	; 0x48
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]
	float temp;
	WheelVector vect = swer_GetWheelVector(ID);
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fbf4 	bl	80024b4 <swer_GetWheelVector>
 8001ccc:	eeb0 7a40 	vmov.f32	s14, s0
 8001cd0:	eef0 7a60 	vmov.f32	s15, s1
 8001cd4:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8001cd8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	79fa      	ldrb	r2, [r7, #7]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fc31 	bl	800254c <swer_GetOptAngle>
	angopt_QuadRantCheckOutput(ID,angopt.currentAngle*M_PI/180);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc2b 	bl	8000548 <__aeabi_f2d>
 8001cf2:	a33c      	add	r3, pc, #240	; (adr r3, 8001de4 <invkine_CalSpeedVectorControl+0x12c>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fc7e 	bl	80005f8 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <invkine_CalSpeedVectorControl+0x128>)
 8001d0a:	f7fe fd9f 	bl	800084c <__aeabi_ddiv>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe ff47 	bl	8000ba8 <__aeabi_d2f>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	ee00 2a10 	vmov	s0, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fddc 	bl	80018e0 <angopt_QuadRantCheckOutput>
	temp = (float)angopt.direct  * (60.0/(ROBOT_WHEEL_RADIUS_METER*2.0*M_PI)) * (sqrt(pow(vect.wheelVelX,2) + pow(vect.wheelVelY,2))) ;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d32:	ee17 0a90 	vmov	r0, s15
 8001d36:	f7fe fc07 	bl	8000548 <__aeabi_f2d>
 8001d3a:	a325      	add	r3, pc, #148	; (adr r3, 8001dd0 <invkine_CalSpeedVectorControl+0x118>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe fc5a 	bl	80005f8 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4614      	mov	r4, r2
 8001d4a:	461d      	mov	r5, r3
 8001d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fbfa 	bl	8000548 <__aeabi_f2d>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001dd8 <invkine_CalSpeedVectorControl+0x120>
 8001d5c:	ec43 2b10 	vmov	d0, r2, r3
 8001d60:	f00d f832 	bl	800edc8 <pow>
 8001d64:	ec59 8b10 	vmov	r8, r9, d0
 8001d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbec 	bl	8000548 <__aeabi_f2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8001dd8 <invkine_CalSpeedVectorControl+0x120>
 8001d78:	ec43 2b10 	vmov	d0, r2, r3
 8001d7c:	f00d f824 	bl	800edc8 <pow>
 8001d80:	ec53 2b10 	vmov	r2, r3, d0
 8001d84:	4640      	mov	r0, r8
 8001d86:	4649      	mov	r1, r9
 8001d88:	f7fe fa80 	bl	800028c <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	ec43 2b17 	vmov	d7, r2, r3
 8001d94:	eeb0 0a47 	vmov.f32	s0, s14
 8001d98:	eef0 0a67 	vmov.f32	s1, s15
 8001d9c:	f00d f884 	bl	800eea8 <sqrt>
 8001da0:	ec53 2b10 	vmov	r2, r3, d0
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fc26 	bl	80005f8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe fef8 	bl	8000ba8 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	647b      	str	r3, [r7, #68]	; 0x44
	return temp;
 8001dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dbe:	ee07 3a90 	vmov	s15, r3
}
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	3748      	adds	r7, #72	; 0x48
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dce:	bf00      	nop
 8001dd0:	644967bf 	.word	0x644967bf
 8001dd4:	406a869c 	.word	0x406a869c
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	40000000 	.word	0x40000000
 8001de0:	40668000 	.word	0x40668000
 8001de4:	54442d18 	.word	0x54442d18
 8001de8:	400921fb 	.word	0x400921fb

08001dec <invkine_Implementation>:

HAL_StatusTypeDef  invkine_Implementation(ModuleID ID, float u, float v, float r,void (*ptnCpltCallback)(ModuleID,float, float))
{
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	b09d      	sub	sp, #116	; 0x74
 8001df0:	af0a      	add	r7, sp, #40	; 0x28
 8001df2:	4603      	mov	r3, r0
 8001df4:	ed87 0a04 	vstr	s0, [r7, #16]
 8001df8:	edc7 0a03 	vstr	s1, [r7, #12]
 8001dfc:	ed87 1a02 	vstr	s2, [r7, #8]
 8001e00:	6079      	str	r1, [r7, #4]
 8001e02:	75fb      	strb	r3, [r7, #23]
//	HAL_TIM_Base_Start(&htim10);
//	__HAL_TIM_SET_COUNTER(&htim10,0);
	static float velocity = 0;

	invkine_CalWheelVector(ID, u, v, r);
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	ed97 1a02 	vldr	s2, [r7, #8]
 8001e0a:	edd7 0a03 	vldr	s1, [r7, #12]
 8001e0e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fec4 	bl	8001ba0 <invkine_CalWheelVector>
	if(u == 0&&v==0&&r==0)__NOP();
 8001e18:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	d10f      	bne.n	8001e46 <invkine_Implementation+0x5a>
 8001e26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e32:	d108      	bne.n	8001e46 <invkine_Implementation+0x5a>
 8001e34:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	d101      	bne.n	8001e46 <invkine_Implementation+0x5a>
 8001e42:	bf00      	nop
 8001e44:	e003      	b.n	8001e4e <invkine_Implementation+0x62>
	else invkine_CalOptAngle(ID);
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fec5 	bl	8001bd8 <invkine_CalOptAngle>

	velocity = invkine_CalSpeedVectorControl(ID);
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff31 	bl	8001cb8 <invkine_CalSpeedVectorControl>
 8001e56:	eef0 7a40 	vmov.f32	s15, s0
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <invkine_Implementation+0xf8>)
 8001e5c:	edc3 7a00 	vstr	s15, [r3]
	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	7dfa      	ldrb	r2, [r7, #23]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fb6f 	bl	800254c <swer_GetOptAngle>
	if(u == 0&&v==0&&r==0)angopt.currentAngle= angopt.PreCurrAngle;
 8001e6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	d10f      	bne.n	8001e9c <invkine_Implementation+0xb0>
 8001e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d108      	bne.n	8001e9c <invkine_Implementation+0xb0>
 8001e8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e96:	d101      	bne.n	8001e9c <invkine_Implementation+0xb0>
 8001e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9a:	61fb      	str	r3, [r7, #28]
//	Count = __HAL_TIM_GET_COUNTER(&htim10);
//	HAL_TIM_Base_Stop(&htim10);
	ptnCpltCallback(ID,velocity,angopt.currentAngle);
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <invkine_Implementation+0xf8>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ea6:	7dfa      	ldrb	r2, [r7, #23]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	eef0 0a47 	vmov.f32	s1, s14
 8001eae:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4798      	blx	r3
	angopt.PreCurrAngle = angopt.currentAngle;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	647b      	str	r3, [r7, #68]	; 0x44
	swer_SetOptAngle(ID, angopt);
 8001eba:	7dfe      	ldrb	r6, [r7, #23]
 8001ebc:	466d      	mov	r5, sp
 8001ebe:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	602b      	str	r3, [r5, #0]
 8001ece:	f107 0318 	add.w	r3, r7, #24
 8001ed2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f000 fb13 	bl	8002500 <swer_SetOptAngle>

	return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	374c      	adds	r7, #76	; 0x4c
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee4:	200002c0 	.word	0x200002c0

08001ee8 <swer0_CalVector>:
#define DY3	-0.09428
#define DY1	-0.09428
#define DY2	0.18856

SwerveModuleParam swerParam[MAX_MODULE];
void swer0_CalVector(float u, float v, float r){
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ef2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ef6:	ed87 1a01 	vstr	s2, [r7, #4]
	__NOP();
 8001efa:	bf00      	nop
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <swer1_CalVector>:
//	float alpha = (225)*M_PI/180;
//	vct.wheelVelX = cos(alpha)*(u + ROBOT_WIDTH_METER*r) - sin(alpha)*(v + ROBOT_LENGHT_METER*r);
//	vct.wheelVelY = sin(alpha)*(u + ROBOT_WIDTH_METER*r) + cos(alpha)*(v + ROBOT_LENGHT_METER*r);
//	swer_SetWheelVector(MODULE_ID_4, vct);
//}
void swer1_CalVector(float u, float v, float r){
 8001f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f14:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f18:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = 180*M_PI/180;
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <swer1_CalVector+0x1b0>)
 8001f1e:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY1*r) - sin(alpha)*(v + DX1*r);
 8001f20:	69f8      	ldr	r0, [r7, #28]
 8001f22:	f7fe fb11 	bl	8000548 <__aeabi_f2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	ec43 2b10 	vmov	d0, r2, r3
 8001f2e:	f00c ffe7 	bl	800ef00 <cos>
 8001f32:	ec59 8b10 	vmov	r8, r9, d0
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f7fe fb06 	bl	8000548 <__aeabi_f2d>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	460d      	mov	r5, r1
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7fe fb01 	bl	8000548 <__aeabi_f2d>
 8001f46:	a358      	add	r3, pc, #352	; (adr r3, 80020a8 <swer1_CalVector+0x1a0>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fb54 	bl	80005f8 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe f998 	bl	800028c <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4640      	mov	r0, r8
 8001f62:	4649      	mov	r1, r9
 8001f64:	f7fe fb48 	bl	80005f8 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4690      	mov	r8, r2
 8001f6e:	4699      	mov	r9, r3
 8001f70:	69f8      	ldr	r0, [r7, #28]
 8001f72:	f7fe fae9 	bl	8000548 <__aeabi_f2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	ec43 2b10 	vmov	d0, r2, r3
 8001f7e:	f00d f813 	bl	800efa8 <sin>
 8001f82:	ec5b ab10 	vmov	sl, fp, d0
 8001f86:	68b8      	ldr	r0, [r7, #8]
 8001f88:	f7fe fade 	bl	8000548 <__aeabi_f2d>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7fe fad9 	bl	8000548 <__aeabi_f2d>
 8001f96:	a346      	add	r3, pc, #280	; (adr r3, 80020b0 <swer1_CalVector+0x1a8>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe fb2c 	bl	80005f8 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	f7fe f970 	bl	800028c <__adddf3>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4650      	mov	r0, sl
 8001fb2:	4659      	mov	r1, fp
 8001fb4:	f7fe fb20 	bl	80005f8 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4640      	mov	r0, r8
 8001fbe:	4649      	mov	r1, r9
 8001fc0:	f7fe f962 	bl	8000288 <__aeabi_dsub>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fdec 	bl	8000ba8 <__aeabi_d2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	617b      	str	r3, [r7, #20]
	vct.wheelVelY = sin(alpha)*(u - DY1*r) + cos(alpha)*(v + DX1*r);
 8001fd4:	69f8      	ldr	r0, [r7, #28]
 8001fd6:	f7fe fab7 	bl	8000548 <__aeabi_f2d>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	ec43 2b10 	vmov	d0, r2, r3
 8001fe2:	f00c ffe1 	bl	800efa8 <sin>
 8001fe6:	ec59 8b10 	vmov	r8, r9, d0
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7fe faac 	bl	8000548 <__aeabi_f2d>
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	460d      	mov	r5, r1
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7fe faa7 	bl	8000548 <__aeabi_f2d>
 8001ffa:	a32b      	add	r3, pc, #172	; (adr r3, 80020a8 <swer1_CalVector+0x1a0>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe fafa 	bl	80005f8 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe f93e 	bl	800028c <__adddf3>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4640      	mov	r0, r8
 8002016:	4649      	mov	r1, r9
 8002018:	f7fe faee 	bl	80005f8 <__aeabi_dmul>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4690      	mov	r8, r2
 8002022:	4699      	mov	r9, r3
 8002024:	69f8      	ldr	r0, [r7, #28]
 8002026:	f7fe fa8f 	bl	8000548 <__aeabi_f2d>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	ec43 2b10 	vmov	d0, r2, r3
 8002032:	f00c ff65 	bl	800ef00 <cos>
 8002036:	ec5b ab10 	vmov	sl, fp, d0
 800203a:	68b8      	ldr	r0, [r7, #8]
 800203c:	f7fe fa84 	bl	8000548 <__aeabi_f2d>
 8002040:	4604      	mov	r4, r0
 8002042:	460d      	mov	r5, r1
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe fa7f 	bl	8000548 <__aeabi_f2d>
 800204a:	a319      	add	r3, pc, #100	; (adr r3, 80020b0 <swer1_CalVector+0x1a8>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe fad2 	bl	80005f8 <__aeabi_dmul>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4620      	mov	r0, r4
 800205a:	4629      	mov	r1, r5
 800205c:	f7fe f916 	bl	800028c <__adddf3>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4650      	mov	r0, sl
 8002066:	4659      	mov	r1, fp
 8002068:	f7fe fac6 	bl	80005f8 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4640      	mov	r0, r8
 8002072:	4649      	mov	r1, r9
 8002074:	f7fe f90a 	bl	800028c <__adddf3>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fd92 	bl	8000ba8 <__aeabi_d2f>
 8002084:	4603      	mov	r3, r0
 8002086:	61bb      	str	r3, [r7, #24]
	swer_SetWheelVector(MODULE_ID_1, vct);
 8002088:	ed97 7a05 	vldr	s14, [r7, #20]
 800208c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002090:	eeb0 0a47 	vmov.f32	s0, s14
 8002094:	eef0 0a67 	vmov.f32	s1, s15
 8002098:	2001      	movs	r0, #1
 800209a:	f000 f9e7 	bl	800246c <swer_SetWheelVector>
}
 800209e:	bf00      	nop
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020a8:	ecaab8a6 	.word	0xecaab8a6
 80020ac:	3fb822bb 	.word	0x3fb822bb
 80020b0:	f1800a7c 	.word	0xf1800a7c
 80020b4:	bfd21a0c 	.word	0xbfd21a0c
 80020b8:	40490fdb 	.word	0x40490fdb
 80020bc:	00000000 	.word	0x00000000

080020c0 <swer2_CalVector>:

void swer2_CalVector(float u, float v, float r){
 80020c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020c4:	b088      	sub	sp, #32
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	ed87 0a03 	vstr	s0, [r7, #12]
 80020cc:	edc7 0a02 	vstr	s1, [r7, #8]
 80020d0:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = -90*M_PI/180;
 80020d4:	4b60      	ldr	r3, [pc, #384]	; (8002258 <swer2_CalVector+0x198>)
 80020d6:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY2*r) - sin(alpha)*(v + DX2*r);
 80020d8:	69f8      	ldr	r0, [r7, #28]
 80020da:	f7fe fa35 	bl	8000548 <__aeabi_f2d>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	ec43 2b10 	vmov	d0, r2, r3
 80020e6:	f00c ff0b 	bl	800ef00 <cos>
 80020ea:	ec59 8b10 	vmov	r8, r9, d0
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f7fe fa2a 	bl	8000548 <__aeabi_f2d>
 80020f4:	4604      	mov	r4, r0
 80020f6:	460d      	mov	r5, r1
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7fe fa25 	bl	8000548 <__aeabi_f2d>
 80020fe:	a354      	add	r3, pc, #336	; (adr r3, 8002250 <swer2_CalVector+0x190>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fa78 	bl	80005f8 <__aeabi_dmul>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4620      	mov	r0, r4
 800210e:	4629      	mov	r1, r5
 8002110:	f7fe f8ba 	bl	8000288 <__aeabi_dsub>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4640      	mov	r0, r8
 800211a:	4649      	mov	r1, r9
 800211c:	f7fe fa6c 	bl	80005f8 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4614      	mov	r4, r2
 8002126:	461d      	mov	r5, r3
 8002128:	69f8      	ldr	r0, [r7, #28]
 800212a:	f7fe fa0d 	bl	8000548 <__aeabi_f2d>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	ec43 2b10 	vmov	d0, r2, r3
 8002136:	f00c ff37 	bl	800efa8 <sin>
 800213a:	ec59 8b10 	vmov	r8, r9, d0
 800213e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002142:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800225c <swer2_CalVector+0x19c>
 8002146:	ee27 7a87 	vmul.f32	s14, s15, s14
 800214a:	edd7 7a02 	vldr	s15, [r7, #8]
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	ee17 0a90 	vmov	r0, s15
 8002156:	f7fe f9f7 	bl	8000548 <__aeabi_f2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4640      	mov	r0, r8
 8002160:	4649      	mov	r1, r9
 8002162:	f7fe fa49 	bl	80005f8 <__aeabi_dmul>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4620      	mov	r0, r4
 800216c:	4629      	mov	r1, r5
 800216e:	f7fe f88b 	bl	8000288 <__aeabi_dsub>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fd15 	bl	8000ba8 <__aeabi_d2f>
 800217e:	4603      	mov	r3, r0
 8002180:	617b      	str	r3, [r7, #20]
	vct.wheelVelY = sin(alpha)*(u - DY2*r) + cos(alpha)*(v + DX2*r);
 8002182:	69f8      	ldr	r0, [r7, #28]
 8002184:	f7fe f9e0 	bl	8000548 <__aeabi_f2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	ec43 2b10 	vmov	d0, r2, r3
 8002190:	f00c ff0a 	bl	800efa8 <sin>
 8002194:	ec59 8b10 	vmov	r8, r9, d0
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f7fe f9d5 	bl	8000548 <__aeabi_f2d>
 800219e:	4604      	mov	r4, r0
 80021a0:	460d      	mov	r5, r1
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe f9d0 	bl	8000548 <__aeabi_f2d>
 80021a8:	a329      	add	r3, pc, #164	; (adr r3, 8002250 <swer2_CalVector+0x190>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe fa23 	bl	80005f8 <__aeabi_dmul>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe f865 	bl	8000288 <__aeabi_dsub>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe fa17 	bl	80005f8 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4614      	mov	r4, r2
 80021d0:	461d      	mov	r5, r3
 80021d2:	69f8      	ldr	r0, [r7, #28]
 80021d4:	f7fe f9b8 	bl	8000548 <__aeabi_f2d>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	ec43 2b10 	vmov	d0, r2, r3
 80021e0:	f00c fe8e 	bl	800ef00 <cos>
 80021e4:	ec59 8b10 	vmov	r8, r9, d0
 80021e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ec:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800225c <swer2_CalVector+0x19c>
 80021f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fc:	ee17 0a90 	vmov	r0, s15
 8002200:	f7fe f9a2 	bl	8000548 <__aeabi_f2d>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4640      	mov	r0, r8
 800220a:	4649      	mov	r1, r9
 800220c:	f7fe f9f4 	bl	80005f8 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4620      	mov	r0, r4
 8002216:	4629      	mov	r1, r5
 8002218:	f7fe f838 	bl	800028c <__adddf3>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f7fe fcc0 	bl	8000ba8 <__aeabi_d2f>
 8002228:	4603      	mov	r3, r0
 800222a:	61bb      	str	r3, [r7, #24]
	swer_SetWheelVector(MODULE_ID_2, vct);
 800222c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002230:	edd7 7a06 	vldr	s15, [r7, #24]
 8002234:	eeb0 0a47 	vmov.f32	s0, s14
 8002238:	eef0 0a67 	vmov.f32	s1, s15
 800223c:	2002      	movs	r0, #2
 800223e:	f000 f915 	bl	800246c <swer_SetWheelVector>
}
 8002242:	bf00      	nop
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800224c:	f3af 8000 	nop.w
 8002250:	ecaab8a6 	.word	0xecaab8a6
 8002254:	3fc822bb 	.word	0x3fc822bb
 8002258:	bfc90fdb 	.word	0xbfc90fdb
 800225c:	00000000 	.word	0x00000000

08002260 <swer3_CalVector>:

void swer3_CalVector(float u, float v, float r){
 8002260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002264:	b088      	sub	sp, #32
 8002266:	af00      	add	r7, sp, #0
 8002268:	ed87 0a03 	vstr	s0, [r7, #12]
 800226c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002270:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = 180*M_PI/180;
 8002274:	4b66      	ldr	r3, [pc, #408]	; (8002410 <swer3_CalVector+0x1b0>)
 8002276:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY3*r) - sin(alpha)*(v + DX3*r);
 8002278:	69f8      	ldr	r0, [r7, #28]
 800227a:	f7fe f965 	bl	8000548 <__aeabi_f2d>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	ec43 2b10 	vmov	d0, r2, r3
 8002286:	f00c fe3b 	bl	800ef00 <cos>
 800228a:	ec59 8b10 	vmov	r8, r9, d0
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f7fe f95a 	bl	8000548 <__aeabi_f2d>
 8002294:	4604      	mov	r4, r0
 8002296:	460d      	mov	r5, r1
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7fe f955 	bl	8000548 <__aeabi_f2d>
 800229e:	a358      	add	r3, pc, #352	; (adr r3, 8002400 <swer3_CalVector+0x1a0>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	f7fe f9a8 	bl	80005f8 <__aeabi_dmul>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4620      	mov	r0, r4
 80022ae:	4629      	mov	r1, r5
 80022b0:	f7fd ffec 	bl	800028c <__adddf3>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4640      	mov	r0, r8
 80022ba:	4649      	mov	r1, r9
 80022bc:	f7fe f99c 	bl	80005f8 <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4690      	mov	r8, r2
 80022c6:	4699      	mov	r9, r3
 80022c8:	69f8      	ldr	r0, [r7, #28]
 80022ca:	f7fe f93d 	bl	8000548 <__aeabi_f2d>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	ec43 2b10 	vmov	d0, r2, r3
 80022d6:	f00c fe67 	bl	800efa8 <sin>
 80022da:	ec5b ab10 	vmov	sl, fp, d0
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	f7fe f932 	bl	8000548 <__aeabi_f2d>
 80022e4:	4604      	mov	r4, r0
 80022e6:	460d      	mov	r5, r1
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7fe f92d 	bl	8000548 <__aeabi_f2d>
 80022ee:	a346      	add	r3, pc, #280	; (adr r3, 8002408 <swer3_CalVector+0x1a8>)
 80022f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f4:	f7fe f980 	bl	80005f8 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4620      	mov	r0, r4
 80022fe:	4629      	mov	r1, r5
 8002300:	f7fd ffc4 	bl	800028c <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4650      	mov	r0, sl
 800230a:	4659      	mov	r1, fp
 800230c:	f7fe f974 	bl	80005f8 <__aeabi_dmul>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4640      	mov	r0, r8
 8002316:	4649      	mov	r1, r9
 8002318:	f7fd ffb6 	bl	8000288 <__aeabi_dsub>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fc40 	bl	8000ba8 <__aeabi_d2f>
 8002328:	4603      	mov	r3, r0
 800232a:	617b      	str	r3, [r7, #20]
	vct.wheelVelY = sin(alpha)*(u - DY3*r) + cos(alpha)*(v + DX3*r);
 800232c:	69f8      	ldr	r0, [r7, #28]
 800232e:	f7fe f90b 	bl	8000548 <__aeabi_f2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	ec43 2b10 	vmov	d0, r2, r3
 800233a:	f00c fe35 	bl	800efa8 <sin>
 800233e:	ec59 8b10 	vmov	r8, r9, d0
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7fe f900 	bl	8000548 <__aeabi_f2d>
 8002348:	4604      	mov	r4, r0
 800234a:	460d      	mov	r5, r1
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7fe f8fb 	bl	8000548 <__aeabi_f2d>
 8002352:	a32b      	add	r3, pc, #172	; (adr r3, 8002400 <swer3_CalVector+0x1a0>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe f94e 	bl	80005f8 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4620      	mov	r0, r4
 8002362:	4629      	mov	r1, r5
 8002364:	f7fd ff92 	bl	800028c <__adddf3>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4640      	mov	r0, r8
 800236e:	4649      	mov	r1, r9
 8002370:	f7fe f942 	bl	80005f8 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4690      	mov	r8, r2
 800237a:	4699      	mov	r9, r3
 800237c:	69f8      	ldr	r0, [r7, #28]
 800237e:	f7fe f8e3 	bl	8000548 <__aeabi_f2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	ec43 2b10 	vmov	d0, r2, r3
 800238a:	f00c fdb9 	bl	800ef00 <cos>
 800238e:	ec5b ab10 	vmov	sl, fp, d0
 8002392:	68b8      	ldr	r0, [r7, #8]
 8002394:	f7fe f8d8 	bl	8000548 <__aeabi_f2d>
 8002398:	4604      	mov	r4, r0
 800239a:	460d      	mov	r5, r1
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7fe f8d3 	bl	8000548 <__aeabi_f2d>
 80023a2:	a319      	add	r3, pc, #100	; (adr r3, 8002408 <swer3_CalVector+0x1a8>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f926 	bl	80005f8 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fd ff6a 	bl	800028c <__adddf3>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4650      	mov	r0, sl
 80023be:	4659      	mov	r1, fp
 80023c0:	f7fe f91a 	bl	80005f8 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4640      	mov	r0, r8
 80023ca:	4649      	mov	r1, r9
 80023cc:	f7fd ff5e 	bl	800028c <__adddf3>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fbe6 	bl	8000ba8 <__aeabi_d2f>
 80023dc:	4603      	mov	r3, r0
 80023de:	61bb      	str	r3, [r7, #24]
	swer_SetWheelVector(MODULE_ID_3, vct);
 80023e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80023e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80023e8:	eeb0 0a47 	vmov.f32	s0, s14
 80023ec:	eef0 0a67 	vmov.f32	s1, s15
 80023f0:	2003      	movs	r0, #3
 80023f2:	f000 f83b 	bl	800246c <swer_SetWheelVector>
}
 80023f6:	bf00      	nop
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002400:	ecaab8a6 	.word	0xecaab8a6
 8002404:	3fb822bb 	.word	0x3fb822bb
 8002408:	f1800a7c 	.word	0xf1800a7c
 800240c:	3fd21a0c 	.word	0x3fd21a0c
 8002410:	40490fdb 	.word	0x40490fdb

08002414 <swer_Init>:

void swer_Init(){
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
	swerParam[0].pVctXY = &swer0_CalVector;
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <swer_Init+0x44>)
 800241a:	4a10      	ldr	r2, [pc, #64]	; (800245c <swer_Init+0x48>)
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
	swerParam[MODULE_ID_1].pVctXY = &swer1_CalVector;
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <swer_Init+0x44>)
 8002420:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <swer_Init+0x4c>)
 8002422:	675a      	str	r2, [r3, #116]	; 0x74
	swerParam[MODULE_ID_2].pVctXY = &swer2_CalVector;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <swer_Init+0x44>)
 8002426:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <swer_Init+0x50>)
 8002428:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	swerParam[MODULE_ID_3].pVctXY = &swer3_CalVector;
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <swer_Init+0x44>)
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <swer_Init+0x54>)
 8002430:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	swerParam[MODULE_ID_1].angleOpt.direct =
	swerParam[MODULE_ID_2].angleOpt.direct =
	swerParam[MODULE_ID_3].angleOpt.direct = 1;
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <swer_Init+0x44>)
 8002436:	2201      	movs	r2, #1
 8002438:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <swer_Init+0x44>)
 800243e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	swerParam[MODULE_ID_2].angleOpt.direct =
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <swer_Init+0x44>)
 8002444:	6793      	str	r3, [r2, #120]	; 0x78
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <swer_Init+0x44>)
 8002448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	swerParam[MODULE_ID_1].angleOpt.direct =
 800244a:	4a03      	ldr	r2, [pc, #12]	; (8002458 <swer_Init+0x44>)
 800244c:	63d3      	str	r3, [r2, #60]	; 0x3c

}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	200002c4 	.word	0x200002c4
 800245c:	08001ee9 	.word	0x08001ee9
 8002460:	08001f09 	.word	0x08001f09
 8002464:	080020c1 	.word	0x080020c1
 8002468:	08002261 	.word	0x08002261

0800246c <swer_SetWheelVector>:


void swer_SetWheelVector(ModuleID ID,WheelVector vct){swerParam[ID].vct = vct;}
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	eeb0 7a40 	vmov.f32	s14, s0
 8002478:	eef0 7a60 	vmov.f32	s15, s1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	ed87 7a01 	vstr	s14, [r7, #4]
 8002482:	edc7 7a02 	vstr	s15, [r7, #8]
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	4909      	ldr	r1, [pc, #36]	; (80024b0 <swer_SetWheelVector+0x44>)
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3330      	adds	r3, #48	; 0x30
 8002496:	461a      	mov	r2, r3
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800249e:	e882 0003 	stmia.w	r2, {r0, r1}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	200002c4 	.word	0x200002c4

080024b4 <swer_GetWheelVector>:
WheelVector swer_GetWheelVector(ModuleID ID){return swerParam[ID].vct;}
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <swer_GetWheelVector+0x48>)
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	ee07 2a10 	vmov	s14, r2
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eeb0 0a47 	vmov.f32	s0, s14
 80024ec:	eef0 0a67 	vmov.f32	s1, s15
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	200002c4 	.word	0x200002c4

08002500 <swer_SetOptAngle>:
void swer_SetOptAngle(ModuleID ID,Angle_Opt_Param angleOpt){swerParam[ID].angleOpt = angleOpt;}
 8002500:	b084      	sub	sp, #16
 8002502:	b4b0      	push	{r4, r5, r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	4604      	mov	r4, r0
 800250a:	f107 001c 	add.w	r0, r7, #28
 800250e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002512:	4623      	mov	r3, r4
 8002514:	71fb      	strb	r3, [r7, #7]
 8002516:	79fa      	ldrb	r2, [r7, #7]
 8002518:	490b      	ldr	r1, [pc, #44]	; (8002548 <swer_SetOptAngle+0x48>)
 800251a:	4613      	mov	r3, r2
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	461d      	mov	r5, r3
 8002526:	f107 041c 	add.w	r4, r7, #28
 800252a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800252c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800252e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002532:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002536:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bcb0      	pop	{r4, r5, r7}
 8002542:	b004      	add	sp, #16
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200002c4 	.word	0x200002c4

0800254c <swer_GetOptAngle>:
Angle_Opt_Param swer_GetOptAngle(ModuleID ID){return swerParam[ID].angleOpt;}
 800254c:	b4b0      	push	{r4, r5, r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	490a      	ldr	r1, [pc, #40]	; (8002588 <swer_GetOptAngle+0x3c>)
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	4604      	mov	r4, r0
 800256a:	461d      	mov	r5, r3
 800256c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002574:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bcb0      	pop	{r4, r5, r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	200002c4 	.word	0x200002c4

0800258c <swer_GetFuncHandle>:
pVectorCalXY swer_GetFuncHandle(ModuleID ID){return *swerParam[ID].pVctXY;}
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	79fa      	ldrb	r2, [r7, #7]
 8002598:	4906      	ldr	r1, [pc, #24]	; (80025b4 <swer_GetFuncHandle+0x28>)
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3338      	adds	r3, #56	; 0x38
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	200002c4 	.word	0x200002c4

080025b8 <canctrl_RxHeaderGetModeID>:
#define TARGET_FLAG_GROUP canEvent
void canctrl_SetFlag(CAN_MODE_ID e){SETFLAG(TARGET_FLAG_GROUP,e);}
bool canctrl_CheckFlag(CAN_MODE_ID e){return CHECKFLAG(TARGET_FLAG_GROUP,e);}
void canctrl_ClearFlag(CAN_MODE_ID e){CLEARFLAG(TARGET_FLAG_GROUP,e);}
uint32_t canctrl_GetEvent(){return canEvent;}
CAN_MODE_ID canctrl_RxHeaderGetModeID(){return rxHeader.StdId & 0x0f;}
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <canctrl_RxHeaderGetModeID+0x1c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	200003d8 	.word	0x200003d8

080025d8 <canctrl_SetTargetDevice>:
void canctrl_SetTargetDevice(CAN_DEVICE_ID dev){ canctrl_SetID(dev << CAN_DEVICE_POS);}
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f86c 	bl	80026c4 <canctrl_SetID>
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <canctrl_GetRxHeader>:
CAN_RxHeaderTypeDef canctrl_GetRxHeader(){return rxHeader;}
 80025f4:	b4b0      	push	{r4, r5, r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <canctrl_GetRxHeader+0x28>)
 8002600:	461c      	mov	r4, r3
 8002602:	4615      	mov	r5, r2
 8002604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800260c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bcb0      	pop	{r4, r5, r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	200003d8 	.word	0x200003d8

08002620 <canctrl_RTR_SetToData>:
void canctrl_RTR_SetToData(){txHeader.RTR = CAN_RTR_DATA;}
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <canctrl_RTR_SetToData+0x14>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	200003c0 	.word	0x200003c0

08002638 <canctrl_RTR_TxRequest>:
void canctrl_RTR_SetToRemote(){txHeader.RTR = CAN_RTR_REMOTE;}

HAL_StatusTypeDef canctrl_RTR_TxRequest(CAN_HandleTypeDef *can, CAN_DEVICE_ID targetID, CAN_MODE_ID modeID)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
 8002644:	4613      	mov	r3, r2
 8002646:	70bb      	strb	r3, [r7, #2]
	if(!can) return HAL_ERROR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <canctrl_RTR_TxRequest+0x1a>
 800264e:	2301      	movs	r3, #1
 8002650:	e02d      	b.n	80026ae <canctrl_RTR_TxRequest+0x76>
	if(!HAL_CAN_GetTxMailboxesFreeLevel(can)) return HAL_BUSY;
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f003 fc0f 	bl	8005e76 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <canctrl_RTR_TxRequest+0x2a>
 800265e:	2302      	movs	r3, #2
 8002660:	e025      	b.n	80026ae <canctrl_RTR_TxRequest+0x76>
	HAL_StatusTypeDef err = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
	txHeader.DLC = 0;
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <canctrl_RTR_TxRequest+0x80>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
	txHeader.RTR = CAN_RTR_REMOTE;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <canctrl_RTR_TxRequest+0x80>)
 800266e:	2202      	movs	r2, #2
 8002670:	60da      	str	r2, [r3, #12]
	txHeader.StdId = modeID;
 8002672:	78bb      	ldrb	r3, [r7, #2]
 8002674:	4a10      	ldr	r2, [pc, #64]	; (80026b8 <canctrl_RTR_TxRequest+0x80>)
 8002676:	6013      	str	r3, [r2, #0]
	txHeader.IDE = CAN_ID_STD;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <canctrl_RTR_TxRequest+0x80>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
	if(targetID) canctrl_SetTargetDevice(targetID);
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <canctrl_RTR_TxRequest+0x54>
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ffa6 	bl	80025d8 <canctrl_SetTargetDevice>
	err = HAL_CAN_AddTxMessage(can, &txHeader, txData, txMailBox);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <canctrl_RTR_TxRequest+0x84>)
 800268e:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <canctrl_RTR_TxRequest+0x88>)
 8002690:	4909      	ldr	r1, [pc, #36]	; (80026b8 <canctrl_RTR_TxRequest+0x80>)
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f003 fb14 	bl	8005cc0 <HAL_CAN_AddTxMessage>
 8002698:	4603      	mov	r3, r0
 800269a:	73fb      	strb	r3, [r7, #15]
	memset(txData,0,sizeof(txData));
 800269c:	2208      	movs	r2, #8
 800269e:	2100      	movs	r1, #0
 80026a0:	4807      	ldr	r0, [pc, #28]	; (80026c0 <canctrl_RTR_TxRequest+0x88>)
 80026a2:	f00a fa36 	bl	800cb12 <memset>
	txHeader.StdId = 0;
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <canctrl_RTR_TxRequest+0x80>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
	return err;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200003c0 	.word	0x200003c0
 80026bc:	200003b4 	.word	0x200003b4
 80026c0:	200003f4 	.word	0x200003f4

080026c4 <canctrl_SetID>:

HAL_StatusTypeDef canctrl_SetID(uint32_t ID){
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	if(ID > 0x7ff) return HAL_ERROR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d2:	d301      	bcc.n	80026d8 <canctrl_SetID+0x14>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e006      	b.n	80026e6 <canctrl_SetID+0x22>
	txHeader.StdId |= ID;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <canctrl_SetID+0x30>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4313      	orrs	r3, r2
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <canctrl_SetID+0x30>)
 80026e2:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	200003c0 	.word	0x200003c0

080026f8 <canctrl_PutMessage>:


HAL_StatusTypeDef canctrl_PutMessage(void* data,size_t dataSize)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
	memset(txData,0,sizeof(txData));
 8002702:	2208      	movs	r2, #8
 8002704:	2100      	movs	r1, #0
 8002706:	4809      	ldr	r0, [pc, #36]	; (800272c <canctrl_PutMessage+0x34>)
 8002708:	f00a fa03 	bl	800cb12 <memset>
	if(dataSize <= 8) txHeader.DLC = dataSize;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d802      	bhi.n	8002718 <canctrl_PutMessage+0x20>
 8002712:	4a07      	ldr	r2, [pc, #28]	; (8002730 <canctrl_PutMessage+0x38>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6113      	str	r3, [r2, #16]
	memcpy(txData,data,sizeof(txData));
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <canctrl_PutMessage+0x34>)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6810      	ldr	r0, [r2, #0]
 800271e:	6851      	ldr	r1, [r2, #4]
 8002720:	c303      	stmia	r3!, {r0, r1}
	return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200003f4 	.word	0x200003f4
 8002730:	200003c0 	.word	0x200003c0

08002734 <canctrl_GetMessage>:

HAL_StatusTypeDef canctrl_GetMessage(void *data, size_t sizeOfDataType){
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
	if(rxHeader.DLC != sizeOfDataType) return HAL_ERROR;
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <canctrl_GetMessage+0x2c>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <canctrl_GetMessage+0x18>
 8002748:	2301      	movs	r3, #1
 800274a:	e005      	b.n	8002758 <canctrl_GetMessage+0x24>
	memcpy(data,rxData,sizeOfDataType);
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4905      	ldr	r1, [pc, #20]	; (8002764 <canctrl_GetMessage+0x30>)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f00a fabc 	bl	800ccce <memcpy>
	return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200003d8 	.word	0x200003d8
 8002764:	200003fc 	.word	0x200003fc

08002768 <canctrl_Send>:
	} else return HAL_BUSY;
}


HAL_StatusTypeDef canctrl_Send(CAN_HandleTypeDef *can, CAN_DEVICE_ID targetID)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	70fb      	strb	r3, [r7, #3]

	if(!txHeader.DLC && !can) return HAL_ERROR;
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <canctrl_Send+0x74>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <canctrl_Send+0x1e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <canctrl_Send+0x1e>
 8002782:	2301      	movs	r3, #1
 8002784:	e026      	b.n	80027d4 <canctrl_Send+0x6c>
	if(!HAL_CAN_GetTxMailboxesFreeLevel(can)) return HAL_BUSY;
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f003 fb75 	bl	8005e76 <HAL_CAN_GetTxMailboxesFreeLevel>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <canctrl_Send+0x2e>
 8002792:	2302      	movs	r3, #2
 8002794:	e01e      	b.n	80027d4 <canctrl_Send+0x6c>
	HAL_StatusTypeDef err = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
	txHeader.IDE = CAN_ID_STD;
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <canctrl_Send+0x74>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
	canctrl_RTR_SetToData();
 80027a0:	f7ff ff3e 	bl	8002620 <canctrl_RTR_SetToData>
	if(targetID) canctrl_SetTargetDevice(targetID);
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <canctrl_Send+0x4a>
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff13 	bl	80025d8 <canctrl_SetTargetDevice>
	err = HAL_CAN_AddTxMessage(can, &txHeader, txData, txMailBox);
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <canctrl_Send+0x78>)
 80027b4:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <canctrl_Send+0x7c>)
 80027b6:	4909      	ldr	r1, [pc, #36]	; (80027dc <canctrl_Send+0x74>)
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f003 fa81 	bl	8005cc0 <HAL_CAN_AddTxMessage>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]
	txHeader.StdId = 0;
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <canctrl_Send+0x74>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
	memset(txData,0,sizeof(txData));
 80027c8:	2208      	movs	r2, #8
 80027ca:	2100      	movs	r1, #0
 80027cc:	4805      	ldr	r0, [pc, #20]	; (80027e4 <canctrl_Send+0x7c>)
 80027ce:	f00a f9a0 	bl	800cb12 <memset>
	return err;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200003c0 	.word	0x200003c0
 80027e0:	200003b4 	.word	0x200003b4
 80027e4:	200003f4 	.word	0x200003f4

080027e8 <canctrl_Receive_2>:
	checkEventFromRxHeader();
	return HAL_OK;
}

CAN_MODE_ID canctrl_Receive_2(CAN_HandleTypeDef *can, uint32_t FIFO)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
	HAL_CAN_GetRxMessage(can, FIFO, &rxHeader, rxData);
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <canctrl_Receive_2+0x24>)
 80027f4:	4a06      	ldr	r2, [pc, #24]	; (8002810 <canctrl_Receive_2+0x28>)
 80027f6:	6839      	ldr	r1, [r7, #0]
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f003 fb71 	bl	8005ee0 <HAL_CAN_GetRxMessage>
	return canctrl_RxHeaderGetModeID();
 80027fe:	f7ff fedb 	bl	80025b8 <canctrl_RxHeaderGetModeID>
 8002802:	4603      	mov	r3, r0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	200003fc 	.word	0x200003fc
 8002810:	200003d8 	.word	0x200003d8

08002814 <canctrl_Filter_Mask16>:
										uint16_t lowID,
										uint16_t maskHigh,
										uint16_t maskLow,
										uint32_t filBank,
										uint32_t FIFO)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08e      	sub	sp, #56	; 0x38
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	817b      	strh	r3, [r7, #10]
 8002826:	460b      	mov	r3, r1
 8002828:	813b      	strh	r3, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
	CAN_FilterTypeDef canFilCfg;
	canFilCfg.FilterActivation = CAN_FILTER_ENABLE;
 800282e:	2301      	movs	r3, #1
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
	canFilCfg.FilterBank = filBank;
 8002832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
	canFilCfg.FilterFIFOAssignment = FIFO;
 8002836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002838:	623b      	str	r3, [r7, #32]
	canFilCfg.FilterIdLow = 		lowID;
 800283a:	893b      	ldrh	r3, [r7, #8]
 800283c:	617b      	str	r3, [r7, #20]
	canFilCfg.FilterIdHigh = 		highID;
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	613b      	str	r3, [r7, #16]
	canFilCfg.FilterMaskIdLow = 	maskLow;
 8002842:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002846:	61fb      	str	r3, [r7, #28]
	canFilCfg.FilterMaskIdHigh = 	maskHigh;
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	61bb      	str	r3, [r7, #24]
	canFilCfg.FilterMode = CAN_FILTERMODE_IDMASK;
 800284c:	2300      	movs	r3, #0
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilCfg.FilterScale = CAN_FILTERSCALE_16BIT;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
	canFilCfg.SlaveStartFilterBank = 13;
 8002854:	230d      	movs	r3, #13
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
	return HAL_CAN_ConfigFilter(can, &canFilCfg);
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4619      	mov	r1, r3
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f003 f90a 	bl	8005a78 <HAL_CAN_ConfigFilter>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3738      	adds	r7, #56	; 0x38
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <canfunc_MotorPutSpeedAndAngle>:
	if(canctrl_GetMessage(&encBLDC,sizeof(encBLDC))!= HAL_OK) while(1);
	return encBLDC;
}

void canfunc_MotorPutSpeedAndAngle(CAN_SpeedBLDC_AngleDC speedAngle)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	463b      	mov	r3, r7
 8002876:	e883 0003 	stmia.w	r3, {r0, r1}
	canctrl_SetID(CANCTRL_MODE_MOTOR_SPEED_ANGLE);
 800287a:	2002      	movs	r0, #2
 800287c:	f7ff ff22 	bl	80026c4 <canctrl_SetID>
	canctrl_PutMessage((void*)&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC));
 8002880:	463b      	mov	r3, r7
 8002882:	2108      	movs	r1, #8
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff37 	bl	80026f8 <canctrl_PutMessage>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <canfunc_MotorGetSpeedAndAngle>:

CAN_SpeedBLDC_AngleDC canfunc_MotorGetSpeedAndAngle()
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	CAN_SpeedBLDC_AngleDC speedAngle;
	if(canctrl_GetMessage(&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC)) != HAL_OK) while(1);
 800289a:	f107 0308 	add.w	r3, r7, #8
 800289e:	2108      	movs	r1, #8
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff47 	bl	8002734 <canctrl_GetMessage>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d000      	beq.n	80028ae <canfunc_MotorGetSpeedAndAngle+0x1c>
 80028ac:	e7fe      	b.n	80028ac <canfunc_MotorGetSpeedAndAngle+0x1a>
	return speedAngle;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	461a      	mov	r2, r3
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <GamepPadHandle>:
 *  Created on: Oct 24, 2023
 *      Author: Admin
 */
#include"Gamepad.h"

void GamepPadHandle(_GamePad *pad,uint8_t *DataTayGame){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
	pad->Status = 1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]

	pad->XLeft = DataTayGame[1];
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	785a      	ldrb	r2, [r3, #1]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	705a      	strb	r2, [r3, #1]
	pad->YLeft = DataTayGame[2];
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	789a      	ldrb	r2, [r3, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	709a      	strb	r2, [r3, #2]

	pad->XRight = DataTayGame[3];
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	78da      	ldrb	r2, [r3, #3]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	70da      	strb	r2, [r3, #3]
	pad->YRight = DataTayGame[4];
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	791a      	ldrb	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	711a      	strb	r2, [r3, #4]

	pad->Left = (DataTayGame[5] >> 7) & 1;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	3305      	adds	r3, #5
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	09db      	lsrs	r3, r3, #7
 8002900:	b2da      	uxtb	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	715a      	strb	r2, [r3, #5]
	pad->Up = (DataTayGame[5] >> 6) & 1;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	3305      	adds	r3, #5
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	b2da      	uxtb	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	719a      	strb	r2, [r3, #6]
	pad->Right = (DataTayGame[5] >> 5) & 1;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	3305      	adds	r3, #5
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	b2da      	uxtb	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	71da      	strb	r2, [r3, #7]
	pad->Down = (DataTayGame[5] >> 4) & 1;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	3305      	adds	r3, #5
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	721a      	strb	r2, [r3, #8]

	pad->Square = (DataTayGame[5] >> 3) & 1;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3305      	adds	r3, #5
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	08db      	lsrs	r3, r3, #3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	725a      	strb	r2, [r3, #9]
	pad->Triangle = (DataTayGame[5] >> 2) & 1;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	3305      	adds	r3, #5
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	b2da      	uxtb	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	729a      	strb	r2, [r3, #10]
	pad->Circle = (DataTayGame[5] >> 1) & 1;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	3305      	adds	r3, #5
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	72da      	strb	r2, [r3, #11]
	pad->Cross = DataTayGame[5] & 1;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	3305      	adds	r3, #5
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	731a      	strb	r2, [r3, #12]

	pad->L1 = (DataTayGame[6] >> 7) & 1;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	3306      	adds	r3, #6
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	09db      	lsrs	r3, r3, #7
 8002996:	b2da      	uxtb	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	735a      	strb	r2, [r3, #13]
	pad->L2 = (DataTayGame[6] >> 6) & 1;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	3306      	adds	r3, #6
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	099b      	lsrs	r3, r3, #6
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	739a      	strb	r2, [r3, #14]
	pad->R1 = (DataTayGame[6] >> 5) & 1;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	3306      	adds	r3, #6
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	741a      	strb	r2, [r3, #16]
	pad->R2 = (DataTayGame[6] >> 4) & 1;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	3306      	adds	r3, #6
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	745a      	strb	r2, [r3, #17]

	pad->Touch = (DataTayGame[6] >> 3) & 1;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	3306      	adds	r3, #6
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	08db      	lsrs	r3, r3, #3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	74da      	strb	r2, [r3, #19]
	pad->Charge = (DataTayGame[6] >> 2) & 1;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	3306      	adds	r3, #6
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	751a      	strb	r2, [r3, #20]

	pad->L3 = (DataTayGame[6] >> 1) & 1;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	3306      	adds	r3, #6
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	73da      	strb	r2, [r3, #15]
	pad->R3 = DataTayGame[6] & 1;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	3306      	adds	r3, #6
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	749a      	strb	r2, [r3, #18]

	pad->Battery = DataTayGame[7];
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	79da      	ldrb	r2, [r3, #7]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	755a      	strb	r2, [r3, #21]

	pad->XLeftCtr = ((pad->XLeft-125))*0.5/125;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	3b7d      	subs	r3, #125	; 0x7d
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fd76 	bl	8000524 <__aeabi_i2d>
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <GamepPadHandle+0x294>)
 8002a3e:	f7fd fddb 	bl	80005f8 <__aeabi_dmul>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	4b44      	ldr	r3, [pc, #272]	; (8002b60 <GamepPadHandle+0x298>)
 8002a50:	f7fd fefc 	bl	800084c <__aeabi_ddiv>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7fe f8a4 	bl	8000ba8 <__aeabi_d2f>
 8002a60:	4602      	mov	r2, r0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	619a      	str	r2, [r3, #24]
	pad->YLeftCtr = ((pad->YLeft-125))*0.5/125;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	789b      	ldrb	r3, [r3, #2]
 8002a6a:	3b7d      	subs	r3, #125	; 0x7d
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd59 	bl	8000524 <__aeabi_i2d>
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <GamepPadHandle+0x294>)
 8002a78:	f7fd fdbe 	bl	80005f8 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <GamepPadHandle+0x298>)
 8002a8a:	f7fd fedf 	bl	800084c <__aeabi_ddiv>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fe f887 	bl	8000ba8 <__aeabi_d2f>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	61da      	str	r2, [r3, #28]
	pad->XRightCtr =(((pad->XRight-125))*1/125);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	78db      	ldrb	r3, [r3, #3]
 8002aa4:	3b7d      	subs	r3, #125	; 0x7d
 8002aa6:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <GamepPadHandle+0x29c>)
 8002aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8002aac:	10d2      	asrs	r2, r2, #3
 8002aae:	17db      	asrs	r3, r3, #31
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	edc3 7a08 	vstr	s15, [r3, #32]

	if ((pad->XLeftCtr > -20)&&(pad->XLeftCtr < 20))pad->XLeftCtr = 0;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ac6:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8002aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	dd0d      	ble.n	8002af0 <GamepPadHandle+0x228>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ada:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	d503      	bpl.n	8002af0 <GamepPadHandle+0x228>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
	if ((pad->YLeftCtr > -20)&&(pad->YLeftCtr < 20))pad->YLeftCtr = 0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002af6:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8002afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b02:	dd0d      	ble.n	8002b20 <GamepPadHandle+0x258>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b0a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b16:	d503      	bpl.n	8002b20 <GamepPadHandle+0x258>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	61da      	str	r2, [r3, #28]
	if ((pad->XRightCtr > -20)&&(pad->XRightCtr < 20))pad->XRightCtr = 0;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b26:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8002b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	dc00      	bgt.n	8002b36 <GamepPadHandle+0x26e>
}
 8002b34:	e00e      	b.n	8002b54 <GamepPadHandle+0x28c>
	if ((pad->XRightCtr > -20)&&(pad->XRightCtr < 20))pad->XRightCtr = 0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b3c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b48:	d400      	bmi.n	8002b4c <GamepPadHandle+0x284>
}
 8002b4a:	e003      	b.n	8002b54 <GamepPadHandle+0x28c>
	if ((pad->XRightCtr > -20)&&(pad->XRightCtr < 20))pad->XRightCtr = 0;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	621a      	str	r2, [r3, #32]
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	3fe00000 	.word	0x3fe00000
 8002b60:	405f4000 	.word	0x405f4000
 8002b64:	10624dd3 	.word	0x10624dd3

08002b68 <checkNull>:
#include "LogData.h"

char txLogBuffer[150] = {0};
UART_HandleTypeDef *targetUART;

static HAL_StatusTypeDef checkNull(){
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
	if(targetUART != NULL) return HAL_OK;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <checkNull+0x1c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <checkNull+0x10>
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <checkNull+0x12>
	return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	2000049c 	.word	0x2000049c

08002b88 <log_Init>:

void log_Init(UART_HandleTypeDef *huart){
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

	targetUART = huart;
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <log_Init+0x1c>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6013      	str	r3, [r2, #0]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	2000049c 	.word	0x2000049c

08002ba8 <log_TransmitCompleteHandle>:

void log_TransmitCompleteHandle(UART_HandleTypeDef *huart){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	if(huart != targetUART) return;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <log_TransmitCompleteHandle+0x30>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d109      	bne.n	8002bce <log_TransmitCompleteHandle+0x26>
	memset(txLogBuffer,0,strlen(txLogBuffer));
 8002bba:	4808      	ldr	r0, [pc, #32]	; (8002bdc <log_TransmitCompleteHandle+0x34>)
 8002bbc:	f7fd fb58 	bl	8000270 <strlen>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4805      	ldr	r0, [pc, #20]	; (8002bdc <log_TransmitCompleteHandle+0x34>)
 8002bc8:	f009 ffa3 	bl	800cb12 <memset>
 8002bcc:	e000      	b.n	8002bd0 <log_TransmitCompleteHandle+0x28>
	if(huart != targetUART) return;
 8002bce:	bf00      	nop

}
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000049c 	.word	0x2000049c
 8002bdc:	20000404 	.word	0x20000404

08002be0 <log_SendString>:

void log_SendString(){
 8002be0:	b598      	push	{r3, r4, r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	if(checkNull() != HAL_OK) return;
 8002be4:	f7ff ffc0 	bl	8002b68 <checkNull>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d114      	bne.n	8002c18 <log_SendString+0x38>
	txLogBuffer[strlen(txLogBuffer) -1] = '\n';  //xóa dấu phẩy cuối cùng, thay bằng \n
 8002bee:	480b      	ldr	r0, [pc, #44]	; (8002c1c <log_SendString+0x3c>)
 8002bf0:	f7fd fb3e 	bl	8000270 <strlen>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <log_SendString+0x3c>)
 8002bfa:	210a      	movs	r1, #10
 8002bfc:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_IT(targetUART, (uint8_t*)txLogBuffer, strlen(txLogBuffer));
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <log_SendString+0x40>)
 8002c00:	681c      	ldr	r4, [r3, #0]
 8002c02:	4806      	ldr	r0, [pc, #24]	; (8002c1c <log_SendString+0x3c>)
 8002c04:	f7fd fb34 	bl	8000270 <strlen>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4903      	ldr	r1, [pc, #12]	; (8002c1c <log_SendString+0x3c>)
 8002c10:	4620      	mov	r0, r4
 8002c12:	f006 faaa 	bl	800916a <HAL_UART_Transmit_IT>
 8002c16:	e000      	b.n	8002c1a <log_SendString+0x3a>
	if(checkNull() != HAL_OK) return;
 8002c18:	bf00      	nop
}
 8002c1a:	bd98      	pop	{r3, r4, r7, pc}
 8002c1c:	20000404 	.word	0x20000404
 8002c20:	2000049c 	.word	0x2000049c

08002c24 <log_AddHeaderArgumentToBuffer>:


void log_AddHeaderArgumentToBuffer(char *name){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	char s[10] = {0};
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	809a      	strh	r2, [r3, #4]
	strcpy(s,name);
 8002c3a:	f107 030c 	add.w	r3, r7, #12
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f00a f83c 	bl	800ccbe <strcpy>
	sprintf(txLogBuffer+strlen(txLogBuffer),"%s,",s);
 8002c46:	4808      	ldr	r0, [pc, #32]	; (8002c68 <log_AddHeaderArgumentToBuffer+0x44>)
 8002c48:	f7fd fb12 	bl	8000270 <strlen>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <log_AddHeaderArgumentToBuffer+0x44>)
 8002c50:	4413      	add	r3, r2
 8002c52:	f107 020c 	add.w	r2, r7, #12
 8002c56:	4905      	ldr	r1, [pc, #20]	; (8002c6c <log_AddHeaderArgumentToBuffer+0x48>)
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f009 fef7 	bl	800ca4c <siprintf>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000404 	.word	0x20000404
 8002c6c:	080111a0 	.word	0x080111a0

08002c70 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <vApplicationGetIdleTaskMemory+0x2c>)
 8002c80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a06      	ldr	r2, [pc, #24]	; (8002ca0 <vApplicationGetIdleTaskMemory+0x30>)
 8002c86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2240      	movs	r2, #64	; 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	200004a0 	.word	0x200004a0
 8002ca0:	20000540 	.word	0x20000540

08002ca4 <nodeHome_SetFlag>:
}


uint32_t nodeSwerveSetHomeComplete = 0;
#define SETHOME_FLAG_GROUP nodeSwerveSetHomeComplete
void nodeHome_SetFlag(CAN_DEVICE_ID e) {
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
	SETFLAG(SETHOME_FLAG_GROUP, e);
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <nodeHome_SetFlag+0x28>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <nodeHome_SetFlag+0x28>)
 8002cbc:	6013      	str	r3, [r2, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20001184 	.word	0x20001184

08002cd0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*=============================== CAN ===============================*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002cd8:	2102      	movs	r1, #2
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f003 fa38 	bl	8006150 <HAL_CAN_DeactivateNotification>
	CAN_MODE_ID modeID = canctrl_Receive_2(hcan, CAN_RX_FIFO0);
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff fd80 	bl	80027e8 <canctrl_Receive_2>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	73fb      	strb	r3, [r7, #15]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskCANHandle, modeID, eSetValueWithOverwrite, &HigherPriorityTaskWoken);
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	7bf9      	ldrb	r1, [r7, #15]
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2203      	movs	r2, #3
 8002d00:	f008 fbf8 	bl	800b4f4 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	f3bf 8f6f 	isb	sy
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000e94 	.word	0x20000e94
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8002d34:	2110      	movs	r1, #16
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f003 fa0a 	bl	8006150 <HAL_CAN_DeactivateNotification>
	CAN_MODE_ID modeID = canctrl_Receive_2(hcan, CAN_RX_FIFO1);
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fd52 	bl	80027e8 <canctrl_Receive_2>
 8002d44:	4603      	mov	r3, r0
 8002d46:	73fb      	strb	r3, [r7, #15]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskCANHandle, modeID, eSetValueWithOverwrite, &HigherPriorityTaskWoken);
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	7bf9      	ldrb	r1, [r7, #15]
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	f008 fbca 	bl	800b4f4 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <HAL_CAN_RxFifo1MsgPendingCallback+0x4a>
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8002d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	f3bf 8f6f 	isb	sy
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000e94 	.word	0x20000e94
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <CAN_Init>:
void CAN_Init() {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af04      	add	r7, sp, #16
	HAL_CAN_Start(&hcan1);
 8002d8e:	480b      	ldr	r0, [pc, #44]	; (8002dbc <CAN_Init+0x34>)
 8002d90:	f002 ff52 	bl	8005c38 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 8002d94:	2112      	movs	r1, #18
 8002d96:	4809      	ldr	r0, [pc, #36]	; (8002dbc <CAN_Init+0x34>)
 8002d98:	f003 f9b4 	bl	8006104 <HAL_CAN_ActivateNotification>
	canctrl_Filter_Mask16(&hcan1,
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	9302      	str	r3, [sp, #8]
 8002da0:	2300      	movs	r3, #0
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	2360      	movs	r3, #96	; 0x60
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2320      	movs	r3, #32
 8002daa:	2260      	movs	r2, #96	; 0x60
 8002dac:	2120      	movs	r1, #32
 8002dae:	4803      	ldr	r0, [pc, #12]	; (8002dbc <CAN_Init+0x34>)
 8002db0:	f7ff fd30 	bl	8002814 <canctrl_Filter_Mask16>
			CANCTRL_MODE_NODE_REQ_SPEED_ANGLE << 5,
			CANCTRL_MODE_SET_HOME << 5,
			CANCTRL_MODE_NODE_REQ_SPEED_ANGLE << 5,
			0,
			CAN_RX_FIFO0);
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000688 	.word	0x20000688

08002dc0 <setHomeComplete>:

void setHomeComplete()
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0

}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <handleFunctionCAN>:

void handleFunctionCAN(CAN_MODE_ID mode, CAN_DEVICE_ID targetID) {
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	460a      	mov	r2, r1
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	73bb      	strb	r3, [r7, #14]
	switch (mode) {
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d002      	beq.n	8002dec <handleFunctionCAN+0x1c>
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d00b      	beq.n	8002e02 <handleFunctionCAN+0x32>
		case CANCTRL_MODE_NODE_REQ_SPEED_ANGLE:
			nodeSpeedAngle[targetID - 1] = canfunc_MotorGetSpeedAndAngle();
//			flagmain_ClearFlag(MEVT_GET_NODE_SPEED_ANGLE);
		break;
		default:
			break;
 8002dea:	e01a      	b.n	8002e22 <handleFunctionCAN+0x52>
			nodeHome_SetFlag(targetID);
 8002dec:	7bbb      	ldrb	r3, [r7, #14]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff58 	bl	8002ca4 <nodeHome_SetFlag>
			if(nodeSwerveSetHomeComplete == 30)
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <handleFunctionCAN+0x5c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b1e      	cmp	r3, #30
 8002dfa:	d111      	bne.n	8002e20 <handleFunctionCAN+0x50>
				setHomeComplete();
 8002dfc:	f7ff ffe0 	bl	8002dc0 <setHomeComplete>
		break;
 8002e00:	e00e      	b.n	8002e20 <handleFunctionCAN+0x50>
			nodeSpeedAngle[targetID - 1] = canfunc_MotorGetSpeedAndAngle();
 8002e02:	7bbb      	ldrb	r3, [r7, #14]
 8002e04:	1e5c      	subs	r4, r3, #1
 8002e06:	4d0a      	ldr	r5, [pc, #40]	; (8002e30 <handleFunctionCAN+0x60>)
 8002e08:	463b      	mov	r3, r7
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fd41 	bl	8002892 <canfunc_MotorGetSpeedAndAngle>
 8002e10:	00e3      	lsls	r3, r4, #3
 8002e12:	442b      	add	r3, r5
 8002e14:	463a      	mov	r2, r7
 8002e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e1a:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8002e1e:	e000      	b.n	8002e22 <handleFunctionCAN+0x52>
		break;
 8002e20:	bf00      	nop
	}

}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20001184 	.word	0x20001184
 8002e30:	20001188 	.word	0x20001188

08002e34 <HAL_UART_RxCpltCallback>:
/*=============================== UART ===============================*/


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a26      	ldr	r2, [pc, #152]	; (8002edc <HAL_UART_RxCpltCallback+0xa8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d145      	bne.n	8002ed2 <HAL_UART_RxCpltCallback+0x9e>
		gamepadRxIsBusy = 1;
 8002e46:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <HAL_UART_RxCpltCallback+0xac>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
		int ViTriData = -1;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e50:	617b      	str	r3, [r7, #20]
		for (int i = 0; i <= 8; ++i) {
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	e00a      	b.n	8002e6e <HAL_UART_RxCpltCallback+0x3a>
			if (UARTRX3_Buffer[i] == 0xAA) {
 8002e58:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <HAL_UART_RxCpltCallback+0xb0>)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2baa      	cmp	r3, #170	; 0xaa
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_RxCpltCallback+0x34>
				ViTriData = i;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	617b      	str	r3, [r7, #20]
		for (int i = 0; i <= 8; ++i) {
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	ddf1      	ble.n	8002e58 <HAL_UART_RxCpltCallback+0x24>
			}
		}
		if (ViTriData != -1) {
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d01e      	beq.n	8002eba <HAL_UART_RxCpltCallback+0x86>
			int cnt = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
			while (cnt < 9) {
 8002e80:	e013      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x76>
				DataTayGame[cnt] = UARTRX3_Buffer[ViTriData];
 8002e82:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <HAL_UART_RxCpltCallback+0xb0>)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	4413      	add	r3, r2
 8002e88:	7819      	ldrb	r1, [r3, #0]
 8002e8a:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <HAL_UART_RxCpltCallback+0xb4>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	460a      	mov	r2, r1
 8002e92:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	3301      	adds	r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
				if (ViTriData >= 9) {
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	dd01      	ble.n	8002ea4 <HAL_UART_RxCpltCallback+0x70>
					ViTriData = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]
			while (cnt < 9) {
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	dde8      	ble.n	8002e82 <HAL_UART_RxCpltCallback+0x4e>
			}

			GamepPadHandle(&GamePad, DataTayGame);
 8002eb0:	490d      	ldr	r1, [pc, #52]	; (8002ee8 <HAL_UART_RxCpltCallback+0xb4>)
 8002eb2:	480e      	ldr	r0, [pc, #56]	; (8002eec <HAL_UART_RxCpltCallback+0xb8>)
 8002eb4:	f7ff fd08 	bl	80028c8 <GamepPadHandle>
 8002eb8:	e002      	b.n	8002ec0 <HAL_UART_RxCpltCallback+0x8c>

		} else {
			GamePad.Status = 0;
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_UART_RxCpltCallback+0xb8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
		}
		if (!gamepadRxIsBusy)
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_UART_RxCpltCallback+0xac>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <HAL_UART_RxCpltCallback+0x9e>
			HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8002ec8:	2209      	movs	r2, #9
 8002eca:	4906      	ldr	r1, [pc, #24]	; (8002ee4 <HAL_UART_RxCpltCallback+0xb0>)
 8002ecc:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <HAL_UART_RxCpltCallback+0xbc>)
 8002ece:	f006 f991 	bl	80091f4 <HAL_UART_Receive_IT>

	}
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40004800 	.word	0x40004800
 8002ee0:	200011dc 	.word	0x200011dc
 8002ee4:	200011a0 	.word	0x200011a0
 8002ee8:	200011ac 	.word	0x200011ac
 8002eec:	200011b8 	.word	0x200011b8
 8002ef0:	200008e8 	.word	0x200008e8

08002ef4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	while (1);
 8002efc:	e7fe      	b.n	8002efc <HAL_CAN_ErrorCallback+0x8>
	...

08002f00 <HAL_UART_ErrorCallback>:
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
	memset(UARTRX3_Buffer, 0, sizeof(UARTRX3_Buffer));
 8002f1e:	2209      	movs	r2, #9
 8002f20:	2100      	movs	r1, #0
 8002f22:	480a      	ldr	r0, [pc, #40]	; (8002f4c <HAL_UART_ErrorCallback+0x4c>)
 8002f24:	f009 fdf5 	bl	800cb12 <memset>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8002f28:	2209      	movs	r2, #9
 8002f2a:	4908      	ldr	r1, [pc, #32]	; (8002f4c <HAL_UART_ErrorCallback+0x4c>)
 8002f2c:	4808      	ldr	r0, [pc, #32]	; (8002f50 <HAL_UART_ErrorCallback+0x50>)
 8002f2e:	f006 f961 	bl	80091f4 <HAL_UART_Receive_IT>
	__HAL_UART_DISABLE(huart);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f40:	60da      	str	r2, [r3, #12]
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200011a0 	.word	0x200011a0
 8002f50:	200008e8 	.word	0x200008e8

08002f54 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	log_TransmitCompleteHandle(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fe23 	bl	8002ba8 <log_TransmitCompleteHandle>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <Send_Data>:

void Send_Data(){
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	af00      	add	r7, sp, #0

	log_SendString();
 8002f6e:	f7ff fe37 	bl	8002be0 <log_SendString>
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <Send_Header>:

void Send_Header(){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
	log_AddHeaderArgumentToBuffer("PoseX");
 8002f7c:	480a      	ldr	r0, [pc, #40]	; (8002fa8 <Send_Header+0x30>)
 8002f7e:	f7ff fe51 	bl	8002c24 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("PoseY");
 8002f82:	480a      	ldr	r0, [pc, #40]	; (8002fac <Send_Header+0x34>)
 8002f84:	f7ff fe4e 	bl	8002c24 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("PoseTheta");
 8002f88:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <Send_Header+0x38>)
 8002f8a:	f7ff fe4b 	bl	8002c24 <log_AddHeaderArgumentToBuffer>

	log_AddHeaderArgumentToBuffer("TrajecPlanX");
 8002f8e:	4809      	ldr	r0, [pc, #36]	; (8002fb4 <Send_Header+0x3c>)
 8002f90:	f7ff fe48 	bl	8002c24 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("TrajecPlanY");
 8002f94:	4808      	ldr	r0, [pc, #32]	; (8002fb8 <Send_Header+0x40>)
 8002f96:	f7ff fe45 	bl	8002c24 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("TrajecPlanTheta");
 8002f9a:	4808      	ldr	r0, [pc, #32]	; (8002fbc <Send_Header+0x44>)
 8002f9c:	f7ff fe42 	bl	8002c24 <log_AddHeaderArgumentToBuffer>

	log_SendString();
 8002fa0:	f7ff fe1e 	bl	8002be0 <log_SendString>
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	080111bc 	.word	0x080111bc
 8002fac:	080111c4 	.word	0x080111c4
 8002fb0:	080111cc 	.word	0x080111cc
 8002fb4:	080111d8 	.word	0x080111d8
 8002fb8:	080111e4 	.word	0x080111e4
 8002fbc:	080111f0 	.word	0x080111f0

08002fc0 <Get_MPU_Angle>:

///////////////////////////MPU//////////////////////////
#define DELTA_T 0.05
void Get_MPU_Angle()
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
    send_mpu ='z';
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <Get_MPU_Angle+0x44>)
 8002fc6:	227a      	movs	r2, #122	; 0x7a
 8002fc8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1,&send_mpu,1,1);
 8002fca:	2301      	movs	r3, #1
 8002fcc:	2201      	movs	r2, #1
 8002fce:	490d      	ldr	r1, [pc, #52]	; (8003004 <Get_MPU_Angle+0x44>)
 8002fd0:	480d      	ldr	r0, [pc, #52]	; (8003008 <Get_MPU_Angle+0x48>)
 8002fd2:	f006 f838 	bl	8009046 <HAL_UART_Transmit>
    angle=mpu[0]<<8|mpu[1];
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <Get_MPU_Angle+0x4c>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	b21a      	sxth	r2, r3
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <Get_MPU_Angle+0x4c>)
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	b21b      	sxth	r3, r3
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <Get_MPU_Angle+0x50>)
 8002fea:	801a      	strh	r2, [r3, #0]
    a_Now=angle;
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <Get_MPU_Angle+0x50>)
 8002fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <Get_MPU_Angle+0x54>)
 8002ffc:	edc3 7a00 	vstr	s15, [r3]
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	200011fa 	.word	0x200011fa
 8003008:	20000860 	.word	0x20000860
 800300c:	200011f0 	.word	0x200011f0
 8003010:	200011fc 	.word	0x200011fc
 8003014:	20001200 	.word	0x20001200

08003018 <Reset_MPU_Angle>:

void Reset_MPU_Angle()
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
    send_mpu ='a';
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <Reset_MPU_Angle+0x1c>)
 800301e:	2261      	movs	r2, #97	; 0x61
 8003020:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1,&send_mpu,1,1);
 8003022:	2301      	movs	r3, #1
 8003024:	2201      	movs	r2, #1
 8003026:	4903      	ldr	r1, [pc, #12]	; (8003034 <Reset_MPU_Angle+0x1c>)
 8003028:	4803      	ldr	r0, [pc, #12]	; (8003038 <Reset_MPU_Angle+0x20>)
 800302a:	f006 f80c 	bl	8009046 <HAL_UART_Transmit>

}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200011fa 	.word	0x200011fa
 8003038:	20000860 	.word	0x20000860

0800303c <process_Init>:
/////////////////////Process///////////////////
void process_Init()
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
	////////PID/////////
	pid_Angle.kP = 2;
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <process_Init+0x50>)
 8003042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003046:	60da      	str	r2, [r3, #12]
	pid_Angle.kI = 0;
 8003048:	4b10      	ldr	r3, [pc, #64]	; (800308c <process_Init+0x50>)
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	615a      	str	r2, [r3, #20]
	pid_Angle.kD = 0;
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <process_Init+0x50>)
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	621a      	str	r2, [r3, #32]
	pid_Angle.alpha = 0;
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <process_Init+0x50>)
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
	pid_Angle.deltaT = DELTA_T;
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <process_Init+0x50>)
 8003062:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <process_Init+0x54>)
 8003064:	609a      	str	r2, [r3, #8]
	pid_Angle.u_AboveLimit = 5;
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <process_Init+0x50>)
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <process_Init+0x58>)
 800306a:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_Angle.u_BelowLimit = -5;
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <process_Init+0x50>)
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <process_Init+0x5c>)
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
	pid_Angle.kB = 1/DELTA_T;
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <process_Init+0x50>)
 8003074:	4a09      	ldr	r2, [pc, #36]	; (800309c <process_Init+0x60>)
 8003076:	61da      	str	r2, [r3, #28]

	encoder_Init(&FloatingEnc, &htim1, 200, DELTA_T);
 8003078:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80030a0 <process_Init+0x64>
 800307c:	22c8      	movs	r2, #200	; 0xc8
 800307e:	4909      	ldr	r1, [pc, #36]	; (80030a4 <process_Init+0x68>)
 8003080:	4809      	ldr	r0, [pc, #36]	; (80030a8 <process_Init+0x6c>)
 8003082:	f7fd ffe1 	bl	8001048 <encoder_Init>
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20001208 	.word	0x20001208
 8003090:	3d4ccccd 	.word	0x3d4ccccd
 8003094:	40a00000 	.word	0x40a00000
 8003098:	c0a00000 	.word	0xc0a00000
 800309c:	41a00000 	.word	0x41a00000
 80030a0:	3d4ccccd 	.word	0x3d4ccccd
 80030a4:	200006b0 	.word	0x200006b0
 80030a8:	2000125c 	.word	0x2000125c
 80030ac:	00000000 	.word	0x00000000

080030b0 <process_Accel_FloatingEnc>:

void process_Accel_FloatingEnc(float Angle,float maxSpeed,float s,float accel,float TargetAngle,float accelAngle)
{
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80030ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80030be:	ed87 1a03 	vstr	s2, [r7, #12]
 80030c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80030c6:	ed87 2a01 	vstr	s4, [r7, #4]
 80030ca:	edc7 2a00 	vstr	s5, [r7]
	if (TargetAngle != PreTargetAngle)
 80030ce:	4ba0      	ldr	r3, [pc, #640]	; (8003350 <process_Accel_FloatingEnc+0x2a0>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80030d8:	eeb4 7a67 	vcmp.f32	s14, s15
 80030dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e0:	d019      	beq.n	8003116 <process_Accel_FloatingEnc+0x66>
	{
		if (TargetAngle > PreTargetAngle)
 80030e2:	4b9b      	ldr	r3, [pc, #620]	; (8003350 <process_Accel_FloatingEnc+0x2a0>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80030ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	dd02      	ble.n	80030fc <process_Accel_FloatingEnc+0x4c>
		{
			angle_Accel_Flag = 0;
 80030f6:	4b97      	ldr	r3, [pc, #604]	; (8003354 <process_Accel_FloatingEnc+0x2a4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
		}
		if (TargetAngle < PreTargetAngle)
 80030fc:	4b94      	ldr	r3, [pc, #592]	; (8003350 <process_Accel_FloatingEnc+0x2a0>)
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	ed97 7a01 	vldr	s14, [r7, #4]
 8003106:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	d502      	bpl.n	8003116 <process_Accel_FloatingEnc+0x66>
		{
			angle_Accel_Flag = 1;
 8003110:	4b90      	ldr	r3, [pc, #576]	; (8003354 <process_Accel_FloatingEnc+0x2a4>)
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
		}
	}

	if (angle_Accel_Flag == 0)
 8003116:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <process_Accel_FloatingEnc+0x2a4>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d117      	bne.n	800314e <process_Accel_FloatingEnc+0x9e>
	{
		TargetTheta_Degree += accelAngle;
 800311e:	4b8e      	ldr	r3, [pc, #568]	; (8003358 <process_Accel_FloatingEnc+0x2a8>)
 8003120:	ed93 7a00 	vldr	s14, [r3]
 8003124:	edd7 7a00 	vldr	s15, [r7]
 8003128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312c:	4b8a      	ldr	r3, [pc, #552]	; (8003358 <process_Accel_FloatingEnc+0x2a8>)
 800312e:	edc3 7a00 	vstr	s15, [r3]
		if (TargetTheta_Degree>TargetAngle)TargetTheta_Degree = TargetAngle;
 8003132:	4b89      	ldr	r3, [pc, #548]	; (8003358 <process_Accel_FloatingEnc+0x2a8>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ed97 7a01 	vldr	s14, [r7, #4]
 800313c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003144:	d51a      	bpl.n	800317c <process_Accel_FloatingEnc+0xcc>
 8003146:	4a84      	ldr	r2, [pc, #528]	; (8003358 <process_Accel_FloatingEnc+0x2a8>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e016      	b.n	800317c <process_Accel_FloatingEnc+0xcc>
	}else{
		TargetTheta_Degree -= accelAngle;
 800314e:	4b82      	ldr	r3, [pc, #520]	; (8003358 <process_Accel_FloatingEnc+0x2a8>)
 8003150:	ed93 7a00 	vldr	s14, [r3]
 8003154:	edd7 7a00 	vldr	s15, [r7]
 8003158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315c:	4b7e      	ldr	r3, [pc, #504]	; (8003358 <process_Accel_FloatingEnc+0x2a8>)
 800315e:	edc3 7a00 	vstr	s15, [r3]
		if (TargetTheta_Degree<TargetAngle)TargetTheta_Degree = TargetAngle;
 8003162:	4b7d      	ldr	r3, [pc, #500]	; (8003358 <process_Accel_FloatingEnc+0x2a8>)
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	ed97 7a01 	vldr	s14, [r7, #4]
 800316c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	dd02      	ble.n	800317c <process_Accel_FloatingEnc+0xcc>
 8003176:	4a78      	ldr	r2, [pc, #480]	; (8003358 <process_Accel_FloatingEnc+0x2a8>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6013      	str	r3, [r2, #0]
	}

	PreTargetAngle = TargetAngle;
 800317c:	4a74      	ldr	r2, [pc, #464]	; (8003350 <process_Accel_FloatingEnc+0x2a0>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]
	TargetTheta = TargetTheta_Degree*M_PI/180;
 8003182:	4b75      	ldr	r3, [pc, #468]	; (8003358 <process_Accel_FloatingEnc+0x2a8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f9de 	bl	8000548 <__aeabi_f2d>
 800318c:	a36e      	add	r3, pc, #440	; (adr r3, 8003348 <process_Accel_FloatingEnc+0x298>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd fa31 	bl	80005f8 <__aeabi_dmul>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	4b6e      	ldr	r3, [pc, #440]	; (800335c <process_Accel_FloatingEnc+0x2ac>)
 80031a4:	f7fd fb52 	bl	800084c <__aeabi_ddiv>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7fd fcfa 	bl	8000ba8 <__aeabi_d2f>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4a6a      	ldr	r2, [pc, #424]	; (8003360 <process_Accel_FloatingEnc+0x2b0>)
 80031b8:	6013      	str	r3, [r2, #0]
	if ((floatingEncCount < 500)&&(chasis_Vector_TargetSpeed<maxSpeed))
 80031ba:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <process_Accel_FloatingEnc+0x2b4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031c2:	da13      	bge.n	80031ec <process_Accel_FloatingEnc+0x13c>
 80031c4:	4b68      	ldr	r3, [pc, #416]	; (8003368 <process_Accel_FloatingEnc+0x2b8>)
 80031c6:	edd3 7a00 	vldr	s15, [r3]
 80031ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80031ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	dd09      	ble.n	80031ec <process_Accel_FloatingEnc+0x13c>
	{
		chasis_Vector_TargetSpeed += accel;
 80031d8:	4b63      	ldr	r3, [pc, #396]	; (8003368 <process_Accel_FloatingEnc+0x2b8>)
 80031da:	ed93 7a00 	vldr	s14, [r3]
 80031de:	edd7 7a02 	vldr	s15, [r7, #8]
 80031e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e6:	4b60      	ldr	r3, [pc, #384]	; (8003368 <process_Accel_FloatingEnc+0x2b8>)
 80031e8:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((floatingEncCount > 500)&&(floatingEncCount < (s - 500)))
 80031ec:	4b5d      	ldr	r3, [pc, #372]	; (8003364 <process_Accel_FloatingEnc+0x2b4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031f4:	dd19      	ble.n	800322a <process_Accel_FloatingEnc+0x17a>
 80031f6:	4b5b      	ldr	r3, [pc, #364]	; (8003364 <process_Accel_FloatingEnc+0x2b4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003202:	edd7 7a03 	vldr	s15, [r7, #12]
 8003206:	eddf 6a59 	vldr	s13, [pc, #356]	; 800336c <process_Accel_FloatingEnc+0x2bc>
 800320a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800320e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003216:	d508      	bpl.n	800322a <process_Accel_FloatingEnc+0x17a>
	{
		chasis_Vector_TargetSpeed = maxSpeed/2;
 8003218:	ed97 7a04 	vldr	s14, [r7, #16]
 800321c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <process_Accel_FloatingEnc+0x2b8>)
 8003226:	edc3 7a00 	vstr	s15, [r3]
	}

	if (floatingEncCount > 400){
 800322a:	4b4e      	ldr	r3, [pc, #312]	; (8003364 <process_Accel_FloatingEnc+0x2b4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003232:	dd09      	ble.n	8003248 <process_Accel_FloatingEnc+0x198>
		chasis_Vector_TargetSpeed -= accel ;
 8003234:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <process_Accel_FloatingEnc+0x2b8>)
 8003236:	ed93 7a00 	vldr	s14, [r3]
 800323a:	edd7 7a02 	vldr	s15, [r7, #8]
 800323e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003242:	4b49      	ldr	r3, [pc, #292]	; (8003368 <process_Accel_FloatingEnc+0x2b8>)
 8003244:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((chasis_Vector_TargetSpeed<=0)||(floatingEncCount > s))
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <process_Accel_FloatingEnc+0x2b8>)
 800324a:	edd3 7a00 	vldr	s15, [r3]
 800324e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003256:	d90c      	bls.n	8003272 <process_Accel_FloatingEnc+0x1c2>
 8003258:	4b42      	ldr	r3, [pc, #264]	; (8003364 <process_Accel_FloatingEnc+0x2b4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003264:	ed97 7a03 	vldr	s14, [r7, #12]
 8003268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	d503      	bpl.n	800327a <process_Accel_FloatingEnc+0x1ca>
	{
		chasis_Vector_TargetSpeed = 0;
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <process_Accel_FloatingEnc+0x2b8>)
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
//		step += 1;
	}

	u = cos(Angle*M_PI/180)*chasis_Vector_TargetSpeed ;
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7fd f964 	bl	8000548 <__aeabi_f2d>
 8003280:	a331      	add	r3, pc, #196	; (adr r3, 8003348 <process_Accel_FloatingEnc+0x298>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	f7fd f9b7 	bl	80005f8 <__aeabi_dmul>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	4b31      	ldr	r3, [pc, #196]	; (800335c <process_Accel_FloatingEnc+0x2ac>)
 8003298:	f7fd fad8 	bl	800084c <__aeabi_ddiv>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	ec43 2b17 	vmov	d7, r2, r3
 80032a4:	eeb0 0a47 	vmov.f32	s0, s14
 80032a8:	eef0 0a67 	vmov.f32	s1, s15
 80032ac:	f00b fe28 	bl	800ef00 <cos>
 80032b0:	ec55 4b10 	vmov	r4, r5, d0
 80032b4:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <process_Accel_FloatingEnc+0x2b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f945 	bl	8000548 <__aeabi_f2d>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4620      	mov	r0, r4
 80032c4:	4629      	mov	r1, r5
 80032c6:	f7fd f997 	bl	80005f8 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fc69 	bl	8000ba8 <__aeabi_d2f>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4a25      	ldr	r2, [pc, #148]	; (8003370 <process_Accel_FloatingEnc+0x2c0>)
 80032da:	6013      	str	r3, [r2, #0]
	v = sin(Angle*M_PI/180)*chasis_Vector_TargetSpeed ;
 80032dc:	6978      	ldr	r0, [r7, #20]
 80032de:	f7fd f933 	bl	8000548 <__aeabi_f2d>
 80032e2:	a319      	add	r3, pc, #100	; (adr r3, 8003348 <process_Accel_FloatingEnc+0x298>)
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f7fd f986 	bl	80005f8 <__aeabi_dmul>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <process_Accel_FloatingEnc+0x2ac>)
 80032fa:	f7fd faa7 	bl	800084c <__aeabi_ddiv>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	ec43 2b17 	vmov	d7, r2, r3
 8003306:	eeb0 0a47 	vmov.f32	s0, s14
 800330a:	eef0 0a67 	vmov.f32	s1, s15
 800330e:	f00b fe4b 	bl	800efa8 <sin>
 8003312:	ec55 4b10 	vmov	r4, r5, d0
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <process_Accel_FloatingEnc+0x2b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f914 	bl	8000548 <__aeabi_f2d>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4620      	mov	r0, r4
 8003326:	4629      	mov	r1, r5
 8003328:	f7fd f966 	bl	80005f8 <__aeabi_dmul>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	f7fd fc38 	bl	8000ba8 <__aeabi_d2f>
 8003338:	4603      	mov	r3, r0
 800333a:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <process_Accel_FloatingEnc+0x2c4>)
 800333c:	6013      	str	r3, [r2, #0]
}
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bdb0      	pop	{r4, r5, r7, pc}
 8003346:	bf00      	nop
 8003348:	54442d18 	.word	0x54442d18
 800334c:	400921fb 	.word	0x400921fb
 8003350:	200012a4 	.word	0x200012a4
 8003354:	200012a0 	.word	0x200012a0
 8003358:	20001258 	.word	0x20001258
 800335c:	40668000 	.word	0x40668000
 8003360:	20001254 	.word	0x20001254
 8003364:	2000128c 	.word	0x2000128c
 8003368:	2000129c 	.word	0x2000129c
 800336c:	43fa0000 	.word	0x43fa0000
 8003370:	20001290 	.word	0x20001290
 8003374:	20001294 	.word	0x20001294

08003378 <process_SetFloatingEnc>:

void process_SetFloatingEnc()
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
	floatingEncCount = encoder_GetFloatingDis(&FloatingEnc);
 800337c:	4806      	ldr	r0, [pc, #24]	; (8003398 <process_SetFloatingEnc+0x20>)
 800337e:	f7fd fe98 	bl	80010b2 <encoder_GetFloatingDis>
 8003382:	eef0 7a40 	vmov.f32	s15, s0
 8003386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800338a:	ee17 2a90 	vmov	r2, s15
 800338e:	4b03      	ldr	r3, [pc, #12]	; (800339c <process_SetFloatingEnc+0x24>)
 8003390:	601a      	str	r2, [r3, #0]
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	2000125c 	.word	0x2000125c
 800339c:	2000128c 	.word	0x2000128c

080033a0 <process_ResetFloatingEnc>:

void process_ResetFloatingEnc()
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
	encoder_ResetCount(&FloatingEnc);
 80033a4:	4802      	ldr	r0, [pc, #8]	; (80033b0 <process_ResetFloatingEnc+0x10>)
 80033a6:	f7fd fe67 	bl	8001078 <encoder_ResetCount>
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000125c 	.word	0x2000125c

080033b4 <process_Signal_RotationMatrixTransform>:

void process_Signal_RotationMatrixTransform(float u, float v ,float r)
{
 80033b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	ed87 0a03 	vstr	s0, [r7, #12]
 80033c0:	edc7 0a02 	vstr	s1, [r7, #8]
 80033c4:	ed87 1a01 	vstr	s2, [r7, #4]
	uControlX = u*cos(angle_Rad) - v*sin(angle_Rad);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7fd f8bd 	bl	8000548 <__aeabi_f2d>
 80033ce:	4604      	mov	r4, r0
 80033d0:	460d      	mov	r5, r1
 80033d2:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <process_Signal_RotationMatrixTransform+0x120>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd f8b6 	bl	8000548 <__aeabi_f2d>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	ec43 2b10 	vmov	d0, r2, r3
 80033e4:	f00b fd8c 	bl	800ef00 <cos>
 80033e8:	ec53 2b10 	vmov	r2, r3, d0
 80033ec:	4620      	mov	r0, r4
 80033ee:	4629      	mov	r1, r5
 80033f0:	f7fd f902 	bl	80005f8 <__aeabi_dmul>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4690      	mov	r8, r2
 80033fa:	4699      	mov	r9, r3
 80033fc:	68b8      	ldr	r0, [r7, #8]
 80033fe:	f7fd f8a3 	bl	8000548 <__aeabi_f2d>
 8003402:	4604      	mov	r4, r0
 8003404:	460d      	mov	r5, r1
 8003406:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <process_Signal_RotationMatrixTransform+0x120>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f89c 	bl	8000548 <__aeabi_f2d>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	ec43 2b10 	vmov	d0, r2, r3
 8003418:	f00b fdc6 	bl	800efa8 <sin>
 800341c:	ec53 2b10 	vmov	r2, r3, d0
 8003420:	4620      	mov	r0, r4
 8003422:	4629      	mov	r1, r5
 8003424:	f7fd f8e8 	bl	80005f8 <__aeabi_dmul>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4640      	mov	r0, r8
 800342e:	4649      	mov	r1, r9
 8003430:	f7fc ff2a 	bl	8000288 <__aeabi_dsub>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f7fd fbb4 	bl	8000ba8 <__aeabi_d2f>
 8003440:	4603      	mov	r3, r0
 8003442:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <process_Signal_RotationMatrixTransform+0x124>)
 8003444:	6013      	str	r3, [r2, #0]
	uControlY = u*sin(angle_Rad) + v*cos(angle_Rad);
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7fd f87e 	bl	8000548 <__aeabi_f2d>
 800344c:	4604      	mov	r4, r0
 800344e:	460d      	mov	r5, r1
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <process_Signal_RotationMatrixTransform+0x120>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f877 	bl	8000548 <__aeabi_f2d>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	ec43 2b10 	vmov	d0, r2, r3
 8003462:	f00b fda1 	bl	800efa8 <sin>
 8003466:	ec53 2b10 	vmov	r2, r3, d0
 800346a:	4620      	mov	r0, r4
 800346c:	4629      	mov	r1, r5
 800346e:	f7fd f8c3 	bl	80005f8 <__aeabi_dmul>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4690      	mov	r8, r2
 8003478:	4699      	mov	r9, r3
 800347a:	68b8      	ldr	r0, [r7, #8]
 800347c:	f7fd f864 	bl	8000548 <__aeabi_f2d>
 8003480:	4604      	mov	r4, r0
 8003482:	460d      	mov	r5, r1
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <process_Signal_RotationMatrixTransform+0x120>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f85d 	bl	8000548 <__aeabi_f2d>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	ec43 2b10 	vmov	d0, r2, r3
 8003496:	f00b fd33 	bl	800ef00 <cos>
 800349a:	ec53 2b10 	vmov	r2, r3, d0
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7fd f8a9 	bl	80005f8 <__aeabi_dmul>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4640      	mov	r0, r8
 80034ac:	4649      	mov	r1, r9
 80034ae:	f7fc feed 	bl	800028c <__adddf3>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	f7fd fb75 	bl	8000ba8 <__aeabi_d2f>
 80034be:	4603      	mov	r3, r0
 80034c0:	4a06      	ldr	r2, [pc, #24]	; (80034dc <process_Signal_RotationMatrixTransform+0x128>)
 80034c2:	6013      	str	r3, [r2, #0]
	uControlTheta = r;
 80034c4:	4a06      	ldr	r2, [pc, #24]	; (80034e0 <process_Signal_RotationMatrixTransform+0x12c>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6013      	str	r3, [r2, #0]
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034d4:	20001204 	.word	0x20001204
 80034d8:	200011e0 	.word	0x200011e0
 80034dc:	200011e4 	.word	0x200011e4
 80034e0:	200011e8 	.word	0x200011e8

080034e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034e4:	b5b0      	push	{r4, r5, r7, lr}
 80034e6:	b09c      	sub	sp, #112	; 0x70
 80034e8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80034ea:	f001 fded 	bl	80050c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034ee:	f000 f8db 	bl	80036a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034f2:	f000 fca1 	bl	8003e38 <MX_GPIO_Init>
  MX_DMA_Init();
 80034f6:	f000 fc69 	bl	8003dcc <MX_DMA_Init>
  MX_CAN1_Init();
 80034fa:	f000 f991 	bl	8003820 <MX_CAN1_Init>
  MX_TIM2_Init();
 80034fe:	f000 fa1d 	bl	800393c <MX_TIM2_Init>
  MX_TIM3_Init();
 8003502:	f000 fa6f 	bl	80039e4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8003506:	f000 fc37 	bl	8003d78 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800350a:	f000 f9bf 	bl	800388c <MX_TIM1_Init>
  MX_TIM10_Init();
 800350e:	f000 fbbb 	bl	8003c88 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8003512:	f000 fbdd 	bl	8003cd0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003516:	f000 fc05 	bl	8003d24 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800351a:	f000 fb33 	bl	8003b84 <MX_TIM5_Init>
  MX_ADC1_Init();
 800351e:	f000 f92d 	bl	800377c <MX_ADC1_Init>
  MX_TIM4_Init();
 8003522:	f000 fae1 	bl	8003ae8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  	log_Init(&huart2);
  	log_Init(&huart2);
 8003526:	4847      	ldr	r0, [pc, #284]	; (8003644 <main+0x160>)
 8003528:	f7ff fb2e 	bl	8002b88 <log_Init>
  	Send_Header();
 800352c:	f7ff fd24 	bl	8002f78 <Send_Header>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8003530:	2209      	movs	r2, #9
 8003532:	4945      	ldr	r1, [pc, #276]	; (8003648 <main+0x164>)
 8003534:	4845      	ldr	r0, [pc, #276]	; (800364c <main+0x168>)
 8003536:	f005 fe5d 	bl	80091f4 <HAL_UART_Receive_IT>


	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 800353a:	4b45      	ldr	r3, [pc, #276]	; (8003650 <main+0x16c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <main+0x16c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0208 	bic.w	r2, r2, #8
 8003548:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800354a:	2100      	movs	r1, #0
 800354c:	4841      	ldr	r0, [pc, #260]	; (8003654 <main+0x170>)
 800354e:	f004 fcd7 	bl	8007f00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003552:	2104      	movs	r1, #4
 8003554:	483f      	ldr	r0, [pc, #252]	; (8003654 <main+0x170>)
 8003556:	f004 fcd3 	bl	8007f00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800355a:	2100      	movs	r1, #0
 800355c:	483e      	ldr	r0, [pc, #248]	; (8003658 <main+0x174>)
 800355e:	f004 fccf 	bl	8007f00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003562:	2104      	movs	r1, #4
 8003564:	483c      	ldr	r0, [pc, #240]	; (8003658 <main+0x174>)
 8003566:	f004 fccb 	bl	8007f00 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800356a:	213c      	movs	r1, #60	; 0x3c
 800356c:	483b      	ldr	r0, [pc, #236]	; (800365c <main+0x178>)
 800356e:	f004 fe35 	bl	80081dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003572:	213c      	movs	r1, #60	; 0x3c
 8003574:	483a      	ldr	r0, [pc, #232]	; (8003660 <main+0x17c>)
 8003576:	f004 fe31 	bl	80081dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800357a:	483a      	ldr	r0, [pc, #232]	; (8003664 <main+0x180>)
 800357c:	f004 fbf6 	bl	8007d6c <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_DMA(&huart1,(uint8_t*)mpu,10);
 8003580:	220a      	movs	r2, #10
 8003582:	4939      	ldr	r1, [pc, #228]	; (8003668 <main+0x184>)
 8003584:	4839      	ldr	r0, [pc, #228]	; (800366c <main+0x188>)
 8003586:	f005 fe65 	bl	8009254 <HAL_UART_Receive_DMA>

	pid.kP = -0.12;
 800358a:	4b39      	ldr	r3, [pc, #228]	; (8003670 <main+0x18c>)
 800358c:	4a39      	ldr	r2, [pc, #228]	; (8003674 <main+0x190>)
 800358e:	60da      	str	r2, [r3, #12]
	pid.kI = 5.32;
 8003590:	4b37      	ldr	r3, [pc, #220]	; (8003670 <main+0x18c>)
 8003592:	4a39      	ldr	r2, [pc, #228]	; (8003678 <main+0x194>)
 8003594:	615a      	str	r2, [r3, #20]
	pid.kD = 20.22;
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <main+0x18c>)
 8003598:	4a38      	ldr	r2, [pc, #224]	; (800367c <main+0x198>)
 800359a:	621a      	str	r2, [r3, #32]
	pid.alpha = 5.31;
 800359c:	4b34      	ldr	r3, [pc, #208]	; (8003670 <main+0x18c>)
 800359e:	4a38      	ldr	r2, [pc, #224]	; (8003680 <main+0x19c>)
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
	pid.deltaT = 0.001;
 80035a2:	4b33      	ldr	r3, [pc, #204]	; (8003670 <main+0x18c>)
 80035a4:	4a37      	ldr	r2, [pc, #220]	; (8003684 <main+0x1a0>)
 80035a6:	609a      	str	r2, [r3, #8]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 256);
 80035a8:	4b37      	ldr	r3, [pc, #220]	; (8003688 <main+0x1a4>)
 80035aa:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80035ae:	461d      	mov	r5, r3
 80035b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80035bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f007 f87d 	bl	800a6c2 <osThreadCreate>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4a30      	ldr	r2, [pc, #192]	; (800368c <main+0x1a8>)
 80035cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskInvKine */
  osThreadStaticDef(TaskInvKine, InverseKinematic, osPriorityLow, 0, 256, TaskInvKineBuffer, &TaskInvKineControlBlock);
 80035ce:	4b30      	ldr	r3, [pc, #192]	; (8003690 <main+0x1ac>)
 80035d0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80035d4:	461d      	mov	r5, r3
 80035d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskInvKineHandle = osThreadCreate(osThread(TaskInvKine), NULL);
 80035e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f007 f86a 	bl	800a6c2 <osThreadCreate>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4a28      	ldr	r2, [pc, #160]	; (8003694 <main+0x1b0>)
 80035f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCAN */
  osThreadStaticDef(TaskCAN, CAN_Bus, osPriorityBelowNormal, 0, 128, TaskCANBuffer, &TaskCANControlBlock);
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <main+0x1b4>)
 80035f6:	f107 041c 	add.w	r4, r7, #28
 80035fa:	461d      	mov	r5, r3
 80035fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCANHandle = osThreadCreate(osThread(TaskCAN), NULL);
 8003608:	f107 031c 	add.w	r3, r7, #28
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f007 f857 	bl	800a6c2 <osThreadCreate>
 8003614:	4603      	mov	r3, r0
 8003616:	4a21      	ldr	r2, [pc, #132]	; (800369c <main+0x1b8>)
 8003618:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskOdometer */
  osThreadDef(TaskOdometer, OdometerHandle, osPriorityHigh, 0, 256);
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <main+0x1bc>)
 800361c:	463c      	mov	r4, r7
 800361e:	461d      	mov	r5, r3
 8003620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskOdometerHandle = osThreadCreate(osThread(TaskOdometer), NULL);
 800362c:	463b      	mov	r3, r7
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f007 f846 	bl	800a6c2 <osThreadCreate>
 8003636:	4603      	mov	r3, r0
 8003638:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <main+0x1c0>)
 800363a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800363c:	f007 f83a 	bl	800a6b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003640:	e7fe      	b.n	8003640 <main+0x15c>
 8003642:	bf00      	nop
 8003644:	200008a4 	.word	0x200008a4
 8003648:	200011a0 	.word	0x200011a0
 800364c:	200008e8 	.word	0x200008e8
 8003650:	2000092c 	.word	0x2000092c
 8003654:	20000740 	.word	0x20000740
 8003658:	200007d0 	.word	0x200007d0
 800365c:	200006f8 	.word	0x200006f8
 8003660:	200006b0 	.word	0x200006b0
 8003664:	20000788 	.word	0x20000788
 8003668:	200011f0 	.word	0x200011f0
 800366c:	20000860 	.word	0x20000860
 8003670:	2000113c 	.word	0x2000113c
 8003674:	bdf5c28f 	.word	0xbdf5c28f
 8003678:	40aa3d71 	.word	0x40aa3d71
 800367c:	41a1c28f 	.word	0x41a1c28f
 8003680:	40a9eb85 	.word	0x40a9eb85
 8003684:	3a83126f 	.word	0x3a83126f
 8003688:	0801120c 	.word	0x0801120c
 800368c:	200009ec 	.word	0x200009ec
 8003690:	08011234 	.word	0x08011234
 8003694:	200009f0 	.word	0x200009f0
 8003698:	08011258 	.word	0x08011258
 800369c:	20000e94 	.word	0x20000e94
 80036a0:	08011284 	.word	0x08011284
 80036a4:	20001138 	.word	0x20001138

080036a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b094      	sub	sp, #80	; 0x50
 80036ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ae:	f107 0320 	add.w	r3, r7, #32
 80036b2:	2230      	movs	r2, #48	; 0x30
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f009 fa2b 	bl	800cb12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036bc:	f107 030c 	add.w	r3, r7, #12
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <SystemClock_Config+0xcc>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	4a27      	ldr	r2, [pc, #156]	; (8003774 <SystemClock_Config+0xcc>)
 80036d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036da:	6413      	str	r3, [r2, #64]	; 0x40
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <SystemClock_Config+0xcc>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036e8:	2300      	movs	r3, #0
 80036ea:	607b      	str	r3, [r7, #4]
 80036ec:	4b22      	ldr	r3, [pc, #136]	; (8003778 <SystemClock_Config+0xd0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a21      	ldr	r2, [pc, #132]	; (8003778 <SystemClock_Config+0xd0>)
 80036f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <SystemClock_Config+0xd0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003704:	2302      	movs	r3, #2
 8003706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003708:	2301      	movs	r3, #1
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800370c:	2310      	movs	r3, #16
 800370e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003710:	2302      	movs	r3, #2
 8003712:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003714:	2300      	movs	r3, #0
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003718:	2308      	movs	r3, #8
 800371a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 800371c:	23a0      	movs	r3, #160	; 0xa0
 800371e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003720:	2302      	movs	r3, #2
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003724:	2304      	movs	r3, #4
 8003726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003728:	f107 0320 	add.w	r3, r7, #32
 800372c:	4618      	mov	r0, r3
 800372e:	f003 fe03 	bl	8007338 <HAL_RCC_OscConfig>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003738:	f000 ff60 	bl	80045fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800373c:	230f      	movs	r3, #15
 800373e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003740:	2302      	movs	r3, #2
 8003742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800374c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800374e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	2105      	movs	r1, #5
 800375a:	4618      	mov	r0, r3
 800375c:	f004 f864 	bl	8007828 <HAL_RCC_ClockConfig>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003766:	f000 ff49 	bl	80045fc <Error_Handler>
  }
}
 800376a:	bf00      	nop
 800376c:	3750      	adds	r7, #80	; 0x50
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000

0800377c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003782:	463b      	mov	r3, r7
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <MX_ADC1_Init+0x98>)
 8003790:	4a21      	ldr	r2, [pc, #132]	; (8003818 <MX_ADC1_Init+0x9c>)
 8003792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <MX_ADC1_Init+0x98>)
 8003796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800379a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <MX_ADC1_Init+0x98>)
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <MX_ADC1_Init+0x98>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <MX_ADC1_Init+0x98>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037ae:	4b19      	ldr	r3, [pc, #100]	; (8003814 <MX_ADC1_Init+0x98>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <MX_ADC1_Init+0x98>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <MX_ADC1_Init+0x98>)
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <MX_ADC1_Init+0xa0>)
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <MX_ADC1_Init+0x98>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <MX_ADC1_Init+0x98>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <MX_ADC1_Init+0x98>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <MX_ADC1_Init+0x98>)
 80037d8:	2201      	movs	r2, #1
 80037da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037dc:	480d      	ldr	r0, [pc, #52]	; (8003814 <MX_ADC1_Init+0x98>)
 80037de:	f001 fcb5 	bl	800514c <HAL_ADC_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80037e8:	f000 ff08 	bl	80045fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80037ec:	230b      	movs	r3, #11
 80037ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037f0:	2301      	movs	r3, #1
 80037f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037f8:	463b      	mov	r3, r7
 80037fa:	4619      	mov	r1, r3
 80037fc:	4805      	ldr	r0, [pc, #20]	; (8003814 <MX_ADC1_Init+0x98>)
 80037fe:	f001 fe17 	bl	8005430 <HAL_ADC_ConfigChannel>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003808:	f000 fef8 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000640 	.word	0x20000640
 8003818:	40012000 	.word	0x40012000
 800381c:	0f000001 	.word	0x0f000001

08003820 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <MX_CAN1_Init+0x64>)
 8003826:	4a18      	ldr	r2, [pc, #96]	; (8003888 <MX_CAN1_Init+0x68>)
 8003828:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <MX_CAN1_Init+0x64>)
 800382c:	220a      	movs	r2, #10
 800382e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <MX_CAN1_Init+0x64>)
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003836:	4b13      	ldr	r3, [pc, #76]	; (8003884 <MX_CAN1_Init+0x64>)
 8003838:	2200      	movs	r2, #0
 800383a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <MX_CAN1_Init+0x64>)
 800383e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003842:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <MX_CAN1_Init+0x64>)
 8003846:	2200      	movs	r2, #0
 8003848:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <MX_CAN1_Init+0x64>)
 800384c:	2200      	movs	r2, #0
 800384e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <MX_CAN1_Init+0x64>)
 8003852:	2200      	movs	r2, #0
 8003854:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <MX_CAN1_Init+0x64>)
 8003858:	2200      	movs	r2, #0
 800385a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <MX_CAN1_Init+0x64>)
 800385e:	2200      	movs	r2, #0
 8003860:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <MX_CAN1_Init+0x64>)
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <MX_CAN1_Init+0x64>)
 800386a:	2200      	movs	r2, #0
 800386c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800386e:	4805      	ldr	r0, [pc, #20]	; (8003884 <MX_CAN1_Init+0x64>)
 8003870:	f002 f806 	bl	8005880 <HAL_CAN_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800387a:	f000 febf 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000688 	.word	0x20000688
 8003888:	40006400 	.word	0x40006400

0800388c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	; 0x30
 8003890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	2224      	movs	r2, #36	; 0x24
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f009 f939 	bl	800cb12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038a8:	4b22      	ldr	r3, [pc, #136]	; (8003934 <MX_TIM1_Init+0xa8>)
 80038aa:	4a23      	ldr	r2, [pc, #140]	; (8003938 <MX_TIM1_Init+0xac>)
 80038ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80038ae:	4b21      	ldr	r3, [pc, #132]	; (8003934 <MX_TIM1_Init+0xa8>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b4:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <MX_TIM1_Init+0xa8>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80038ba:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <MX_TIM1_Init+0xa8>)
 80038bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <MX_TIM1_Init+0xa8>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <MX_TIM1_Init+0xa8>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <MX_TIM1_Init+0xa8>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80038d4:	2301      	movs	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038dc:	2301      	movs	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038e8:	2300      	movs	r3, #0
 80038ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038ec:	2301      	movs	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80038f8:	f107 030c 	add.w	r3, r7, #12
 80038fc:	4619      	mov	r1, r3
 80038fe:	480d      	ldr	r0, [pc, #52]	; (8003934 <MX_TIM1_Init+0xa8>)
 8003900:	f004 fbc6 	bl	8008090 <HAL_TIM_Encoder_Init>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800390a:	f000 fe77 	bl	80045fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4806      	ldr	r0, [pc, #24]	; (8003934 <MX_TIM1_Init+0xa8>)
 800391c:	f005 fab6 	bl	8008e8c <HAL_TIMEx_MasterConfigSynchronization>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003926:	f000 fe69 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800392a:	bf00      	nop
 800392c:	3730      	adds	r7, #48	; 0x30
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200006b0 	.word	0x200006b0
 8003938:	40010000 	.word	0x40010000

0800393c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08c      	sub	sp, #48	; 0x30
 8003940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003942:	f107 030c 	add.w	r3, r7, #12
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f009 f8e1 	bl	800cb12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003950:	1d3b      	adds	r3, r7, #4
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <MX_TIM2_Init+0xa4>)
 800395a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800395e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003960:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <MX_TIM2_Init+0xa4>)
 8003962:	2200      	movs	r2, #0
 8003964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003966:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <MX_TIM2_Init+0xa4>)
 8003968:	2200      	movs	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800396c:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <MX_TIM2_Init+0xa4>)
 800396e:	f04f 32ff 	mov.w	r2, #4294967295
 8003972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <MX_TIM2_Init+0xa4>)
 8003976:	2200      	movs	r2, #0
 8003978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800397a:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <MX_TIM2_Init+0xa4>)
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003980:	2303      	movs	r3, #3
 8003982:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003988:	2301      	movs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003994:	2300      	movs	r3, #0
 8003996:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003998:	2301      	movs	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800399c:	2300      	movs	r3, #0
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80039a4:	f107 030c 	add.w	r3, r7, #12
 80039a8:	4619      	mov	r1, r3
 80039aa:	480d      	ldr	r0, [pc, #52]	; (80039e0 <MX_TIM2_Init+0xa4>)
 80039ac:	f004 fb70 	bl	8008090 <HAL_TIM_Encoder_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80039b6:	f000 fe21 	bl	80045fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4806      	ldr	r0, [pc, #24]	; (80039e0 <MX_TIM2_Init+0xa4>)
 80039c8:	f005 fa60 	bl	8008e8c <HAL_TIMEx_MasterConfigSynchronization>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80039d2:	f000 fe13 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039d6:	bf00      	nop
 80039d8:	3730      	adds	r7, #48	; 0x30
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200006f8 	.word	0x200006f8

080039e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08e      	sub	sp, #56	; 0x38
 80039e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f8:	f107 0320 	add.w	r3, r7, #32
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	611a      	str	r2, [r3, #16]
 8003a10:	615a      	str	r2, [r3, #20]
 8003a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a14:	4b32      	ldr	r3, [pc, #200]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003a16:	4a33      	ldr	r2, [pc, #204]	; (8003ae4 <MX_TIM3_Init+0x100>)
 8003a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8003a1a:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003a1c:	224f      	movs	r2, #79	; 0x4f
 8003a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a20:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8003a26:	4b2e      	ldr	r3, [pc, #184]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a34:	4b2a      	ldr	r3, [pc, #168]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a3a:	4829      	ldr	r0, [pc, #164]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003a3c:	f004 f946 	bl	8007ccc <HAL_TIM_Base_Init>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003a46:	f000 fdd9 	bl	80045fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a54:	4619      	mov	r1, r3
 8003a56:	4822      	ldr	r0, [pc, #136]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003a58:	f004 fe18 	bl	800868c <HAL_TIM_ConfigClockSource>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003a62:	f000 fdcb 	bl	80045fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a66:	481e      	ldr	r0, [pc, #120]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003a68:	f004 f9f0 	bl	8007e4c <HAL_TIM_PWM_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003a72:	f000 fdc3 	bl	80045fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	4619      	mov	r1, r3
 8003a84:	4816      	ldr	r0, [pc, #88]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003a86:	f005 fa01 	bl	8008e8c <HAL_TIMEx_MasterConfigSynchronization>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003a90:	f000 fdb4 	bl	80045fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a94:	2360      	movs	r3, #96	; 0x60
 8003a96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	480d      	ldr	r0, [pc, #52]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003aac:	f004 fd2c 	bl	8008508 <HAL_TIM_PWM_ConfigChannel>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003ab6:	f000 fda1 	bl	80045fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	2204      	movs	r2, #4
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003ac2:	f004 fd21 	bl	8008508 <HAL_TIM_PWM_ConfigChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003acc:	f000 fd96 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ad0:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <MX_TIM3_Init+0xfc>)
 8003ad2:	f000 ff6f 	bl	80049b4 <HAL_TIM_MspPostInit>

}
 8003ad6:	bf00      	nop
 8003ad8:	3738      	adds	r7, #56	; 0x38
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000740 	.word	0x20000740
 8003ae4:	40000400 	.word	0x40000400

08003ae8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aee:	f107 0308 	add.w	r3, r7, #8
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003afc:	463b      	mov	r3, r7
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b04:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <MX_TIM4_Init+0x94>)
 8003b06:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <MX_TIM4_Init+0x98>)
 8003b08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <MX_TIM4_Init+0x94>)
 8003b0c:	224f      	movs	r2, #79	; 0x4f
 8003b0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b10:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <MX_TIM4_Init+0x94>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8003b16:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <MX_TIM4_Init+0x94>)
 8003b18:	f241 3287 	movw	r2, #4999	; 0x1387
 8003b1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b1e:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <MX_TIM4_Init+0x94>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b24:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <MX_TIM4_Init+0x94>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b2a:	4814      	ldr	r0, [pc, #80]	; (8003b7c <MX_TIM4_Init+0x94>)
 8003b2c:	f004 f8ce 	bl	8007ccc <HAL_TIM_Base_Init>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003b36:	f000 fd61 	bl	80045fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003b40:	f107 0308 	add.w	r3, r7, #8
 8003b44:	4619      	mov	r1, r3
 8003b46:	480d      	ldr	r0, [pc, #52]	; (8003b7c <MX_TIM4_Init+0x94>)
 8003b48:	f004 fda0 	bl	800868c <HAL_TIM_ConfigClockSource>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003b52:	f000 fd53 	bl	80045fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b5e:	463b      	mov	r3, r7
 8003b60:	4619      	mov	r1, r3
 8003b62:	4806      	ldr	r0, [pc, #24]	; (8003b7c <MX_TIM4_Init+0x94>)
 8003b64:	f005 f992 	bl	8008e8c <HAL_TIMEx_MasterConfigSynchronization>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003b6e:	f000 fd45 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b72:	bf00      	nop
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000788 	.word	0x20000788
 8003b80:	40000800 	.word	0x40000800

08003b84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08e      	sub	sp, #56	; 0x38
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b98:	f107 0320 	add.w	r3, r7, #32
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	60da      	str	r2, [r3, #12]
 8003bae:	611a      	str	r2, [r3, #16]
 8003bb0:	615a      	str	r2, [r3, #20]
 8003bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003bb4:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003bb6:	4a33      	ldr	r2, [pc, #204]	; (8003c84 <MX_TIM5_Init+0x100>)
 8003bb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8003bba:	4b31      	ldr	r3, [pc, #196]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003bbc:	224f      	movs	r2, #79	; 0x4f
 8003bbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc0:	4b2f      	ldr	r3, [pc, #188]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8003bc6:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bcc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bce:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bd4:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003bda:	4829      	ldr	r0, [pc, #164]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003bdc:	f004 f876 	bl	8007ccc <HAL_TIM_Base_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8003be6:	f000 fd09 	bl	80045fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4822      	ldr	r0, [pc, #136]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003bf8:	f004 fd48 	bl	800868c <HAL_TIM_ConfigClockSource>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8003c02:	f000 fcfb 	bl	80045fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003c06:	481e      	ldr	r0, [pc, #120]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003c08:	f004 f920 	bl	8007e4c <HAL_TIM_PWM_Init>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8003c12:	f000 fcf3 	bl	80045fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c16:	2300      	movs	r3, #0
 8003c18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c1e:	f107 0320 	add.w	r3, r7, #32
 8003c22:	4619      	mov	r1, r3
 8003c24:	4816      	ldr	r0, [pc, #88]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003c26:	f005 f931 	bl	8008e8c <HAL_TIMEx_MasterConfigSynchronization>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8003c30:	f000 fce4 	bl	80045fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c34:	2360      	movs	r3, #96	; 0x60
 8003c36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	2200      	movs	r2, #0
 8003c48:	4619      	mov	r1, r3
 8003c4a:	480d      	ldr	r0, [pc, #52]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003c4c:	f004 fc5c 	bl	8008508 <HAL_TIM_PWM_ConfigChannel>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8003c56:	f000 fcd1 	bl	80045fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4807      	ldr	r0, [pc, #28]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003c62:	f004 fc51 	bl	8008508 <HAL_TIM_PWM_ConfigChannel>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8003c6c:	f000 fcc6 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003c70:	4803      	ldr	r0, [pc, #12]	; (8003c80 <MX_TIM5_Init+0xfc>)
 8003c72:	f000 fe9f 	bl	80049b4 <HAL_TIM_MspPostInit>

}
 8003c76:	bf00      	nop
 8003c78:	3738      	adds	r7, #56	; 0x38
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	200007d0 	.word	0x200007d0
 8003c84:	40000c00 	.word	0x40000c00

08003c88 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_TIM10_Init+0x40>)
 8003c8e:	4a0f      	ldr	r2, [pc, #60]	; (8003ccc <MX_TIM10_Init+0x44>)
 8003c90:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 160-1;
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <MX_TIM10_Init+0x40>)
 8003c94:	229f      	movs	r2, #159	; 0x9f
 8003c96:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <MX_TIM10_Init+0x40>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65000;
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <MX_TIM10_Init+0x40>)
 8003ca0:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003ca4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <MX_TIM10_Init+0x40>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <MX_TIM10_Init+0x40>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003cb2:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <MX_TIM10_Init+0x40>)
 8003cb4:	f004 f80a 	bl	8007ccc <HAL_TIM_Base_Init>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003cbe:	f000 fc9d 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000818 	.word	0x20000818
 8003ccc:	40014400 	.word	0x40014400

08003cd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cd4:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cd6:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <MX_USART1_UART_Init+0x50>)
 8003cd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ce0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cf6:	220c      	movs	r2, #12
 8003cf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d06:	4805      	ldr	r0, [pc, #20]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003d08:	f005 f950 	bl	8008fac <HAL_UART_Init>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d12:	f000 fc73 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000860 	.word	0x20000860
 8003d20:	40011000 	.word	0x40011000

08003d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <MX_USART2_UART_Init+0x50>)
 8003d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d4a:	220c      	movs	r2, #12
 8003d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d5a:	4805      	ldr	r0, [pc, #20]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d5c:	f005 f926 	bl	8008fac <HAL_UART_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d66:	f000 fc49 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200008a4 	.word	0x200008a4
 8003d74:	40004400 	.word	0x40004400

08003d78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <MX_USART3_UART_Init+0x4c>)
 8003d7e:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <MX_USART3_UART_Init+0x50>)
 8003d80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <MX_USART3_UART_Init+0x4c>)
 8003d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <MX_USART3_UART_Init+0x4c>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <MX_USART3_UART_Init+0x4c>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <MX_USART3_UART_Init+0x4c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <MX_USART3_UART_Init+0x4c>)
 8003d9e:	220c      	movs	r2, #12
 8003da0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <MX_USART3_UART_Init+0x4c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <MX_USART3_UART_Init+0x4c>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003dae:	4805      	ldr	r0, [pc, #20]	; (8003dc4 <MX_USART3_UART_Init+0x4c>)
 8003db0:	f005 f8fc 	bl	8008fac <HAL_UART_Init>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003dba:	f000 fc1f 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200008e8 	.word	0x200008e8
 8003dc8:	40004800 	.word	0x40004800

08003dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <MX_DMA_Init+0x68>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <MX_DMA_Init+0x68>)
 8003ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003de0:	6313      	str	r3, [r2, #48]	; 0x30
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <MX_DMA_Init+0x68>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <MX_DMA_Init+0x68>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	4a0f      	ldr	r2, [pc, #60]	; (8003e34 <MX_DMA_Init+0x68>)
 8003df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <MX_DMA_Init+0x68>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2105      	movs	r1, #5
 8003e0e:	2011      	movs	r0, #17
 8003e10:	f002 fc98 	bl	8006744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003e14:	2011      	movs	r0, #17
 8003e16:	f002 fcb1 	bl	800677c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2105      	movs	r1, #5
 8003e1e:	203a      	movs	r0, #58	; 0x3a
 8003e20:	f002 fc90 	bl	8006744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003e24:	203a      	movs	r0, #58	; 0x3a
 8003e26:	f002 fca9 	bl	800677c <HAL_NVIC_EnableIRQ>

}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800

08003e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
 8003e4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	4a3c      	ldr	r2, [pc, #240]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003e58:	f043 0310 	orr.w	r3, r3, #16
 8003e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5e:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a35      	ldr	r2, [pc, #212]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7a:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	4a2e      	ldr	r2, [pc, #184]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6313      	str	r3, [r2, #48]	; 0x30
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	4a27      	ldr	r2, [pc, #156]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003eac:	f043 0302 	orr.w	r3, r3, #2
 8003eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb2:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003ec8:	f043 0308 	orr.w	r3, r3, #8
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <MX_GPIO_Init+0x110>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003eda:	2200      	movs	r2, #0
 8003edc:	2160      	movs	r1, #96	; 0x60
 8003ede:	481b      	ldr	r0, [pc, #108]	; (8003f4c <MX_GPIO_Init+0x114>)
 8003ee0:	f003 fa10 	bl	8007304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HC595_CLK_Pin|HC595_RCLK_Pin|HC595_OE_Pin|HC595_DATA_Pin, GPIO_PIN_RESET);
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	21f0      	movs	r1, #240	; 0xf0
 8003ee8:	4819      	ldr	r0, [pc, #100]	; (8003f50 <MX_GPIO_Init+0x118>)
 8003eea:	f003 fa0b 	bl	8007304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003eee:	2360      	movs	r3, #96	; 0x60
 8003ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efa:	2300      	movs	r3, #0
 8003efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003efe:	f107 0314 	add.w	r3, r7, #20
 8003f02:	4619      	mov	r1, r3
 8003f04:	4811      	ldr	r0, [pc, #68]	; (8003f4c <MX_GPIO_Init+0x114>)
 8003f06:	f003 f849 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : HC595_CLK_Pin HC595_RCLK_Pin HC595_OE_Pin HC595_DATA_Pin */
  GPIO_InitStruct.Pin = HC595_CLK_Pin|HC595_RCLK_Pin|HC595_OE_Pin|HC595_DATA_Pin;
 8003f0a:	23f0      	movs	r3, #240	; 0xf0
 8003f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f1a:	f107 0314 	add.w	r3, r7, #20
 8003f1e:	4619      	mov	r1, r3
 8003f20:	480b      	ldr	r0, [pc, #44]	; (8003f50 <MX_GPIO_Init+0x118>)
 8003f22:	f003 f83b 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor_1_Pin sensor_2_Pin sensor_3_Pin sensor_4_Pin
                           sensor_5_Pin sensor_6_Pin sensor_7_Pin sensor_8_Pin */
  GPIO_InitStruct.Pin = sensor_1_Pin|sensor_2_Pin|sensor_3_Pin|sensor_4_Pin
 8003f26:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8003f2a:	617b      	str	r3, [r7, #20]
                          |sensor_5_Pin|sensor_6_Pin|sensor_7_Pin|sensor_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4804      	ldr	r0, [pc, #16]	; (8003f4c <MX_GPIO_Init+0x114>)
 8003f3c:	f003 f82e 	bl	8006f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f40:	bf00      	nop
 8003f42:	3728      	adds	r7, #40	; 0x28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40020000 	.word	0x40020000

08003f54 <InvCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t shootFlag;
void InvCpltCallback(ModuleID ID, float speed, float angle) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f60:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f64:	73fb      	strb	r3, [r7, #15]
	CAN_SpeedBLDC_AngleDC speedAngle;
	speedAngle.bldcSpeed = speed;
 8003f66:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f6e:	ee17 3a90 	vmov	r3, s15
 8003f72:	613b      	str	r3, [r7, #16]
	speedAngle.dcAngle = angle;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	617b      	str	r3, [r7, #20]
	canfunc_MotorPutSpeedAndAngle(speedAngle);
 8003f78:	f107 0310 	add.w	r3, r7, #16
 8003f7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003f80:	f7fe fc75 	bl	800286e <canfunc_MotorPutSpeedAndAngle>
	while (canctrl_Send(&hcan1, ID) != HAL_OK);
 8003f84:	bf00      	nop
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <InvCpltCallback+0x4c>)
 8003f8c:	f7fe fbec 	bl	8002768 <canctrl_Send>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f7      	bne.n	8003f86 <InvCpltCallback+0x32>
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000688 	.word	0x20000688

08003fa4 <StartDefaultTask>:
float GocXa = 10;
int AngleSignalOffset = 60;
float SaiSoChoPhep_A = 10;
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b0a6      	sub	sp, #152	; 0x98
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */

	swer_Init();
 8003fac:	f7fe fa32 	bl	8002414 <swer_Init>

	for (;;) {
		Get_MPU_Angle();
 8003fb0:	f7ff f806 	bl	8002fc0 <Get_MPU_Angle>

		if (use_pidTheta)
 8003fb4:	4b90      	ldr	r3, [pc, #576]	; (80041f8 <StartDefaultTask+0x254>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d013      	beq.n	8003fe4 <StartDefaultTask+0x40>
		{
			r = -PID_Cal(&pid_Angle, TargetTheta, angle_Rad);
 8003fbc:	4b8f      	ldr	r3, [pc, #572]	; (80041fc <StartDefaultTask+0x258>)
 8003fbe:	edd3 7a00 	vldr	s15, [r3]
 8003fc2:	4b8f      	ldr	r3, [pc, #572]	; (8004200 <StartDefaultTask+0x25c>)
 8003fc4:	ed93 7a00 	vldr	s14, [r3]
 8003fc8:	eef0 0a47 	vmov.f32	s1, s14
 8003fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd0:	488c      	ldr	r0, [pc, #560]	; (8004204 <StartDefaultTask+0x260>)
 8003fd2:	f006 fa8b 	bl	800a4ec <PID_Cal>
 8003fd6:	eef0 7a40 	vmov.f32	s15, s0
 8003fda:	eef1 7a67 	vneg.f32	s15, s15
 8003fde:	4b8a      	ldr	r3, [pc, #552]	; (8004208 <StartDefaultTask+0x264>)
 8003fe0:	edc3 7a00 	vstr	s15, [r3]

		}
		if(xaDay == 0 )
 8003fe4:	4b89      	ldr	r3, [pc, #548]	; (800420c <StartDefaultTask+0x268>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f040 8082 	bne.w	80040f2 <StartDefaultTask+0x14e>
		{
			invkine_Implementation(MODULE_ID_3, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 8003fee:	4b88      	ldr	r3, [pc, #544]	; (8004210 <StartDefaultTask+0x26c>)
 8003ff0:	edd3 7a00 	vldr	s15, [r3]
 8003ff4:	4b87      	ldr	r3, [pc, #540]	; (8004214 <StartDefaultTask+0x270>)
 8003ff6:	ed93 7a00 	vldr	s14, [r3]
 8003ffa:	4b87      	ldr	r3, [pc, #540]	; (8004218 <StartDefaultTask+0x274>)
 8003ffc:	edd3 6a00 	vldr	s13, [r3]
 8004000:	4986      	ldr	r1, [pc, #536]	; (800421c <StartDefaultTask+0x278>)
 8004002:	eeb0 1a66 	vmov.f32	s2, s13
 8004006:	eef0 0a47 	vmov.f32	s1, s14
 800400a:	eeb0 0a67 	vmov.f32	s0, s15
 800400e:	2003      	movs	r0, #3
 8004010:	f7fd feec 	bl	8001dec <invkine_Implementation>
			invkine_Implementation(MODULE_ID_1, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 8004014:	4b7e      	ldr	r3, [pc, #504]	; (8004210 <StartDefaultTask+0x26c>)
 8004016:	edd3 7a00 	vldr	s15, [r3]
 800401a:	4b7e      	ldr	r3, [pc, #504]	; (8004214 <StartDefaultTask+0x270>)
 800401c:	ed93 7a00 	vldr	s14, [r3]
 8004020:	4b7d      	ldr	r3, [pc, #500]	; (8004218 <StartDefaultTask+0x274>)
 8004022:	edd3 6a00 	vldr	s13, [r3]
 8004026:	497d      	ldr	r1, [pc, #500]	; (800421c <StartDefaultTask+0x278>)
 8004028:	eeb0 1a66 	vmov.f32	s2, s13
 800402c:	eef0 0a47 	vmov.f32	s1, s14
 8004030:	eeb0 0a67 	vmov.f32	s0, s15
 8004034:	2001      	movs	r0, #1
 8004036:	f7fd fed9 	bl	8001dec <invkine_Implementation>
			invkine_Implementation(MODULE_ID_2, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 800403a:	4b75      	ldr	r3, [pc, #468]	; (8004210 <StartDefaultTask+0x26c>)
 800403c:	edd3 7a00 	vldr	s15, [r3]
 8004040:	4b74      	ldr	r3, [pc, #464]	; (8004214 <StartDefaultTask+0x270>)
 8004042:	ed93 7a00 	vldr	s14, [r3]
 8004046:	4b74      	ldr	r3, [pc, #464]	; (8004218 <StartDefaultTask+0x274>)
 8004048:	edd3 6a00 	vldr	s13, [r3]
 800404c:	4973      	ldr	r1, [pc, #460]	; (800421c <StartDefaultTask+0x278>)
 800404e:	eeb0 1a66 	vmov.f32	s2, s13
 8004052:	eef0 0a47 	vmov.f32	s1, s14
 8004056:	eeb0 0a67 	vmov.f32	s0, s15
 800405a:	2002      	movs	r0, #2
 800405c:	f7fd fec6 	bl	8001dec <invkine_Implementation>
			Angle_Opt_Param angopt1 = swer_GetOptAngle(MODULE_ID_1);
 8004060:	f107 0308 	add.w	r3, r7, #8
 8004064:	2101      	movs	r1, #1
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe fa70 	bl	800254c <swer_GetOptAngle>
			Angle_Opt_Param angopt2 = swer_GetOptAngle(MODULE_ID_2);
 800406c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004070:	2102      	movs	r1, #2
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fa6a 	bl	800254c <swer_GetOptAngle>
			Angle_Opt_Param angopt3 = swer_GetOptAngle(MODULE_ID_3);
 8004078:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800407c:	2103      	movs	r1, #3
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fa64 	bl	800254c <swer_GetOptAngle>
			GocXaDay1 = angopt1.currentAngle;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a66      	ldr	r2, [pc, #408]	; (8004220 <StartDefaultTask+0x27c>)
 8004088:	6013      	str	r3, [r2, #0]
			GocXaDay2 = angopt2.currentAngle;
 800408a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408c:	4a65      	ldr	r2, [pc, #404]	; (8004224 <StartDefaultTask+0x280>)
 800408e:	6013      	str	r3, [r2, #0]
			GocXaDay3 = angopt3.currentAngle;
 8004090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004092:	4a65      	ldr	r2, [pc, #404]	; (8004228 <StartDefaultTask+0x284>)
 8004094:	6013      	str	r3, [r2, #0]

			if (GocXaDay1 > 0)XaDayFlag1=1;
 8004096:	4b62      	ldr	r3, [pc, #392]	; (8004220 <StartDefaultTask+0x27c>)
 8004098:	edd3 7a00 	vldr	s15, [r3]
 800409c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a4:	dd03      	ble.n	80040ae <StartDefaultTask+0x10a>
 80040a6:	4b61      	ldr	r3, [pc, #388]	; (800422c <StartDefaultTask+0x288>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e002      	b.n	80040b4 <StartDefaultTask+0x110>
			else XaDayFlag1 = 0;
 80040ae:	4b5f      	ldr	r3, [pc, #380]	; (800422c <StartDefaultTask+0x288>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]

			if (GocXaDay2 > 0)XaDayFlag2=1;
 80040b4:	4b5b      	ldr	r3, [pc, #364]	; (8004224 <StartDefaultTask+0x280>)
 80040b6:	edd3 7a00 	vldr	s15, [r3]
 80040ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c2:	dd03      	ble.n	80040cc <StartDefaultTask+0x128>
 80040c4:	4b5a      	ldr	r3, [pc, #360]	; (8004230 <StartDefaultTask+0x28c>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e002      	b.n	80040d2 <StartDefaultTask+0x12e>
			else XaDayFlag2 = 0;
 80040cc:	4b58      	ldr	r3, [pc, #352]	; (8004230 <StartDefaultTask+0x28c>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]

			if (GocXaDay3 > 0)XaDayFlag3=1;
 80040d2:	4b55      	ldr	r3, [pc, #340]	; (8004228 <StartDefaultTask+0x284>)
 80040d4:	edd3 7a00 	vldr	s15, [r3]
 80040d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e0:	dd03      	ble.n	80040ea <StartDefaultTask+0x146>
 80040e2:	4b54      	ldr	r3, [pc, #336]	; (8004234 <StartDefaultTask+0x290>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
 80040e8:	e0dd      	b.n	80042a6 <StartDefaultTask+0x302>
			else XaDayFlag3 = 0;
 80040ea:	4b52      	ldr	r3, [pc, #328]	; (8004234 <StartDefaultTask+0x290>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e0d9      	b.n	80042a6 <StartDefaultTask+0x302>

		}else {

			if(XaDayFlag1){
 80040f2:	4b4e      	ldr	r3, [pc, #312]	; (800422c <StartDefaultTask+0x288>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d017      	beq.n	800412a <StartDefaultTask+0x186>
				GocXaDay1 -= GocXa;
 80040fa:	4b49      	ldr	r3, [pc, #292]	; (8004220 <StartDefaultTask+0x27c>)
 80040fc:	ed93 7a00 	vldr	s14, [r3]
 8004100:	4b4d      	ldr	r3, [pc, #308]	; (8004238 <StartDefaultTask+0x294>)
 8004102:	edd3 7a00 	vldr	s15, [r3]
 8004106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800410a:	4b45      	ldr	r3, [pc, #276]	; (8004220 <StartDefaultTask+0x27c>)
 800410c:	edc3 7a00 	vstr	s15, [r3]
				if(GocXaDay1 < 0)GocXaDay1 = 0;
 8004110:	4b43      	ldr	r3, [pc, #268]	; (8004220 <StartDefaultTask+0x27c>)
 8004112:	edd3 7a00 	vldr	s15, [r3]
 8004116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	d51b      	bpl.n	8004158 <StartDefaultTask+0x1b4>
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <StartDefaultTask+0x27c>)
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e016      	b.n	8004158 <StartDefaultTask+0x1b4>
			}else{
				GocXaDay1 += GocXa;
 800412a:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <StartDefaultTask+0x27c>)
 800412c:	ed93 7a00 	vldr	s14, [r3]
 8004130:	4b41      	ldr	r3, [pc, #260]	; (8004238 <StartDefaultTask+0x294>)
 8004132:	edd3 7a00 	vldr	s15, [r3]
 8004136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800413a:	4b39      	ldr	r3, [pc, #228]	; (8004220 <StartDefaultTask+0x27c>)
 800413c:	edc3 7a00 	vstr	s15, [r3]
				if(GocXaDay1 > 0)GocXaDay1 = 0;
 8004140:	4b37      	ldr	r3, [pc, #220]	; (8004220 <StartDefaultTask+0x27c>)
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414e:	dd03      	ble.n	8004158 <StartDefaultTask+0x1b4>
 8004150:	4b33      	ldr	r3, [pc, #204]	; (8004220 <StartDefaultTask+0x27c>)
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
			}

			if(XaDayFlag2){
 8004158:	4b35      	ldr	r3, [pc, #212]	; (8004230 <StartDefaultTask+0x28c>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d017      	beq.n	8004190 <StartDefaultTask+0x1ec>
				GocXaDay2 -= GocXa;
 8004160:	4b30      	ldr	r3, [pc, #192]	; (8004224 <StartDefaultTask+0x280>)
 8004162:	ed93 7a00 	vldr	s14, [r3]
 8004166:	4b34      	ldr	r3, [pc, #208]	; (8004238 <StartDefaultTask+0x294>)
 8004168:	edd3 7a00 	vldr	s15, [r3]
 800416c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004170:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <StartDefaultTask+0x280>)
 8004172:	edc3 7a00 	vstr	s15, [r3]
				if(GocXaDay2 < 0)GocXaDay2 = 0;
 8004176:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <StartDefaultTask+0x280>)
 8004178:	edd3 7a00 	vldr	s15, [r3]
 800417c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	d51b      	bpl.n	80041be <StartDefaultTask+0x21a>
 8004186:	4b27      	ldr	r3, [pc, #156]	; (8004224 <StartDefaultTask+0x280>)
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e016      	b.n	80041be <StartDefaultTask+0x21a>
			}else{
				GocXaDay2 += GocXa;
 8004190:	4b24      	ldr	r3, [pc, #144]	; (8004224 <StartDefaultTask+0x280>)
 8004192:	ed93 7a00 	vldr	s14, [r3]
 8004196:	4b28      	ldr	r3, [pc, #160]	; (8004238 <StartDefaultTask+0x294>)
 8004198:	edd3 7a00 	vldr	s15, [r3]
 800419c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041a0:	4b20      	ldr	r3, [pc, #128]	; (8004224 <StartDefaultTask+0x280>)
 80041a2:	edc3 7a00 	vstr	s15, [r3]
				if(GocXaDay2 > 0)GocXaDay2 = 0;
 80041a6:	4b1f      	ldr	r3, [pc, #124]	; (8004224 <StartDefaultTask+0x280>)
 80041a8:	edd3 7a00 	vldr	s15, [r3]
 80041ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	dd03      	ble.n	80041be <StartDefaultTask+0x21a>
 80041b6:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <StartDefaultTask+0x280>)
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
			}

			if(XaDayFlag3){
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <StartDefaultTask+0x290>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d03a      	beq.n	800423c <StartDefaultTask+0x298>
				GocXaDay3 -= GocXa;
 80041c6:	4b18      	ldr	r3, [pc, #96]	; (8004228 <StartDefaultTask+0x284>)
 80041c8:	ed93 7a00 	vldr	s14, [r3]
 80041cc:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <StartDefaultTask+0x294>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d6:	4b14      	ldr	r3, [pc, #80]	; (8004228 <StartDefaultTask+0x284>)
 80041d8:	edc3 7a00 	vstr	s15, [r3]
				if(GocXaDay3 < 0)GocXaDay3 = 0;
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <StartDefaultTask+0x284>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ea:	d53e      	bpl.n	800426a <StartDefaultTask+0x2c6>
 80041ec:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <StartDefaultTask+0x284>)
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e039      	b.n	800426a <StartDefaultTask+0x2c6>
 80041f6:	bf00      	nop
 80041f8:	20001250 	.word	0x20001250
 80041fc:	20001254 	.word	0x20001254
 8004200:	20001204 	.word	0x20001204
 8004204:	20001208 	.word	0x20001208
 8004208:	20001298 	.word	0x20001298
 800420c:	200011ec 	.word	0x200011ec
 8004210:	200011e0 	.word	0x200011e0
 8004214:	200011e4 	.word	0x200011e4
 8004218:	200011e8 	.word	0x200011e8
 800421c:	08003f55 	.word	0x08003f55
 8004220:	200012a8 	.word	0x200012a8
 8004224:	200012ac 	.word	0x200012ac
 8004228:	200012b0 	.word	0x200012b0
 800422c:	200012b4 	.word	0x200012b4
 8004230:	200012b5 	.word	0x200012b5
 8004234:	200012b6 	.word	0x200012b6
 8004238:	20000000 	.word	0x20000000
			}else{
				GocXaDay3 += GocXa;
 800423c:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <StartDefaultTask+0x340>)
 800423e:	ed93 7a00 	vldr	s14, [r3]
 8004242:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <StartDefaultTask+0x344>)
 8004244:	edd3 7a00 	vldr	s15, [r3]
 8004248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <StartDefaultTask+0x340>)
 800424e:	edc3 7a00 	vstr	s15, [r3]
				if(GocXaDay3 > 0)GocXaDay3 = 0;
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <StartDefaultTask+0x340>)
 8004254:	edd3 7a00 	vldr	s15, [r3]
 8004258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800425c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004260:	dd03      	ble.n	800426a <StartDefaultTask+0x2c6>
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <StartDefaultTask+0x340>)
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
			}

			 InvCpltCallback(MODULE_ID_3, 0, GocXaDay1);
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <StartDefaultTask+0x348>)
 800426c:	edd3 7a00 	vldr	s15, [r3]
 8004270:	eef0 0a67 	vmov.f32	s1, s15
 8004274:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80042f0 <StartDefaultTask+0x34c>
 8004278:	2003      	movs	r0, #3
 800427a:	f7ff fe6b 	bl	8003f54 <InvCpltCallback>
			 InvCpltCallback(MODULE_ID_1, 0, GocXaDay2);
 800427e:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <StartDefaultTask+0x350>)
 8004280:	edd3 7a00 	vldr	s15, [r3]
 8004284:	eef0 0a67 	vmov.f32	s1, s15
 8004288:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80042f0 <StartDefaultTask+0x34c>
 800428c:	2001      	movs	r0, #1
 800428e:	f7ff fe61 	bl	8003f54 <InvCpltCallback>
			 InvCpltCallback(MODULE_ID_2, 0, GocXaDay3);
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <StartDefaultTask+0x340>)
 8004294:	edd3 7a00 	vldr	s15, [r3]
 8004298:	eef0 0a67 	vmov.f32	s1, s15
 800429c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80042f0 <StartDefaultTask+0x34c>
 80042a0:	2002      	movs	r0, #2
 80042a2:	f7ff fe57 	bl	8003f54 <InvCpltCallback>
		}


		if (gamepadRxIsBusy) {
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <StartDefaultTask+0x354>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <StartDefaultTask+0x31a>
			gamepadRxIsBusy = 0;
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <StartDefaultTask+0x354>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 80042b4:	2209      	movs	r2, #9
 80042b6:	4911      	ldr	r1, [pc, #68]	; (80042fc <StartDefaultTask+0x358>)
 80042b8:	4811      	ldr	r0, [pc, #68]	; (8004300 <StartDefaultTask+0x35c>)
 80042ba:	f004 ff9b 	bl	80091f4 <HAL_UART_Receive_IT>
		}
		if ((huart3.Instance->CR1 & USART_CR1_UE) == 0) {
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <StartDefaultTask+0x35c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d107      	bne.n	80042dc <StartDefaultTask+0x338>
			__HAL_UART_ENABLE(&huart3);
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <StartDefaultTask+0x35c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <StartDefaultTask+0x35c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042da:	60da      	str	r2, [r3, #12]
		}
		osDelay(30);
 80042dc:	201e      	movs	r0, #30
 80042de:	f006 fa3c 	bl	800a75a <osDelay>
		Get_MPU_Angle();
 80042e2:	e665      	b.n	8003fb0 <StartDefaultTask+0xc>
 80042e4:	200012b0 	.word	0x200012b0
 80042e8:	20000000 	.word	0x20000000
 80042ec:	200012a8 	.word	0x200012a8
 80042f0:	00000000 	.word	0x00000000
 80042f4:	200012ac 	.word	0x200012ac
 80042f8:	200011dc 	.word	0x200011dc
 80042fc:	200011a0 	.word	0x200011a0
 8004300:	200008e8 	.word	0x200008e8

08004304 <InverseKinematic>:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	}
}
/* USER CODE END Header_InverseKinematic */
void InverseKinematic(void const * argument)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InverseKinematic */
	uint32_t value = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if(xTaskNotifyWait(pdFALSE, pdFALSE, &value, portMAX_DELAY)){
 8004310:	f107 020c 	add.w	r2, r7, #12
 8004314:	f04f 33ff 	mov.w	r3, #4294967295
 8004318:	2100      	movs	r1, #0
 800431a:	2000      	movs	r0, #0
 800431c:	f006 ffcc 	bl	800b2b8 <xTaskNotifyWait>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <InverseKinematic+0x26>
			Send_Data();
 8004326:	f7fe fe20 	bl	8002f6a <Send_Data>
		}
		osDelay(1);
 800432a:	2001      	movs	r0, #1
 800432c:	f006 fa15 	bl	800a75a <osDelay>
		if(xTaskNotifyWait(pdFALSE, pdFALSE, &value, portMAX_DELAY)){
 8004330:	e7ee      	b.n	8004310 <InverseKinematic+0xc>
	...

08004334 <CAN_Bus>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CAN_Bus */
void CAN_Bus(void const * argument)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	; 0x30
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_Bus */
	CAN_Init();
 800433c:	f7fe fd24 	bl	8002d88 <CAN_Init>
	osDelay(500);
 8004340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004344:	f006 fa09 	bl	800a75a <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_1, CANCTRL_MODE_SET_HOME);
 8004348:	2201      	movs	r2, #1
 800434a:	2101      	movs	r1, #1
 800434c:	4821      	ldr	r0, [pc, #132]	; (80043d4 <CAN_Bus+0xa0>)
 800434e:	f7fe f973 	bl	8002638 <canctrl_RTR_TxRequest>
	osDelay(1);
 8004352:	2001      	movs	r0, #1
 8004354:	f006 fa01 	bl	800a75a <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_2, CANCTRL_MODE_SET_HOME);
 8004358:	2201      	movs	r2, #1
 800435a:	2102      	movs	r1, #2
 800435c:	481d      	ldr	r0, [pc, #116]	; (80043d4 <CAN_Bus+0xa0>)
 800435e:	f7fe f96b 	bl	8002638 <canctrl_RTR_TxRequest>
	osDelay(1);
 8004362:	2001      	movs	r0, #1
 8004364:	f006 f9f9 	bl	800a75a <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_3, CANCTRL_MODE_SET_HOME);
 8004368:	2201      	movs	r2, #1
 800436a:	2103      	movs	r1, #3
 800436c:	4819      	ldr	r0, [pc, #100]	; (80043d4 <CAN_Bus+0xa0>)
 800436e:	f7fe f963 	bl	8002638 <canctrl_RTR_TxRequest>
	osDelay(1);
 8004372:	2001      	movs	r0, #1
 8004374:	f006 f9f1 	bl	800a75a <osDelay>
	osDelay(500);
 8004378:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800437c:	f006 f9ed 	bl	800a75a <osDelay>
	uint32_t modeID;
	/* Infinite loop */
	for (;;) {
		if (xTaskNotifyWait(pdFALSE, pdFALSE, &modeID, portMAX_DELAY)) {
 8004380:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004384:	f04f 33ff 	mov.w	r3, #4294967295
 8004388:	2100      	movs	r1, #0
 800438a:	2000      	movs	r0, #0
 800438c:	f006 ff94 	bl	800b2b8 <xTaskNotifyWait>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f4      	beq.n	8004380 <CAN_Bus+0x4c>
			CAN_RxHeaderTypeDef rxHeader = canctrl_GetRxHeader();
 8004396:	f107 030c 	add.w	r3, r7, #12
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe f92a 	bl	80025f4 <canctrl_GetRxHeader>
			uint32_t targetID = rxHeader.StdId >> CAN_DEVICE_POS;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
			if ((modeID == CANCTRL_MODE_SET_HOME || modeID == CANCTRL_MODE_NODE_REQ_SPEED_ANGLE ) && targetID) {
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d002      	beq.n	80043b2 <CAN_Bus+0x7e>
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d10a      	bne.n	80043c8 <CAN_Bus+0x94>
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <CAN_Bus+0x94>
				handleFunctionCAN(modeID, targetID);
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe fd04 	bl	8002dd0 <handleFunctionCAN>
			}
			HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80043c8:	2102      	movs	r1, #2
 80043ca:	4802      	ldr	r0, [pc, #8]	; (80043d4 <CAN_Bus+0xa0>)
 80043cc:	f001 fe9a 	bl	8006104 <HAL_CAN_ActivateNotification>
		if (xTaskNotifyWait(pdFALSE, pdFALSE, &modeID, portMAX_DELAY)) {
 80043d0:	e7d6      	b.n	8004380 <CAN_Bus+0x4c>
 80043d2:	bf00      	nop
 80043d4:	20000688 	.word	0x20000688

080043d8 <OdometerHandle>:
 */
float TargetAngleTrajec,TargetAngleTrajecAccel;
uint8_t CB5;
/* USER CODE END Header_OdometerHandle */
void OdometerHandle(void const * argument)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OdometerHandle */
	  /* USER CODE BEGIN OdometerHandle */

		process_Init();
 80043e0:	f7fe fe2c 	bl	800303c <process_Init>
		/* Infinite loop */
		for (;;) {
			CB5 = HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin);
 80043e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043e8:	4867      	ldr	r0, [pc, #412]	; (8004588 <OdometerHandle+0x1b0>)
 80043ea:	f002 ff73 	bl	80072d4 <HAL_GPIO_ReadPin>
 80043ee:	4603      	mov	r3, r0
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b66      	ldr	r3, [pc, #408]	; (800458c <OdometerHandle+0x1b4>)
 80043f4:	701a      	strb	r2, [r3, #0]
			else if(step == 4)// Doi Nhan nut de chay tiep
			{
				// if (dieu kien nut nhan duoc nhan)step = 5;
			}
--------------------------------------------CODE MAU--------------------------------------------------*/
			angle_Rad = (a_Now/10)*M_PI/180;
 80043f6:	4b66      	ldr	r3, [pc, #408]	; (8004590 <OdometerHandle+0x1b8>)
 80043f8:	edd3 7a00 	vldr	s15, [r3]
 80043fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004400:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004404:	ee16 0a90 	vmov	r0, s13
 8004408:	f7fc f89e 	bl	8000548 <__aeabi_f2d>
 800440c:	a35c      	add	r3, pc, #368	; (adr r3, 8004580 <OdometerHandle+0x1a8>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f7fc f8f1 	bl	80005f8 <__aeabi_dmul>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	4b5c      	ldr	r3, [pc, #368]	; (8004594 <OdometerHandle+0x1bc>)
 8004424:	f7fc fa12 	bl	800084c <__aeabi_ddiv>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	f7fc fbba 	bl	8000ba8 <__aeabi_d2f>
 8004434:	4603      	mov	r3, r0
 8004436:	4a58      	ldr	r2, [pc, #352]	; (8004598 <OdometerHandle+0x1c0>)
 8004438:	6013      	str	r3, [r2, #0]

			if (step == 0)
 800443a:	4b58      	ldr	r3, [pc, #352]	; (800459c <OdometerHandle+0x1c4>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <OdometerHandle+0x98>
				{
				  	startPutBall(0);
 8004442:	2000      	movs	r0, #0
 8004444:	f7fc ffce 	bl	80013e4 <startPutBall>


					if (GamePad.Up)
 8004448:	4b55      	ldr	r3, [pc, #340]	; (80045a0 <OdometerHandle+0x1c8>)
 800444a:	799b      	ldrb	r3, [r3, #6]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d03f      	beq.n	80044d0 <OdometerHandle+0xf8>
					{
						osDelay(500);
 8004450:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004454:	f006 f981 	bl	800a75a <osDelay>
						if(GamePad.Up)
 8004458:	4b51      	ldr	r3, [pc, #324]	; (80045a0 <OdometerHandle+0x1c8>)
 800445a:	799b      	ldrb	r3, [r3, #6]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d037      	beq.n	80044d0 <OdometerHandle+0xf8>
						{
							Reset_MPU_Angle();
 8004460:	f7fe fdda 	bl	8003018 <Reset_MPU_Angle>
							process_ResetFloatingEnc();
 8004464:	f7fe ff9c 	bl	80033a0 <process_ResetFloatingEnc>
							step = 1;
 8004468:	4b4c      	ldr	r3, [pc, #304]	; (800459c <OdometerHandle+0x1c4>)
 800446a:	2201      	movs	r2, #1
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e02f      	b.n	80044d0 <OdometerHandle+0xf8>
						}
					}
				}

				else if (step == 1){
 8004470:	4b4a      	ldr	r3, [pc, #296]	; (800459c <OdometerHandle+0x1c4>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d116      	bne.n	80044a6 <OdometerHandle+0xce>
//					process_Accel_FloatingEnc(0, 0.8, 1000, 0.2);
					startPutBall(1);
 8004478:	2001      	movs	r0, #1
 800447a:	f7fc ffb3 	bl	80013e4 <startPutBall>

					if (GamePad.Up)
 800447e:	4b48      	ldr	r3, [pc, #288]	; (80045a0 <OdometerHandle+0x1c8>)
 8004480:	799b      	ldrb	r3, [r3, #6]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d024      	beq.n	80044d0 <OdometerHandle+0xf8>
					{
						osDelay(500);
 8004486:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800448a:	f006 f966 	bl	800a75a <osDelay>
						if(GamePad.Up)
 800448e:	4b44      	ldr	r3, [pc, #272]	; (80045a0 <OdometerHandle+0x1c8>)
 8004490:	799b      	ldrb	r3, [r3, #6]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01c      	beq.n	80044d0 <OdometerHandle+0xf8>
						{
							Reset_MPU_Angle();
 8004496:	f7fe fdbf 	bl	8003018 <Reset_MPU_Angle>
							process_ResetFloatingEnc();
 800449a:	f7fe ff81 	bl	80033a0 <process_ResetFloatingEnc>
							step = 2;
 800449e:	4b3f      	ldr	r3, [pc, #252]	; (800459c <OdometerHandle+0x1c4>)
 80044a0:	2202      	movs	r2, #2
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	e014      	b.n	80044d0 <OdometerHandle+0xf8>
						}
					}
				}
				else if (step == 2){
 80044a6:	4b3d      	ldr	r3, [pc, #244]	; (800459c <OdometerHandle+0x1c4>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d110      	bne.n	80044d0 <OdometerHandle+0xf8>
					use_pidTheta = 1;
 80044ae:	4b3d      	ldr	r3, [pc, #244]	; (80045a4 <OdometerHandle+0x1cc>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	701a      	strb	r2, [r3, #0]
					process_Accel_FloatingEnc(0,0.8,3000,0.05,90,0.05);
 80044b4:	eddf 2a3c 	vldr	s5, [pc, #240]	; 80045a8 <OdometerHandle+0x1d0>
 80044b8:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 80045ac <OdometerHandle+0x1d4>
 80044bc:	eddf 1a3a 	vldr	s3, [pc, #232]	; 80045a8 <OdometerHandle+0x1d0>
 80044c0:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 80045b0 <OdometerHandle+0x1d8>
 80044c4:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80045b4 <OdometerHandle+0x1dc>
 80044c8:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80045b8 <OdometerHandle+0x1e0>
 80044cc:	f7fe fdf0 	bl	80030b0 <process_Accel_FloatingEnc>
				}

			process_SetFloatingEnc();
 80044d0:	f7fe ff52 	bl	8003378 <process_SetFloatingEnc>
			if (GamePad.Down && GamePad.Cross)//Chuyen Sang Che Do GamePad
 80044d4:	4b32      	ldr	r3, [pc, #200]	; (80045a0 <OdometerHandle+0x1c8>)
 80044d6:	7a1b      	ldrb	r3, [r3, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d011      	beq.n	8004500 <OdometerHandle+0x128>
 80044dc:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <OdometerHandle+0x1c8>)
 80044de:	7b1b      	ldrb	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <OdometerHandle+0x128>
			{
				osDelay(100);
 80044e4:	2064      	movs	r0, #100	; 0x64
 80044e6:	f006 f938 	bl	800a75a <osDelay>
				if (GamePad.Down && GamePad.Cross)
 80044ea:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <OdometerHandle+0x1c8>)
 80044ec:	7a1b      	ldrb	r3, [r3, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d006      	beq.n	8004500 <OdometerHandle+0x128>
 80044f2:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <OdometerHandle+0x1c8>)
 80044f4:	7b1b      	ldrb	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <OdometerHandle+0x128>
				{
					Gamepad = 1;
 80044fa:	4b30      	ldr	r3, [pc, #192]	; (80045bc <OdometerHandle+0x1e4>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
				}
			}

			if((GamePad.Square == 1)&&(GamePad.Right == 1))// Xa day
 8004500:	4b27      	ldr	r3, [pc, #156]	; (80045a0 <OdometerHandle+0x1c8>)
 8004502:	7a5b      	ldrb	r3, [r3, #9]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d111      	bne.n	800452c <OdometerHandle+0x154>
 8004508:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <OdometerHandle+0x1c8>)
 800450a:	79db      	ldrb	r3, [r3, #7]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10d      	bne.n	800452c <OdometerHandle+0x154>
			{
				osDelay(100);
 8004510:	2064      	movs	r0, #100	; 0x64
 8004512:	f006 f922 	bl	800a75a <osDelay>
				if((GamePad.Square == 1)&&(GamePad.Right == 1))
 8004516:	4b22      	ldr	r3, [pc, #136]	; (80045a0 <OdometerHandle+0x1c8>)
 8004518:	7a5b      	ldrb	r3, [r3, #9]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d106      	bne.n	800452c <OdometerHandle+0x154>
 800451e:	4b20      	ldr	r3, [pc, #128]	; (80045a0 <OdometerHandle+0x1c8>)
 8004520:	79db      	ldrb	r3, [r3, #7]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d102      	bne.n	800452c <OdometerHandle+0x154>
				{
					xaDay = 1;
 8004526:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <OdometerHandle+0x1e8>)
 8004528:	2201      	movs	r2, #1
 800452a:	701a      	strb	r2, [r3, #0]
				}
			}

			if (Gamepad == 1)
 800452c:	4b23      	ldr	r3, [pc, #140]	; (80045bc <OdometerHandle+0x1e4>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d108      	bne.n	8004546 <OdometerHandle+0x16e>
			{
				uControlX = 	-GamePad.XLeftCtr;
 8004534:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <OdometerHandle+0x1c8>)
 8004536:	edd3 7a06 	vldr	s15, [r3, #24]
 800453a:	eef1 7a67 	vneg.f32	s15, s15
 800453e:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <OdometerHandle+0x1ec>)
 8004540:	edc3 7a00 	vstr	s15, [r3]
 8004544:	e010      	b.n	8004568 <OdometerHandle+0x190>
//				uControlY = 	GamePad.YLeftCtr;
//				uControlTheta = GamePad.XRightCtr;
			}
			else {
				process_Signal_RotationMatrixTransform(u, v, r);
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <OdometerHandle+0x1f0>)
 8004548:	edd3 7a00 	vldr	s15, [r3]
 800454c:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <OdometerHandle+0x1f4>)
 800454e:	ed93 7a00 	vldr	s14, [r3]
 8004552:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <OdometerHandle+0x1f8>)
 8004554:	edd3 6a00 	vldr	s13, [r3]
 8004558:	eeb0 1a66 	vmov.f32	s2, s13
 800455c:	eef0 0a47 	vmov.f32	s1, s14
 8004560:	eeb0 0a67 	vmov.f32	s0, s15
 8004564:	f7fe ff26 	bl	80033b4 <process_Signal_RotationMatrixTransform>
			}
///////////////////////////////////////////////////////////////////////////////////////////////////////
			xTaskNotify(TaskInvKineHandle,1,eSetValueWithOverwrite);
 8004568:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <OdometerHandle+0x1fc>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	2300      	movs	r3, #0
 800456e:	2203      	movs	r2, #3
 8004570:	2101      	movs	r1, #1
 8004572:	f006 ff01 	bl	800b378 <xTaskGenericNotify>
			osDelay(DELTA_T);
 8004576:	2000      	movs	r0, #0
 8004578:	f006 f8ef 	bl	800a75a <osDelay>
			CB5 = HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin);
 800457c:	e732      	b.n	80043e4 <OdometerHandle+0xc>
 800457e:	bf00      	nop
 8004580:	54442d18 	.word	0x54442d18
 8004584:	400921fb 	.word	0x400921fb
 8004588:	40021000 	.word	0x40021000
 800458c:	200012b7 	.word	0x200012b7
 8004590:	20001200 	.word	0x20001200
 8004594:	40668000 	.word	0x40668000
 8004598:	20001204 	.word	0x20001204
 800459c:	200011ee 	.word	0x200011ee
 80045a0:	200011b8 	.word	0x200011b8
 80045a4:	20001250 	.word	0x20001250
 80045a8:	3d4ccccd 	.word	0x3d4ccccd
 80045ac:	42b40000 	.word	0x42b40000
 80045b0:	453b8000 	.word	0x453b8000
 80045b4:	3f4ccccd 	.word	0x3f4ccccd
 80045b8:	00000000 	.word	0x00000000
 80045bc:	200011ed 	.word	0x200011ed
 80045c0:	200011ec 	.word	0x200011ec
 80045c4:	200011e0 	.word	0x200011e0
 80045c8:	20001290 	.word	0x20001290
 80045cc:	20001294 	.word	0x20001294
 80045d0:	20001298 	.word	0x20001298
 80045d4:	200009f0 	.word	0x200009f0

080045d8 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80045ea:	f000 fd8f 	bl	800510c <HAL_IncTick>

  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40002000 	.word	0x40002000

080045fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004600:	b672      	cpsid	i
}
 8004602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004604:	e7fe      	b.n	8004604 <Error_Handler+0x8>
	...

08004608 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_MspInit+0x54>)
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	4a11      	ldr	r2, [pc, #68]	; (800465c <HAL_MspInit+0x54>)
 8004618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800461c:	6453      	str	r3, [r2, #68]	; 0x44
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_MspInit+0x54>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_MspInit+0x54>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	4a0a      	ldr	r2, [pc, #40]	; (800465c <HAL_MspInit+0x54>)
 8004634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004638:	6413      	str	r3, [r2, #64]	; 0x40
 800463a:	4b08      	ldr	r3, [pc, #32]	; (800465c <HAL_MspInit+0x54>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004646:	2200      	movs	r2, #0
 8004648:	210f      	movs	r1, #15
 800464a:	f06f 0001 	mvn.w	r0, #1
 800464e:	f002 f879 	bl	8006744 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800

08004660 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <HAL_ADC_MspInit+0x8c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d12f      	bne.n	80046e2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <HAL_ADC_MspInit+0x90>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <HAL_ADC_MspInit+0x90>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6453      	str	r3, [r2, #68]	; 0x44
 8004692:	4b17      	ldr	r3, [pc, #92]	; (80046f0 <HAL_ADC_MspInit+0x90>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_ADC_MspInit+0x90>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a12      	ldr	r2, [pc, #72]	; (80046f0 <HAL_ADC_MspInit+0x90>)
 80046a8:	f043 0304 	orr.w	r3, r3, #4
 80046ac:	6313      	str	r3, [r2, #48]	; 0x30
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <HAL_ADC_MspInit+0x90>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80046ba:	2302      	movs	r3, #2
 80046bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046be:	2303      	movs	r3, #3
 80046c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046c6:	f107 0314 	add.w	r3, r7, #20
 80046ca:	4619      	mov	r1, r3
 80046cc:	4809      	ldr	r0, [pc, #36]	; (80046f4 <HAL_ADC_MspInit+0x94>)
 80046ce:	f002 fc65 	bl	8006f9c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80046d2:	2200      	movs	r2, #0
 80046d4:	2105      	movs	r1, #5
 80046d6:	2012      	movs	r0, #18
 80046d8:	f002 f834 	bl	8006744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80046dc:	2012      	movs	r0, #18
 80046de:	f002 f84d 	bl	800677c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80046e2:	bf00      	nop
 80046e4:	3728      	adds	r7, #40	; 0x28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40012000 	.word	0x40012000
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40020800 	.word	0x40020800

080046f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	; 0x28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1d      	ldr	r2, [pc, #116]	; (800478c <HAL_CAN_MspInit+0x94>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d134      	bne.n	8004784 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <HAL_CAN_MspInit+0x98>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <HAL_CAN_MspInit+0x98>)
 8004724:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004728:	6413      	str	r3, [r2, #64]	; 0x40
 800472a:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_CAN_MspInit+0x98>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <HAL_CAN_MspInit+0x98>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	4a14      	ldr	r2, [pc, #80]	; (8004790 <HAL_CAN_MspInit+0x98>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6313      	str	r3, [r2, #48]	; 0x30
 8004746:	4b12      	ldr	r3, [pc, #72]	; (8004790 <HAL_CAN_MspInit+0x98>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004752:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004758:	2302      	movs	r3, #2
 800475a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004760:	2303      	movs	r3, #3
 8004762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004764:	2309      	movs	r3, #9
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004768:	f107 0314 	add.w	r3, r7, #20
 800476c:	4619      	mov	r1, r3
 800476e:	4809      	ldr	r0, [pc, #36]	; (8004794 <HAL_CAN_MspInit+0x9c>)
 8004770:	f002 fc14 	bl	8006f9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004774:	2200      	movs	r2, #0
 8004776:	2105      	movs	r1, #5
 8004778:	2014      	movs	r0, #20
 800477a:	f001 ffe3 	bl	8006744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800477e:	2014      	movs	r0, #20
 8004780:	f001 fffc 	bl	800677c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004784:	bf00      	nop
 8004786:	3728      	adds	r7, #40	; 0x28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40006400 	.word	0x40006400
 8004790:	40023800 	.word	0x40023800
 8004794:	40020000 	.word	0x40020000

08004798 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	; 0x30
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a0:	f107 031c 	add.w	r3, r7, #28
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a46      	ldr	r2, [pc, #280]	; (80048d0 <HAL_TIM_Encoder_MspInit+0x138>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d12d      	bne.n	8004816 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	4b45      	ldr	r3, [pc, #276]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	4a44      	ldr	r2, [pc, #272]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ca:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	4b3e      	ldr	r3, [pc, #248]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	4a3d      	ldr	r2, [pc, #244]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	6313      	str	r3, [r2, #48]	; 0x30
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80047f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f8:	2302      	movs	r3, #2
 80047fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004800:	2300      	movs	r3, #0
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004804:	2301      	movs	r3, #1
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004808:	f107 031c 	add.w	r3, r7, #28
 800480c:	4619      	mov	r1, r3
 800480e:	4832      	ldr	r0, [pc, #200]	; (80048d8 <HAL_TIM_Encoder_MspInit+0x140>)
 8004810:	f002 fbc4 	bl	8006f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004814:	e057      	b.n	80048c6 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM2)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d152      	bne.n	80048c6 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	4a2a      	ldr	r2, [pc, #168]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6413      	str	r3, [r2, #64]	; 0x40
 8004830:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6313      	str	r3, [r2, #48]	; 0x30
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004858:	2300      	movs	r3, #0
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	4a1c      	ldr	r2, [pc, #112]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004862:	f043 0302 	orr.w	r3, r3, #2
 8004866:	6313      	str	r3, [r2, #48]	; 0x30
 8004868:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487a:	2302      	movs	r3, #2
 800487c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004882:	2300      	movs	r3, #0
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004886:	2301      	movs	r3, #1
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800488a:	f107 031c 	add.w	r3, r7, #28
 800488e:	4619      	mov	r1, r3
 8004890:	4811      	ldr	r0, [pc, #68]	; (80048d8 <HAL_TIM_Encoder_MspInit+0x140>)
 8004892:	f002 fb83 	bl	8006f9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004896:	2308      	movs	r3, #8
 8004898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489a:	2302      	movs	r3, #2
 800489c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a2:	2300      	movs	r3, #0
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048a6:	2301      	movs	r3, #1
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048aa:	f107 031c 	add.w	r3, r7, #28
 80048ae:	4619      	mov	r1, r3
 80048b0:	480a      	ldr	r0, [pc, #40]	; (80048dc <HAL_TIM_Encoder_MspInit+0x144>)
 80048b2:	f002 fb73 	bl	8006f9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80048b6:	2200      	movs	r2, #0
 80048b8:	2105      	movs	r1, #5
 80048ba:	201c      	movs	r0, #28
 80048bc:	f001 ff42 	bl	8006744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048c0:	201c      	movs	r0, #28
 80048c2:	f001 ff5b 	bl	800677c <HAL_NVIC_EnableIRQ>
}
 80048c6:	bf00      	nop
 80048c8:	3730      	adds	r7, #48	; 0x30
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40020000 	.word	0x40020000
 80048dc:	40020400 	.word	0x40020400

080048e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a2c      	ldr	r2, [pc, #176]	; (80049a0 <HAL_TIM_Base_MspInit+0xc0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10e      	bne.n	8004910 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	4b2b      	ldr	r3, [pc, #172]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	4a2a      	ldr	r2, [pc, #168]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	6413      	str	r3, [r2, #64]	; 0x40
 8004902:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800490e:	e042      	b.n	8004996 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a24      	ldr	r2, [pc, #144]	; (80049a8 <HAL_TIM_Base_MspInit+0xc8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d116      	bne.n	8004948 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	6413      	str	r3, [r2, #64]	; 0x40
 800492a:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004936:	2200      	movs	r2, #0
 8004938:	2105      	movs	r1, #5
 800493a:	201e      	movs	r0, #30
 800493c:	f001 ff02 	bl	8006744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004940:	201e      	movs	r0, #30
 8004942:	f001 ff1b 	bl	800677c <HAL_NVIC_EnableIRQ>
}
 8004946:	e026      	b.n	8004996 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a17      	ldr	r2, [pc, #92]	; (80049ac <HAL_TIM_Base_MspInit+0xcc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d10e      	bne.n	8004970 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 800495c:	f043 0308 	orr.w	r3, r3, #8
 8004960:	6413      	str	r3, [r2, #64]	; 0x40
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
}
 800496e:	e012      	b.n	8004996 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <HAL_TIM_Base_MspInit+0xd0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10d      	bne.n	8004996 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 8004984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004988:	6453      	str	r3, [r2, #68]	; 0x44
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_TIM_Base_MspInit+0xc4>)
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	68bb      	ldr	r3, [r7, #8]
}
 8004996:	bf00      	nop
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40014400 	.word	0x40014400

080049b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049bc:	f107 0314 	add.w	r3, r7, #20
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	60da      	str	r2, [r3, #12]
 80049ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <HAL_TIM_MspPostInit+0xb0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d11e      	bne.n	8004a14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <HAL_TIM_MspPostInit+0xb4>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	4a22      	ldr	r2, [pc, #136]	; (8004a68 <HAL_TIM_MspPostInit+0xb4>)
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	6313      	str	r3, [r2, #48]	; 0x30
 80049e6:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <HAL_TIM_MspPostInit+0xb4>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80049f2:	2330      	movs	r3, #48	; 0x30
 80049f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f6:	2302      	movs	r3, #2
 80049f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049fe:	2300      	movs	r3, #0
 8004a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a02:	2302      	movs	r3, #2
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a06:	f107 0314 	add.w	r3, r7, #20
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4817      	ldr	r0, [pc, #92]	; (8004a6c <HAL_TIM_MspPostInit+0xb8>)
 8004a0e:	f002 fac5 	bl	8006f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004a12:	e022      	b.n	8004a5a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <HAL_TIM_MspPostInit+0xbc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d11d      	bne.n	8004a5a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <HAL_TIM_MspPostInit+0xb4>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <HAL_TIM_MspPostInit+0xb4>)
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <HAL_TIM_MspPostInit+0xb4>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a3e:	2302      	movs	r3, #2
 8004a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a46:	2300      	movs	r3, #0
 8004a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a4e:	f107 0314 	add.w	r3, r7, #20
 8004a52:	4619      	mov	r1, r3
 8004a54:	4807      	ldr	r0, [pc, #28]	; (8004a74 <HAL_TIM_MspPostInit+0xc0>)
 8004a56:	f002 faa1 	bl	8006f9c <HAL_GPIO_Init>
}
 8004a5a:	bf00      	nop
 8004a5c:	3728      	adds	r7, #40	; 0x28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40020400 	.word	0x40020400
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40020000 	.word	0x40020000

08004a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08e      	sub	sp, #56	; 0x38
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a86      	ldr	r2, [pc, #536]	; (8004cb0 <HAL_UART_MspInit+0x238>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d163      	bne.n	8004b62 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	4b85      	ldr	r3, [pc, #532]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	4a84      	ldr	r2, [pc, #528]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004aa4:	f043 0310 	orr.w	r3, r3, #16
 8004aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aaa:	4b82      	ldr	r3, [pc, #520]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	f003 0310 	and.w	r3, r3, #16
 8004ab2:	623b      	str	r3, [r7, #32]
 8004ab4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	4b7e      	ldr	r3, [pc, #504]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	4a7d      	ldr	r2, [pc, #500]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004ac0:	f043 0302 	orr.w	r3, r3, #2
 8004ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac6:	4b7b      	ldr	r3, [pc, #492]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ad2:	23c0      	movs	r3, #192	; 0xc0
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ae2:	2307      	movs	r3, #7
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aea:	4619      	mov	r1, r3
 8004aec:	4872      	ldr	r0, [pc, #456]	; (8004cb8 <HAL_UART_MspInit+0x240>)
 8004aee:	f002 fa55 	bl	8006f9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004af2:	4b72      	ldr	r3, [pc, #456]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004af4:	4a72      	ldr	r2, [pc, #456]	; (8004cc0 <HAL_UART_MspInit+0x248>)
 8004af6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004af8:	4b70      	ldr	r3, [pc, #448]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004afe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b00:	4b6e      	ldr	r3, [pc, #440]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b06:	4b6d      	ldr	r3, [pc, #436]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b0c:	4b6b      	ldr	r3, [pc, #428]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b12:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b14:	4b69      	ldr	r3, [pc, #420]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b1a:	4b68      	ldr	r3, [pc, #416]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004b20:	4b66      	ldr	r3, [pc, #408]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b26:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b28:	4b64      	ldr	r3, [pc, #400]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b2e:	4b63      	ldr	r3, [pc, #396]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004b34:	4861      	ldr	r0, [pc, #388]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b36:	f001 fe2f 	bl	8006798 <HAL_DMA_Init>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004b40:	f7ff fd5c 	bl	80045fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a5d      	ldr	r2, [pc, #372]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
 8004b4a:	4a5c      	ldr	r2, [pc, #368]	; (8004cbc <HAL_UART_MspInit+0x244>)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004b50:	2200      	movs	r2, #0
 8004b52:	2105      	movs	r1, #5
 8004b54:	2025      	movs	r0, #37	; 0x25
 8004b56:	f001 fdf5 	bl	8006744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b5a:	2025      	movs	r0, #37	; 0x25
 8004b5c:	f001 fe0e 	bl	800677c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004b60:	e0a1      	b.n	8004ca6 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a57      	ldr	r2, [pc, #348]	; (8004cc4 <HAL_UART_MspInit+0x24c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d162      	bne.n	8004c32 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	4b50      	ldr	r3, [pc, #320]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	4a4f      	ldr	r2, [pc, #316]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b7c:	4b4d      	ldr	r3, [pc, #308]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	4b49      	ldr	r3, [pc, #292]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	4a48      	ldr	r2, [pc, #288]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004b92:	f043 0308 	orr.w	r3, r3, #8
 8004b96:	6313      	str	r3, [r2, #48]	; 0x30
 8004b98:	4b46      	ldr	r3, [pc, #280]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004ba4:	2360      	movs	r3, #96	; 0x60
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bb4:	2307      	movs	r3, #7
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4842      	ldr	r0, [pc, #264]	; (8004cc8 <HAL_UART_MspInit+0x250>)
 8004bc0:	f002 f9ec 	bl	8006f9c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004bc4:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004bc6:	4a42      	ldr	r2, [pc, #264]	; (8004cd0 <HAL_UART_MspInit+0x258>)
 8004bc8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004bca:	4b40      	ldr	r3, [pc, #256]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004bcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bd0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bd2:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004bd4:	2240      	movs	r2, #64	; 0x40
 8004bd6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bd8:	4b3c      	ldr	r3, [pc, #240]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bde:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004be4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004be6:	4b39      	ldr	r3, [pc, #228]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bec:	4b37      	ldr	r3, [pc, #220]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bf8:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bfe:	4b33      	ldr	r3, [pc, #204]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004c04:	4831      	ldr	r0, [pc, #196]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004c06:	f001 fdc7 	bl	8006798 <HAL_DMA_Init>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004c10:	f7ff fcf4 	bl	80045fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a2d      	ldr	r2, [pc, #180]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004c18:	635a      	str	r2, [r3, #52]	; 0x34
 8004c1a:	4a2c      	ldr	r2, [pc, #176]	; (8004ccc <HAL_UART_MspInit+0x254>)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004c20:	2200      	movs	r2, #0
 8004c22:	2105      	movs	r1, #5
 8004c24:	2026      	movs	r0, #38	; 0x26
 8004c26:	f001 fd8d 	bl	8006744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c2a:	2026      	movs	r0, #38	; 0x26
 8004c2c:	f001 fda6 	bl	800677c <HAL_NVIC_EnableIRQ>
}
 8004c30:	e039      	b.n	8004ca6 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a27      	ldr	r2, [pc, #156]	; (8004cd4 <HAL_UART_MspInit+0x25c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d134      	bne.n	8004ca6 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	4a14      	ldr	r2, [pc, #80]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004c62:	f043 0302 	orr.w	r3, r3, #2
 8004c66:	6313      	str	r3, [r2, #48]	; 0x30
 8004c68:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_UART_MspInit+0x23c>)
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c82:	2303      	movs	r3, #3
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c86:	2307      	movs	r3, #7
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4809      	ldr	r0, [pc, #36]	; (8004cb8 <HAL_UART_MspInit+0x240>)
 8004c92:	f002 f983 	bl	8006f9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2105      	movs	r1, #5
 8004c9a:	2027      	movs	r0, #39	; 0x27
 8004c9c:	f001 fd52 	bl	8006744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004ca0:	2027      	movs	r0, #39	; 0x27
 8004ca2:	f001 fd6b 	bl	800677c <HAL_NVIC_EnableIRQ>
}
 8004ca6:	bf00      	nop
 8004ca8:	3738      	adds	r7, #56	; 0x38
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40011000 	.word	0x40011000
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	40020400 	.word	0x40020400
 8004cbc:	2000092c 	.word	0x2000092c
 8004cc0:	40026440 	.word	0x40026440
 8004cc4:	40004400 	.word	0x40004400
 8004cc8:	40020c00 	.word	0x40020c00
 8004ccc:	2000098c 	.word	0x2000098c
 8004cd0:	400260a0 	.word	0x400260a0
 8004cd4:	40004800 	.word	0x40004800

08004cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08e      	sub	sp, #56	; 0x38
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_InitTick+0xe4>)
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	4a32      	ldr	r2, [pc, #200]	; (8004dbc <HAL_InitTick+0xe4>)
 8004cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf8:	4b30      	ldr	r3, [pc, #192]	; (8004dbc <HAL_InitTick+0xe4>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d04:	f107 0210 	add.w	r2, r7, #16
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f002 ffaa 	bl	8007c68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004d1e:	f002 ff7b 	bl	8007c18 <HAL_RCC_GetPCLK1Freq>
 8004d22:	6378      	str	r0, [r7, #52]	; 0x34
 8004d24:	e004      	b.n	8004d30 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004d26:	f002 ff77 	bl	8007c18 <HAL_RCC_GetPCLK1Freq>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d32:	4a23      	ldr	r2, [pc, #140]	; (8004dc0 <HAL_InitTick+0xe8>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	0c9b      	lsrs	r3, r3, #18
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004d3e:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <HAL_InitTick+0xec>)
 8004d40:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <HAL_InitTick+0xf0>)
 8004d42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004d44:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <HAL_InitTick+0xec>)
 8004d46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d4a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <HAL_InitTick+0xec>)
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004d52:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <HAL_InitTick+0xec>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_InitTick+0xec>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d5e:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <HAL_InitTick+0xec>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8004d64:	4817      	ldr	r0, [pc, #92]	; (8004dc4 <HAL_InitTick+0xec>)
 8004d66:	f002 ffb1 	bl	8007ccc <HAL_TIM_Base_Init>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004d70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d11b      	bne.n	8004db0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8004d78:	4812      	ldr	r0, [pc, #72]	; (8004dc4 <HAL_InitTick+0xec>)
 8004d7a:	f002 fff7 	bl	8007d6c <HAL_TIM_Base_Start_IT>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004d84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d111      	bne.n	8004db0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004d8c:	202d      	movs	r0, #45	; 0x2d
 8004d8e:	f001 fcf5 	bl	800677c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b0f      	cmp	r3, #15
 8004d96:	d808      	bhi.n	8004daa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8004d98:	2200      	movs	r2, #0
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	202d      	movs	r0, #45	; 0x2d
 8004d9e:	f001 fcd1 	bl	8006744 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004da2:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <HAL_InitTick+0xf4>)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e002      	b.n	8004db0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004db0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3738      	adds	r7, #56	; 0x38
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	431bde83 	.word	0x431bde83
 8004dc4:	200012b8 	.word	0x200012b8
 8004dc8:	40002000 	.word	0x40002000
 8004dcc:	20000008 	.word	0x20000008

08004dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dd4:	e7fe      	b.n	8004dd4 <NMI_Handler+0x4>

08004dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dda:	e7fe      	b.n	8004dda <HardFault_Handler+0x4>

08004ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004de0:	e7fe      	b.n	8004de0 <MemManage_Handler+0x4>

08004de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004de2:	b480      	push	{r7}
 8004de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004de6:	e7fe      	b.n	8004de6 <BusFault_Handler+0x4>

08004de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dec:	e7fe      	b.n	8004dec <UsageFault_Handler+0x4>

08004dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dee:	b480      	push	{r7}
 8004df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004e00:	4802      	ldr	r0, [pc, #8]	; (8004e0c <DMA1_Stream6_IRQHandler+0x10>)
 8004e02:	f001 fe61 	bl	8006ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	2000098c 	.word	0x2000098c

08004e10 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e14:	4802      	ldr	r0, [pc, #8]	; (8004e20 <ADC_IRQHandler+0x10>)
 8004e16:	f000 f9dc 	bl	80051d2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004e1a:	bf00      	nop
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000640 	.word	0x20000640

08004e24 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004e28:	4802      	ldr	r0, [pc, #8]	; (8004e34 <CAN1_RX0_IRQHandler+0x10>)
 8004e2a:	f001 f9b8 	bl	800619e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000688 	.word	0x20000688

08004e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e3c:	4802      	ldr	r0, [pc, #8]	; (8004e48 <TIM2_IRQHandler+0x10>)
 8004e3e:	f003 fa5b 	bl	80082f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	200006f8 	.word	0x200006f8

08004e4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004e50:	4802      	ldr	r0, [pc, #8]	; (8004e5c <TIM4_IRQHandler+0x10>)
 8004e52:	f003 fa51 	bl	80082f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004e56:	bf00      	nop
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000788 	.word	0x20000788

08004e60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e64:	4802      	ldr	r0, [pc, #8]	; (8004e70 <USART1_IRQHandler+0x10>)
 8004e66:	f004 fa25 	bl	80092b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000860 	.word	0x20000860

08004e74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e78:	4802      	ldr	r0, [pc, #8]	; (8004e84 <USART2_IRQHandler+0x10>)
 8004e7a:	f004 fa1b 	bl	80092b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	200008a4 	.word	0x200008a4

08004e88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004e8c:	4802      	ldr	r0, [pc, #8]	; (8004e98 <USART3_IRQHandler+0x10>)
 8004e8e:	f004 fa11 	bl	80092b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004e92:	bf00      	nop
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	200008e8 	.word	0x200008e8

08004e9c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004ea0:	4802      	ldr	r0, [pc, #8]	; (8004eac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004ea2:	f003 fa29 	bl	80082f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004ea6:	bf00      	nop
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200012b8 	.word	0x200012b8

08004eb0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004eb4:	4802      	ldr	r0, [pc, #8]	; (8004ec0 <DMA2_Stream2_IRQHandler+0x10>)
 8004eb6:	f001 fe07 	bl	8006ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004eba:	bf00      	nop
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	2000092c 	.word	0x2000092c

08004ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return 1;
 8004ec8:	2301      	movs	r3, #1
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <_kill>:

int _kill(int pid, int sig)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ede:	f007 fec1 	bl	800cc64 <__errno>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2216      	movs	r2, #22
 8004ee6:	601a      	str	r2, [r3, #0]
  return -1;
 8004ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <_exit>:

void _exit (int status)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004efc:	f04f 31ff 	mov.w	r1, #4294967295
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ffe7 	bl	8004ed4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f06:	e7fe      	b.n	8004f06 <_exit+0x12>

08004f08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	e00a      	b.n	8004f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f1a:	f3af 8000 	nop.w
 8004f1e:	4601      	mov	r1, r0
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	60ba      	str	r2, [r7, #8]
 8004f26:	b2ca      	uxtb	r2, r1
 8004f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	dbf0      	blt.n	8004f1a <_read+0x12>
  }

  return len;
 8004f38:	687b      	ldr	r3, [r7, #4]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e009      	b.n	8004f68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	60ba      	str	r2, [r7, #8]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	3301      	adds	r3, #1
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	dbf1      	blt.n	8004f54 <_write+0x12>
  }
  return len;
 8004f70:	687b      	ldr	r3, [r7, #4]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_close>:

int _close(int file)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fa2:	605a      	str	r2, [r3, #4]
  return 0;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <_isatty>:

int _isatty(int file)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004fba:	2301      	movs	r3, #1
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fec:	4a14      	ldr	r2, [pc, #80]	; (8005040 <_sbrk+0x5c>)
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <_sbrk+0x60>)
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ff8:	4b13      	ldr	r3, [pc, #76]	; (8005048 <_sbrk+0x64>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d102      	bne.n	8005006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005000:	4b11      	ldr	r3, [pc, #68]	; (8005048 <_sbrk+0x64>)
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <_sbrk+0x68>)
 8005004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005006:	4b10      	ldr	r3, [pc, #64]	; (8005048 <_sbrk+0x64>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	429a      	cmp	r2, r3
 8005012:	d207      	bcs.n	8005024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005014:	f007 fe26 	bl	800cc64 <__errno>
 8005018:	4603      	mov	r3, r0
 800501a:	220c      	movs	r2, #12
 800501c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800501e:	f04f 33ff 	mov.w	r3, #4294967295
 8005022:	e009      	b.n	8005038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <_sbrk+0x64>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <_sbrk+0x64>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	4a05      	ldr	r2, [pc, #20]	; (8005048 <_sbrk+0x64>)
 8005034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005036:	68fb      	ldr	r3, [r7, #12]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20020000 	.word	0x20020000
 8005044:	00000400 	.word	0x00000400
 8005048:	20001300 	.word	0x20001300
 800504c:	200051a8 	.word	0x200051a8

08005050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <SystemInit+0x20>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	4a05      	ldr	r2, [pc, #20]	; (8005070 <SystemInit+0x20>)
 800505c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000ed00 	.word	0xe000ed00

08005074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005078:	480d      	ldr	r0, [pc, #52]	; (80050b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800507a:	490e      	ldr	r1, [pc, #56]	; (80050b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800507c:	4a0e      	ldr	r2, [pc, #56]	; (80050b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800507e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005080:	e002      	b.n	8005088 <LoopCopyDataInit>

08005082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005086:	3304      	adds	r3, #4

08005088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800508a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800508c:	d3f9      	bcc.n	8005082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800508e:	4a0b      	ldr	r2, [pc, #44]	; (80050bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005090:	4c0b      	ldr	r4, [pc, #44]	; (80050c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005094:	e001      	b.n	800509a <LoopFillZerobss>

08005096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005098:	3204      	adds	r2, #4

0800509a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800509a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800509c:	d3fb      	bcc.n	8005096 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800509e:	f7ff ffd7 	bl	8005050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050a2:	f007 fde5 	bl	800cc70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050a6:	f7fe fa1d 	bl	80034e4 <main>
  bx  lr    
 80050aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80050ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050b4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80050b8:	080118c8 	.word	0x080118c8
  ldr r2, =_sbss
 80050bc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80050c0:	200051a8 	.word	0x200051a8

080050c4 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050c4:	e7fe      	b.n	80050c4 <CAN1_RX1_IRQHandler>
	...

080050c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050cc:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <HAL_Init+0x40>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0d      	ldr	r2, [pc, #52]	; (8005108 <HAL_Init+0x40>)
 80050d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_Init+0x40>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <HAL_Init+0x40>)
 80050de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050e4:	4b08      	ldr	r3, [pc, #32]	; (8005108 <HAL_Init+0x40>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a07      	ldr	r2, [pc, #28]	; (8005108 <HAL_Init+0x40>)
 80050ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050f0:	2003      	movs	r0, #3
 80050f2:	f001 fb1c 	bl	800672e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050f6:	200f      	movs	r0, #15
 80050f8:	f7ff fdee 	bl	8004cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050fc:	f7ff fa84 	bl	8004608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40023c00 	.word	0x40023c00

0800510c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_IncTick+0x20>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <HAL_IncTick+0x24>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4413      	add	r3, r2
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_IncTick+0x24>)
 800511e:	6013      	str	r3, [r2, #0]
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	2000000c 	.word	0x2000000c
 8005130:	20001304 	.word	0x20001304

08005134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return uwTick;
 8005138:	4b03      	ldr	r3, [pc, #12]	; (8005148 <HAL_GetTick+0x14>)
 800513a:	681b      	ldr	r3, [r3, #0]
}
 800513c:	4618      	mov	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20001304 	.word	0x20001304

0800514c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e033      	b.n	80051ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fa78 	bl	8004660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	d118      	bne.n	80051bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005192:	f023 0302 	bic.w	r3, r3, #2
 8005196:	f043 0202 	orr.w	r2, r3, #2
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa68 	bl	8005674 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	f043 0201 	orr.w	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
 80051ba:	e001      	b.n	80051c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d049      	beq.n	800529c <HAL_ADC_IRQHandler+0xca>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d046      	beq.n	800529c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b00      	cmp	r3, #0
 8005218:	d105      	bne.n	8005226 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d12b      	bne.n	800528c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005238:	2b00      	cmp	r3, #0
 800523a:	d127      	bne.n	800528c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005254:	2b00      	cmp	r3, #0
 8005256:	d119      	bne.n	800528c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0220 	bic.w	r2, r2, #32
 8005266:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	f043 0201 	orr.w	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8b0 	bl	80053f2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f06f 0212 	mvn.w	r2, #18
 800529a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052aa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d057      	beq.n	8005362 <HAL_ADC_IRQHandler+0x190>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d054      	beq.n	8005362 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d105      	bne.n	80052d0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d139      	bne.n	8005352 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d006      	beq.n	80052fa <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d12b      	bne.n	8005352 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005304:	2b00      	cmp	r3, #0
 8005306:	d124      	bne.n	8005352 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005312:	2b00      	cmp	r3, #0
 8005314:	d11d      	bne.n	8005352 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800531a:	2b00      	cmp	r3, #0
 800531c:	d119      	bne.n	8005352 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800532c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005342:	2b00      	cmp	r3, #0
 8005344:	d105      	bne.n	8005352 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fa8a 	bl	800586c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 020c 	mvn.w	r2, #12
 8005360:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d017      	beq.n	80053a8 <HAL_ADC_IRQHandler+0x1d6>
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d014      	beq.n	80053a8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10d      	bne.n	80053a8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f834 	bl	8005406 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f06f 0201 	mvn.w	r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053b6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d015      	beq.n	80053ea <HAL_ADC_IRQHandler+0x218>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d012      	beq.n	80053ea <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c8:	f043 0202 	orr.w	r2, r3, #2
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0220 	mvn.w	r2, #32
 80053d8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f81d 	bl	800541a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0220 	mvn.w	r2, #32
 80053e8:	601a      	str	r2, [r3, #0]
  }
}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_ADC_ConfigChannel+0x1c>
 8005448:	2302      	movs	r3, #2
 800544a:	e105      	b.n	8005658 <HAL_ADC_ConfigChannel+0x228>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b09      	cmp	r3, #9
 800545a:	d925      	bls.n	80054a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68d9      	ldr	r1, [r3, #12]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	4613      	mov	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	3b1e      	subs	r3, #30
 8005472:	2207      	movs	r2, #7
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43da      	mvns	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	400a      	ands	r2, r1
 8005480:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68d9      	ldr	r1, [r3, #12]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	4618      	mov	r0, r3
 8005494:	4603      	mov	r3, r0
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4403      	add	r3, r0
 800549a:	3b1e      	subs	r3, #30
 800549c:	409a      	lsls	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	e022      	b.n	80054ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6919      	ldr	r1, [r3, #16]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	4613      	mov	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4413      	add	r3, r2
 80054bc:	2207      	movs	r2, #7
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	43da      	mvns	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	400a      	ands	r2, r1
 80054ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6919      	ldr	r1, [r3, #16]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	4618      	mov	r0, r3
 80054de:	4603      	mov	r3, r0
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4403      	add	r3, r0
 80054e4:	409a      	lsls	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b06      	cmp	r3, #6
 80054f4:	d824      	bhi.n	8005540 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	3b05      	subs	r3, #5
 8005508:	221f      	movs	r2, #31
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43da      	mvns	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	400a      	ands	r2, r1
 8005516:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	4618      	mov	r0, r3
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	3b05      	subs	r3, #5
 8005532:	fa00 f203 	lsl.w	r2, r0, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	635a      	str	r2, [r3, #52]	; 0x34
 800553e:	e04c      	b.n	80055da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b0c      	cmp	r3, #12
 8005546:	d824      	bhi.n	8005592 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	3b23      	subs	r3, #35	; 0x23
 800555a:	221f      	movs	r2, #31
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43da      	mvns	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	400a      	ands	r2, r1
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	4618      	mov	r0, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	3b23      	subs	r3, #35	; 0x23
 8005584:	fa00 f203 	lsl.w	r2, r0, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
 8005590:	e023      	b.n	80055da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	3b41      	subs	r3, #65	; 0x41
 80055a4:	221f      	movs	r2, #31
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	43da      	mvns	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	400a      	ands	r2, r1
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	4618      	mov	r0, r3
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	3b41      	subs	r3, #65	; 0x41
 80055ce:	fa00 f203 	lsl.w	r2, r0, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055da:	4b22      	ldr	r3, [pc, #136]	; (8005664 <HAL_ADC_ConfigChannel+0x234>)
 80055dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a21      	ldr	r2, [pc, #132]	; (8005668 <HAL_ADC_ConfigChannel+0x238>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d109      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x1cc>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b12      	cmp	r3, #18
 80055ee:	d105      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a19      	ldr	r2, [pc, #100]	; (8005668 <HAL_ADC_ConfigChannel+0x238>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d123      	bne.n	800564e <HAL_ADC_ConfigChannel+0x21e>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b10      	cmp	r3, #16
 800560c:	d003      	beq.n	8005616 <HAL_ADC_ConfigChannel+0x1e6>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b11      	cmp	r3, #17
 8005614:	d11b      	bne.n	800564e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b10      	cmp	r3, #16
 8005628:	d111      	bne.n	800564e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <HAL_ADC_ConfigChannel+0x23c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a10      	ldr	r2, [pc, #64]	; (8005670 <HAL_ADC_ConfigChannel+0x240>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	0c9a      	lsrs	r2, r3, #18
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005640:	e002      	b.n	8005648 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	3b01      	subs	r3, #1
 8005646:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f9      	bne.n	8005642 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40012300 	.word	0x40012300
 8005668:	40012000 	.word	0x40012000
 800566c:	20000004 	.word	0x20000004
 8005670:	431bde83 	.word	0x431bde83

08005674 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800567c:	4b79      	ldr	r3, [pc, #484]	; (8005864 <ADC_Init+0x1f0>)
 800567e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	431a      	orrs	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6859      	ldr	r1, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	021a      	lsls	r2, r3, #8
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6899      	ldr	r1, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	4a58      	ldr	r2, [pc, #352]	; (8005868 <ADC_Init+0x1f4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d022      	beq.n	8005752 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800571a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6899      	ldr	r1, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800573c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6899      	ldr	r1, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	e00f      	b.n	8005772 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005770:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0202 	bic.w	r2, r2, #2
 8005780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6899      	ldr	r1, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	7e1b      	ldrb	r3, [r3, #24]
 800578c:	005a      	lsls	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01b      	beq.n	80057d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6859      	ldr	r1, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	3b01      	subs	r3, #1
 80057cc:	035a      	lsls	r2, r3, #13
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	e007      	b.n	80057e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80057f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	3b01      	subs	r3, #1
 8005804:	051a      	lsls	r2, r3, #20
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800581c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6899      	ldr	r1, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800582a:	025a      	lsls	r2, r3, #9
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6899      	ldr	r1, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	029a      	lsls	r2, r3, #10
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40012300 	.word	0x40012300
 8005868:	0f000001 	.word	0x0f000001

0800586c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e0ed      	b.n	8005a6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fe ff2a 	bl	80046f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058b4:	f7ff fc3e 	bl	8005134 <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80058ba:	e012      	b.n	80058e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80058bc:	f7ff fc3a 	bl	8005134 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b0a      	cmp	r3, #10
 80058c8:	d90b      	bls.n	80058e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2205      	movs	r2, #5
 80058da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0c5      	b.n	8005a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0e5      	beq.n	80058bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0202 	bic.w	r2, r2, #2
 80058fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005900:	f7ff fc18 	bl	8005134 <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005906:	e012      	b.n	800592e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005908:	f7ff fc14 	bl	8005134 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b0a      	cmp	r3, #10
 8005914:	d90b      	bls.n	800592e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2205      	movs	r2, #5
 8005926:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e09f      	b.n	8005a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e5      	bne.n	8005908 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	7e1b      	ldrb	r3, [r3, #24]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d108      	bne.n	8005956 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	e007      	b.n	8005966 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	7e5b      	ldrb	r3, [r3, #25]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d108      	bne.n	8005980 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	e007      	b.n	8005990 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	7e9b      	ldrb	r3, [r3, #26]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d108      	bne.n	80059aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0220 	orr.w	r2, r2, #32
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e007      	b.n	80059ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0220 	bic.w	r2, r2, #32
 80059b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	7edb      	ldrb	r3, [r3, #27]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d108      	bne.n	80059d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0210 	bic.w	r2, r2, #16
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e007      	b.n	80059e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0210 	orr.w	r2, r2, #16
 80059e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	7f1b      	ldrb	r3, [r3, #28]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d108      	bne.n	80059fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0208 	orr.w	r2, r2, #8
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e007      	b.n	8005a0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0208 	bic.w	r2, r2, #8
 8005a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	7f5b      	ldrb	r3, [r3, #29]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d108      	bne.n	8005a28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0204 	orr.w	r2, r2, #4
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e007      	b.n	8005a38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0204 	bic.w	r2, r2, #4
 8005a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	ea42 0103 	orr.w	r1, r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	1e5a      	subs	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005a90:	7cfb      	ldrb	r3, [r7, #19]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d003      	beq.n	8005a9e <HAL_CAN_ConfigFilter+0x26>
 8005a96:	7cfb      	ldrb	r3, [r7, #19]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	f040 80be 	bne.w	8005c1a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005a9e:	4b65      	ldr	r3, [pc, #404]	; (8005c34 <HAL_CAN_ConfigFilter+0x1bc>)
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aa8:	f043 0201 	orr.w	r2, r3, #1
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ab8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	2201      	movs	r2, #1
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	43db      	mvns	r3, r3
 8005af0:	401a      	ands	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d123      	bne.n	8005b48 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005b22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	3248      	adds	r2, #72	; 0x48
 8005b28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b3e:	6979      	ldr	r1, [r7, #20]
 8005b40:	3348      	adds	r3, #72	; 0x48
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	440b      	add	r3, r1
 8005b46:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d122      	bne.n	8005b96 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005b70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	3248      	adds	r2, #72	; 0x48
 8005b76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	3348      	adds	r3, #72	; 0x48
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	440b      	add	r3, r1
 8005b94:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d109      	bne.n	8005bb2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	401a      	ands	r2, r3
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005bb0:	e007      	b.n	8005bc2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d109      	bne.n	8005bde <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	401a      	ands	r2, r3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005bdc:	e007      	b.n	8005bee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d107      	bne.n	8005c06 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c0c:	f023 0201 	bic.w	r2, r3, #1
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e006      	b.n	8005c28 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
  }
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40006400 	.word	0x40006400

08005c38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d12e      	bne.n	8005caa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0201 	bic.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c64:	f7ff fa66 	bl	8005134 <HAL_GetTick>
 8005c68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005c6a:	e012      	b.n	8005c92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005c6c:	f7ff fa62 	bl	8005134 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b0a      	cmp	r3, #10
 8005c78:	d90b      	bls.n	8005c92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2205      	movs	r2, #5
 8005c8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e012      	b.n	8005cb8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e5      	bne.n	8005c6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e006      	b.n	8005cb8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
  }
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b089      	sub	sp, #36	; 0x24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cd4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005cde:	7ffb      	ldrb	r3, [r7, #31]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d003      	beq.n	8005cec <HAL_CAN_AddTxMessage+0x2c>
 8005ce4:	7ffb      	ldrb	r3, [r7, #31]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	f040 80b8 	bne.w	8005e5c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80a0 	beq.w	8005e4c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	0e1b      	lsrs	r3, r3, #24
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d907      	bls.n	8005d2c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e09e      	b.n	8005e6a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	409a      	lsls	r2, r3
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10d      	bne.n	8005d5a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	6809      	ldr	r1, [r1, #0]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	3318      	adds	r3, #24
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	440b      	add	r3, r1
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e00f      	b.n	8005d7a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d64:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005d6e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	3318      	adds	r3, #24
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	440b      	add	r3, r1
 8005d78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6819      	ldr	r1, [r3, #0]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	3318      	adds	r3, #24
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	440b      	add	r3, r1
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	7d1b      	ldrb	r3, [r3, #20]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d111      	bne.n	8005dba <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	3318      	adds	r3, #24
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	4413      	add	r3, r2
 8005da2:	3304      	adds	r3, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	6811      	ldr	r1, [r2, #0]
 8005daa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	3318      	adds	r3, #24
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	440b      	add	r3, r1
 8005db6:	3304      	adds	r3, #4
 8005db8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3307      	adds	r3, #7
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	061a      	lsls	r2, r3, #24
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3306      	adds	r3, #6
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3305      	adds	r3, #5
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	3204      	adds	r2, #4
 8005dda:	7812      	ldrb	r2, [r2, #0]
 8005ddc:	4610      	mov	r0, r2
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	6811      	ldr	r1, [r2, #0]
 8005de2:	ea43 0200 	orr.w	r2, r3, r0
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	440b      	add	r3, r1
 8005dec:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005df0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3303      	adds	r3, #3
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	061a      	lsls	r2, r3, #24
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	041b      	lsls	r3, r3, #16
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3301      	adds	r3, #1
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	7812      	ldrb	r2, [r2, #0]
 8005e12:	4610      	mov	r0, r2
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	6811      	ldr	r1, [r2, #0]
 8005e18:	ea43 0200 	orr.w	r2, r3, r0
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	440b      	add	r3, r1
 8005e22:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005e26:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	3318      	adds	r3, #24
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	4413      	add	r3, r2
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	6811      	ldr	r1, [r2, #0]
 8005e3a:	f043 0201 	orr.w	r2, r3, #1
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	3318      	adds	r3, #24
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	440b      	add	r3, r1
 8005e46:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e00e      	b.n	8005e6a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e006      	b.n	8005e6a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
  }
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3724      	adds	r7, #36	; 0x24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e88:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005e8a:	7afb      	ldrb	r3, [r7, #11]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d002      	beq.n	8005e96 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d11d      	bne.n	8005ed2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ef4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d003      	beq.n	8005f04 <HAL_CAN_GetRxMessage+0x24>
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	f040 80f3 	bne.w	80060ea <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10e      	bne.n	8005f28 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d116      	bne.n	8005f46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e0e7      	b.n	80060f8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d107      	bne.n	8005f46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e0d8      	b.n	80060f8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	331b      	adds	r3, #27
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	4413      	add	r3, r2
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0204 	and.w	r2, r3, #4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10c      	bne.n	8005f7e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	331b      	adds	r3, #27
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	4413      	add	r3, r2
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	0d5b      	lsrs	r3, r3, #21
 8005f74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	e00b      	b.n	8005f96 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	331b      	adds	r3, #27
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	4413      	add	r3, r2
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	08db      	lsrs	r3, r3, #3
 8005f8e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	331b      	adds	r3, #27
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	4413      	add	r3, r2
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0202 	and.w	r2, r3, #2
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	331b      	adds	r3, #27
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	4413      	add	r3, r2
 8005fb8:	3304      	adds	r3, #4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 020f 	and.w	r2, r3, #15
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	331b      	adds	r3, #27
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	4413      	add	r3, r2
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	0a1b      	lsrs	r3, r3, #8
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	331b      	adds	r3, #27
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3304      	adds	r3, #4
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	0c1b      	lsrs	r3, r3, #16
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	b2da      	uxtb	r2, r3
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	4413      	add	r3, r2
 8006014:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	0a1a      	lsrs	r2, r3, #8
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	4413      	add	r3, r2
 800602e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	0c1a      	lsrs	r2, r3, #16
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	3302      	adds	r3, #2
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	4413      	add	r3, r2
 8006048:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	0e1a      	lsrs	r2, r3, #24
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	3303      	adds	r3, #3
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	4413      	add	r3, r2
 8006062:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	3304      	adds	r3, #4
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	4413      	add	r3, r2
 800607a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	0a1a      	lsrs	r2, r3, #8
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	3305      	adds	r3, #5
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	4413      	add	r3, r2
 8006094:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	0c1a      	lsrs	r2, r3, #16
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	3306      	adds	r3, #6
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	0e1a      	lsrs	r2, r3, #24
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	3307      	adds	r3, #7
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d108      	bne.n	80060d6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0220 	orr.w	r2, r2, #32
 80060d2:	60da      	str	r2, [r3, #12]
 80060d4:	e007      	b.n	80060e6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0220 	orr.w	r2, r2, #32
 80060e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e006      	b.n	80060f8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
  }
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006114:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d002      	beq.n	8006122 <HAL_CAN_ActivateNotification+0x1e>
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d109      	bne.n	8006136 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6959      	ldr	r1, [r3, #20]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e006      	b.n	8006144 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006160:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d002      	beq.n	800616e <HAL_CAN_DeactivateNotification+0x1e>
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d10a      	bne.n	8006184 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6959      	ldr	r1, [r3, #20]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	43da      	mvns	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	400a      	ands	r2, r1
 800617e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e006      	b.n	8006192 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b08a      	sub	sp, #40	; 0x28
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80061a6:	2300      	movs	r3, #0
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d07c      	beq.n	80062de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d023      	beq.n	8006236 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2201      	movs	r2, #1
 80061f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f983 	bl	800650c <HAL_CAN_TxMailbox0CompleteCallback>
 8006206:	e016      	b.n	8006236 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	d004      	beq.n	800621c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
 800621a:	e00c      	b.n	8006236 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
 800622e:	e002      	b.n	8006236 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f989 	bl	8006548 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	2b00      	cmp	r3, #0
 800623e:	d024      	beq.n	800628a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006248:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f963 	bl	8006520 <HAL_CAN_TxMailbox1CompleteCallback>
 800625a:	e016      	b.n	800628a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
 800626e:	e00c      	b.n	800628a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
 8006282:	e002      	b.n	800628a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f969 	bl	800655c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d024      	beq.n	80062de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800629c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f943 	bl	8006534 <HAL_CAN_TxMailbox2CompleteCallback>
 80062ae:	e016      	b.n	80062de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d004      	beq.n	80062c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
 80062c2:	e00c      	b.n	80062de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
 80062d6:	e002      	b.n	80062de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f949 	bl	8006570 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00c      	beq.n	8006302 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2210      	movs	r2, #16
 8006300:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2208      	movs	r2, #8
 800631c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f930 	bl	8006584 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7fc fcc7 	bl	8002cd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00c      	beq.n	8006366 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800635c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2210      	movs	r2, #16
 8006364:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d006      	beq.n	8006388 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2208      	movs	r2, #8
 8006380:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f908 	bl	8006598 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7fc fcc3 	bl	8002d2c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2210      	movs	r2, #16
 80063c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f8f2 	bl	80065ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00b      	beq.n	80063ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d006      	beq.n	80063ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2208      	movs	r2, #8
 80063e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f8eb 	bl	80065c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d07b      	beq.n	80064ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d072      	beq.n	80064e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	f043 0304 	orr.w	r3, r3, #4
 8006450:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006458:	2b00      	cmp	r3, #0
 800645a:	d043      	beq.n	80064e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006462:	2b00      	cmp	r3, #0
 8006464:	d03e      	beq.n	80064e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800646c:	2b60      	cmp	r3, #96	; 0x60
 800646e:	d02b      	beq.n	80064c8 <HAL_CAN_IRQHandler+0x32a>
 8006470:	2b60      	cmp	r3, #96	; 0x60
 8006472:	d82e      	bhi.n	80064d2 <HAL_CAN_IRQHandler+0x334>
 8006474:	2b50      	cmp	r3, #80	; 0x50
 8006476:	d022      	beq.n	80064be <HAL_CAN_IRQHandler+0x320>
 8006478:	2b50      	cmp	r3, #80	; 0x50
 800647a:	d82a      	bhi.n	80064d2 <HAL_CAN_IRQHandler+0x334>
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	d019      	beq.n	80064b4 <HAL_CAN_IRQHandler+0x316>
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d826      	bhi.n	80064d2 <HAL_CAN_IRQHandler+0x334>
 8006484:	2b30      	cmp	r3, #48	; 0x30
 8006486:	d010      	beq.n	80064aa <HAL_CAN_IRQHandler+0x30c>
 8006488:	2b30      	cmp	r3, #48	; 0x30
 800648a:	d822      	bhi.n	80064d2 <HAL_CAN_IRQHandler+0x334>
 800648c:	2b10      	cmp	r3, #16
 800648e:	d002      	beq.n	8006496 <HAL_CAN_IRQHandler+0x2f8>
 8006490:	2b20      	cmp	r3, #32
 8006492:	d005      	beq.n	80064a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006494:	e01d      	b.n	80064d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	f043 0308 	orr.w	r3, r3, #8
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800649e:	e019      	b.n	80064d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	f043 0310 	orr.w	r3, r3, #16
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064a8:	e014      	b.n	80064d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	f043 0320 	orr.w	r3, r3, #32
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064b2:	e00f      	b.n	80064d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064bc:	e00a      	b.n	80064d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064c6:	e005      	b.n	80064d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064d0:	e000      	b.n	80064d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80064d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80064e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2204      	movs	r2, #4
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fc fcf8 	bl	8002ef4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006504:	bf00      	nop
 8006506:	3728      	adds	r7, #40	; 0x28
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065e4:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <__NVIC_SetPriorityGrouping+0x44>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065f0:	4013      	ands	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006606:	4a04      	ldr	r2, [pc, #16]	; (8006618 <__NVIC_SetPriorityGrouping+0x44>)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	60d3      	str	r3, [r2, #12]
}
 800660c:	bf00      	nop
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	e000ed00 	.word	0xe000ed00

0800661c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <__NVIC_GetPriorityGrouping+0x18>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	0a1b      	lsrs	r3, r3, #8
 8006626:	f003 0307 	and.w	r3, r3, #7
}
 800662a:	4618      	mov	r0, r3
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	e000ed00 	.word	0xe000ed00

08006638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006646:	2b00      	cmp	r3, #0
 8006648:	db0b      	blt.n	8006662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	f003 021f 	and.w	r2, r3, #31
 8006650:	4907      	ldr	r1, [pc, #28]	; (8006670 <__NVIC_EnableIRQ+0x38>)
 8006652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	2001      	movs	r0, #1
 800665a:	fa00 f202 	lsl.w	r2, r0, r2
 800665e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	e000e100 	.word	0xe000e100

08006674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	6039      	str	r1, [r7, #0]
 800667e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006684:	2b00      	cmp	r3, #0
 8006686:	db0a      	blt.n	800669e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	490c      	ldr	r1, [pc, #48]	; (80066c0 <__NVIC_SetPriority+0x4c>)
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	0112      	lsls	r2, r2, #4
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	440b      	add	r3, r1
 8006698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800669c:	e00a      	b.n	80066b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	4908      	ldr	r1, [pc, #32]	; (80066c4 <__NVIC_SetPriority+0x50>)
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	3b04      	subs	r3, #4
 80066ac:	0112      	lsls	r2, r2, #4
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	440b      	add	r3, r1
 80066b2:	761a      	strb	r2, [r3, #24]
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	e000e100 	.word	0xe000e100
 80066c4:	e000ed00 	.word	0xe000ed00

080066c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b089      	sub	sp, #36	; 0x24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	f1c3 0307 	rsb	r3, r3, #7
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	bf28      	it	cs
 80066e6:	2304      	movcs	r3, #4
 80066e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	3304      	adds	r3, #4
 80066ee:	2b06      	cmp	r3, #6
 80066f0:	d902      	bls.n	80066f8 <NVIC_EncodePriority+0x30>
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	3b03      	subs	r3, #3
 80066f6:	e000      	b.n	80066fa <NVIC_EncodePriority+0x32>
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	43da      	mvns	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	401a      	ands	r2, r3
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006710:	f04f 31ff 	mov.w	r1, #4294967295
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	fa01 f303 	lsl.w	r3, r1, r3
 800671a:	43d9      	mvns	r1, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006720:	4313      	orrs	r3, r2
         );
}
 8006722:	4618      	mov	r0, r3
 8006724:	3724      	adds	r7, #36	; 0x24
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff ff4c 	bl	80065d4 <__NVIC_SetPriorityGrouping>
}
 800673c:	bf00      	nop
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006756:	f7ff ff61 	bl	800661c <__NVIC_GetPriorityGrouping>
 800675a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	6978      	ldr	r0, [r7, #20]
 8006762:	f7ff ffb1 	bl	80066c8 <NVIC_EncodePriority>
 8006766:	4602      	mov	r2, r0
 8006768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800676c:	4611      	mov	r1, r2
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff ff80 	bl	8006674 <__NVIC_SetPriority>
}
 8006774:	bf00      	nop
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff ff54 	bl	8006638 <__NVIC_EnableIRQ>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80067a4:	f7fe fcc6 	bl	8005134 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e099      	b.n	80068e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0201 	bic.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067d4:	e00f      	b.n	80067f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067d6:	f7fe fcad 	bl	8005134 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b05      	cmp	r3, #5
 80067e2:	d908      	bls.n	80067f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2203      	movs	r2, #3
 80067ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e078      	b.n	80068e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e8      	bne.n	80067d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	4b38      	ldr	r3, [pc, #224]	; (80068f0 <HAL_DMA_Init+0x158>)
 8006810:	4013      	ands	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006822:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800682e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800683a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	2b04      	cmp	r3, #4
 800684e:	d107      	bne.n	8006860 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	4313      	orrs	r3, r2
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0307 	bic.w	r3, r3, #7
 8006876:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	2b04      	cmp	r3, #4
 8006888:	d117      	bne.n	80068ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00e      	beq.n	80068ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fb01 	bl	8006ea4 <DMA_CheckFifoParam>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d008      	beq.n	80068ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2240      	movs	r2, #64	; 0x40
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80068b6:	2301      	movs	r3, #1
 80068b8:	e016      	b.n	80068e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fab8 	bl	8006e38 <DMA_CalcBaseAndBitshift>
 80068c8:	4603      	mov	r3, r0
 80068ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d0:	223f      	movs	r2, #63	; 0x3f
 80068d2:	409a      	lsls	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	f010803f 	.word	0xf010803f

080068f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_DMA_Start_IT+0x26>
 8006916:	2302      	movs	r3, #2
 8006918:	e040      	b.n	800699c <HAL_DMA_Start_IT+0xa8>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	d12f      	bne.n	800698e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fa4a 	bl	8006ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694c:	223f      	movs	r2, #63	; 0x3f
 800694e:	409a      	lsls	r2, r3
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0216 	orr.w	r2, r2, #22
 8006962:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d007      	beq.n	800697c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0208 	orr.w	r2, r2, #8
 800697a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e005      	b.n	800699a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006996:	2302      	movs	r3, #2
 8006998:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800699a:	7dfb      	ldrb	r3, [r7, #23]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80069b2:	f7fe fbbf 	bl	8005134 <HAL_GetTick>
 80069b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d008      	beq.n	80069d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2280      	movs	r2, #128	; 0x80
 80069c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e052      	b.n	8006a7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0216 	bic.w	r2, r2, #22
 80069e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	695a      	ldr	r2, [r3, #20]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <HAL_DMA_Abort+0x62>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d007      	beq.n	8006a16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0208 	bic.w	r2, r2, #8
 8006a14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a26:	e013      	b.n	8006a50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a28:	f7fe fb84 	bl	8005134 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d90c      	bls.n	8006a50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2203      	movs	r2, #3
 8006a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e015      	b.n	8006a7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e4      	bne.n	8006a28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a62:	223f      	movs	r2, #63	; 0x3f
 8006a64:	409a      	lsls	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d004      	beq.n	8006aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2280      	movs	r2, #128	; 0x80
 8006a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e00c      	b.n	8006abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2205      	movs	r2, #5
 8006aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0201 	bic.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ad4:	4b8e      	ldr	r3, [pc, #568]	; (8006d10 <HAL_DMA_IRQHandler+0x248>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a8e      	ldr	r2, [pc, #568]	; (8006d14 <HAL_DMA_IRQHandler+0x24c>)
 8006ada:	fba2 2303 	umull	r2, r3, r2, r3
 8006ade:	0a9b      	lsrs	r3, r3, #10
 8006ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af2:	2208      	movs	r2, #8
 8006af4:	409a      	lsls	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01a      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d013      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0204 	bic.w	r2, r2, #4
 8006b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b20:	2208      	movs	r2, #8
 8006b22:	409a      	lsls	r2, r3
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2c:	f043 0201 	orr.w	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b38:	2201      	movs	r2, #1
 8006b3a:	409a      	lsls	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d012      	beq.n	8006b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00b      	beq.n	8006b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b56:	2201      	movs	r2, #1
 8006b58:	409a      	lsls	r2, r3
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b62:	f043 0202 	orr.w	r2, r3, #2
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6e:	2204      	movs	r2, #4
 8006b70:	409a      	lsls	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4013      	ands	r3, r2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d012      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00b      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	409a      	lsls	r2, r3
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b98:	f043 0204 	orr.w	r2, r3, #4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	409a      	lsls	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d043      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d03c      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc2:	2210      	movs	r2, #16
 8006bc4:	409a      	lsls	r2, r3
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d018      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d108      	bne.n	8006bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d024      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
 8006bf6:	e01f      	b.n	8006c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01b      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
 8006c08:	e016      	b.n	8006c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0208 	bic.w	r2, r2, #8
 8006c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	409a      	lsls	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 808f 	beq.w	8006d68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0310 	and.w	r3, r3, #16
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8087 	beq.w	8006d68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5e:	2220      	movs	r2, #32
 8006c60:	409a      	lsls	r2, r3
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	d136      	bne.n	8006ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0216 	bic.w	r2, r2, #22
 8006c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695a      	ldr	r2, [r3, #20]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <HAL_DMA_IRQHandler+0x1da>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0208 	bic.w	r2, r2, #8
 8006cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb6:	223f      	movs	r2, #63	; 0x3f
 8006cb8:	409a      	lsls	r2, r3
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d07e      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	4798      	blx	r3
        }
        return;
 8006cde:	e079      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d01d      	beq.n	8006d2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10d      	bne.n	8006d18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d031      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	4798      	blx	r3
 8006d0c:	e02c      	b.n	8006d68 <HAL_DMA_IRQHandler+0x2a0>
 8006d0e:	bf00      	nop
 8006d10:	20000004 	.word	0x20000004
 8006d14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d023      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
 8006d28:	e01e      	b.n	8006d68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10f      	bne.n	8006d58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0210 	bic.w	r2, r2, #16
 8006d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d032      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d022      	beq.n	8006dc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2205      	movs	r2, #5
 8006d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0201 	bic.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	3301      	adds	r3, #1
 8006d98:	60bb      	str	r3, [r7, #8]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d307      	bcc.n	8006db0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1f2      	bne.n	8006d94 <HAL_DMA_IRQHandler+0x2cc>
 8006dae:	e000      	b.n	8006db2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006db0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	4798      	blx	r3
 8006dd2:	e000      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006dd4:	bf00      	nop
    }
  }
}
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b40      	cmp	r3, #64	; 0x40
 8006e08:	d108      	bne.n	8006e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e1a:	e007      	b.n	8006e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	60da      	str	r2, [r3, #12]
}
 8006e2c:	bf00      	nop
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	3b10      	subs	r3, #16
 8006e48:	4a14      	ldr	r2, [pc, #80]	; (8006e9c <DMA_CalcBaseAndBitshift+0x64>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	091b      	lsrs	r3, r3, #4
 8006e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e52:	4a13      	ldr	r2, [pc, #76]	; (8006ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d909      	bls.n	8006e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	1d1a      	adds	r2, r3, #4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	659a      	str	r2, [r3, #88]	; 0x58
 8006e78:	e007      	b.n	8006e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	aaaaaaab 	.word	0xaaaaaaab
 8006ea0:	080112c0 	.word	0x080112c0

08006ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d11f      	bne.n	8006efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d856      	bhi.n	8006f72 <DMA_CheckFifoParam+0xce>
 8006ec4:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <DMA_CheckFifoParam+0x28>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006edd 	.word	0x08006edd
 8006ed0:	08006eef 	.word	0x08006eef
 8006ed4:	08006edd 	.word	0x08006edd
 8006ed8:	08006f73 	.word	0x08006f73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d046      	beq.n	8006f76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eec:	e043      	b.n	8006f76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ef6:	d140      	bne.n	8006f7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006efc:	e03d      	b.n	8006f7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f06:	d121      	bne.n	8006f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d837      	bhi.n	8006f7e <DMA_CheckFifoParam+0xda>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <DMA_CheckFifoParam+0x70>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f25 	.word	0x08006f25
 8006f18:	08006f2b 	.word	0x08006f2b
 8006f1c:	08006f25 	.word	0x08006f25
 8006f20:	08006f3d 	.word	0x08006f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
      break;
 8006f28:	e030      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d025      	beq.n	8006f82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f3a:	e022      	b.n	8006f82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f44:	d11f      	bne.n	8006f86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f4a:	e01c      	b.n	8006f86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d903      	bls.n	8006f5a <DMA_CheckFifoParam+0xb6>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d003      	beq.n	8006f60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f58:	e018      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5e:	e015      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00e      	beq.n	8006f8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f70:	e00b      	b.n	8006f8a <DMA_CheckFifoParam+0xe6>
      break;
 8006f72:	bf00      	nop
 8006f74:	e00a      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
      break;
 8006f76:	bf00      	nop
 8006f78:	e008      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
      break;
 8006f7a:	bf00      	nop
 8006f7c:	e006      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
      break;
 8006f7e:	bf00      	nop
 8006f80:	e004      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
      break;
 8006f82:	bf00      	nop
 8006f84:	e002      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
      break;   
 8006f86:	bf00      	nop
 8006f88:	e000      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
      break;
 8006f8a:	bf00      	nop
    }
  } 
  
  return status; 
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop

08006f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b089      	sub	sp, #36	; 0x24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61fb      	str	r3, [r7, #28]
 8006fb6:	e16b      	b.n	8007290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006fb8:	2201      	movs	r2, #1
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	f040 815a 	bne.w	800728a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d005      	beq.n	8006fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d130      	bne.n	8007050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	43db      	mvns	r3, r3
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	4013      	ands	r3, r2
 8007004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	4313      	orrs	r3, r2
 8007016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007024:	2201      	movs	r2, #1
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	fa02 f303 	lsl.w	r3, r2, r3
 800702c:	43db      	mvns	r3, r3
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	4013      	ands	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	091b      	lsrs	r3, r3, #4
 800703a:	f003 0201 	and.w	r2, r3, #1
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	fa02 f303 	lsl.w	r3, r2, r3
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	4313      	orrs	r3, r2
 8007048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f003 0303 	and.w	r3, r3, #3
 8007058:	2b03      	cmp	r3, #3
 800705a:	d017      	beq.n	800708c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	2203      	movs	r2, #3
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	43db      	mvns	r3, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4013      	ands	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	fa02 f303 	lsl.w	r3, r2, r3
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	4313      	orrs	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f003 0303 	and.w	r3, r3, #3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d123      	bne.n	80070e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	08da      	lsrs	r2, r3, #3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3208      	adds	r2, #8
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	220f      	movs	r2, #15
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	43db      	mvns	r3, r3
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	4013      	ands	r3, r2
 80070ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	691a      	ldr	r2, [r3, #16]
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	08da      	lsrs	r2, r3, #3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3208      	adds	r2, #8
 80070da:	69b9      	ldr	r1, [r7, #24]
 80070dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	2203      	movs	r2, #3
 80070ec:	fa02 f303 	lsl.w	r3, r2, r3
 80070f0:	43db      	mvns	r3, r3
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	4013      	ands	r3, r2
 80070f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f003 0203 	and.w	r2, r3, #3
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	4313      	orrs	r3, r2
 800710c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 80b4 	beq.w	800728a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	4b60      	ldr	r3, [pc, #384]	; (80072a8 <HAL_GPIO_Init+0x30c>)
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	4a5f      	ldr	r2, [pc, #380]	; (80072a8 <HAL_GPIO_Init+0x30c>)
 800712c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007130:	6453      	str	r3, [r2, #68]	; 0x44
 8007132:	4b5d      	ldr	r3, [pc, #372]	; (80072a8 <HAL_GPIO_Init+0x30c>)
 8007134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800713e:	4a5b      	ldr	r2, [pc, #364]	; (80072ac <HAL_GPIO_Init+0x310>)
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	089b      	lsrs	r3, r3, #2
 8007144:	3302      	adds	r3, #2
 8007146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	220f      	movs	r2, #15
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	43db      	mvns	r3, r3
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	4013      	ands	r3, r2
 8007160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a52      	ldr	r2, [pc, #328]	; (80072b0 <HAL_GPIO_Init+0x314>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d02b      	beq.n	80071c2 <HAL_GPIO_Init+0x226>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a51      	ldr	r2, [pc, #324]	; (80072b4 <HAL_GPIO_Init+0x318>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d025      	beq.n	80071be <HAL_GPIO_Init+0x222>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a50      	ldr	r2, [pc, #320]	; (80072b8 <HAL_GPIO_Init+0x31c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01f      	beq.n	80071ba <HAL_GPIO_Init+0x21e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a4f      	ldr	r2, [pc, #316]	; (80072bc <HAL_GPIO_Init+0x320>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d019      	beq.n	80071b6 <HAL_GPIO_Init+0x21a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a4e      	ldr	r2, [pc, #312]	; (80072c0 <HAL_GPIO_Init+0x324>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d013      	beq.n	80071b2 <HAL_GPIO_Init+0x216>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a4d      	ldr	r2, [pc, #308]	; (80072c4 <HAL_GPIO_Init+0x328>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00d      	beq.n	80071ae <HAL_GPIO_Init+0x212>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a4c      	ldr	r2, [pc, #304]	; (80072c8 <HAL_GPIO_Init+0x32c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d007      	beq.n	80071aa <HAL_GPIO_Init+0x20e>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a4b      	ldr	r2, [pc, #300]	; (80072cc <HAL_GPIO_Init+0x330>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d101      	bne.n	80071a6 <HAL_GPIO_Init+0x20a>
 80071a2:	2307      	movs	r3, #7
 80071a4:	e00e      	b.n	80071c4 <HAL_GPIO_Init+0x228>
 80071a6:	2308      	movs	r3, #8
 80071a8:	e00c      	b.n	80071c4 <HAL_GPIO_Init+0x228>
 80071aa:	2306      	movs	r3, #6
 80071ac:	e00a      	b.n	80071c4 <HAL_GPIO_Init+0x228>
 80071ae:	2305      	movs	r3, #5
 80071b0:	e008      	b.n	80071c4 <HAL_GPIO_Init+0x228>
 80071b2:	2304      	movs	r3, #4
 80071b4:	e006      	b.n	80071c4 <HAL_GPIO_Init+0x228>
 80071b6:	2303      	movs	r3, #3
 80071b8:	e004      	b.n	80071c4 <HAL_GPIO_Init+0x228>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e002      	b.n	80071c4 <HAL_GPIO_Init+0x228>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <HAL_GPIO_Init+0x228>
 80071c2:	2300      	movs	r3, #0
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	f002 0203 	and.w	r2, r2, #3
 80071ca:	0092      	lsls	r2, r2, #2
 80071cc:	4093      	lsls	r3, r2
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071d4:	4935      	ldr	r1, [pc, #212]	; (80072ac <HAL_GPIO_Init+0x310>)
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	089b      	lsrs	r3, r3, #2
 80071da:	3302      	adds	r3, #2
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80071e2:	4b3b      	ldr	r3, [pc, #236]	; (80072d0 <HAL_GPIO_Init+0x334>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	43db      	mvns	r3, r3
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	4013      	ands	r3, r2
 80071f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4313      	orrs	r3, r2
 8007204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007206:	4a32      	ldr	r2, [pc, #200]	; (80072d0 <HAL_GPIO_Init+0x334>)
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800720c:	4b30      	ldr	r3, [pc, #192]	; (80072d0 <HAL_GPIO_Init+0x334>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	43db      	mvns	r3, r3
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	4013      	ands	r3, r2
 800721a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007230:	4a27      	ldr	r2, [pc, #156]	; (80072d0 <HAL_GPIO_Init+0x334>)
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007236:	4b26      	ldr	r3, [pc, #152]	; (80072d0 <HAL_GPIO_Init+0x334>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	43db      	mvns	r3, r3
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	4013      	ands	r3, r2
 8007244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800725a:	4a1d      	ldr	r2, [pc, #116]	; (80072d0 <HAL_GPIO_Init+0x334>)
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007260:	4b1b      	ldr	r3, [pc, #108]	; (80072d0 <HAL_GPIO_Init+0x334>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	43db      	mvns	r3, r3
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	4013      	ands	r3, r2
 800726e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007284:	4a12      	ldr	r2, [pc, #72]	; (80072d0 <HAL_GPIO_Init+0x334>)
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	3301      	adds	r3, #1
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	2b0f      	cmp	r3, #15
 8007294:	f67f ae90 	bls.w	8006fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	3724      	adds	r7, #36	; 0x24
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40023800 	.word	0x40023800
 80072ac:	40013800 	.word	0x40013800
 80072b0:	40020000 	.word	0x40020000
 80072b4:	40020400 	.word	0x40020400
 80072b8:	40020800 	.word	0x40020800
 80072bc:	40020c00 	.word	0x40020c00
 80072c0:	40021000 	.word	0x40021000
 80072c4:	40021400 	.word	0x40021400
 80072c8:	40021800 	.word	0x40021800
 80072cc:	40021c00 	.word	0x40021c00
 80072d0:	40013c00 	.word	0x40013c00

080072d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691a      	ldr	r2, [r3, #16]
 80072e4:	887b      	ldrh	r3, [r7, #2]
 80072e6:	4013      	ands	r3, r2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80072ec:	2301      	movs	r3, #1
 80072ee:	73fb      	strb	r3, [r7, #15]
 80072f0:	e001      	b.n	80072f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	807b      	strh	r3, [r7, #2]
 8007310:	4613      	mov	r3, r2
 8007312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007314:	787b      	ldrb	r3, [r7, #1]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800731a:	887a      	ldrh	r2, [r7, #2]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007320:	e003      	b.n	800732a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007322:	887b      	ldrh	r3, [r7, #2]
 8007324:	041a      	lsls	r2, r3, #16
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	619a      	str	r2, [r3, #24]
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
	...

08007338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e267      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d075      	beq.n	8007442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007356:	4b88      	ldr	r3, [pc, #544]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 030c 	and.w	r3, r3, #12
 800735e:	2b04      	cmp	r3, #4
 8007360:	d00c      	beq.n	800737c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007362:	4b85      	ldr	r3, [pc, #532]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800736a:	2b08      	cmp	r3, #8
 800736c:	d112      	bne.n	8007394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800736e:	4b82      	ldr	r3, [pc, #520]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800737a:	d10b      	bne.n	8007394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800737c:	4b7e      	ldr	r3, [pc, #504]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d05b      	beq.n	8007440 <HAL_RCC_OscConfig+0x108>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d157      	bne.n	8007440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e242      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800739c:	d106      	bne.n	80073ac <HAL_RCC_OscConfig+0x74>
 800739e:	4b76      	ldr	r3, [pc, #472]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a75      	ldr	r2, [pc, #468]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80073a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	e01d      	b.n	80073e8 <HAL_RCC_OscConfig+0xb0>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073b4:	d10c      	bne.n	80073d0 <HAL_RCC_OscConfig+0x98>
 80073b6:	4b70      	ldr	r3, [pc, #448]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a6f      	ldr	r2, [pc, #444]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80073bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	4b6d      	ldr	r3, [pc, #436]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a6c      	ldr	r2, [pc, #432]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80073c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	e00b      	b.n	80073e8 <HAL_RCC_OscConfig+0xb0>
 80073d0:	4b69      	ldr	r3, [pc, #420]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a68      	ldr	r2, [pc, #416]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80073d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	4b66      	ldr	r3, [pc, #408]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a65      	ldr	r2, [pc, #404]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80073e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d013      	beq.n	8007418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f0:	f7fd fea0 	bl	8005134 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073f8:	f7fd fe9c 	bl	8005134 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b64      	cmp	r3, #100	; 0x64
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e207      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800740a:	4b5b      	ldr	r3, [pc, #364]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0f0      	beq.n	80073f8 <HAL_RCC_OscConfig+0xc0>
 8007416:	e014      	b.n	8007442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007418:	f7fd fe8c 	bl	8005134 <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007420:	f7fd fe88 	bl	8005134 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b64      	cmp	r3, #100	; 0x64
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e1f3      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007432:	4b51      	ldr	r3, [pc, #324]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1f0      	bne.n	8007420 <HAL_RCC_OscConfig+0xe8>
 800743e:	e000      	b.n	8007442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d063      	beq.n	8007516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800744e:	4b4a      	ldr	r3, [pc, #296]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 030c 	and.w	r3, r3, #12
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00b      	beq.n	8007472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800745a:	4b47      	ldr	r3, [pc, #284]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007462:	2b08      	cmp	r3, #8
 8007464:	d11c      	bne.n	80074a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007466:	4b44      	ldr	r3, [pc, #272]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d116      	bne.n	80074a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007472:	4b41      	ldr	r3, [pc, #260]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <HAL_RCC_OscConfig+0x152>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d001      	beq.n	800748a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e1c7      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800748a:	4b3b      	ldr	r3, [pc, #236]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	4937      	ldr	r1, [pc, #220]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 800749a:	4313      	orrs	r3, r2
 800749c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800749e:	e03a      	b.n	8007516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d020      	beq.n	80074ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074a8:	4b34      	ldr	r3, [pc, #208]	; (800757c <HAL_RCC_OscConfig+0x244>)
 80074aa:	2201      	movs	r2, #1
 80074ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ae:	f7fd fe41 	bl	8005134 <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074b6:	f7fd fe3d 	bl	8005134 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e1a8      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074c8:	4b2b      	ldr	r3, [pc, #172]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d4:	4b28      	ldr	r3, [pc, #160]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	4925      	ldr	r1, [pc, #148]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	600b      	str	r3, [r1, #0]
 80074e8:	e015      	b.n	8007516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074ea:	4b24      	ldr	r3, [pc, #144]	; (800757c <HAL_RCC_OscConfig+0x244>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f0:	f7fd fe20 	bl	8005134 <HAL_GetTick>
 80074f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074f8:	f7fd fe1c 	bl	8005134 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e187      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800750a:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1f0      	bne.n	80074f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0308 	and.w	r3, r3, #8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d036      	beq.n	8007590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d016      	beq.n	8007558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800752a:	4b15      	ldr	r3, [pc, #84]	; (8007580 <HAL_RCC_OscConfig+0x248>)
 800752c:	2201      	movs	r2, #1
 800752e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007530:	f7fd fe00 	bl	8005134 <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007538:	f7fd fdfc 	bl	8005134 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e167      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800754a:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <HAL_RCC_OscConfig+0x240>)
 800754c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0f0      	beq.n	8007538 <HAL_RCC_OscConfig+0x200>
 8007556:	e01b      	b.n	8007590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <HAL_RCC_OscConfig+0x248>)
 800755a:	2200      	movs	r2, #0
 800755c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800755e:	f7fd fde9 	bl	8005134 <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007564:	e00e      	b.n	8007584 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007566:	f7fd fde5 	bl	8005134 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d907      	bls.n	8007584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e150      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
 8007578:	40023800 	.word	0x40023800
 800757c:	42470000 	.word	0x42470000
 8007580:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007584:	4b88      	ldr	r3, [pc, #544]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 8007586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1ea      	bne.n	8007566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8097 	beq.w	80076cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800759e:	2300      	movs	r3, #0
 80075a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075a2:	4b81      	ldr	r3, [pc, #516]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10f      	bne.n	80075ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075ae:	2300      	movs	r3, #0
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	4b7d      	ldr	r3, [pc, #500]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	4a7c      	ldr	r2, [pc, #496]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 80075b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075bc:	6413      	str	r3, [r2, #64]	; 0x40
 80075be:	4b7a      	ldr	r3, [pc, #488]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c6:	60bb      	str	r3, [r7, #8]
 80075c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ca:	2301      	movs	r3, #1
 80075cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ce:	4b77      	ldr	r3, [pc, #476]	; (80077ac <HAL_RCC_OscConfig+0x474>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d118      	bne.n	800760c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075da:	4b74      	ldr	r3, [pc, #464]	; (80077ac <HAL_RCC_OscConfig+0x474>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a73      	ldr	r2, [pc, #460]	; (80077ac <HAL_RCC_OscConfig+0x474>)
 80075e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075e6:	f7fd fda5 	bl	8005134 <HAL_GetTick>
 80075ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ec:	e008      	b.n	8007600 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ee:	f7fd fda1 	bl	8005134 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d901      	bls.n	8007600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e10c      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007600:	4b6a      	ldr	r3, [pc, #424]	; (80077ac <HAL_RCC_OscConfig+0x474>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007608:	2b00      	cmp	r3, #0
 800760a:	d0f0      	beq.n	80075ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d106      	bne.n	8007622 <HAL_RCC_OscConfig+0x2ea>
 8007614:	4b64      	ldr	r3, [pc, #400]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 8007616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007618:	4a63      	ldr	r2, [pc, #396]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	6713      	str	r3, [r2, #112]	; 0x70
 8007620:	e01c      	b.n	800765c <HAL_RCC_OscConfig+0x324>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	2b05      	cmp	r3, #5
 8007628:	d10c      	bne.n	8007644 <HAL_RCC_OscConfig+0x30c>
 800762a:	4b5f      	ldr	r3, [pc, #380]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	4a5e      	ldr	r2, [pc, #376]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 8007630:	f043 0304 	orr.w	r3, r3, #4
 8007634:	6713      	str	r3, [r2, #112]	; 0x70
 8007636:	4b5c      	ldr	r3, [pc, #368]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	4a5b      	ldr	r2, [pc, #364]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 800763c:	f043 0301 	orr.w	r3, r3, #1
 8007640:	6713      	str	r3, [r2, #112]	; 0x70
 8007642:	e00b      	b.n	800765c <HAL_RCC_OscConfig+0x324>
 8007644:	4b58      	ldr	r3, [pc, #352]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 8007646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007648:	4a57      	ldr	r2, [pc, #348]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	6713      	str	r3, [r2, #112]	; 0x70
 8007650:	4b55      	ldr	r3, [pc, #340]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 8007652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007654:	4a54      	ldr	r2, [pc, #336]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 8007656:	f023 0304 	bic.w	r3, r3, #4
 800765a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d015      	beq.n	8007690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007664:	f7fd fd66 	bl	8005134 <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800766a:	e00a      	b.n	8007682 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800766c:	f7fd fd62 	bl	8005134 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	f241 3288 	movw	r2, #5000	; 0x1388
 800767a:	4293      	cmp	r3, r2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e0cb      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007682:	4b49      	ldr	r3, [pc, #292]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 8007684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d0ee      	beq.n	800766c <HAL_RCC_OscConfig+0x334>
 800768e:	e014      	b.n	80076ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007690:	f7fd fd50 	bl	8005134 <HAL_GetTick>
 8007694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007696:	e00a      	b.n	80076ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007698:	f7fd fd4c 	bl	8005134 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e0b5      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ae:	4b3e      	ldr	r3, [pc, #248]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 80076b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1ee      	bne.n	8007698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d105      	bne.n	80076cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076c0:	4b39      	ldr	r3, [pc, #228]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	4a38      	ldr	r2, [pc, #224]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 80076c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 80a1 	beq.w	8007818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076d6:	4b34      	ldr	r3, [pc, #208]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f003 030c 	and.w	r3, r3, #12
 80076de:	2b08      	cmp	r3, #8
 80076e0:	d05c      	beq.n	800779c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d141      	bne.n	800776e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ea:	4b31      	ldr	r3, [pc, #196]	; (80077b0 <HAL_RCC_OscConfig+0x478>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f0:	f7fd fd20 	bl	8005134 <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076f8:	f7fd fd1c 	bl	8005134 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e087      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800770a:	4b27      	ldr	r3, [pc, #156]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f0      	bne.n	80076f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	69da      	ldr	r2, [r3, #28]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	019b      	lsls	r3, r3, #6
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	085b      	lsrs	r3, r3, #1
 800772e:	3b01      	subs	r3, #1
 8007730:	041b      	lsls	r3, r3, #16
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	061b      	lsls	r3, r3, #24
 800773a:	491b      	ldr	r1, [pc, #108]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 800773c:	4313      	orrs	r3, r2
 800773e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007740:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <HAL_RCC_OscConfig+0x478>)
 8007742:	2201      	movs	r2, #1
 8007744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007746:	f7fd fcf5 	bl	8005134 <HAL_GetTick>
 800774a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800774c:	e008      	b.n	8007760 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800774e:	f7fd fcf1 	bl	8005134 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e05c      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007760:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0f0      	beq.n	800774e <HAL_RCC_OscConfig+0x416>
 800776c:	e054      	b.n	8007818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800776e:	4b10      	ldr	r3, [pc, #64]	; (80077b0 <HAL_RCC_OscConfig+0x478>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007774:	f7fd fcde 	bl	8005134 <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800777c:	f7fd fcda 	bl	8005134 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e045      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800778e:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <HAL_RCC_OscConfig+0x470>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f0      	bne.n	800777c <HAL_RCC_OscConfig+0x444>
 800779a:	e03d      	b.n	8007818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d107      	bne.n	80077b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e038      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
 80077a8:	40023800 	.word	0x40023800
 80077ac:	40007000 	.word	0x40007000
 80077b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077b4:	4b1b      	ldr	r3, [pc, #108]	; (8007824 <HAL_RCC_OscConfig+0x4ec>)
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d028      	beq.n	8007814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d121      	bne.n	8007814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077da:	429a      	cmp	r2, r3
 80077dc:	d11a      	bne.n	8007814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077e4:	4013      	ands	r3, r2
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d111      	bne.n	8007814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fa:	085b      	lsrs	r3, r3, #1
 80077fc:	3b01      	subs	r3, #1
 80077fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007800:	429a      	cmp	r2, r3
 8007802:	d107      	bne.n	8007814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007810:	429a      	cmp	r2, r3
 8007812:	d001      	beq.n	8007818 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	40023800 	.word	0x40023800

08007828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e0cc      	b.n	80079d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800783c:	4b68      	ldr	r3, [pc, #416]	; (80079e0 <HAL_RCC_ClockConfig+0x1b8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d90c      	bls.n	8007864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800784a:	4b65      	ldr	r3, [pc, #404]	; (80079e0 <HAL_RCC_ClockConfig+0x1b8>)
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007852:	4b63      	ldr	r3, [pc, #396]	; (80079e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d001      	beq.n	8007864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e0b8      	b.n	80079d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d020      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800787c:	4b59      	ldr	r3, [pc, #356]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	4a58      	ldr	r2, [pc, #352]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007894:	4b53      	ldr	r3, [pc, #332]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	4a52      	ldr	r2, [pc, #328]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 800789a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800789e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078a0:	4b50      	ldr	r3, [pc, #320]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	494d      	ldr	r1, [pc, #308]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d044      	beq.n	8007948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d107      	bne.n	80078d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078c6:	4b47      	ldr	r3, [pc, #284]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d119      	bne.n	8007906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e07f      	b.n	80079d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d003      	beq.n	80078e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d107      	bne.n	80078f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078e6:	4b3f      	ldr	r3, [pc, #252]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e06f      	b.n	80079d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f6:	4b3b      	ldr	r3, [pc, #236]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e067      	b.n	80079d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007906:	4b37      	ldr	r3, [pc, #220]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f023 0203 	bic.w	r2, r3, #3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4934      	ldr	r1, [pc, #208]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007914:	4313      	orrs	r3, r2
 8007916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007918:	f7fd fc0c 	bl	8005134 <HAL_GetTick>
 800791c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800791e:	e00a      	b.n	8007936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007920:	f7fd fc08 	bl	8005134 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	f241 3288 	movw	r2, #5000	; 0x1388
 800792e:	4293      	cmp	r3, r2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e04f      	b.n	80079d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007936:	4b2b      	ldr	r3, [pc, #172]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 020c 	and.w	r2, r3, #12
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	429a      	cmp	r2, r3
 8007946:	d1eb      	bne.n	8007920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007948:	4b25      	ldr	r3, [pc, #148]	; (80079e0 <HAL_RCC_ClockConfig+0x1b8>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0307 	and.w	r3, r3, #7
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	429a      	cmp	r2, r3
 8007954:	d20c      	bcs.n	8007970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007956:	4b22      	ldr	r3, [pc, #136]	; (80079e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800795e:	4b20      	ldr	r3, [pc, #128]	; (80079e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d001      	beq.n	8007970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e032      	b.n	80079d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b00      	cmp	r3, #0
 800797a:	d008      	beq.n	800798e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800797c:	4b19      	ldr	r3, [pc, #100]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	4916      	ldr	r1, [pc, #88]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 800798a:	4313      	orrs	r3, r2
 800798c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800799a:	4b12      	ldr	r3, [pc, #72]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	490e      	ldr	r1, [pc, #56]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80079ae:	f000 f821 	bl	80079f4 <HAL_RCC_GetSysClockFreq>
 80079b2:	4602      	mov	r2, r0
 80079b4:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <HAL_RCC_ClockConfig+0x1bc>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	091b      	lsrs	r3, r3, #4
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	490a      	ldr	r1, [pc, #40]	; (80079e8 <HAL_RCC_ClockConfig+0x1c0>)
 80079c0:	5ccb      	ldrb	r3, [r1, r3]
 80079c2:	fa22 f303 	lsr.w	r3, r2, r3
 80079c6:	4a09      	ldr	r2, [pc, #36]	; (80079ec <HAL_RCC_ClockConfig+0x1c4>)
 80079c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80079ca:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <HAL_RCC_ClockConfig+0x1c8>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fd f982 	bl	8004cd8 <HAL_InitTick>

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	40023c00 	.word	0x40023c00
 80079e4:	40023800 	.word	0x40023800
 80079e8:	080112a8 	.word	0x080112a8
 80079ec:	20000004 	.word	0x20000004
 80079f0:	20000008 	.word	0x20000008

080079f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079f8:	b094      	sub	sp, #80	; 0x50
 80079fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007a00:	2300      	movs	r3, #0
 8007a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a04:	2300      	movs	r3, #0
 8007a06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a0c:	4b79      	ldr	r3, [pc, #484]	; (8007bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f003 030c 	and.w	r3, r3, #12
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d00d      	beq.n	8007a34 <HAL_RCC_GetSysClockFreq+0x40>
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	f200 80e1 	bhi.w	8007be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_RCC_GetSysClockFreq+0x34>
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d003      	beq.n	8007a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8007a26:	e0db      	b.n	8007be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a28:	4b73      	ldr	r3, [pc, #460]	; (8007bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007a2c:	e0db      	b.n	8007be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a2e:	4b73      	ldr	r3, [pc, #460]	; (8007bfc <HAL_RCC_GetSysClockFreq+0x208>)
 8007a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a32:	e0d8      	b.n	8007be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a34:	4b6f      	ldr	r3, [pc, #444]	; (8007bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a3e:	4b6d      	ldr	r3, [pc, #436]	; (8007bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d063      	beq.n	8007b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a4a:	4b6a      	ldr	r3, [pc, #424]	; (8007bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	099b      	lsrs	r3, r3, #6
 8007a50:	2200      	movs	r2, #0
 8007a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a5e:	2300      	movs	r3, #0
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
 8007a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a66:	4622      	mov	r2, r4
 8007a68:	462b      	mov	r3, r5
 8007a6a:	f04f 0000 	mov.w	r0, #0
 8007a6e:	f04f 0100 	mov.w	r1, #0
 8007a72:	0159      	lsls	r1, r3, #5
 8007a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a78:	0150      	lsls	r0, r2, #5
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4621      	mov	r1, r4
 8007a80:	1a51      	subs	r1, r2, r1
 8007a82:	6139      	str	r1, [r7, #16]
 8007a84:	4629      	mov	r1, r5
 8007a86:	eb63 0301 	sbc.w	r3, r3, r1
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a98:	4659      	mov	r1, fp
 8007a9a:	018b      	lsls	r3, r1, #6
 8007a9c:	4651      	mov	r1, sl
 8007a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007aa2:	4651      	mov	r1, sl
 8007aa4:	018a      	lsls	r2, r1, #6
 8007aa6:	4651      	mov	r1, sl
 8007aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8007aac:	4659      	mov	r1, fp
 8007aae:	eb63 0901 	sbc.w	r9, r3, r1
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	f04f 0300 	mov.w	r3, #0
 8007aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ac6:	4690      	mov	r8, r2
 8007ac8:	4699      	mov	r9, r3
 8007aca:	4623      	mov	r3, r4
 8007acc:	eb18 0303 	adds.w	r3, r8, r3
 8007ad0:	60bb      	str	r3, [r7, #8]
 8007ad2:	462b      	mov	r3, r5
 8007ad4:	eb49 0303 	adc.w	r3, r9, r3
 8007ad8:	60fb      	str	r3, [r7, #12]
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	024b      	lsls	r3, r1, #9
 8007aea:	4621      	mov	r1, r4
 8007aec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007af0:	4621      	mov	r1, r4
 8007af2:	024a      	lsls	r2, r1, #9
 8007af4:	4610      	mov	r0, r2
 8007af6:	4619      	mov	r1, r3
 8007af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007afa:	2200      	movs	r2, #0
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b04:	f7f9 f8a0 	bl	8000c48 <__aeabi_uldivmod>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b10:	e058      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b12:	4b38      	ldr	r3, [pc, #224]	; (8007bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	099b      	lsrs	r3, r3, #6
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b22:	623b      	str	r3, [r7, #32]
 8007b24:	2300      	movs	r3, #0
 8007b26:	627b      	str	r3, [r7, #36]	; 0x24
 8007b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b2c:	4642      	mov	r2, r8
 8007b2e:	464b      	mov	r3, r9
 8007b30:	f04f 0000 	mov.w	r0, #0
 8007b34:	f04f 0100 	mov.w	r1, #0
 8007b38:	0159      	lsls	r1, r3, #5
 8007b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b3e:	0150      	lsls	r0, r2, #5
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4641      	mov	r1, r8
 8007b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b50:	f04f 0200 	mov.w	r2, #0
 8007b54:	f04f 0300 	mov.w	r3, #0
 8007b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b64:	ebb2 040a 	subs.w	r4, r2, sl
 8007b68:	eb63 050b 	sbc.w	r5, r3, fp
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	00eb      	lsls	r3, r5, #3
 8007b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b7a:	00e2      	lsls	r2, r4, #3
 8007b7c:	4614      	mov	r4, r2
 8007b7e:	461d      	mov	r5, r3
 8007b80:	4643      	mov	r3, r8
 8007b82:	18e3      	adds	r3, r4, r3
 8007b84:	603b      	str	r3, [r7, #0]
 8007b86:	464b      	mov	r3, r9
 8007b88:	eb45 0303 	adc.w	r3, r5, r3
 8007b8c:	607b      	str	r3, [r7, #4]
 8007b8e:	f04f 0200 	mov.w	r2, #0
 8007b92:	f04f 0300 	mov.w	r3, #0
 8007b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	028b      	lsls	r3, r1, #10
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	028a      	lsls	r2, r1, #10
 8007ba8:	4610      	mov	r0, r2
 8007baa:	4619      	mov	r1, r3
 8007bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bae:	2200      	movs	r2, #0
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	61fa      	str	r2, [r7, #28]
 8007bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bb8:	f7f9 f846 	bl	8000c48 <__aeabi_uldivmod>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	0c1b      	lsrs	r3, r3, #16
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	3301      	adds	r3, #1
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007bd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007bde:	e002      	b.n	8007be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007be0:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007be2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3750      	adds	r7, #80	; 0x50
 8007bec:	46bd      	mov	sp, r7
 8007bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bf2:	bf00      	nop
 8007bf4:	40023800 	.word	0x40023800
 8007bf8:	00f42400 	.word	0x00f42400
 8007bfc:	007a1200 	.word	0x007a1200

08007c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c00:	b480      	push	{r7}
 8007c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c04:	4b03      	ldr	r3, [pc, #12]	; (8007c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c06:	681b      	ldr	r3, [r3, #0]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	20000004 	.word	0x20000004

08007c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c1c:	f7ff fff0 	bl	8007c00 <HAL_RCC_GetHCLKFreq>
 8007c20:	4602      	mov	r2, r0
 8007c22:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	0a9b      	lsrs	r3, r3, #10
 8007c28:	f003 0307 	and.w	r3, r3, #7
 8007c2c:	4903      	ldr	r1, [pc, #12]	; (8007c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c2e:	5ccb      	ldrb	r3, [r1, r3]
 8007c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	080112b8 	.word	0x080112b8

08007c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c44:	f7ff ffdc 	bl	8007c00 <HAL_RCC_GetHCLKFreq>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	0b5b      	lsrs	r3, r3, #13
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	4903      	ldr	r1, [pc, #12]	; (8007c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c56:	5ccb      	ldrb	r3, [r1, r3]
 8007c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	40023800 	.word	0x40023800
 8007c64:	080112b8 	.word	0x080112b8

08007c68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	220f      	movs	r2, #15
 8007c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c78:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f003 0203 	and.w	r2, r3, #3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007c84:	4b0f      	ldr	r3, [pc, #60]	; (8007cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007c90:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007c9c:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	08db      	lsrs	r3, r3, #3
 8007ca2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007caa:	4b07      	ldr	r3, [pc, #28]	; (8007cc8 <HAL_RCC_GetClockConfig+0x60>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0207 	and.w	r2, r3, #7
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	601a      	str	r2, [r3, #0]
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40023800 	.word	0x40023800
 8007cc8:	40023c00 	.word	0x40023c00

08007ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e041      	b.n	8007d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7fc fdf4 	bl	80048e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3304      	adds	r3, #4
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	f000 fdae 	bl	800886c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d001      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e04e      	b.n	8007e22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a23      	ldr	r2, [pc, #140]	; (8007e30 <HAL_TIM_Base_Start_IT+0xc4>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d022      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dae:	d01d      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a1f      	ldr	r2, [pc, #124]	; (8007e34 <HAL_TIM_Base_Start_IT+0xc8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d018      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a1e      	ldr	r2, [pc, #120]	; (8007e38 <HAL_TIM_Base_Start_IT+0xcc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d013      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a1c      	ldr	r2, [pc, #112]	; (8007e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00e      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a1b      	ldr	r2, [pc, #108]	; (8007e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d009      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a19      	ldr	r2, [pc, #100]	; (8007e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d004      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d111      	bne.n	8007e10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b06      	cmp	r3, #6
 8007dfc:	d010      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f042 0201 	orr.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0e:	e007      	b.n	8007e20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0201 	orr.w	r2, r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40000400 	.word	0x40000400
 8007e38:	40000800 	.word	0x40000800
 8007e3c:	40000c00 	.word	0x40000c00
 8007e40:	40010400 	.word	0x40010400
 8007e44:	40014000 	.word	0x40014000
 8007e48:	40001800 	.word	0x40001800

08007e4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e041      	b.n	8007ee2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d106      	bne.n	8007e78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f839 	bl	8007eea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3304      	adds	r3, #4
 8007e88:	4619      	mov	r1, r3
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	f000 fcee 	bl	800886c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ef2:	bf00      	nop
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
	...

08007f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d109      	bne.n	8007f24 <HAL_TIM_PWM_Start+0x24>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	bf14      	ite	ne
 8007f1c:	2301      	movne	r3, #1
 8007f1e:	2300      	moveq	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	e022      	b.n	8007f6a <HAL_TIM_PWM_Start+0x6a>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d109      	bne.n	8007f3e <HAL_TIM_PWM_Start+0x3e>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	bf14      	ite	ne
 8007f36:	2301      	movne	r3, #1
 8007f38:	2300      	moveq	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	e015      	b.n	8007f6a <HAL_TIM_PWM_Start+0x6a>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d109      	bne.n	8007f58 <HAL_TIM_PWM_Start+0x58>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	bf14      	ite	ne
 8007f50:	2301      	movne	r3, #1
 8007f52:	2300      	moveq	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	e008      	b.n	8007f6a <HAL_TIM_PWM_Start+0x6a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	bf14      	ite	ne
 8007f64:	2301      	movne	r3, #1
 8007f66:	2300      	moveq	r3, #0
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e07c      	b.n	800806c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <HAL_TIM_PWM_Start+0x82>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f80:	e013      	b.n	8007faa <HAL_TIM_PWM_Start+0xaa>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d104      	bne.n	8007f92 <HAL_TIM_PWM_Start+0x92>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f90:	e00b      	b.n	8007faa <HAL_TIM_PWM_Start+0xaa>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d104      	bne.n	8007fa2 <HAL_TIM_PWM_Start+0xa2>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fa0:	e003      	b.n	8007faa <HAL_TIM_PWM_Start+0xaa>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 ff44 	bl	8008e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a2d      	ldr	r2, [pc, #180]	; (8008074 <HAL_TIM_PWM_Start+0x174>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d004      	beq.n	8007fcc <HAL_TIM_PWM_Start+0xcc>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a2c      	ldr	r2, [pc, #176]	; (8008078 <HAL_TIM_PWM_Start+0x178>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d101      	bne.n	8007fd0 <HAL_TIM_PWM_Start+0xd0>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <HAL_TIM_PWM_Start+0xd2>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d007      	beq.n	8007fe6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fe4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a22      	ldr	r2, [pc, #136]	; (8008074 <HAL_TIM_PWM_Start+0x174>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d022      	beq.n	8008036 <HAL_TIM_PWM_Start+0x136>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff8:	d01d      	beq.n	8008036 <HAL_TIM_PWM_Start+0x136>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a1f      	ldr	r2, [pc, #124]	; (800807c <HAL_TIM_PWM_Start+0x17c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d018      	beq.n	8008036 <HAL_TIM_PWM_Start+0x136>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a1d      	ldr	r2, [pc, #116]	; (8008080 <HAL_TIM_PWM_Start+0x180>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d013      	beq.n	8008036 <HAL_TIM_PWM_Start+0x136>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a1c      	ldr	r2, [pc, #112]	; (8008084 <HAL_TIM_PWM_Start+0x184>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d00e      	beq.n	8008036 <HAL_TIM_PWM_Start+0x136>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a16      	ldr	r2, [pc, #88]	; (8008078 <HAL_TIM_PWM_Start+0x178>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d009      	beq.n	8008036 <HAL_TIM_PWM_Start+0x136>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a18      	ldr	r2, [pc, #96]	; (8008088 <HAL_TIM_PWM_Start+0x188>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d004      	beq.n	8008036 <HAL_TIM_PWM_Start+0x136>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a16      	ldr	r2, [pc, #88]	; (800808c <HAL_TIM_PWM_Start+0x18c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d111      	bne.n	800805a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b06      	cmp	r3, #6
 8008046:	d010      	beq.n	800806a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0201 	orr.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008058:	e007      	b.n	800806a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0201 	orr.w	r2, r2, #1
 8008068:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40010000 	.word	0x40010000
 8008078:	40010400 	.word	0x40010400
 800807c:	40000400 	.word	0x40000400
 8008080:	40000800 	.word	0x40000800
 8008084:	40000c00 	.word	0x40000c00
 8008088:	40014000 	.word	0x40014000
 800808c:	40001800 	.word	0x40001800

08008090 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e097      	b.n	80081d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7fc fb6d 	bl	8004798 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2202      	movs	r2, #2
 80080c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080d4:	f023 0307 	bic.w	r3, r3, #7
 80080d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3304      	adds	r3, #4
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f000 fbc1 	bl	800886c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	4313      	orrs	r3, r2
 800810a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008112:	f023 0303 	bic.w	r3, r3, #3
 8008116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	021b      	lsls	r3, r3, #8
 8008122:	4313      	orrs	r3, r2
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008130:	f023 030c 	bic.w	r3, r3, #12
 8008134:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800813c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	4313      	orrs	r3, r2
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	4313      	orrs	r3, r2
 8008152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	011a      	lsls	r2, r3, #4
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	031b      	lsls	r3, r3, #12
 8008160:	4313      	orrs	r3, r2
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800816e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008176:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	4313      	orrs	r3, r2
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008204:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d110      	bne.n	800822e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d102      	bne.n	8008218 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008212:	7b7b      	ldrb	r3, [r7, #13]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d001      	beq.n	800821c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e069      	b.n	80082f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800822c:	e031      	b.n	8008292 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b04      	cmp	r3, #4
 8008232:	d110      	bne.n	8008256 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d102      	bne.n	8008240 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800823a:	7b3b      	ldrb	r3, [r7, #12]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d001      	beq.n	8008244 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e055      	b.n	80082f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008254:	e01d      	b.n	8008292 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d108      	bne.n	800826e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d105      	bne.n	800826e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008262:	7b7b      	ldrb	r3, [r7, #13]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d102      	bne.n	800826e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008268:	7b3b      	ldrb	r3, [r7, #12]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d001      	beq.n	8008272 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e03e      	b.n	80082f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2202      	movs	r2, #2
 8008276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2202      	movs	r2, #2
 800827e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2202      	movs	r2, #2
 8008286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2202      	movs	r2, #2
 800828e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d003      	beq.n	80082a0 <HAL_TIM_Encoder_Start+0xc4>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b04      	cmp	r3, #4
 800829c:	d008      	beq.n	80082b0 <HAL_TIM_Encoder_Start+0xd4>
 800829e:	e00f      	b.n	80082c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2201      	movs	r2, #1
 80082a6:	2100      	movs	r1, #0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fdc9 	bl	8008e40 <TIM_CCxChannelCmd>
      break;
 80082ae:	e016      	b.n	80082de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2201      	movs	r2, #1
 80082b6:	2104      	movs	r1, #4
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 fdc1 	bl	8008e40 <TIM_CCxChannelCmd>
      break;
 80082be:	e00e      	b.n	80082de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2201      	movs	r2, #1
 80082c6:	2100      	movs	r1, #0
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fdb9 	bl	8008e40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2201      	movs	r2, #1
 80082d4:	2104      	movs	r1, #4
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fdb2 	bl	8008e40 <TIM_CCxChannelCmd>
      break;
 80082dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0201 	orr.w	r2, r2, #1
 80082ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b02      	cmp	r3, #2
 800830c:	d122      	bne.n	8008354 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b02      	cmp	r3, #2
 800831a:	d11b      	bne.n	8008354 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0202 	mvn.w	r2, #2
 8008324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa77 	bl	800882e <HAL_TIM_IC_CaptureCallback>
 8008340:	e005      	b.n	800834e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa69 	bl	800881a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fa7a 	bl	8008842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0304 	and.w	r3, r3, #4
 800835e:	2b04      	cmp	r3, #4
 8008360:	d122      	bne.n	80083a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b04      	cmp	r3, #4
 800836e:	d11b      	bne.n	80083a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0204 	mvn.w	r2, #4
 8008378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2202      	movs	r2, #2
 800837e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa4d 	bl	800882e <HAL_TIM_IC_CaptureCallback>
 8008394:	e005      	b.n	80083a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa3f 	bl	800881a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fa50 	bl	8008842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0308 	and.w	r3, r3, #8
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d122      	bne.n	80083fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d11b      	bne.n	80083fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0208 	mvn.w	r2, #8
 80083cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2204      	movs	r2, #4
 80083d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa23 	bl	800882e <HAL_TIM_IC_CaptureCallback>
 80083e8:	e005      	b.n	80083f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fa15 	bl	800881a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa26 	bl	8008842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0310 	and.w	r3, r3, #16
 8008406:	2b10      	cmp	r3, #16
 8008408:	d122      	bne.n	8008450 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f003 0310 	and.w	r3, r3, #16
 8008414:	2b10      	cmp	r3, #16
 8008416:	d11b      	bne.n	8008450 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f06f 0210 	mvn.w	r2, #16
 8008420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2208      	movs	r2, #8
 8008426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f9f9 	bl	800882e <HAL_TIM_IC_CaptureCallback>
 800843c:	e005      	b.n	800844a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f9eb 	bl	800881a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f9fc 	bl	8008842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b01      	cmp	r3, #1
 800845c:	d10e      	bne.n	800847c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b01      	cmp	r3, #1
 800846a:	d107      	bne.n	800847c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f06f 0201 	mvn.w	r2, #1
 8008474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7fc f8ae 	bl	80045d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008486:	2b80      	cmp	r3, #128	; 0x80
 8008488:	d10e      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008494:	2b80      	cmp	r3, #128	; 0x80
 8008496:	d107      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fd78 	bl	8008f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b2:	2b40      	cmp	r3, #64	; 0x40
 80084b4:	d10e      	bne.n	80084d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c0:	2b40      	cmp	r3, #64	; 0x40
 80084c2:	d107      	bne.n	80084d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f9c1 	bl	8008856 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f003 0320 	and.w	r3, r3, #32
 80084de:	2b20      	cmp	r3, #32
 80084e0:	d10e      	bne.n	8008500 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f003 0320 	and.w	r3, r3, #32
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d107      	bne.n	8008500 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f06f 0220 	mvn.w	r2, #32
 80084f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fd42 	bl	8008f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008522:	2302      	movs	r3, #2
 8008524:	e0ae      	b.n	8008684 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b0c      	cmp	r3, #12
 8008532:	f200 809f 	bhi.w	8008674 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008536:	a201      	add	r2, pc, #4	; (adr r2, 800853c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853c:	08008571 	.word	0x08008571
 8008540:	08008675 	.word	0x08008675
 8008544:	08008675 	.word	0x08008675
 8008548:	08008675 	.word	0x08008675
 800854c:	080085b1 	.word	0x080085b1
 8008550:	08008675 	.word	0x08008675
 8008554:	08008675 	.word	0x08008675
 8008558:	08008675 	.word	0x08008675
 800855c:	080085f3 	.word	0x080085f3
 8008560:	08008675 	.word	0x08008675
 8008564:	08008675 	.word	0x08008675
 8008568:	08008675 	.word	0x08008675
 800856c:	08008633 	.word	0x08008633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fa18 	bl	80089ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0208 	orr.w	r2, r2, #8
 800858a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699a      	ldr	r2, [r3, #24]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0204 	bic.w	r2, r2, #4
 800859a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6999      	ldr	r1, [r3, #24]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	691a      	ldr	r2, [r3, #16]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	619a      	str	r2, [r3, #24]
      break;
 80085ae:	e064      	b.n	800867a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fa68 	bl	8008a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699a      	ldr	r2, [r3, #24]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699a      	ldr	r2, [r3, #24]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6999      	ldr	r1, [r3, #24]
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	021a      	lsls	r2, r3, #8
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	619a      	str	r2, [r3, #24]
      break;
 80085f0:	e043      	b.n	800867a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fabd 	bl	8008b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69da      	ldr	r2, [r3, #28]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f042 0208 	orr.w	r2, r2, #8
 800860c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69da      	ldr	r2, [r3, #28]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0204 	bic.w	r2, r2, #4
 800861c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69d9      	ldr	r1, [r3, #28]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	691a      	ldr	r2, [r3, #16]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	61da      	str	r2, [r3, #28]
      break;
 8008630:	e023      	b.n	800867a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fb11 	bl	8008c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69da      	ldr	r2, [r3, #28]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800864c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69da      	ldr	r2, [r3, #28]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800865c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69d9      	ldr	r1, [r3, #28]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	021a      	lsls	r2, r3, #8
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	61da      	str	r2, [r3, #28]
      break;
 8008672:	e002      	b.n	800867a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	75fb      	strb	r3, [r7, #23]
      break;
 8008678:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008682:	7dfb      	ldrb	r3, [r7, #23]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d101      	bne.n	80086a8 <HAL_TIM_ConfigClockSource+0x1c>
 80086a4:	2302      	movs	r3, #2
 80086a6:	e0b4      	b.n	8008812 <HAL_TIM_ConfigClockSource+0x186>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80086c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086e0:	d03e      	beq.n	8008760 <HAL_TIM_ConfigClockSource+0xd4>
 80086e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086e6:	f200 8087 	bhi.w	80087f8 <HAL_TIM_ConfigClockSource+0x16c>
 80086ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ee:	f000 8086 	beq.w	80087fe <HAL_TIM_ConfigClockSource+0x172>
 80086f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f6:	d87f      	bhi.n	80087f8 <HAL_TIM_ConfigClockSource+0x16c>
 80086f8:	2b70      	cmp	r3, #112	; 0x70
 80086fa:	d01a      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0xa6>
 80086fc:	2b70      	cmp	r3, #112	; 0x70
 80086fe:	d87b      	bhi.n	80087f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008700:	2b60      	cmp	r3, #96	; 0x60
 8008702:	d050      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x11a>
 8008704:	2b60      	cmp	r3, #96	; 0x60
 8008706:	d877      	bhi.n	80087f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008708:	2b50      	cmp	r3, #80	; 0x50
 800870a:	d03c      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0xfa>
 800870c:	2b50      	cmp	r3, #80	; 0x50
 800870e:	d873      	bhi.n	80087f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008710:	2b40      	cmp	r3, #64	; 0x40
 8008712:	d058      	beq.n	80087c6 <HAL_TIM_ConfigClockSource+0x13a>
 8008714:	2b40      	cmp	r3, #64	; 0x40
 8008716:	d86f      	bhi.n	80087f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008718:	2b30      	cmp	r3, #48	; 0x30
 800871a:	d064      	beq.n	80087e6 <HAL_TIM_ConfigClockSource+0x15a>
 800871c:	2b30      	cmp	r3, #48	; 0x30
 800871e:	d86b      	bhi.n	80087f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008720:	2b20      	cmp	r3, #32
 8008722:	d060      	beq.n	80087e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008724:	2b20      	cmp	r3, #32
 8008726:	d867      	bhi.n	80087f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008728:	2b00      	cmp	r3, #0
 800872a:	d05c      	beq.n	80087e6 <HAL_TIM_ConfigClockSource+0x15a>
 800872c:	2b10      	cmp	r3, #16
 800872e:	d05a      	beq.n	80087e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008730:	e062      	b.n	80087f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6899      	ldr	r1, [r3, #8]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f000 fb5d 	bl	8008e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	609a      	str	r2, [r3, #8]
      break;
 800875e:	e04f      	b.n	8008800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	6899      	ldr	r1, [r3, #8]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f000 fb46 	bl	8008e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689a      	ldr	r2, [r3, #8]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008782:	609a      	str	r2, [r3, #8]
      break;
 8008784:	e03c      	b.n	8008800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	6859      	ldr	r1, [r3, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	461a      	mov	r2, r3
 8008794:	f000 faba 	bl	8008d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2150      	movs	r1, #80	; 0x50
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fb13 	bl	8008dca <TIM_ITRx_SetConfig>
      break;
 80087a4:	e02c      	b.n	8008800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6818      	ldr	r0, [r3, #0]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	6859      	ldr	r1, [r3, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f000 fad9 	bl	8008d6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2160      	movs	r1, #96	; 0x60
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fb03 	bl	8008dca <TIM_ITRx_SetConfig>
      break;
 80087c4:	e01c      	b.n	8008800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	6859      	ldr	r1, [r3, #4]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f000 fa9a 	bl	8008d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2140      	movs	r1, #64	; 0x40
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 faf3 	bl	8008dca <TIM_ITRx_SetConfig>
      break;
 80087e4:	e00c      	b.n	8008800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4619      	mov	r1, r3
 80087f0:	4610      	mov	r0, r2
 80087f2:	f000 faea 	bl	8008dca <TIM_ITRx_SetConfig>
      break;
 80087f6:	e003      	b.n	8008800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	73fb      	strb	r3, [r7, #15]
      break;
 80087fc:	e000      	b.n	8008800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008810:	7bfb      	ldrb	r3, [r7, #15]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
	...

0800886c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a40      	ldr	r2, [pc, #256]	; (8008980 <TIM_Base_SetConfig+0x114>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d013      	beq.n	80088ac <TIM_Base_SetConfig+0x40>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800888a:	d00f      	beq.n	80088ac <TIM_Base_SetConfig+0x40>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a3d      	ldr	r2, [pc, #244]	; (8008984 <TIM_Base_SetConfig+0x118>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d00b      	beq.n	80088ac <TIM_Base_SetConfig+0x40>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a3c      	ldr	r2, [pc, #240]	; (8008988 <TIM_Base_SetConfig+0x11c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d007      	beq.n	80088ac <TIM_Base_SetConfig+0x40>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a3b      	ldr	r2, [pc, #236]	; (800898c <TIM_Base_SetConfig+0x120>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d003      	beq.n	80088ac <TIM_Base_SetConfig+0x40>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a3a      	ldr	r2, [pc, #232]	; (8008990 <TIM_Base_SetConfig+0x124>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d108      	bne.n	80088be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a2f      	ldr	r2, [pc, #188]	; (8008980 <TIM_Base_SetConfig+0x114>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d02b      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088cc:	d027      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a2c      	ldr	r2, [pc, #176]	; (8008984 <TIM_Base_SetConfig+0x118>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d023      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a2b      	ldr	r2, [pc, #172]	; (8008988 <TIM_Base_SetConfig+0x11c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d01f      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a2a      	ldr	r2, [pc, #168]	; (800898c <TIM_Base_SetConfig+0x120>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d01b      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a29      	ldr	r2, [pc, #164]	; (8008990 <TIM_Base_SetConfig+0x124>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d017      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a28      	ldr	r2, [pc, #160]	; (8008994 <TIM_Base_SetConfig+0x128>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d013      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a27      	ldr	r2, [pc, #156]	; (8008998 <TIM_Base_SetConfig+0x12c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d00f      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a26      	ldr	r2, [pc, #152]	; (800899c <TIM_Base_SetConfig+0x130>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d00b      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a25      	ldr	r2, [pc, #148]	; (80089a0 <TIM_Base_SetConfig+0x134>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d007      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a24      	ldr	r2, [pc, #144]	; (80089a4 <TIM_Base_SetConfig+0x138>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d003      	beq.n	800891e <TIM_Base_SetConfig+0xb2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a23      	ldr	r2, [pc, #140]	; (80089a8 <TIM_Base_SetConfig+0x13c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d108      	bne.n	8008930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	4313      	orrs	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a0a      	ldr	r2, [pc, #40]	; (8008980 <TIM_Base_SetConfig+0x114>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d003      	beq.n	8008964 <TIM_Base_SetConfig+0xf8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a0c      	ldr	r2, [pc, #48]	; (8008990 <TIM_Base_SetConfig+0x124>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d103      	bne.n	800896c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	691a      	ldr	r2, [r3, #16]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	615a      	str	r2, [r3, #20]
}
 8008972:	bf00      	nop
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40010000 	.word	0x40010000
 8008984:	40000400 	.word	0x40000400
 8008988:	40000800 	.word	0x40000800
 800898c:	40000c00 	.word	0x40000c00
 8008990:	40010400 	.word	0x40010400
 8008994:	40014000 	.word	0x40014000
 8008998:	40014400 	.word	0x40014400
 800899c:	40014800 	.word	0x40014800
 80089a0:	40001800 	.word	0x40001800
 80089a4:	40001c00 	.word	0x40001c00
 80089a8:	40002000 	.word	0x40002000

080089ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	f023 0201 	bic.w	r2, r3, #1
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f023 0303 	bic.w	r3, r3, #3
 80089e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f023 0302 	bic.w	r3, r3, #2
 80089f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a20      	ldr	r2, [pc, #128]	; (8008a84 <TIM_OC1_SetConfig+0xd8>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d003      	beq.n	8008a10 <TIM_OC1_SetConfig+0x64>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a1f      	ldr	r2, [pc, #124]	; (8008a88 <TIM_OC1_SetConfig+0xdc>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d10c      	bne.n	8008a2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f023 0308 	bic.w	r3, r3, #8
 8008a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f023 0304 	bic.w	r3, r3, #4
 8008a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a15      	ldr	r2, [pc, #84]	; (8008a84 <TIM_OC1_SetConfig+0xd8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d003      	beq.n	8008a3a <TIM_OC1_SetConfig+0x8e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a14      	ldr	r2, [pc, #80]	; (8008a88 <TIM_OC1_SetConfig+0xdc>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d111      	bne.n	8008a5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	621a      	str	r2, [r3, #32]
}
 8008a78:	bf00      	nop
 8008a7a:	371c      	adds	r7, #28
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	40010000 	.word	0x40010000
 8008a88:	40010400 	.word	0x40010400

08008a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	f023 0210 	bic.w	r2, r3, #16
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f023 0320 	bic.w	r3, r3, #32
 8008ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	011b      	lsls	r3, r3, #4
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a22      	ldr	r2, [pc, #136]	; (8008b70 <TIM_OC2_SetConfig+0xe4>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d003      	beq.n	8008af4 <TIM_OC2_SetConfig+0x68>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a21      	ldr	r2, [pc, #132]	; (8008b74 <TIM_OC2_SetConfig+0xe8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d10d      	bne.n	8008b10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a17      	ldr	r2, [pc, #92]	; (8008b70 <TIM_OC2_SetConfig+0xe4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d003      	beq.n	8008b20 <TIM_OC2_SetConfig+0x94>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a16      	ldr	r2, [pc, #88]	; (8008b74 <TIM_OC2_SetConfig+0xe8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d113      	bne.n	8008b48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	621a      	str	r2, [r3, #32]
}
 8008b62:	bf00      	nop
 8008b64:	371c      	adds	r7, #28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	40010000 	.word	0x40010000
 8008b74:	40010400 	.word	0x40010400

08008b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0303 	bic.w	r3, r3, #3
 8008bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	021b      	lsls	r3, r3, #8
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a21      	ldr	r2, [pc, #132]	; (8008c58 <TIM_OC3_SetConfig+0xe0>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d003      	beq.n	8008bde <TIM_OC3_SetConfig+0x66>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a20      	ldr	r2, [pc, #128]	; (8008c5c <TIM_OC3_SetConfig+0xe4>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d10d      	bne.n	8008bfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	021b      	lsls	r3, r3, #8
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a16      	ldr	r2, [pc, #88]	; (8008c58 <TIM_OC3_SetConfig+0xe0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d003      	beq.n	8008c0a <TIM_OC3_SetConfig+0x92>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a15      	ldr	r2, [pc, #84]	; (8008c5c <TIM_OC3_SetConfig+0xe4>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d113      	bne.n	8008c32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	621a      	str	r2, [r3, #32]
}
 8008c4c:	bf00      	nop
 8008c4e:	371c      	adds	r7, #28
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	40010000 	.word	0x40010000
 8008c5c:	40010400 	.word	0x40010400

08008c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	021b      	lsls	r3, r3, #8
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	031b      	lsls	r3, r3, #12
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a12      	ldr	r2, [pc, #72]	; (8008d04 <TIM_OC4_SetConfig+0xa4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_OC4_SetConfig+0x68>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a11      	ldr	r2, [pc, #68]	; (8008d08 <TIM_OC4_SetConfig+0xa8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d109      	bne.n	8008cdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	019b      	lsls	r3, r3, #6
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	621a      	str	r2, [r3, #32]
}
 8008cf6:	bf00      	nop
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	40010000 	.word	0x40010000
 8008d08:	40010400 	.word	0x40010400

08008d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	f023 0201 	bic.w	r2, r3, #1
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f023 030a 	bic.w	r3, r3, #10
 8008d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	621a      	str	r2, [r3, #32]
}
 8008d5e:	bf00      	nop
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b087      	sub	sp, #28
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	f023 0210 	bic.w	r2, r3, #16
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	031b      	lsls	r3, r3, #12
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008da6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	621a      	str	r2, [r3, #32]
}
 8008dbe:	bf00      	nop
 8008dc0:	371c      	adds	r7, #28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	f043 0307 	orr.w	r3, r3, #7
 8008dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	609a      	str	r2, [r3, #8]
}
 8008df4:	bf00      	nop
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	021a      	lsls	r2, r3, #8
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	431a      	orrs	r2, r3
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	609a      	str	r2, [r3, #8]
}
 8008e34:	bf00      	nop
 8008e36:	371c      	adds	r7, #28
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	2201      	movs	r2, #1
 8008e54:	fa02 f303 	lsl.w	r3, r2, r3
 8008e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a1a      	ldr	r2, [r3, #32]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	43db      	mvns	r3, r3
 8008e62:	401a      	ands	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6a1a      	ldr	r2, [r3, #32]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f003 031f 	and.w	r3, r3, #31
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	fa01 f303 	lsl.w	r3, r1, r3
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	621a      	str	r2, [r3, #32]
}
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
	...

08008e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d101      	bne.n	8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e05a      	b.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a21      	ldr	r2, [pc, #132]	; (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d022      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef0:	d01d      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a1d      	ldr	r2, [pc, #116]	; (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d018      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a1b      	ldr	r2, [pc, #108]	; (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d013      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a1a      	ldr	r2, [pc, #104]	; (8008f74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00e      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a18      	ldr	r2, [pc, #96]	; (8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d009      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a17      	ldr	r2, [pc, #92]	; (8008f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d004      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a15      	ldr	r2, [pc, #84]	; (8008f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d10c      	bne.n	8008f48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40010000 	.word	0x40010000
 8008f6c:	40000400 	.word	0x40000400
 8008f70:	40000800 	.word	0x40000800
 8008f74:	40000c00 	.word	0x40000c00
 8008f78:	40010400 	.word	0x40010400
 8008f7c:	40014000 	.word	0x40014000
 8008f80:	40001800 	.word	0x40001800

08008f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e03f      	b.n	800903e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7fb fd50 	bl	8004a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2224      	movs	r2, #36	; 0x24
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 f807 	bl	800a004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	691a      	ldr	r2, [r3, #16]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	695a      	ldr	r2, [r3, #20]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2220      	movs	r2, #32
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b08a      	sub	sp, #40	; 0x28
 800904a:	af02      	add	r7, sp, #8
 800904c:	60f8      	str	r0, [r7, #12]
 800904e:	60b9      	str	r1, [r7, #8]
 8009050:	603b      	str	r3, [r7, #0]
 8009052:	4613      	mov	r3, r2
 8009054:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b20      	cmp	r3, #32
 8009064:	d17c      	bne.n	8009160 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <HAL_UART_Transmit+0x2c>
 800906c:	88fb      	ldrh	r3, [r7, #6]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e075      	b.n	8009162 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800907c:	2b01      	cmp	r3, #1
 800907e:	d101      	bne.n	8009084 <HAL_UART_Transmit+0x3e>
 8009080:	2302      	movs	r3, #2
 8009082:	e06e      	b.n	8009162 <HAL_UART_Transmit+0x11c>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2221      	movs	r2, #33	; 0x21
 8009096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800909a:	f7fc f84b 	bl	8005134 <HAL_GetTick>
 800909e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	88fa      	ldrh	r2, [r7, #6]
 80090a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	88fa      	ldrh	r2, [r7, #6]
 80090aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b4:	d108      	bne.n	80090c8 <HAL_UART_Transmit+0x82>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80090be:	2300      	movs	r3, #0
 80090c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	61bb      	str	r3, [r7, #24]
 80090c6:	e003      	b.n	80090d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090cc:	2300      	movs	r3, #0
 80090ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80090d8:	e02a      	b.n	8009130 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2200      	movs	r2, #0
 80090e2:	2180      	movs	r1, #128	; 0x80
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fc81 	bl	80099ec <UART_WaitOnFlagUntilTimeout>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e036      	b.n	8009162 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10b      	bne.n	8009112 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	3302      	adds	r3, #2
 800910e:	61bb      	str	r3, [r7, #24]
 8009110:	e007      	b.n	8009122 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	781a      	ldrb	r2, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	3301      	adds	r3, #1
 8009120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009126:	b29b      	uxth	r3, r3
 8009128:	3b01      	subs	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009134:	b29b      	uxth	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1cf      	bne.n	80090da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2200      	movs	r2, #0
 8009142:	2140      	movs	r1, #64	; 0x40
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fc51 	bl	80099ec <UART_WaitOnFlagUntilTimeout>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e006      	b.n	8009162 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2220      	movs	r2, #32
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	e000      	b.n	8009162 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009160:	2302      	movs	r3, #2
  }
}
 8009162:	4618      	mov	r0, r3
 8009164:	3720      	adds	r7, #32
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800916a:	b480      	push	{r7}
 800916c:	b085      	sub	sp, #20
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	4613      	mov	r3, r2
 8009176:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b20      	cmp	r3, #32
 8009182:	d130      	bne.n	80091e6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <HAL_UART_Transmit_IT+0x26>
 800918a:	88fb      	ldrh	r3, [r7, #6]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	e029      	b.n	80091e8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800919a:	2b01      	cmp	r3, #1
 800919c:	d101      	bne.n	80091a2 <HAL_UART_Transmit_IT+0x38>
 800919e:	2302      	movs	r3, #2
 80091a0:	e022      	b.n	80091e8 <HAL_UART_Transmit_IT+0x7e>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	88fa      	ldrh	r2, [r7, #6]
 80091b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	88fa      	ldrh	r2, [r7, #6]
 80091ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2221      	movs	r2, #33	; 0x21
 80091c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	e000      	b.n	80091e8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80091e6:	2302      	movs	r3, #2
  }
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b20      	cmp	r3, #32
 800920c:	d11d      	bne.n	800924a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <HAL_UART_Receive_IT+0x26>
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e016      	b.n	800924c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_UART_Receive_IT+0x38>
 8009228:	2302      	movs	r3, #2
 800922a:	e00f      	b.n	800924c <HAL_UART_Receive_IT+0x58>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800923a:	88fb      	ldrh	r3, [r7, #6]
 800923c:	461a      	mov	r2, r3
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 fc41 	bl	8009ac8 <UART_Start_Receive_IT>
 8009246:	4603      	mov	r3, r0
 8009248:	e000      	b.n	800924c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800924a:	2302      	movs	r3, #2
  }
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	4613      	mov	r3, r2
 8009260:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b20      	cmp	r3, #32
 800926c:	d11d      	bne.n	80092aa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <HAL_UART_Receive_DMA+0x26>
 8009274:	88fb      	ldrh	r3, [r7, #6]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e016      	b.n	80092ac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_UART_Receive_DMA+0x38>
 8009288:	2302      	movs	r3, #2
 800928a:	e00f      	b.n	80092ac <HAL_UART_Receive_DMA+0x58>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	461a      	mov	r2, r3
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 fc4f 	bl	8009b44 <UART_Start_Receive_DMA>
 80092a6:	4603      	mov	r3, r0
 80092a8:	e000      	b.n	80092ac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80092aa:	2302      	movs	r3, #2
  }
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b0ba      	sub	sp, #232	; 0xe8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80092da:	2300      	movs	r3, #0
 80092dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80092e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80092f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10f      	bne.n	800931a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092fe:	f003 0320 	and.w	r3, r3, #32
 8009302:	2b00      	cmp	r3, #0
 8009304:	d009      	beq.n	800931a <HAL_UART_IRQHandler+0x66>
 8009306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fdbb 	bl	8009e8e <UART_Receive_IT>
      return;
 8009318:	e256      	b.n	80097c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800931a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800931e:	2b00      	cmp	r3, #0
 8009320:	f000 80de 	beq.w	80094e0 <HAL_UART_IRQHandler+0x22c>
 8009324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d106      	bne.n	800933e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009334:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 80d1 	beq.w	80094e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800933e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00b      	beq.n	8009362 <HAL_UART_IRQHandler+0xae>
 800934a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800934e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935a:	f043 0201 	orr.w	r2, r3, #1
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009366:	f003 0304 	and.w	r3, r3, #4
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00b      	beq.n	8009386 <HAL_UART_IRQHandler+0xd2>
 800936e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d005      	beq.n	8009386 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937e:	f043 0202 	orr.w	r2, r3, #2
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <HAL_UART_IRQHandler+0xf6>
 8009392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d005      	beq.n	80093aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a2:	f043 0204 	orr.w	r2, r3, #4
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ae:	f003 0308 	and.w	r3, r3, #8
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d011      	beq.n	80093da <HAL_UART_IRQHandler+0x126>
 80093b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ba:	f003 0320 	and.w	r3, r3, #32
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d105      	bne.n	80093ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80093c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d005      	beq.n	80093da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d2:	f043 0208 	orr.w	r2, r3, #8
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 81ed 	beq.w	80097be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d008      	beq.n	8009402 <HAL_UART_IRQHandler+0x14e>
 80093f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f4:	f003 0320 	and.w	r3, r3, #32
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fd46 	bl	8009e8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940c:	2b40      	cmp	r3, #64	; 0x40
 800940e:	bf0c      	ite	eq
 8009410:	2301      	moveq	r3, #1
 8009412:	2300      	movne	r3, #0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941e:	f003 0308 	and.w	r3, r3, #8
 8009422:	2b00      	cmp	r3, #0
 8009424:	d103      	bne.n	800942e <HAL_UART_IRQHandler+0x17a>
 8009426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800942a:	2b00      	cmp	r3, #0
 800942c:	d04f      	beq.n	80094ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fc4e 	bl	8009cd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943e:	2b40      	cmp	r3, #64	; 0x40
 8009440:	d141      	bne.n	80094c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3314      	adds	r3, #20
 8009448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800945c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3314      	adds	r3, #20
 800946a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800946e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800947a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1d9      	bne.n	8009442 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	2b00      	cmp	r3, #0
 8009494:	d013      	beq.n	80094be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949a:	4a7d      	ldr	r2, [pc, #500]	; (8009690 <HAL_UART_IRQHandler+0x3dc>)
 800949c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fd faee 	bl	8006a84 <HAL_DMA_Abort_IT>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d016      	beq.n	80094dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80094b8:	4610      	mov	r0, r2
 80094ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094bc:	e00e      	b.n	80094dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7f9 fd1e 	bl	8002f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c4:	e00a      	b.n	80094dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7f9 fd1a 	bl	8002f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094cc:	e006      	b.n	80094dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7f9 fd16 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80094da:	e170      	b.n	80097be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094dc:	bf00      	nop
    return;
 80094de:	e16e      	b.n	80097be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	f040 814a 	bne.w	800977e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80094ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ee:	f003 0310 	and.w	r3, r3, #16
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 8143 	beq.w	800977e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80094f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094fc:	f003 0310 	and.w	r3, r3, #16
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 813c 	beq.w	800977e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009506:	2300      	movs	r3, #0
 8009508:	60bb      	str	r3, [r7, #8]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	60bb      	str	r3, [r7, #8]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	60bb      	str	r3, [r7, #8]
 800951a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009526:	2b40      	cmp	r3, #64	; 0x40
 8009528:	f040 80b4 	bne.w	8009694 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009538:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 8140 	beq.w	80097c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800954a:	429a      	cmp	r2, r3
 800954c:	f080 8139 	bcs.w	80097c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009556:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009562:	f000 8088 	beq.w	8009676 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	330c      	adds	r3, #12
 800956c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800957c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	330c      	adds	r3, #12
 800958e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009592:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800959e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095a2:	e841 2300 	strex	r3, r2, [r1]
 80095a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1d9      	bne.n	8009566 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3314      	adds	r3, #20
 80095b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095c4:	f023 0301 	bic.w	r3, r3, #1
 80095c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3314      	adds	r3, #20
 80095d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e1      	bne.n	80095b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3314      	adds	r3, #20
 80095f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3314      	adds	r3, #20
 800960e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009612:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009614:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009618:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e3      	bne.n	80095ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	330c      	adds	r3, #12
 800963a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009646:	f023 0310 	bic.w	r3, r3, #16
 800964a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	330c      	adds	r3, #12
 8009654:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009658:	65ba      	str	r2, [r7, #88]	; 0x58
 800965a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800965e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e3      	bne.n	8009634 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	4618      	mov	r0, r3
 8009672:	f7fd f997 	bl	80069a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800967e:	b29b      	uxth	r3, r3
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	b29b      	uxth	r3, r3
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f8ac 	bl	80097e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800968c:	e099      	b.n	80097c2 <HAL_UART_IRQHandler+0x50e>
 800968e:	bf00      	nop
 8009690:	08009d97 	.word	0x08009d97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800969c:	b29b      	uxth	r3, r3
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 808b 	beq.w	80097c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80096b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 8086 	beq.w	80097c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	330c      	adds	r3, #12
 80096c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	330c      	adds	r3, #12
 80096da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80096de:	647a      	str	r2, [r7, #68]	; 0x44
 80096e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e3      	bne.n	80096ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3314      	adds	r3, #20
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	623b      	str	r3, [r7, #32]
   return(result);
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	f023 0301 	bic.w	r3, r3, #1
 8009708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3314      	adds	r3, #20
 8009712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009716:	633a      	str	r2, [r7, #48]	; 0x30
 8009718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800971c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e3      	bne.n	80096f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	330c      	adds	r3, #12
 800973e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	e853 3f00 	ldrex	r3, [r3]
 8009746:	60fb      	str	r3, [r7, #12]
   return(result);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0310 	bic.w	r3, r3, #16
 800974e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	330c      	adds	r3, #12
 8009758:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800975c:	61fa      	str	r2, [r7, #28]
 800975e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	69b9      	ldr	r1, [r7, #24]
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	617b      	str	r3, [r7, #20]
   return(result);
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e3      	bne.n	8009738 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f834 	bl	80097e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800977c:	e023      	b.n	80097c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009786:	2b00      	cmp	r3, #0
 8009788:	d009      	beq.n	800979e <HAL_UART_IRQHandler+0x4ea>
 800978a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800978e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fb11 	bl	8009dbe <UART_Transmit_IT>
    return;
 800979c:	e014      	b.n	80097c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800979e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00e      	beq.n	80097c8 <HAL_UART_IRQHandler+0x514>
 80097aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d008      	beq.n	80097c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fb51 	bl	8009e5e <UART_EndTransmit_IT>
    return;
 80097bc:	e004      	b.n	80097c8 <HAL_UART_IRQHandler+0x514>
    return;
 80097be:	bf00      	nop
 80097c0:	e002      	b.n	80097c8 <HAL_UART_IRQHandler+0x514>
      return;
 80097c2:	bf00      	nop
 80097c4:	e000      	b.n	80097c8 <HAL_UART_IRQHandler+0x514>
      return;
 80097c6:	bf00      	nop
  }
}
 80097c8:	37e8      	adds	r7, #232	; 0xe8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop

080097d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b09c      	sub	sp, #112	; 0x70
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009808:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009814:	2b00      	cmp	r3, #0
 8009816:	d172      	bne.n	80098fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800981a:	2200      	movs	r2, #0
 800981c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800981e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	330c      	adds	r3, #12
 8009824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009828:	e853 3f00 	ldrex	r3, [r3]
 800982c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800982e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009834:	66bb      	str	r3, [r7, #104]	; 0x68
 8009836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	330c      	adds	r3, #12
 800983c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800983e:	65ba      	str	r2, [r7, #88]	; 0x58
 8009840:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009842:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009846:	e841 2300 	strex	r3, r2, [r1]
 800984a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800984c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1e5      	bne.n	800981e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3314      	adds	r3, #20
 8009858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009864:	f023 0301 	bic.w	r3, r3, #1
 8009868:	667b      	str	r3, [r7, #100]	; 0x64
 800986a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3314      	adds	r3, #20
 8009870:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009872:	647a      	str	r2, [r7, #68]	; 0x44
 8009874:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e5      	bne.n	8009852 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3314      	adds	r3, #20
 800988c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	623b      	str	r3, [r7, #32]
   return(result);
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800989c:	663b      	str	r3, [r7, #96]	; 0x60
 800989e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3314      	adds	r3, #20
 80098a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098a6:	633a      	str	r2, [r7, #48]	; 0x30
 80098a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e5      	bne.n	8009886 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098bc:	2220      	movs	r2, #32
 80098be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d119      	bne.n	80098fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	330c      	adds	r3, #12
 80098d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	e853 3f00 	ldrex	r3, [r3]
 80098d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f023 0310 	bic.w	r3, r3, #16
 80098e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	330c      	adds	r3, #12
 80098e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098ea:	61fa      	str	r2, [r7, #28]
 80098ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ee:	69b9      	ldr	r1, [r7, #24]
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	e841 2300 	strex	r3, r2, [r1]
 80098f6:	617b      	str	r3, [r7, #20]
   return(result);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1e5      	bne.n	80098ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009902:	2b01      	cmp	r3, #1
 8009904:	d106      	bne.n	8009914 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800990a:	4619      	mov	r1, r3
 800990c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800990e:	f7ff ff69 	bl	80097e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009912:	e002      	b.n	800991a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009914:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009916:	f7f9 fa8d 	bl	8002e34 <HAL_UART_RxCpltCallback>
}
 800991a:	bf00      	nop
 800991c:	3770      	adds	r7, #112	; 0x70
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b084      	sub	sp, #16
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	2b01      	cmp	r3, #1
 8009936:	d108      	bne.n	800994a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800993c:	085b      	lsrs	r3, r3, #1
 800993e:	b29b      	uxth	r3, r3
 8009940:	4619      	mov	r1, r3
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f7ff ff4e 	bl	80097e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009948:	e002      	b.n	8009950 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f7ff ff40 	bl	80097d0 <HAL_UART_RxHalfCpltCallback>
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009968:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009974:	2b80      	cmp	r3, #128	; 0x80
 8009976:	bf0c      	ite	eq
 8009978:	2301      	moveq	r3, #1
 800997a:	2300      	movne	r3, #0
 800997c:	b2db      	uxtb	r3, r3
 800997e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b21      	cmp	r3, #33	; 0x21
 800998a:	d108      	bne.n	800999e <UART_DMAError+0x46>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d005      	beq.n	800999e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2200      	movs	r2, #0
 8009996:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009998:	68b8      	ldr	r0, [r7, #8]
 800999a:	f000 f971 	bl	8009c80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a8:	2b40      	cmp	r3, #64	; 0x40
 80099aa:	bf0c      	ite	eq
 80099ac:	2301      	moveq	r3, #1
 80099ae:	2300      	movne	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b22      	cmp	r3, #34	; 0x22
 80099be:	d108      	bne.n	80099d2 <UART_DMAError+0x7a>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d005      	beq.n	80099d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2200      	movs	r2, #0
 80099ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80099cc:	68b8      	ldr	r0, [r7, #8]
 80099ce:	f000 f97f 	bl	8009cd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	f043 0210 	orr.w	r2, r3, #16
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099de:	68b8      	ldr	r0, [r7, #8]
 80099e0:	f7f9 fa8e 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099e4:	bf00      	nop
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b090      	sub	sp, #64	; 0x40
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	4613      	mov	r3, r2
 80099fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099fc:	e050      	b.n	8009aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a04:	d04c      	beq.n	8009aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d007      	beq.n	8009a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a0c:	f7fb fb92 	bl	8005134 <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d241      	bcs.n	8009aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	330c      	adds	r3, #12
 8009a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	330c      	adds	r3, #12
 8009a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a3c:	637a      	str	r2, [r7, #52]	; 0x34
 8009a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e5      	bne.n	8009a1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3314      	adds	r3, #20
 8009a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	e853 3f00 	ldrex	r3, [r3]
 8009a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	f023 0301 	bic.w	r3, r3, #1
 8009a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3314      	adds	r3, #20
 8009a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a70:	623a      	str	r2, [r7, #32]
 8009a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a74:	69f9      	ldr	r1, [r7, #28]
 8009a76:	6a3a      	ldr	r2, [r7, #32]
 8009a78:	e841 2300 	strex	r3, r2, [r1]
 8009a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1e5      	bne.n	8009a50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e00f      	b.n	8009ac0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	bf0c      	ite	eq
 8009ab0:	2301      	moveq	r3, #1
 8009ab2:	2300      	movne	r3, #0
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d09f      	beq.n	80099fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3740      	adds	r7, #64	; 0x40
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	88fa      	ldrh	r2, [r7, #6]
 8009ae0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	88fa      	ldrh	r2, [r7, #6]
 8009ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2222      	movs	r2, #34	; 0x22
 8009af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d007      	beq.n	8009b16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	695a      	ldr	r2, [r3, #20]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f042 0201 	orr.w	r2, r2, #1
 8009b24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f042 0220 	orr.w	r2, r2, #32
 8009b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b098      	sub	sp, #96	; 0x60
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	88fa      	ldrh	r2, [r7, #6]
 8009b5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2222      	movs	r2, #34	; 0x22
 8009b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	4a40      	ldr	r2, [pc, #256]	; (8009c74 <UART_Start_Receive_DMA+0x130>)
 8009b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	4a3f      	ldr	r2, [pc, #252]	; (8009c78 <UART_Start_Receive_DMA+0x134>)
 8009b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b80:	4a3e      	ldr	r2, [pc, #248]	; (8009c7c <UART_Start_Receive_DMA+0x138>)
 8009b82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b88:	2200      	movs	r2, #0
 8009b8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009b8c:	f107 0308 	add.w	r3, r7, #8
 8009b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	88fb      	ldrh	r3, [r7, #6]
 8009ba4:	f7fc fea6 	bl	80068f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009ba8:	2300      	movs	r3, #0
 8009baa:	613b      	str	r3, [r7, #16]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	613b      	str	r3, [r7, #16]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	613b      	str	r3, [r7, #16]
 8009bbc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d019      	beq.n	8009c02 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	330c      	adds	r3, #12
 8009bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009be4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	330c      	adds	r3, #12
 8009bec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bf6:	e841 2300 	strex	r3, r2, [r1]
 8009bfa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e5      	bne.n	8009bce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3314      	adds	r3, #20
 8009c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0c:	e853 3f00 	ldrex	r3, [r3]
 8009c10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c14:	f043 0301 	orr.w	r3, r3, #1
 8009c18:	657b      	str	r3, [r7, #84]	; 0x54
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3314      	adds	r3, #20
 8009c20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c22:	63ba      	str	r2, [r7, #56]	; 0x38
 8009c24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e5      	bne.n	8009c02 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3314      	adds	r3, #20
 8009c3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	617b      	str	r3, [r7, #20]
   return(result);
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3314      	adds	r3, #20
 8009c54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c56:	627a      	str	r2, [r7, #36]	; 0x24
 8009c58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	6a39      	ldr	r1, [r7, #32]
 8009c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c5e:	e841 2300 	strex	r3, r2, [r1]
 8009c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1e5      	bne.n	8009c36 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3760      	adds	r7, #96	; 0x60
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	080097fd 	.word	0x080097fd
 8009c78:	08009923 	.word	0x08009923
 8009c7c:	08009959 	.word	0x08009959

08009c80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b089      	sub	sp, #36	; 0x24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	330c      	adds	r3, #12
 8009c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	e853 3f00 	ldrex	r3, [r3]
 8009c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009c9e:	61fb      	str	r3, [r7, #28]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	330c      	adds	r3, #12
 8009ca6:	69fa      	ldr	r2, [r7, #28]
 8009ca8:	61ba      	str	r2, [r7, #24]
 8009caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cac:	6979      	ldr	r1, [r7, #20]
 8009cae:	69ba      	ldr	r2, [r7, #24]
 8009cb0:	e841 2300 	strex	r3, r2, [r1]
 8009cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1e5      	bne.n	8009c88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009cc4:	bf00      	nop
 8009cc6:	3724      	adds	r7, #36	; 0x24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b095      	sub	sp, #84	; 0x54
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	330c      	adds	r3, #12
 8009cde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	330c      	adds	r3, #12
 8009cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cf8:	643a      	str	r2, [r7, #64]	; 0x40
 8009cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e5      	bne.n	8009cd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3314      	adds	r3, #20
 8009d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	f023 0301 	bic.w	r3, r3, #1
 8009d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3314      	adds	r3, #20
 8009d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d34:	e841 2300 	strex	r3, r2, [r1]
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e5      	bne.n	8009d0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d119      	bne.n	8009d7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	330c      	adds	r3, #12
 8009d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	e853 3f00 	ldrex	r3, [r3]
 8009d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f023 0310 	bic.w	r3, r3, #16
 8009d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	330c      	adds	r3, #12
 8009d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d68:	61ba      	str	r2, [r7, #24]
 8009d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6c:	6979      	ldr	r1, [r7, #20]
 8009d6e:	69ba      	ldr	r2, [r7, #24]
 8009d70:	e841 2300 	strex	r3, r2, [r1]
 8009d74:	613b      	str	r3, [r7, #16]
   return(result);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1e5      	bne.n	8009d48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d8a:	bf00      	nop
 8009d8c:	3754      	adds	r7, #84	; 0x54
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7f9 f8a5 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b085      	sub	sp, #20
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b21      	cmp	r3, #33	; 0x21
 8009dd0:	d13e      	bne.n	8009e50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dda:	d114      	bne.n	8009e06 <UART_Transmit_IT+0x48>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d110      	bne.n	8009e06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a1b      	ldr	r3, [r3, #32]
 8009de8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009df8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	1c9a      	adds	r2, r3, #2
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	621a      	str	r2, [r3, #32]
 8009e04:	e008      	b.n	8009e18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	1c59      	adds	r1, r3, #1
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	6211      	str	r1, [r2, #32]
 8009e10:	781a      	ldrb	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	4619      	mov	r1, r3
 8009e26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10f      	bne.n	8009e4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68da      	ldr	r2, [r3, #12]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e000      	b.n	8009e52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e50:	2302      	movs	r3, #2
  }
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68da      	ldr	r2, [r3, #12]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7f9 f868 	bl	8002f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b08c      	sub	sp, #48	; 0x30
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b22      	cmp	r3, #34	; 0x22
 8009ea0:	f040 80ab 	bne.w	8009ffa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eac:	d117      	bne.n	8009ede <UART_Receive_IT+0x50>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d113      	bne.n	8009ede <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed6:	1c9a      	adds	r2, r3, #2
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	629a      	str	r2, [r3, #40]	; 0x28
 8009edc:	e026      	b.n	8009f2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef0:	d007      	beq.n	8009f02 <UART_Receive_IT+0x74>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <UART_Receive_IT+0x82>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d106      	bne.n	8009f10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	e008      	b.n	8009f22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	3b01      	subs	r3, #1
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d15a      	bne.n	8009ff6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0220 	bic.w	r2, r2, #32
 8009f4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	695a      	ldr	r2, [r3, #20]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 0201 	bic.w	r2, r2, #1
 8009f6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d135      	bne.n	8009fec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	330c      	adds	r3, #12
 8009f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	e853 3f00 	ldrex	r3, [r3]
 8009f94:	613b      	str	r3, [r7, #16]
   return(result);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	f023 0310 	bic.w	r3, r3, #16
 8009f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	330c      	adds	r3, #12
 8009fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa6:	623a      	str	r2, [r7, #32]
 8009fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009faa:	69f9      	ldr	r1, [r7, #28]
 8009fac:	6a3a      	ldr	r2, [r7, #32]
 8009fae:	e841 2300 	strex	r3, r2, [r1]
 8009fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1e5      	bne.n	8009f86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0310 	and.w	r3, r3, #16
 8009fc4:	2b10      	cmp	r3, #16
 8009fc6:	d10a      	bne.n	8009fde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fc8:	2300      	movs	r3, #0
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff fbfd 	bl	80097e4 <HAL_UARTEx_RxEventCallback>
 8009fea:	e002      	b.n	8009ff2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7f8 ff21 	bl	8002e34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e002      	b.n	8009ffc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e000      	b.n	8009ffc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009ffa:	2302      	movs	r3, #2
  }
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3730      	adds	r7, #48	; 0x30
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a008:	b0c0      	sub	sp, #256	; 0x100
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a020:	68d9      	ldr	r1, [r3, #12]
 800a022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	ea40 0301 	orr.w	r3, r0, r1
 800a02c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	431a      	orrs	r2, r3
 800a03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	431a      	orrs	r2, r3
 800a044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a05c:	f021 010c 	bic.w	r1, r1, #12
 800a060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a06a:	430b      	orrs	r3, r1
 800a06c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a06e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a07a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a07e:	6999      	ldr	r1, [r3, #24]
 800a080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	ea40 0301 	orr.w	r3, r0, r1
 800a08a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	4b8f      	ldr	r3, [pc, #572]	; (800a2d0 <UART_SetConfig+0x2cc>)
 800a094:	429a      	cmp	r2, r3
 800a096:	d005      	beq.n	800a0a4 <UART_SetConfig+0xa0>
 800a098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	4b8d      	ldr	r3, [pc, #564]	; (800a2d4 <UART_SetConfig+0x2d0>)
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d104      	bne.n	800a0ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a0a4:	f7fd fdcc 	bl	8007c40 <HAL_RCC_GetPCLK2Freq>
 800a0a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a0ac:	e003      	b.n	800a0b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a0ae:	f7fd fdb3 	bl	8007c18 <HAL_RCC_GetPCLK1Freq>
 800a0b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0c0:	f040 810c 	bne.w	800a2dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a0c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a0d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	462b      	mov	r3, r5
 800a0da:	1891      	adds	r1, r2, r2
 800a0dc:	65b9      	str	r1, [r7, #88]	; 0x58
 800a0de:	415b      	adcs	r3, r3
 800a0e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	eb12 0801 	adds.w	r8, r2, r1
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	eb43 0901 	adc.w	r9, r3, r1
 800a0f2:	f04f 0200 	mov.w	r2, #0
 800a0f6:	f04f 0300 	mov.w	r3, #0
 800a0fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a0fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a106:	4690      	mov	r8, r2
 800a108:	4699      	mov	r9, r3
 800a10a:	4623      	mov	r3, r4
 800a10c:	eb18 0303 	adds.w	r3, r8, r3
 800a110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a114:	462b      	mov	r3, r5
 800a116:	eb49 0303 	adc.w	r3, r9, r3
 800a11a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a12a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a12e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a132:	460b      	mov	r3, r1
 800a134:	18db      	adds	r3, r3, r3
 800a136:	653b      	str	r3, [r7, #80]	; 0x50
 800a138:	4613      	mov	r3, r2
 800a13a:	eb42 0303 	adc.w	r3, r2, r3
 800a13e:	657b      	str	r3, [r7, #84]	; 0x54
 800a140:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a148:	f7f6 fd7e 	bl	8000c48 <__aeabi_uldivmod>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	4b61      	ldr	r3, [pc, #388]	; (800a2d8 <UART_SetConfig+0x2d4>)
 800a152:	fba3 2302 	umull	r2, r3, r3, r2
 800a156:	095b      	lsrs	r3, r3, #5
 800a158:	011c      	lsls	r4, r3, #4
 800a15a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a15e:	2200      	movs	r2, #0
 800a160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a164:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a168:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a16c:	4642      	mov	r2, r8
 800a16e:	464b      	mov	r3, r9
 800a170:	1891      	adds	r1, r2, r2
 800a172:	64b9      	str	r1, [r7, #72]	; 0x48
 800a174:	415b      	adcs	r3, r3
 800a176:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a178:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a17c:	4641      	mov	r1, r8
 800a17e:	eb12 0a01 	adds.w	sl, r2, r1
 800a182:	4649      	mov	r1, r9
 800a184:	eb43 0b01 	adc.w	fp, r3, r1
 800a188:	f04f 0200 	mov.w	r2, #0
 800a18c:	f04f 0300 	mov.w	r3, #0
 800a190:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a194:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a19c:	4692      	mov	sl, r2
 800a19e:	469b      	mov	fp, r3
 800a1a0:	4643      	mov	r3, r8
 800a1a2:	eb1a 0303 	adds.w	r3, sl, r3
 800a1a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1aa:	464b      	mov	r3, r9
 800a1ac:	eb4b 0303 	adc.w	r3, fp, r3
 800a1b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a1b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a1c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	18db      	adds	r3, r3, r3
 800a1cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	eb42 0303 	adc.w	r3, r2, r3
 800a1d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a1da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a1de:	f7f6 fd33 	bl	8000c48 <__aeabi_uldivmod>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4611      	mov	r1, r2
 800a1e8:	4b3b      	ldr	r3, [pc, #236]	; (800a2d8 <UART_SetConfig+0x2d4>)
 800a1ea:	fba3 2301 	umull	r2, r3, r3, r1
 800a1ee:	095b      	lsrs	r3, r3, #5
 800a1f0:	2264      	movs	r2, #100	; 0x64
 800a1f2:	fb02 f303 	mul.w	r3, r2, r3
 800a1f6:	1acb      	subs	r3, r1, r3
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a1fe:	4b36      	ldr	r3, [pc, #216]	; (800a2d8 <UART_SetConfig+0x2d4>)
 800a200:	fba3 2302 	umull	r2, r3, r3, r2
 800a204:	095b      	lsrs	r3, r3, #5
 800a206:	005b      	lsls	r3, r3, #1
 800a208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a20c:	441c      	add	r4, r3
 800a20e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a212:	2200      	movs	r2, #0
 800a214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a218:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a21c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a220:	4642      	mov	r2, r8
 800a222:	464b      	mov	r3, r9
 800a224:	1891      	adds	r1, r2, r2
 800a226:	63b9      	str	r1, [r7, #56]	; 0x38
 800a228:	415b      	adcs	r3, r3
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a22c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a230:	4641      	mov	r1, r8
 800a232:	1851      	adds	r1, r2, r1
 800a234:	6339      	str	r1, [r7, #48]	; 0x30
 800a236:	4649      	mov	r1, r9
 800a238:	414b      	adcs	r3, r1
 800a23a:	637b      	str	r3, [r7, #52]	; 0x34
 800a23c:	f04f 0200 	mov.w	r2, #0
 800a240:	f04f 0300 	mov.w	r3, #0
 800a244:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a248:	4659      	mov	r1, fp
 800a24a:	00cb      	lsls	r3, r1, #3
 800a24c:	4651      	mov	r1, sl
 800a24e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a252:	4651      	mov	r1, sl
 800a254:	00ca      	lsls	r2, r1, #3
 800a256:	4610      	mov	r0, r2
 800a258:	4619      	mov	r1, r3
 800a25a:	4603      	mov	r3, r0
 800a25c:	4642      	mov	r2, r8
 800a25e:	189b      	adds	r3, r3, r2
 800a260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a264:	464b      	mov	r3, r9
 800a266:	460a      	mov	r2, r1
 800a268:	eb42 0303 	adc.w	r3, r2, r3
 800a26c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a27c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a284:	460b      	mov	r3, r1
 800a286:	18db      	adds	r3, r3, r3
 800a288:	62bb      	str	r3, [r7, #40]	; 0x28
 800a28a:	4613      	mov	r3, r2
 800a28c:	eb42 0303 	adc.w	r3, r2, r3
 800a290:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a296:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a29a:	f7f6 fcd5 	bl	8000c48 <__aeabi_uldivmod>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <UART_SetConfig+0x2d4>)
 800a2a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a2a8:	095b      	lsrs	r3, r3, #5
 800a2aa:	2164      	movs	r1, #100	; 0x64
 800a2ac:	fb01 f303 	mul.w	r3, r1, r3
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	3332      	adds	r3, #50	; 0x32
 800a2b6:	4a08      	ldr	r2, [pc, #32]	; (800a2d8 <UART_SetConfig+0x2d4>)
 800a2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2bc:	095b      	lsrs	r3, r3, #5
 800a2be:	f003 0207 	and.w	r2, r3, #7
 800a2c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4422      	add	r2, r4
 800a2ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a2cc:	e106      	b.n	800a4dc <UART_SetConfig+0x4d8>
 800a2ce:	bf00      	nop
 800a2d0:	40011000 	.word	0x40011000
 800a2d4:	40011400 	.word	0x40011400
 800a2d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a2e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a2ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a2ee:	4642      	mov	r2, r8
 800a2f0:	464b      	mov	r3, r9
 800a2f2:	1891      	adds	r1, r2, r2
 800a2f4:	6239      	str	r1, [r7, #32]
 800a2f6:	415b      	adcs	r3, r3
 800a2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a2fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a2fe:	4641      	mov	r1, r8
 800a300:	1854      	adds	r4, r2, r1
 800a302:	4649      	mov	r1, r9
 800a304:	eb43 0501 	adc.w	r5, r3, r1
 800a308:	f04f 0200 	mov.w	r2, #0
 800a30c:	f04f 0300 	mov.w	r3, #0
 800a310:	00eb      	lsls	r3, r5, #3
 800a312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a316:	00e2      	lsls	r2, r4, #3
 800a318:	4614      	mov	r4, r2
 800a31a:	461d      	mov	r5, r3
 800a31c:	4643      	mov	r3, r8
 800a31e:	18e3      	adds	r3, r4, r3
 800a320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a324:	464b      	mov	r3, r9
 800a326:	eb45 0303 	adc.w	r3, r5, r3
 800a32a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a32e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a33a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a33e:	f04f 0200 	mov.w	r2, #0
 800a342:	f04f 0300 	mov.w	r3, #0
 800a346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a34a:	4629      	mov	r1, r5
 800a34c:	008b      	lsls	r3, r1, #2
 800a34e:	4621      	mov	r1, r4
 800a350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a354:	4621      	mov	r1, r4
 800a356:	008a      	lsls	r2, r1, #2
 800a358:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a35c:	f7f6 fc74 	bl	8000c48 <__aeabi_uldivmod>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4b60      	ldr	r3, [pc, #384]	; (800a4e8 <UART_SetConfig+0x4e4>)
 800a366:	fba3 2302 	umull	r2, r3, r3, r2
 800a36a:	095b      	lsrs	r3, r3, #5
 800a36c:	011c      	lsls	r4, r3, #4
 800a36e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a372:	2200      	movs	r2, #0
 800a374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a378:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a37c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a380:	4642      	mov	r2, r8
 800a382:	464b      	mov	r3, r9
 800a384:	1891      	adds	r1, r2, r2
 800a386:	61b9      	str	r1, [r7, #24]
 800a388:	415b      	adcs	r3, r3
 800a38a:	61fb      	str	r3, [r7, #28]
 800a38c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a390:	4641      	mov	r1, r8
 800a392:	1851      	adds	r1, r2, r1
 800a394:	6139      	str	r1, [r7, #16]
 800a396:	4649      	mov	r1, r9
 800a398:	414b      	adcs	r3, r1
 800a39a:	617b      	str	r3, [r7, #20]
 800a39c:	f04f 0200 	mov.w	r2, #0
 800a3a0:	f04f 0300 	mov.w	r3, #0
 800a3a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a3a8:	4659      	mov	r1, fp
 800a3aa:	00cb      	lsls	r3, r1, #3
 800a3ac:	4651      	mov	r1, sl
 800a3ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3b2:	4651      	mov	r1, sl
 800a3b4:	00ca      	lsls	r2, r1, #3
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	4642      	mov	r2, r8
 800a3be:	189b      	adds	r3, r3, r2
 800a3c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3c4:	464b      	mov	r3, r9
 800a3c6:	460a      	mov	r2, r1
 800a3c8:	eb42 0303 	adc.w	r3, r2, r3
 800a3cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a3d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a3dc:	f04f 0200 	mov.w	r2, #0
 800a3e0:	f04f 0300 	mov.w	r3, #0
 800a3e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	008b      	lsls	r3, r1, #2
 800a3ec:	4641      	mov	r1, r8
 800a3ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3f2:	4641      	mov	r1, r8
 800a3f4:	008a      	lsls	r2, r1, #2
 800a3f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a3fa:	f7f6 fc25 	bl	8000c48 <__aeabi_uldivmod>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	4611      	mov	r1, r2
 800a404:	4b38      	ldr	r3, [pc, #224]	; (800a4e8 <UART_SetConfig+0x4e4>)
 800a406:	fba3 2301 	umull	r2, r3, r3, r1
 800a40a:	095b      	lsrs	r3, r3, #5
 800a40c:	2264      	movs	r2, #100	; 0x64
 800a40e:	fb02 f303 	mul.w	r3, r2, r3
 800a412:	1acb      	subs	r3, r1, r3
 800a414:	011b      	lsls	r3, r3, #4
 800a416:	3332      	adds	r3, #50	; 0x32
 800a418:	4a33      	ldr	r2, [pc, #204]	; (800a4e8 <UART_SetConfig+0x4e4>)
 800a41a:	fba2 2303 	umull	r2, r3, r2, r3
 800a41e:	095b      	lsrs	r3, r3, #5
 800a420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a424:	441c      	add	r4, r3
 800a426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a42a:	2200      	movs	r2, #0
 800a42c:	673b      	str	r3, [r7, #112]	; 0x70
 800a42e:	677a      	str	r2, [r7, #116]	; 0x74
 800a430:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a434:	4642      	mov	r2, r8
 800a436:	464b      	mov	r3, r9
 800a438:	1891      	adds	r1, r2, r2
 800a43a:	60b9      	str	r1, [r7, #8]
 800a43c:	415b      	adcs	r3, r3
 800a43e:	60fb      	str	r3, [r7, #12]
 800a440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a444:	4641      	mov	r1, r8
 800a446:	1851      	adds	r1, r2, r1
 800a448:	6039      	str	r1, [r7, #0]
 800a44a:	4649      	mov	r1, r9
 800a44c:	414b      	adcs	r3, r1
 800a44e:	607b      	str	r3, [r7, #4]
 800a450:	f04f 0200 	mov.w	r2, #0
 800a454:	f04f 0300 	mov.w	r3, #0
 800a458:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a45c:	4659      	mov	r1, fp
 800a45e:	00cb      	lsls	r3, r1, #3
 800a460:	4651      	mov	r1, sl
 800a462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a466:	4651      	mov	r1, sl
 800a468:	00ca      	lsls	r2, r1, #3
 800a46a:	4610      	mov	r0, r2
 800a46c:	4619      	mov	r1, r3
 800a46e:	4603      	mov	r3, r0
 800a470:	4642      	mov	r2, r8
 800a472:	189b      	adds	r3, r3, r2
 800a474:	66bb      	str	r3, [r7, #104]	; 0x68
 800a476:	464b      	mov	r3, r9
 800a478:	460a      	mov	r2, r1
 800a47a:	eb42 0303 	adc.w	r3, r2, r3
 800a47e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	663b      	str	r3, [r7, #96]	; 0x60
 800a48a:	667a      	str	r2, [r7, #100]	; 0x64
 800a48c:	f04f 0200 	mov.w	r2, #0
 800a490:	f04f 0300 	mov.w	r3, #0
 800a494:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a498:	4649      	mov	r1, r9
 800a49a:	008b      	lsls	r3, r1, #2
 800a49c:	4641      	mov	r1, r8
 800a49e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4a2:	4641      	mov	r1, r8
 800a4a4:	008a      	lsls	r2, r1, #2
 800a4a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a4aa:	f7f6 fbcd 	bl	8000c48 <__aeabi_uldivmod>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4b0d      	ldr	r3, [pc, #52]	; (800a4e8 <UART_SetConfig+0x4e4>)
 800a4b4:	fba3 1302 	umull	r1, r3, r3, r2
 800a4b8:	095b      	lsrs	r3, r3, #5
 800a4ba:	2164      	movs	r1, #100	; 0x64
 800a4bc:	fb01 f303 	mul.w	r3, r1, r3
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	011b      	lsls	r3, r3, #4
 800a4c4:	3332      	adds	r3, #50	; 0x32
 800a4c6:	4a08      	ldr	r2, [pc, #32]	; (800a4e8 <UART_SetConfig+0x4e4>)
 800a4c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4cc:	095b      	lsrs	r3, r3, #5
 800a4ce:	f003 020f 	and.w	r2, r3, #15
 800a4d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4422      	add	r2, r4
 800a4da:	609a      	str	r2, [r3, #8]
}
 800a4dc:	bf00      	nop
 800a4de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4e8:	51eb851f 	.word	0x51eb851f

0800a4ec <PID_Cal>:
 * @param CurrVal_set giá trị feedback của hệ thống
 * @return
 */

float PID_Cal(PID_Param *pid,float Target_set,float CurrVal_set)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	ed87 0a02 	vstr	s0, [r7, #8]
 800a4f8:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	e = Target_set - CurrVal_set;
 800a4fc:	ed97 7a02 	vldr	s14, [r7, #8]
 800a500:	edd7 7a01 	vldr	s15, [r7, #4]
 800a504:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	edc3 7a00 	vstr	s15, [r3]

	if(!kI) kB = 0;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	edd3 7a05 	vldr	s15, [r3, #20]
 800a514:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a51c:	d104      	bne.n	800a528 <PID_Cal+0x3c>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f04f 0200 	mov.w	r2, #0
 800a524:	61da      	str	r2, [r3, #28]
 800a526:	e009      	b.n	800a53c <PID_Cal+0x50>
	else kB = 1/deltaT;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a52e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	edc3 7a07 	vstr	s15, [r3, #28]

//-----------------------Propotion Term----------------//
	uP = kP*e;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	ed93 7a03 	vldr	s14, [r3, #12]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	edd3 7a00 	vldr	s15, [r3]
 800a548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	edc3 7a04 	vstr	s15, [r3, #16]

//-----------------------Integral Term-----------------//
	uI +=(kI*e + kB*(-u + uHat))*deltaT;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	ed93 7a06 	vldr	s14, [r3, #24]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	edd3 6a05 	vldr	s13, [r3, #20]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	edd3 7a00 	vldr	s15, [r3]
 800a564:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	ed93 6a07 	vldr	s12, [r3, #28]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	edd3 5a0e 	vldr	s11, [r3, #56]	; 0x38
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800a57a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a57e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a582:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	edd3 7a02 	vldr	s15, [r3, #8]
 800a58c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a590:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Derivative Term---------------//
	uD = kD*(e - e_Pre)/deltaT;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	ed93 7a08 	vldr	s14, [r3, #32]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	edd3 6a00 	vldr	s13, [r3]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	edd3 7a01 	vldr	s15, [r3, #4]
 800a5ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a5b0:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	ed93 7a02 	vldr	s14, [r3, #8]
 800a5ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	uD_Fil = (1-alpha)*uD_FilPre+alpha*uD;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a5ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a5d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a5e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

//-----------------------Previous Value----------------//
	e_Pre = e;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	605a      	str	r2, [r3, #4]
	uD_FilPre = uD_Fil;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	62da      	str	r2, [r3, #44]	; 0x2c

//-----------------------Sum---------------------------//
	u = uP + uI + uD;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	ed93 7a04 	vldr	s14, [r3, #16]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	edd3 7a06 	vldr	s15, [r3, #24]
 800a612:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a61c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	if(u >= u_AboveLimit) uHat = u_AboveLimit;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800a632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a63a:	db04      	blt.n	800a646 <PID_Cal+0x15a>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	639a      	str	r2, [r3, #56]	; 0x38
 800a644:	e013      	b.n	800a66e <PID_Cal+0x182>
	else if(u <= u_BelowLimit) uHat = u_BelowLimit;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65a:	d804      	bhi.n	800a666 <PID_Cal+0x17a>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	639a      	str	r2, [r3, #56]	; 0x38
 800a664:	e003      	b.n	800a66e <PID_Cal+0x182>
	else uHat = u;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	639a      	str	r2, [r3, #56]	; 0x38
	return uHat;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	ee07 3a90 	vmov	s15, r3
}
 800a676:	eeb0 0a67 	vmov.f32	s0, s15
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	4603      	mov	r3, r0
 800a68c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a696:	2b84      	cmp	r3, #132	; 0x84
 800a698:	d005      	beq.n	800a6a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a69a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	3303      	adds	r3, #3
 800a6a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a6b8:	f000 faf6 	bl	800aca8 <vTaskStartScheduler>
  
  return osOK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a6c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c4:	b089      	sub	sp, #36	; 0x24
 800a6c6:	af04      	add	r7, sp, #16
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d020      	beq.n	800a716 <osThreadCreate+0x54>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d01c      	beq.n	800a716 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685c      	ldr	r4, [r3, #4]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	691e      	ldr	r6, [r3, #16]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff ffc8 	bl	800a684 <makeFreeRtosPriority>
 800a6f4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6fe:	9202      	str	r2, [sp, #8]
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	9100      	str	r1, [sp, #0]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	4632      	mov	r2, r6
 800a708:	4629      	mov	r1, r5
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 f8ed 	bl	800a8ea <xTaskCreateStatic>
 800a710:	4603      	mov	r3, r0
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	e01c      	b.n	800a750 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685c      	ldr	r4, [r3, #4]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a722:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff ffaa 	bl	800a684 <makeFreeRtosPriority>
 800a730:	4602      	mov	r2, r0
 800a732:	f107 030c 	add.w	r3, r7, #12
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	9200      	str	r2, [sp, #0]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	4632      	mov	r2, r6
 800a73e:	4629      	mov	r1, r5
 800a740:	4620      	mov	r0, r4
 800a742:	f000 f92f 	bl	800a9a4 <xTaskCreate>
 800a746:	4603      	mov	r3, r0
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d001      	beq.n	800a750 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	e000      	b.n	800a752 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a750:	68fb      	ldr	r3, [r7, #12]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a75a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b084      	sub	sp, #16
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <osDelay+0x16>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	e000      	b.n	800a772 <osDelay+0x18>
 800a770:	2301      	movs	r3, #1
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fa64 	bl	800ac40 <vTaskDelay>
  
  return osOK;
 800a778:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a782:	b480      	push	{r7}
 800a784:	b083      	sub	sp, #12
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f103 0208 	add.w	r2, r3, #8
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f04f 32ff 	mov.w	r2, #4294967295
 800a79a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f103 0208 	add.w	r2, r3, #8
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f103 0208 	add.w	r2, r3, #8
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7b6:	bf00      	nop
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	689a      	ldr	r2, [r3, #8]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	601a      	str	r2, [r3, #0]
}
 800a818:	bf00      	nop
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83a:	d103      	bne.n	800a844 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	60fb      	str	r3, [r7, #12]
 800a842:	e00c      	b.n	800a85e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	3308      	adds	r3, #8
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	e002      	b.n	800a852 <vListInsert+0x2e>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	60fb      	str	r3, [r7, #12]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d2f6      	bcs.n	800a84c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	601a      	str	r2, [r3, #0]
}
 800a88a:	bf00      	nop
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a896:	b480      	push	{r7}
 800a898:	b085      	sub	sp, #20
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	6892      	ldr	r2, [r2, #8]
 800a8ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	6852      	ldr	r2, [r2, #4]
 800a8b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d103      	bne.n	800a8ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	689a      	ldr	r2, [r3, #8]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	1e5a      	subs	r2, r3, #1
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b08e      	sub	sp, #56	; 0x38
 800a8ee:	af04      	add	r7, sp, #16
 800a8f0:	60f8      	str	r0, [r7, #12]
 800a8f2:	60b9      	str	r1, [r7, #8]
 800a8f4:	607a      	str	r2, [r7, #4]
 800a8f6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10a      	bne.n	800a914 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a910:	bf00      	nop
 800a912:	e7fe      	b.n	800a912 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10a      	bne.n	800a930 <xTaskCreateStatic+0x46>
	__asm volatile
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	61fb      	str	r3, [r7, #28]
}
 800a92c:	bf00      	nop
 800a92e:	e7fe      	b.n	800a92e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a930:	23a0      	movs	r3, #160	; 0xa0
 800a932:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2ba0      	cmp	r3, #160	; 0xa0
 800a938:	d00a      	beq.n	800a950 <xTaskCreateStatic+0x66>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	61bb      	str	r3, [r7, #24]
}
 800a94c:	bf00      	nop
 800a94e:	e7fe      	b.n	800a94e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a950:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	2b00      	cmp	r3, #0
 800a956:	d01e      	beq.n	800a996 <xTaskCreateStatic+0xac>
 800a958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d01b      	beq.n	800a996 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a966:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a970:	2300      	movs	r3, #0
 800a972:	9303      	str	r3, [sp, #12]
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	9302      	str	r3, [sp, #8]
 800a978:	f107 0314 	add.w	r3, r7, #20
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	68b9      	ldr	r1, [r7, #8]
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 f851 	bl	800aa30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a98e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a990:	f000 f8ec 	bl	800ab6c <prvAddNewTaskToReadyList>
 800a994:	e001      	b.n	800a99a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a996:	2300      	movs	r3, #0
 800a998:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a99a:	697b      	ldr	r3, [r7, #20]
	}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3728      	adds	r7, #40	; 0x28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b08c      	sub	sp, #48	; 0x30
 800a9a8:	af04      	add	r7, sp, #16
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9b4:	88fb      	ldrh	r3, [r7, #6]
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f001 f935 	bl	800bc28 <pvPortMalloc>
 800a9be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00e      	beq.n	800a9e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a9c6:	20a0      	movs	r0, #160	; 0xa0
 800a9c8:	f001 f92e 	bl	800bc28 <pvPortMalloc>
 800a9cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	631a      	str	r2, [r3, #48]	; 0x30
 800a9da:	e005      	b.n	800a9e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9dc:	6978      	ldr	r0, [r7, #20]
 800a9de:	f001 f9ef 	bl	800bdc0 <vPortFree>
 800a9e2:	e001      	b.n	800a9e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d017      	beq.n	800aa1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9f6:	88fa      	ldrh	r2, [r7, #6]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	9303      	str	r3, [sp, #12]
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	9302      	str	r3, [sp, #8]
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	68b9      	ldr	r1, [r7, #8]
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 f80f 	bl	800aa30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa12:	69f8      	ldr	r0, [r7, #28]
 800aa14:	f000 f8aa 	bl	800ab6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	61bb      	str	r3, [r7, #24]
 800aa1c:	e002      	b.n	800aa24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa1e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa24:	69bb      	ldr	r3, [r7, #24]
	}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3720      	adds	r7, #32
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
	...

0800aa30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4413      	add	r3, r2
 800aa4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	f023 0307 	bic.w	r3, r3, #7
 800aa56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	f003 0307 	and.w	r3, r3, #7
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00a      	beq.n	800aa78 <prvInitialiseNewTask+0x48>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	617b      	str	r3, [r7, #20]
}
 800aa74:	bf00      	nop
 800aa76:	e7fe      	b.n	800aa76 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d01f      	beq.n	800aabe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa7e:	2300      	movs	r3, #0
 800aa80:	61fb      	str	r3, [r7, #28]
 800aa82:	e012      	b.n	800aaaa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	4413      	add	r3, r2
 800aa8a:	7819      	ldrb	r1, [r3, #0]
 800aa8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	4413      	add	r3, r2
 800aa92:	3334      	adds	r3, #52	; 0x34
 800aa94:	460a      	mov	r2, r1
 800aa96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d006      	beq.n	800aab2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	61fb      	str	r3, [r7, #28]
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	2b0f      	cmp	r3, #15
 800aaae:	d9e9      	bls.n	800aa84 <prvInitialiseNewTask+0x54>
 800aab0:	e000      	b.n	800aab4 <prvInitialiseNewTask+0x84>
			{
				break;
 800aab2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aabc:	e003      	b.n	800aac6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	2b06      	cmp	r3, #6
 800aaca:	d901      	bls.n	800aad0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aacc:	2306      	movs	r3, #6
 800aace:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aad4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aada:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	2200      	movs	r2, #0
 800aae0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	3304      	adds	r3, #4
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7ff fe6b 	bl	800a7c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	3318      	adds	r3, #24
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7ff fe66 	bl	800a7c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aafa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	f1c3 0207 	rsb	r2, r3, #7
 800ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	334c      	adds	r3, #76	; 0x4c
 800ab20:	224c      	movs	r2, #76	; 0x4c
 800ab22:	2100      	movs	r1, #0
 800ab24:	4618      	mov	r0, r3
 800ab26:	f001 fff4 	bl	800cb12 <memset>
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	4a0c      	ldr	r2, [pc, #48]	; (800ab60 <prvInitialiseNewTask+0x130>)
 800ab2e:	651a      	str	r2, [r3, #80]	; 0x50
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	4a0c      	ldr	r2, [pc, #48]	; (800ab64 <prvInitialiseNewTask+0x134>)
 800ab34:	655a      	str	r2, [r3, #84]	; 0x54
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	4a0b      	ldr	r2, [pc, #44]	; (800ab68 <prvInitialiseNewTask+0x138>)
 800ab3a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	68f9      	ldr	r1, [r7, #12]
 800ab40:	69b8      	ldr	r0, [r7, #24]
 800ab42:	f000 fe21 	bl	800b788 <pxPortInitialiseStack>
 800ab46:	4602      	mov	r2, r0
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab58:	bf00      	nop
 800ab5a:	3720      	adds	r7, #32
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	2000505c 	.word	0x2000505c
 800ab64:	200050c4 	.word	0x200050c4
 800ab68:	2000512c 	.word	0x2000512c

0800ab6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab74:	f000 ff36 	bl	800b9e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab78:	4b2a      	ldr	r3, [pc, #168]	; (800ac24 <prvAddNewTaskToReadyList+0xb8>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	4a29      	ldr	r2, [pc, #164]	; (800ac24 <prvAddNewTaskToReadyList+0xb8>)
 800ab80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab82:	4b29      	ldr	r3, [pc, #164]	; (800ac28 <prvAddNewTaskToReadyList+0xbc>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d109      	bne.n	800ab9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab8a:	4a27      	ldr	r2, [pc, #156]	; (800ac28 <prvAddNewTaskToReadyList+0xbc>)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab90:	4b24      	ldr	r3, [pc, #144]	; (800ac24 <prvAddNewTaskToReadyList+0xb8>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d110      	bne.n	800abba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab98:	f000 facc 	bl	800b134 <prvInitialiseTaskLists>
 800ab9c:	e00d      	b.n	800abba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab9e:	4b23      	ldr	r3, [pc, #140]	; (800ac2c <prvAddNewTaskToReadyList+0xc0>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d109      	bne.n	800abba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aba6:	4b20      	ldr	r3, [pc, #128]	; (800ac28 <prvAddNewTaskToReadyList+0xbc>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d802      	bhi.n	800abba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abb4:	4a1c      	ldr	r2, [pc, #112]	; (800ac28 <prvAddNewTaskToReadyList+0xbc>)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abba:	4b1d      	ldr	r3, [pc, #116]	; (800ac30 <prvAddNewTaskToReadyList+0xc4>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	3301      	adds	r3, #1
 800abc0:	4a1b      	ldr	r2, [pc, #108]	; (800ac30 <prvAddNewTaskToReadyList+0xc4>)
 800abc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc8:	2201      	movs	r2, #1
 800abca:	409a      	lsls	r2, r3
 800abcc:	4b19      	ldr	r3, [pc, #100]	; (800ac34 <prvAddNewTaskToReadyList+0xc8>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	4a18      	ldr	r2, [pc, #96]	; (800ac34 <prvAddNewTaskToReadyList+0xc8>)
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <prvAddNewTaskToReadyList+0xcc>)
 800abe4:	441a      	add	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3304      	adds	r3, #4
 800abea:	4619      	mov	r1, r3
 800abec:	4610      	mov	r0, r2
 800abee:	f7ff fdf5 	bl	800a7dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abf2:	f000 ff27 	bl	800ba44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abf6:	4b0d      	ldr	r3, [pc, #52]	; (800ac2c <prvAddNewTaskToReadyList+0xc0>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00e      	beq.n	800ac1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abfe:	4b0a      	ldr	r3, [pc, #40]	; (800ac28 <prvAddNewTaskToReadyList+0xbc>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d207      	bcs.n	800ac1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac0c:	4b0b      	ldr	r3, [pc, #44]	; (800ac3c <prvAddNewTaskToReadyList+0xd0>)
 800ac0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	20001408 	.word	0x20001408
 800ac28:	20001308 	.word	0x20001308
 800ac2c:	20001414 	.word	0x20001414
 800ac30:	20001424 	.word	0x20001424
 800ac34:	20001410 	.word	0x20001410
 800ac38:	2000130c 	.word	0x2000130c
 800ac3c:	e000ed04 	.word	0xe000ed04

0800ac40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d017      	beq.n	800ac82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac52:	4b13      	ldr	r3, [pc, #76]	; (800aca0 <vTaskDelay+0x60>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <vTaskDelay+0x30>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	60bb      	str	r3, [r7, #8]
}
 800ac6c:	bf00      	nop
 800ac6e:	e7fe      	b.n	800ac6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac70:	f000 f884 	bl	800ad7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac74:	2100      	movs	r1, #0
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 fd20 	bl	800b6bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac7c:	f000 f88c 	bl	800ad98 <xTaskResumeAll>
 800ac80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d107      	bne.n	800ac98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac88:	4b06      	ldr	r3, [pc, #24]	; (800aca4 <vTaskDelay+0x64>)
 800ac8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac98:	bf00      	nop
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	20001430 	.word	0x20001430
 800aca4:	e000ed04 	.word	0xe000ed04

0800aca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08a      	sub	sp, #40	; 0x28
 800acac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800acb2:	2300      	movs	r3, #0
 800acb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800acb6:	463a      	mov	r2, r7
 800acb8:	1d39      	adds	r1, r7, #4
 800acba:	f107 0308 	add.w	r3, r7, #8
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7f7 ffd6 	bl	8002c70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	9202      	str	r2, [sp, #8]
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	2300      	movs	r3, #0
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	2300      	movs	r3, #0
 800acd4:	460a      	mov	r2, r1
 800acd6:	4921      	ldr	r1, [pc, #132]	; (800ad5c <vTaskStartScheduler+0xb4>)
 800acd8:	4821      	ldr	r0, [pc, #132]	; (800ad60 <vTaskStartScheduler+0xb8>)
 800acda:	f7ff fe06 	bl	800a8ea <xTaskCreateStatic>
 800acde:	4603      	mov	r3, r0
 800ace0:	4a20      	ldr	r2, [pc, #128]	; (800ad64 <vTaskStartScheduler+0xbc>)
 800ace2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ace4:	4b1f      	ldr	r3, [pc, #124]	; (800ad64 <vTaskStartScheduler+0xbc>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800acec:	2301      	movs	r3, #1
 800acee:	617b      	str	r3, [r7, #20]
 800acf0:	e001      	b.n	800acf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acf2:	2300      	movs	r3, #0
 800acf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d11b      	bne.n	800ad34 <vTaskStartScheduler+0x8c>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	613b      	str	r3, [r7, #16]
}
 800ad0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad10:	4b15      	ldr	r3, [pc, #84]	; (800ad68 <vTaskStartScheduler+0xc0>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	334c      	adds	r3, #76	; 0x4c
 800ad16:	4a15      	ldr	r2, [pc, #84]	; (800ad6c <vTaskStartScheduler+0xc4>)
 800ad18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad1a:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <vTaskStartScheduler+0xc8>)
 800ad1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad22:	4b14      	ldr	r3, [pc, #80]	; (800ad74 <vTaskStartScheduler+0xcc>)
 800ad24:	2201      	movs	r2, #1
 800ad26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad28:	4b13      	ldr	r3, [pc, #76]	; (800ad78 <vTaskStartScheduler+0xd0>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad2e:	f000 fdb7 	bl	800b8a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad32:	e00e      	b.n	800ad52 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3a:	d10a      	bne.n	800ad52 <vTaskStartScheduler+0xaa>
	__asm volatile
 800ad3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	60fb      	str	r3, [r7, #12]
}
 800ad4e:	bf00      	nop
 800ad50:	e7fe      	b.n	800ad50 <vTaskStartScheduler+0xa8>
}
 800ad52:	bf00      	nop
 800ad54:	3718      	adds	r7, #24
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	080112a0 	.word	0x080112a0
 800ad60:	0800b105 	.word	0x0800b105
 800ad64:	2000142c 	.word	0x2000142c
 800ad68:	20001308 	.word	0x20001308
 800ad6c:	2000006c 	.word	0x2000006c
 800ad70:	20001428 	.word	0x20001428
 800ad74:	20001414 	.word	0x20001414
 800ad78:	2000140c 	.word	0x2000140c

0800ad7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad80:	4b04      	ldr	r3, [pc, #16]	; (800ad94 <vTaskSuspendAll+0x18>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3301      	adds	r3, #1
 800ad86:	4a03      	ldr	r2, [pc, #12]	; (800ad94 <vTaskSuspendAll+0x18>)
 800ad88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad8a:	bf00      	nop
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	20001430 	.word	0x20001430

0800ad98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ada2:	2300      	movs	r3, #0
 800ada4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ada6:	4b41      	ldr	r3, [pc, #260]	; (800aeac <xTaskResumeAll+0x114>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10a      	bne.n	800adc4 <xTaskResumeAll+0x2c>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	603b      	str	r3, [r7, #0]
}
 800adc0:	bf00      	nop
 800adc2:	e7fe      	b.n	800adc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800adc4:	f000 fe0e 	bl	800b9e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800adc8:	4b38      	ldr	r3, [pc, #224]	; (800aeac <xTaskResumeAll+0x114>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3b01      	subs	r3, #1
 800adce:	4a37      	ldr	r2, [pc, #220]	; (800aeac <xTaskResumeAll+0x114>)
 800add0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800add2:	4b36      	ldr	r3, [pc, #216]	; (800aeac <xTaskResumeAll+0x114>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d161      	bne.n	800ae9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800adda:	4b35      	ldr	r3, [pc, #212]	; (800aeb0 <xTaskResumeAll+0x118>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d05d      	beq.n	800ae9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ade2:	e02e      	b.n	800ae42 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade4:	4b33      	ldr	r3, [pc, #204]	; (800aeb4 <xTaskResumeAll+0x11c>)
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3318      	adds	r3, #24
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7ff fd50 	bl	800a896 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff fd4b 	bl	800a896 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae04:	2201      	movs	r2, #1
 800ae06:	409a      	lsls	r2, r3
 800ae08:	4b2b      	ldr	r3, [pc, #172]	; (800aeb8 <xTaskResumeAll+0x120>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	4a2a      	ldr	r2, [pc, #168]	; (800aeb8 <xTaskResumeAll+0x120>)
 800ae10:	6013      	str	r3, [r2, #0]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4a27      	ldr	r2, [pc, #156]	; (800aebc <xTaskResumeAll+0x124>)
 800ae20:	441a      	add	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3304      	adds	r3, #4
 800ae26:	4619      	mov	r1, r3
 800ae28:	4610      	mov	r0, r2
 800ae2a:	f7ff fcd7 	bl	800a7dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae32:	4b23      	ldr	r3, [pc, #140]	; (800aec0 <xTaskResumeAll+0x128>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d302      	bcc.n	800ae42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ae3c:	4b21      	ldr	r3, [pc, #132]	; (800aec4 <xTaskResumeAll+0x12c>)
 800ae3e:	2201      	movs	r2, #1
 800ae40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae42:	4b1c      	ldr	r3, [pc, #112]	; (800aeb4 <xTaskResumeAll+0x11c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1cc      	bne.n	800ade4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae50:	f000 fa12 	bl	800b278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae54:	4b1c      	ldr	r3, [pc, #112]	; (800aec8 <xTaskResumeAll+0x130>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d010      	beq.n	800ae82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae60:	f000 f836 	bl	800aed0 <xTaskIncrementTick>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ae6a:	4b16      	ldr	r3, [pc, #88]	; (800aec4 <xTaskResumeAll+0x12c>)
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1f1      	bne.n	800ae60 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ae7c:	4b12      	ldr	r3, [pc, #72]	; (800aec8 <xTaskResumeAll+0x130>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae82:	4b10      	ldr	r3, [pc, #64]	; (800aec4 <xTaskResumeAll+0x12c>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d009      	beq.n	800ae9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae8e:	4b0f      	ldr	r3, [pc, #60]	; (800aecc <xTaskResumeAll+0x134>)
 800ae90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae9e:	f000 fdd1 	bl	800ba44 <vPortExitCritical>

	return xAlreadyYielded;
 800aea2:	68bb      	ldr	r3, [r7, #8]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	20001430 	.word	0x20001430
 800aeb0:	20001408 	.word	0x20001408
 800aeb4:	200013c8 	.word	0x200013c8
 800aeb8:	20001410 	.word	0x20001410
 800aebc:	2000130c 	.word	0x2000130c
 800aec0:	20001308 	.word	0x20001308
 800aec4:	2000141c 	.word	0x2000141c
 800aec8:	20001418 	.word	0x20001418
 800aecc:	e000ed04 	.word	0xe000ed04

0800aed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aed6:	2300      	movs	r3, #0
 800aed8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeda:	4b4e      	ldr	r3, [pc, #312]	; (800b014 <xTaskIncrementTick+0x144>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f040 808e 	bne.w	800b000 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aee4:	4b4c      	ldr	r3, [pc, #304]	; (800b018 <xTaskIncrementTick+0x148>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	3301      	adds	r3, #1
 800aeea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aeec:	4a4a      	ldr	r2, [pc, #296]	; (800b018 <xTaskIncrementTick+0x148>)
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d120      	bne.n	800af3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aef8:	4b48      	ldr	r3, [pc, #288]	; (800b01c <xTaskIncrementTick+0x14c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00a      	beq.n	800af18 <xTaskIncrementTick+0x48>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	603b      	str	r3, [r7, #0]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <xTaskIncrementTick+0x46>
 800af18:	4b40      	ldr	r3, [pc, #256]	; (800b01c <xTaskIncrementTick+0x14c>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	60fb      	str	r3, [r7, #12]
 800af1e:	4b40      	ldr	r3, [pc, #256]	; (800b020 <xTaskIncrementTick+0x150>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a3e      	ldr	r2, [pc, #248]	; (800b01c <xTaskIncrementTick+0x14c>)
 800af24:	6013      	str	r3, [r2, #0]
 800af26:	4a3e      	ldr	r2, [pc, #248]	; (800b020 <xTaskIncrementTick+0x150>)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	4b3d      	ldr	r3, [pc, #244]	; (800b024 <xTaskIncrementTick+0x154>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3301      	adds	r3, #1
 800af32:	4a3c      	ldr	r2, [pc, #240]	; (800b024 <xTaskIncrementTick+0x154>)
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	f000 f99f 	bl	800b278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af3a:	4b3b      	ldr	r3, [pc, #236]	; (800b028 <xTaskIncrementTick+0x158>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	429a      	cmp	r2, r3
 800af42:	d348      	bcc.n	800afd6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af44:	4b35      	ldr	r3, [pc, #212]	; (800b01c <xTaskIncrementTick+0x14c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d104      	bne.n	800af58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af4e:	4b36      	ldr	r3, [pc, #216]	; (800b028 <xTaskIncrementTick+0x158>)
 800af50:	f04f 32ff 	mov.w	r2, #4294967295
 800af54:	601a      	str	r2, [r3, #0]
					break;
 800af56:	e03e      	b.n	800afd6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af58:	4b30      	ldr	r3, [pc, #192]	; (800b01c <xTaskIncrementTick+0x14c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d203      	bcs.n	800af78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af70:	4a2d      	ldr	r2, [pc, #180]	; (800b028 <xTaskIncrementTick+0x158>)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af76:	e02e      	b.n	800afd6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	3304      	adds	r3, #4
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff fc8a 	bl	800a896 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af86:	2b00      	cmp	r3, #0
 800af88:	d004      	beq.n	800af94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	3318      	adds	r3, #24
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff fc81 	bl	800a896 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af98:	2201      	movs	r2, #1
 800af9a:	409a      	lsls	r2, r3
 800af9c:	4b23      	ldr	r3, [pc, #140]	; (800b02c <xTaskIncrementTick+0x15c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	4a22      	ldr	r2, [pc, #136]	; (800b02c <xTaskIncrementTick+0x15c>)
 800afa4:	6013      	str	r3, [r2, #0]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afaa:	4613      	mov	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4a1f      	ldr	r2, [pc, #124]	; (800b030 <xTaskIncrementTick+0x160>)
 800afb4:	441a      	add	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	3304      	adds	r3, #4
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f7ff fc0d 	bl	800a7dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc6:	4b1b      	ldr	r3, [pc, #108]	; (800b034 <xTaskIncrementTick+0x164>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	429a      	cmp	r2, r3
 800afce:	d3b9      	bcc.n	800af44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800afd0:	2301      	movs	r3, #1
 800afd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afd4:	e7b6      	b.n	800af44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afd6:	4b17      	ldr	r3, [pc, #92]	; (800b034 <xTaskIncrementTick+0x164>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afdc:	4914      	ldr	r1, [pc, #80]	; (800b030 <xTaskIncrementTick+0x160>)
 800afde:	4613      	mov	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	440b      	add	r3, r1
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d901      	bls.n	800aff2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800afee:	2301      	movs	r3, #1
 800aff0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aff2:	4b11      	ldr	r3, [pc, #68]	; (800b038 <xTaskIncrementTick+0x168>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d007      	beq.n	800b00a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800affa:	2301      	movs	r3, #1
 800affc:	617b      	str	r3, [r7, #20]
 800affe:	e004      	b.n	800b00a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b000:	4b0e      	ldr	r3, [pc, #56]	; (800b03c <xTaskIncrementTick+0x16c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3301      	adds	r3, #1
 800b006:	4a0d      	ldr	r2, [pc, #52]	; (800b03c <xTaskIncrementTick+0x16c>)
 800b008:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b00a:	697b      	ldr	r3, [r7, #20]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20001430 	.word	0x20001430
 800b018:	2000140c 	.word	0x2000140c
 800b01c:	200013c0 	.word	0x200013c0
 800b020:	200013c4 	.word	0x200013c4
 800b024:	20001420 	.word	0x20001420
 800b028:	20001428 	.word	0x20001428
 800b02c:	20001410 	.word	0x20001410
 800b030:	2000130c 	.word	0x2000130c
 800b034:	20001308 	.word	0x20001308
 800b038:	2000141c 	.word	0x2000141c
 800b03c:	20001418 	.word	0x20001418

0800b040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b040:	b480      	push	{r7}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b046:	4b29      	ldr	r3, [pc, #164]	; (800b0ec <vTaskSwitchContext+0xac>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b04e:	4b28      	ldr	r3, [pc, #160]	; (800b0f0 <vTaskSwitchContext+0xb0>)
 800b050:	2201      	movs	r2, #1
 800b052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b054:	e044      	b.n	800b0e0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b056:	4b26      	ldr	r3, [pc, #152]	; (800b0f0 <vTaskSwitchContext+0xb0>)
 800b058:	2200      	movs	r2, #0
 800b05a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b05c:	4b25      	ldr	r3, [pc, #148]	; (800b0f4 <vTaskSwitchContext+0xb4>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	fab3 f383 	clz	r3, r3
 800b068:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b06a:	7afb      	ldrb	r3, [r7, #11]
 800b06c:	f1c3 031f 	rsb	r3, r3, #31
 800b070:	617b      	str	r3, [r7, #20]
 800b072:	4921      	ldr	r1, [pc, #132]	; (800b0f8 <vTaskSwitchContext+0xb8>)
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	4613      	mov	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	440b      	add	r3, r1
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10a      	bne.n	800b09c <vTaskSwitchContext+0x5c>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	607b      	str	r3, [r7, #4]
}
 800b098:	bf00      	nop
 800b09a:	e7fe      	b.n	800b09a <vTaskSwitchContext+0x5a>
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4a14      	ldr	r2, [pc, #80]	; (800b0f8 <vTaskSwitchContext+0xb8>)
 800b0a8:	4413      	add	r3, r2
 800b0aa:	613b      	str	r3, [r7, #16]
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	605a      	str	r2, [r3, #4]
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	3308      	adds	r3, #8
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d104      	bne.n	800b0cc <vTaskSwitchContext+0x8c>
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	685a      	ldr	r2, [r3, #4]
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	605a      	str	r2, [r3, #4]
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	4a0a      	ldr	r2, [pc, #40]	; (800b0fc <vTaskSwitchContext+0xbc>)
 800b0d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0d6:	4b09      	ldr	r3, [pc, #36]	; (800b0fc <vTaskSwitchContext+0xbc>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	334c      	adds	r3, #76	; 0x4c
 800b0dc:	4a08      	ldr	r2, [pc, #32]	; (800b100 <vTaskSwitchContext+0xc0>)
 800b0de:	6013      	str	r3, [r2, #0]
}
 800b0e0:	bf00      	nop
 800b0e2:	371c      	adds	r7, #28
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	20001430 	.word	0x20001430
 800b0f0:	2000141c 	.word	0x2000141c
 800b0f4:	20001410 	.word	0x20001410
 800b0f8:	2000130c 	.word	0x2000130c
 800b0fc:	20001308 	.word	0x20001308
 800b100:	2000006c 	.word	0x2000006c

0800b104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b10c:	f000 f852 	bl	800b1b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b110:	4b06      	ldr	r3, [pc, #24]	; (800b12c <prvIdleTask+0x28>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d9f9      	bls.n	800b10c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <prvIdleTask+0x2c>)
 800b11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b128:	e7f0      	b.n	800b10c <prvIdleTask+0x8>
 800b12a:	bf00      	nop
 800b12c:	2000130c 	.word	0x2000130c
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b13a:	2300      	movs	r3, #0
 800b13c:	607b      	str	r3, [r7, #4]
 800b13e:	e00c      	b.n	800b15a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4a12      	ldr	r2, [pc, #72]	; (800b194 <prvInitialiseTaskLists+0x60>)
 800b14c:	4413      	add	r3, r2
 800b14e:	4618      	mov	r0, r3
 800b150:	f7ff fb17 	bl	800a782 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3301      	adds	r3, #1
 800b158:	607b      	str	r3, [r7, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b06      	cmp	r3, #6
 800b15e:	d9ef      	bls.n	800b140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b160:	480d      	ldr	r0, [pc, #52]	; (800b198 <prvInitialiseTaskLists+0x64>)
 800b162:	f7ff fb0e 	bl	800a782 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b166:	480d      	ldr	r0, [pc, #52]	; (800b19c <prvInitialiseTaskLists+0x68>)
 800b168:	f7ff fb0b 	bl	800a782 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b16c:	480c      	ldr	r0, [pc, #48]	; (800b1a0 <prvInitialiseTaskLists+0x6c>)
 800b16e:	f7ff fb08 	bl	800a782 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b172:	480c      	ldr	r0, [pc, #48]	; (800b1a4 <prvInitialiseTaskLists+0x70>)
 800b174:	f7ff fb05 	bl	800a782 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b178:	480b      	ldr	r0, [pc, #44]	; (800b1a8 <prvInitialiseTaskLists+0x74>)
 800b17a:	f7ff fb02 	bl	800a782 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b17e:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <prvInitialiseTaskLists+0x78>)
 800b180:	4a05      	ldr	r2, [pc, #20]	; (800b198 <prvInitialiseTaskLists+0x64>)
 800b182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b184:	4b0a      	ldr	r3, [pc, #40]	; (800b1b0 <prvInitialiseTaskLists+0x7c>)
 800b186:	4a05      	ldr	r2, [pc, #20]	; (800b19c <prvInitialiseTaskLists+0x68>)
 800b188:	601a      	str	r2, [r3, #0]
}
 800b18a:	bf00      	nop
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	2000130c 	.word	0x2000130c
 800b198:	20001398 	.word	0x20001398
 800b19c:	200013ac 	.word	0x200013ac
 800b1a0:	200013c8 	.word	0x200013c8
 800b1a4:	200013dc 	.word	0x200013dc
 800b1a8:	200013f4 	.word	0x200013f4
 800b1ac:	200013c0 	.word	0x200013c0
 800b1b0:	200013c4 	.word	0x200013c4

0800b1b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1ba:	e019      	b.n	800b1f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1bc:	f000 fc12 	bl	800b9e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c0:	4b10      	ldr	r3, [pc, #64]	; (800b204 <prvCheckTasksWaitingTermination+0x50>)
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff fb62 	bl	800a896 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1d2:	4b0d      	ldr	r3, [pc, #52]	; (800b208 <prvCheckTasksWaitingTermination+0x54>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	4a0b      	ldr	r2, [pc, #44]	; (800b208 <prvCheckTasksWaitingTermination+0x54>)
 800b1da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1dc:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <prvCheckTasksWaitingTermination+0x58>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <prvCheckTasksWaitingTermination+0x58>)
 800b1e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1e6:	f000 fc2d 	bl	800ba44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f810 	bl	800b210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1f0:	4b06      	ldr	r3, [pc, #24]	; (800b20c <prvCheckTasksWaitingTermination+0x58>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e1      	bne.n	800b1bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	200013dc 	.word	0x200013dc
 800b208:	20001408 	.word	0x20001408
 800b20c:	200013f0 	.word	0x200013f0

0800b210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	334c      	adds	r3, #76	; 0x4c
 800b21c:	4618      	mov	r0, r3
 800b21e:	f001 fc95 	bl	800cb4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d108      	bne.n	800b23e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b230:	4618      	mov	r0, r3
 800b232:	f000 fdc5 	bl	800bdc0 <vPortFree>
				vPortFree( pxTCB );
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fdc2 	bl	800bdc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b23c:	e018      	b.n	800b270 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b244:	2b01      	cmp	r3, #1
 800b246:	d103      	bne.n	800b250 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fdb9 	bl	800bdc0 <vPortFree>
	}
 800b24e:	e00f      	b.n	800b270 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b256:	2b02      	cmp	r3, #2
 800b258:	d00a      	beq.n	800b270 <prvDeleteTCB+0x60>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	60fb      	str	r3, [r7, #12]
}
 800b26c:	bf00      	nop
 800b26e:	e7fe      	b.n	800b26e <prvDeleteTCB+0x5e>
	}
 800b270:	bf00      	nop
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b27e:	4b0c      	ldr	r3, [pc, #48]	; (800b2b0 <prvResetNextTaskUnblockTime+0x38>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d104      	bne.n	800b292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b288:	4b0a      	ldr	r3, [pc, #40]	; (800b2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b28a:	f04f 32ff 	mov.w	r2, #4294967295
 800b28e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b290:	e008      	b.n	800b2a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b292:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <prvResetNextTaskUnblockTime+0x38>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	4a04      	ldr	r2, [pc, #16]	; (800b2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b2a2:	6013      	str	r3, [r2, #0]
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	200013c0 	.word	0x200013c0
 800b2b4:	20001428 	.word	0x20001428

0800b2b8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
 800b2c4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b2c6:	f000 fb8d 	bl	800b9e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b2ca:	4b29      	ldr	r3, [pc, #164]	; (800b370 <xTaskNotifyWait+0xb8>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d01c      	beq.n	800b312 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b2d8:	4b25      	ldr	r3, [pc, #148]	; (800b370 <xTaskNotifyWait+0xb8>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	43d2      	mvns	r2, r2
 800b2e4:	400a      	ands	r2, r1
 800b2e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b2ea:	4b21      	ldr	r3, [pc, #132]	; (800b370 <xTaskNotifyWait+0xb8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00b      	beq.n	800b312 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	6838      	ldr	r0, [r7, #0]
 800b2fe:	f000 f9dd 	bl	800b6bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b302:	4b1c      	ldr	r3, [pc, #112]	; (800b374 <xTaskNotifyWait+0xbc>)
 800b304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b312:	f000 fb97 	bl	800ba44 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b316:	f000 fb65 	bl	800b9e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d005      	beq.n	800b32c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b320:	4b13      	ldr	r3, [pc, #76]	; (800b370 <xTaskNotifyWait+0xb8>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b32c:	4b10      	ldr	r3, [pc, #64]	; (800b370 <xTaskNotifyWait+0xb8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b02      	cmp	r3, #2
 800b338:	d002      	beq.n	800b340 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b33a:	2300      	movs	r3, #0
 800b33c:	617b      	str	r3, [r7, #20]
 800b33e:	e00a      	b.n	800b356 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b340:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <xTaskNotifyWait+0xb8>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	43d2      	mvns	r2, r2
 800b34c:	400a      	ands	r2, r1
 800b34e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800b352:	2301      	movs	r3, #1
 800b354:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b356:	4b06      	ldr	r3, [pc, #24]	; (800b370 <xTaskNotifyWait+0xb8>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800b360:	f000 fb70 	bl	800ba44 <vPortExitCritical>

		return xReturn;
 800b364:	697b      	ldr	r3, [r7, #20]
	}
 800b366:	4618      	mov	r0, r3
 800b368:	3718      	adds	r7, #24
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	20001308 	.word	0x20001308
 800b374:	e000ed04 	.word	0xe000ed04

0800b378 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08a      	sub	sp, #40	; 0x28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	603b      	str	r3, [r7, #0]
 800b384:	4613      	mov	r3, r2
 800b386:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b388:	2301      	movs	r3, #1
 800b38a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10a      	bne.n	800b3a8 <xTaskGenericNotify+0x30>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	61bb      	str	r3, [r7, #24]
}
 800b3a4:	bf00      	nop
 800b3a6:	e7fe      	b.n	800b3a6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b3ac:	f000 fb1a 	bl	800b9e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d004      	beq.n	800b3c0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b3b6:	6a3b      	ldr	r3, [r7, #32]
 800b3b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b3c0:	6a3b      	ldr	r3, [r7, #32]
 800b3c2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b3c6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	2b04      	cmp	r3, #4
 800b3d4:	d82d      	bhi.n	800b432 <xTaskGenericNotify+0xba>
 800b3d6:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <xTaskGenericNotify+0x64>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b455 	.word	0x0800b455
 800b3e0:	0800b3f1 	.word	0x0800b3f1
 800b3e4:	0800b403 	.word	0x0800b403
 800b3e8:	0800b413 	.word	0x0800b413
 800b3ec:	0800b41d 	.word	0x0800b41d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b3f0:	6a3b      	ldr	r3, [r7, #32]
 800b3f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	6a3b      	ldr	r3, [r7, #32]
 800b3fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b400:	e02b      	b.n	800b45a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	6a3b      	ldr	r3, [r7, #32]
 800b40c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b410:	e023      	b.n	800b45a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b41a:	e01e      	b.n	800b45a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b41c:	7ffb      	ldrb	r3, [r7, #31]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d004      	beq.n	800b42c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b42a:	e016      	b.n	800b45a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800b42c:	2300      	movs	r3, #0
 800b42e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b430:	e013      	b.n	800b45a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43c:	d00c      	beq.n	800b458 <xTaskGenericNotify+0xe0>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	617b      	str	r3, [r7, #20]
}
 800b450:	bf00      	nop
 800b452:	e7fe      	b.n	800b452 <xTaskGenericNotify+0xda>
					break;
 800b454:	bf00      	nop
 800b456:	e000      	b.n	800b45a <xTaskGenericNotify+0xe2>

					break;
 800b458:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b45a:	7ffb      	ldrb	r3, [r7, #31]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d139      	bne.n	800b4d4 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	3304      	adds	r3, #4
 800b464:	4618      	mov	r0, r3
 800b466:	f7ff fa16 	bl	800a896 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	2201      	movs	r2, #1
 800b470:	409a      	lsls	r2, r3
 800b472:	4b1c      	ldr	r3, [pc, #112]	; (800b4e4 <xTaskGenericNotify+0x16c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4313      	orrs	r3, r2
 800b478:	4a1a      	ldr	r2, [pc, #104]	; (800b4e4 <xTaskGenericNotify+0x16c>)
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4a17      	ldr	r2, [pc, #92]	; (800b4e8 <xTaskGenericNotify+0x170>)
 800b48a:	441a      	add	r2, r3
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	3304      	adds	r3, #4
 800b490:	4619      	mov	r1, r3
 800b492:	4610      	mov	r0, r2
 800b494:	f7ff f9a2 	bl	800a7dc <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b498:	6a3b      	ldr	r3, [r7, #32]
 800b49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00a      	beq.n	800b4b6 <xTaskGenericNotify+0x13e>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	613b      	str	r3, [r7, #16]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ba:	4b0c      	ldr	r3, [pc, #48]	; (800b4ec <xTaskGenericNotify+0x174>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d907      	bls.n	800b4d4 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b4c4:	4b0a      	ldr	r3, [pc, #40]	; (800b4f0 <xTaskGenericNotify+0x178>)
 800b4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b4d4:	f000 fab6 	bl	800ba44 <vPortExitCritical>

		return xReturn;
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3728      	adds	r7, #40	; 0x28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	20001410 	.word	0x20001410
 800b4e8:	2000130c 	.word	0x2000130c
 800b4ec:	20001308 	.word	0x20001308
 800b4f0:	e000ed04 	.word	0xe000ed04

0800b4f4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08e      	sub	sp, #56	; 0x38
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	603b      	str	r3, [r7, #0]
 800b500:	4613      	mov	r3, r2
 800b502:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b504:	2301      	movs	r3, #1
 800b506:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10a      	bne.n	800b524 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b520:	bf00      	nop
 800b522:	e7fe      	b.n	800b522 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b524:	f000 fb40 	bl	800bba8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b52c:	f3ef 8211 	mrs	r2, BASEPRI
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	623a      	str	r2, [r7, #32]
 800b542:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b544:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b546:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d004      	beq.n	800b558 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b55e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b564:	2202      	movs	r2, #2
 800b566:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800b56a:	79fb      	ldrb	r3, [r7, #7]
 800b56c:	2b04      	cmp	r3, #4
 800b56e:	d82f      	bhi.n	800b5d0 <xTaskGenericNotifyFromISR+0xdc>
 800b570:	a201      	add	r2, pc, #4	; (adr r2, 800b578 <xTaskGenericNotifyFromISR+0x84>)
 800b572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b576:	bf00      	nop
 800b578:	0800b5f3 	.word	0x0800b5f3
 800b57c:	0800b58d 	.word	0x0800b58d
 800b580:	0800b59f 	.word	0x0800b59f
 800b584:	0800b5af 	.word	0x0800b5af
 800b588:	0800b5b9 	.word	0x0800b5b9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	431a      	orrs	r2, r3
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b59c:	e02c      	b.n	800b5f8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b5ac:	e024      	b.n	800b5f8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b5b6:	e01f      	b.n	800b5f8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b5b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d004      	beq.n	800b5ca <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b5c8:	e016      	b.n	800b5f8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b5ce:	e013      	b.n	800b5f8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5da:	d00c      	beq.n	800b5f6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	61bb      	str	r3, [r7, #24]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b5f2:	bf00      	nop
 800b5f4:	e000      	b.n	800b5f8 <xTaskGenericNotifyFromISR+0x104>
					break;
 800b5f6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b5f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d145      	bne.n	800b68c <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00a      	beq.n	800b61e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800b608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	617b      	str	r3, [r7, #20]
}
 800b61a:	bf00      	nop
 800b61c:	e7fe      	b.n	800b61c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b61e:	4b21      	ldr	r3, [pc, #132]	; (800b6a4 <xTaskGenericNotifyFromISR+0x1b0>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d11c      	bne.n	800b660 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b628:	3304      	adds	r3, #4
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7ff f933 	bl	800a896 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b634:	2201      	movs	r2, #1
 800b636:	409a      	lsls	r2, r3
 800b638:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <xTaskGenericNotifyFromISR+0x1b4>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	4a1a      	ldr	r2, [pc, #104]	; (800b6a8 <xTaskGenericNotifyFromISR+0x1b4>)
 800b640:	6013      	str	r3, [r2, #0]
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b646:	4613      	mov	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4a17      	ldr	r2, [pc, #92]	; (800b6ac <xTaskGenericNotifyFromISR+0x1b8>)
 800b650:	441a      	add	r2, r3
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	3304      	adds	r3, #4
 800b656:	4619      	mov	r1, r3
 800b658:	4610      	mov	r0, r2
 800b65a:	f7ff f8bf 	bl	800a7dc <vListInsertEnd>
 800b65e:	e005      	b.n	800b66c <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b662:	3318      	adds	r3, #24
 800b664:	4619      	mov	r1, r3
 800b666:	4812      	ldr	r0, [pc, #72]	; (800b6b0 <xTaskGenericNotifyFromISR+0x1bc>)
 800b668:	f7ff f8b8 	bl	800a7dc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b670:	4b10      	ldr	r3, [pc, #64]	; (800b6b4 <xTaskGenericNotifyFromISR+0x1c0>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b676:	429a      	cmp	r2, r3
 800b678:	d908      	bls.n	800b68c <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b682:	2201      	movs	r2, #1
 800b684:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b686:	4b0c      	ldr	r3, [pc, #48]	; (800b6b8 <xTaskGenericNotifyFromISR+0x1c4>)
 800b688:	2201      	movs	r2, #1
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b696:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3738      	adds	r7, #56	; 0x38
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20001430 	.word	0x20001430
 800b6a8:	20001410 	.word	0x20001410
 800b6ac:	2000130c 	.word	0x2000130c
 800b6b0:	200013c8 	.word	0x200013c8
 800b6b4:	20001308 	.word	0x20001308
 800b6b8:	2000141c 	.word	0x2000141c

0800b6bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b6c6:	4b29      	ldr	r3, [pc, #164]	; (800b76c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6cc:	4b28      	ldr	r3, [pc, #160]	; (800b770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff f8df 	bl	800a896 <uxListRemove>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10b      	bne.n	800b6f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b6de:	4b24      	ldr	r3, [pc, #144]	; (800b770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ea:	43da      	mvns	r2, r3
 800b6ec:	4b21      	ldr	r3, [pc, #132]	; (800b774 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	4a20      	ldr	r2, [pc, #128]	; (800b774 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b6f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fc:	d10a      	bne.n	800b714 <prvAddCurrentTaskToDelayedList+0x58>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d007      	beq.n	800b714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b704:	4b1a      	ldr	r3, [pc, #104]	; (800b770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3304      	adds	r3, #4
 800b70a:	4619      	mov	r1, r3
 800b70c:	481a      	ldr	r0, [pc, #104]	; (800b778 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b70e:	f7ff f865 	bl	800a7dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b712:	e026      	b.n	800b762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4413      	add	r3, r2
 800b71a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b71c:	4b14      	ldr	r3, [pc, #80]	; (800b770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d209      	bcs.n	800b740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b72c:	4b13      	ldr	r3, [pc, #76]	; (800b77c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	4b0f      	ldr	r3, [pc, #60]	; (800b770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3304      	adds	r3, #4
 800b736:	4619      	mov	r1, r3
 800b738:	4610      	mov	r0, r2
 800b73a:	f7ff f873 	bl	800a824 <vListInsert>
}
 800b73e:	e010      	b.n	800b762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b740:	4b0f      	ldr	r3, [pc, #60]	; (800b780 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	4b0a      	ldr	r3, [pc, #40]	; (800b770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3304      	adds	r3, #4
 800b74a:	4619      	mov	r1, r3
 800b74c:	4610      	mov	r0, r2
 800b74e:	f7ff f869 	bl	800a824 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b752:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d202      	bcs.n	800b762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b75c:	4a09      	ldr	r2, [pc, #36]	; (800b784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	6013      	str	r3, [r2, #0]
}
 800b762:	bf00      	nop
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	2000140c 	.word	0x2000140c
 800b770:	20001308 	.word	0x20001308
 800b774:	20001410 	.word	0x20001410
 800b778:	200013f4 	.word	0x200013f4
 800b77c:	200013c4 	.word	0x200013c4
 800b780:	200013c0 	.word	0x200013c0
 800b784:	20001428 	.word	0x20001428

0800b788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	3b04      	subs	r3, #4
 800b798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3b04      	subs	r3, #4
 800b7a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	f023 0201 	bic.w	r2, r3, #1
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3b04      	subs	r3, #4
 800b7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7b8:	4a0c      	ldr	r2, [pc, #48]	; (800b7ec <pxPortInitialiseStack+0x64>)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3b14      	subs	r3, #20
 800b7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	3b04      	subs	r3, #4
 800b7ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f06f 0202 	mvn.w	r2, #2
 800b7d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3b20      	subs	r3, #32
 800b7dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b7de:	68fb      	ldr	r3, [r7, #12]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	0800b7f1 	.word	0x0800b7f1

0800b7f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7fa:	4b12      	ldr	r3, [pc, #72]	; (800b844 <prvTaskExitError+0x54>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b802:	d00a      	beq.n	800b81a <prvTaskExitError+0x2a>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	60fb      	str	r3, [r7, #12]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <prvTaskExitError+0x28>
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	60bb      	str	r3, [r7, #8]
}
 800b82c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b82e:	bf00      	nop
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0fc      	beq.n	800b830 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b836:	bf00      	nop
 800b838:	bf00      	nop
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr
 800b844:	20000010 	.word	0x20000010
	...

0800b850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b850:	4b07      	ldr	r3, [pc, #28]	; (800b870 <pxCurrentTCBConst2>)
 800b852:	6819      	ldr	r1, [r3, #0]
 800b854:	6808      	ldr	r0, [r1, #0]
 800b856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85a:	f380 8809 	msr	PSP, r0
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f04f 0000 	mov.w	r0, #0
 800b866:	f380 8811 	msr	BASEPRI, r0
 800b86a:	4770      	bx	lr
 800b86c:	f3af 8000 	nop.w

0800b870 <pxCurrentTCBConst2>:
 800b870:	20001308 	.word	0x20001308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b874:	bf00      	nop
 800b876:	bf00      	nop

0800b878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b878:	4808      	ldr	r0, [pc, #32]	; (800b89c <prvPortStartFirstTask+0x24>)
 800b87a:	6800      	ldr	r0, [r0, #0]
 800b87c:	6800      	ldr	r0, [r0, #0]
 800b87e:	f380 8808 	msr	MSP, r0
 800b882:	f04f 0000 	mov.w	r0, #0
 800b886:	f380 8814 	msr	CONTROL, r0
 800b88a:	b662      	cpsie	i
 800b88c:	b661      	cpsie	f
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	df00      	svc	0
 800b898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b89a:	bf00      	nop
 800b89c:	e000ed08 	.word	0xe000ed08

0800b8a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b086      	sub	sp, #24
 800b8a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8a6:	4b46      	ldr	r3, [pc, #280]	; (800b9c0 <xPortStartScheduler+0x120>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a46      	ldr	r2, [pc, #280]	; (800b9c4 <xPortStartScheduler+0x124>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d10a      	bne.n	800b8c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	613b      	str	r3, [r7, #16]
}
 800b8c2:	bf00      	nop
 800b8c4:	e7fe      	b.n	800b8c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8c6:	4b3e      	ldr	r3, [pc, #248]	; (800b9c0 <xPortStartScheduler+0x120>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a3f      	ldr	r2, [pc, #252]	; (800b9c8 <xPortStartScheduler+0x128>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d10a      	bne.n	800b8e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	60fb      	str	r3, [r7, #12]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8e6:	4b39      	ldr	r3, [pc, #228]	; (800b9cc <xPortStartScheduler+0x12c>)
 800b8e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	22ff      	movs	r2, #255	; 0xff
 800b8f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b900:	78fb      	ldrb	r3, [r7, #3]
 800b902:	b2db      	uxtb	r3, r3
 800b904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	4b31      	ldr	r3, [pc, #196]	; (800b9d0 <xPortStartScheduler+0x130>)
 800b90c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b90e:	4b31      	ldr	r3, [pc, #196]	; (800b9d4 <xPortStartScheduler+0x134>)
 800b910:	2207      	movs	r2, #7
 800b912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b914:	e009      	b.n	800b92a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b916:	4b2f      	ldr	r3, [pc, #188]	; (800b9d4 <xPortStartScheduler+0x134>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3b01      	subs	r3, #1
 800b91c:	4a2d      	ldr	r2, [pc, #180]	; (800b9d4 <xPortStartScheduler+0x134>)
 800b91e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b920:	78fb      	ldrb	r3, [r7, #3]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	005b      	lsls	r3, r3, #1
 800b926:	b2db      	uxtb	r3, r3
 800b928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b932:	2b80      	cmp	r3, #128	; 0x80
 800b934:	d0ef      	beq.n	800b916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b936:	4b27      	ldr	r3, [pc, #156]	; (800b9d4 <xPortStartScheduler+0x134>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f1c3 0307 	rsb	r3, r3, #7
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d00a      	beq.n	800b958 <xPortStartScheduler+0xb8>
	__asm volatile
 800b942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b946:	f383 8811 	msr	BASEPRI, r3
 800b94a:	f3bf 8f6f 	isb	sy
 800b94e:	f3bf 8f4f 	dsb	sy
 800b952:	60bb      	str	r3, [r7, #8]
}
 800b954:	bf00      	nop
 800b956:	e7fe      	b.n	800b956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b958:	4b1e      	ldr	r3, [pc, #120]	; (800b9d4 <xPortStartScheduler+0x134>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	4a1d      	ldr	r2, [pc, #116]	; (800b9d4 <xPortStartScheduler+0x134>)
 800b960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b962:	4b1c      	ldr	r3, [pc, #112]	; (800b9d4 <xPortStartScheduler+0x134>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b96a:	4a1a      	ldr	r2, [pc, #104]	; (800b9d4 <xPortStartScheduler+0x134>)
 800b96c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	b2da      	uxtb	r2, r3
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b976:	4b18      	ldr	r3, [pc, #96]	; (800b9d8 <xPortStartScheduler+0x138>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a17      	ldr	r2, [pc, #92]	; (800b9d8 <xPortStartScheduler+0x138>)
 800b97c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b982:	4b15      	ldr	r3, [pc, #84]	; (800b9d8 <xPortStartScheduler+0x138>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a14      	ldr	r2, [pc, #80]	; (800b9d8 <xPortStartScheduler+0x138>)
 800b988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b98c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b98e:	f000 f8dd 	bl	800bb4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b992:	4b12      	ldr	r3, [pc, #72]	; (800b9dc <xPortStartScheduler+0x13c>)
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b998:	f000 f8fc 	bl	800bb94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b99c:	4b10      	ldr	r3, [pc, #64]	; (800b9e0 <xPortStartScheduler+0x140>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a0f      	ldr	r2, [pc, #60]	; (800b9e0 <xPortStartScheduler+0x140>)
 800b9a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b9a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9a8:	f7ff ff66 	bl	800b878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9ac:	f7ff fb48 	bl	800b040 <vTaskSwitchContext>
	prvTaskExitError();
 800b9b0:	f7ff ff1e 	bl	800b7f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	e000ed00 	.word	0xe000ed00
 800b9c4:	410fc271 	.word	0x410fc271
 800b9c8:	410fc270 	.word	0x410fc270
 800b9cc:	e000e400 	.word	0xe000e400
 800b9d0:	20001434 	.word	0x20001434
 800b9d4:	20001438 	.word	0x20001438
 800b9d8:	e000ed20 	.word	0xe000ed20
 800b9dc:	20000010 	.word	0x20000010
 800b9e0:	e000ef34 	.word	0xe000ef34

0800b9e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ee:	f383 8811 	msr	BASEPRI, r3
 800b9f2:	f3bf 8f6f 	isb	sy
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	607b      	str	r3, [r7, #4]
}
 800b9fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ba3c <vPortEnterCritical+0x58>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3301      	adds	r3, #1
 800ba04:	4a0d      	ldr	r2, [pc, #52]	; (800ba3c <vPortEnterCritical+0x58>)
 800ba06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba08:	4b0c      	ldr	r3, [pc, #48]	; (800ba3c <vPortEnterCritical+0x58>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d10f      	bne.n	800ba30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba10:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <vPortEnterCritical+0x5c>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00a      	beq.n	800ba30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	603b      	str	r3, [r7, #0]
}
 800ba2c:	bf00      	nop
 800ba2e:	e7fe      	b.n	800ba2e <vPortEnterCritical+0x4a>
	}
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr
 800ba3c:	20000010 	.word	0x20000010
 800ba40:	e000ed04 	.word	0xe000ed04

0800ba44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba4a:	4b12      	ldr	r3, [pc, #72]	; (800ba94 <vPortExitCritical+0x50>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10a      	bne.n	800ba68 <vPortExitCritical+0x24>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	607b      	str	r3, [r7, #4]
}
 800ba64:	bf00      	nop
 800ba66:	e7fe      	b.n	800ba66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba68:	4b0a      	ldr	r3, [pc, #40]	; (800ba94 <vPortExitCritical+0x50>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	4a09      	ldr	r2, [pc, #36]	; (800ba94 <vPortExitCritical+0x50>)
 800ba70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba72:	4b08      	ldr	r3, [pc, #32]	; (800ba94 <vPortExitCritical+0x50>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d105      	bne.n	800ba86 <vPortExitCritical+0x42>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	f383 8811 	msr	BASEPRI, r3
}
 800ba84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba86:	bf00      	nop
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	20000010 	.word	0x20000010
	...

0800baa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800baa0:	f3ef 8009 	mrs	r0, PSP
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	4b15      	ldr	r3, [pc, #84]	; (800bb00 <pxCurrentTCBConst>)
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	f01e 0f10 	tst.w	lr, #16
 800bab0:	bf08      	it	eq
 800bab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baba:	6010      	str	r0, [r2, #0]
 800babc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bac4:	f380 8811 	msr	BASEPRI, r0
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f7ff fab6 	bl	800b040 <vTaskSwitchContext>
 800bad4:	f04f 0000 	mov.w	r0, #0
 800bad8:	f380 8811 	msr	BASEPRI, r0
 800badc:	bc09      	pop	{r0, r3}
 800bade:	6819      	ldr	r1, [r3, #0]
 800bae0:	6808      	ldr	r0, [r1, #0]
 800bae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae6:	f01e 0f10 	tst.w	lr, #16
 800baea:	bf08      	it	eq
 800baec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800baf0:	f380 8809 	msr	PSP, r0
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	f3af 8000 	nop.w

0800bb00 <pxCurrentTCBConst>:
 800bb00:	20001308 	.word	0x20001308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop

0800bb08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	607b      	str	r3, [r7, #4]
}
 800bb20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb22:	f7ff f9d5 	bl	800aed0 <xTaskIncrementTick>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb2c:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <SysTick_Handler+0x40>)
 800bb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	2300      	movs	r3, #0
 800bb36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	f383 8811 	msr	BASEPRI, r3
}
 800bb3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb40:	bf00      	nop
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	e000ed04 	.word	0xe000ed04

0800bb4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb50:	4b0b      	ldr	r3, [pc, #44]	; (800bb80 <vPortSetupTimerInterrupt+0x34>)
 800bb52:	2200      	movs	r2, #0
 800bb54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb56:	4b0b      	ldr	r3, [pc, #44]	; (800bb84 <vPortSetupTimerInterrupt+0x38>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb5c:	4b0a      	ldr	r3, [pc, #40]	; (800bb88 <vPortSetupTimerInterrupt+0x3c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a0a      	ldr	r2, [pc, #40]	; (800bb8c <vPortSetupTimerInterrupt+0x40>)
 800bb62:	fba2 2303 	umull	r2, r3, r2, r3
 800bb66:	099b      	lsrs	r3, r3, #6
 800bb68:	4a09      	ldr	r2, [pc, #36]	; (800bb90 <vPortSetupTimerInterrupt+0x44>)
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb6e:	4b04      	ldr	r3, [pc, #16]	; (800bb80 <vPortSetupTimerInterrupt+0x34>)
 800bb70:	2207      	movs	r2, #7
 800bb72:	601a      	str	r2, [r3, #0]
}
 800bb74:	bf00      	nop
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	e000e010 	.word	0xe000e010
 800bb84:	e000e018 	.word	0xe000e018
 800bb88:	20000004 	.word	0x20000004
 800bb8c:	10624dd3 	.word	0x10624dd3
 800bb90:	e000e014 	.word	0xe000e014

0800bb94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bba4 <vPortEnableVFP+0x10>
 800bb98:	6801      	ldr	r1, [r0, #0]
 800bb9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bb9e:	6001      	str	r1, [r0, #0]
 800bba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bba2:	bf00      	nop
 800bba4:	e000ed88 	.word	0xe000ed88

0800bba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbae:	f3ef 8305 	mrs	r3, IPSR
 800bbb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2b0f      	cmp	r3, #15
 800bbb8:	d914      	bls.n	800bbe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbba:	4a17      	ldr	r2, [pc, #92]	; (800bc18 <vPortValidateInterruptPriority+0x70>)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbc4:	4b15      	ldr	r3, [pc, #84]	; (800bc1c <vPortValidateInterruptPriority+0x74>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	7afa      	ldrb	r2, [r7, #11]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d20a      	bcs.n	800bbe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	607b      	str	r3, [r7, #4]
}
 800bbe0:	bf00      	nop
 800bbe2:	e7fe      	b.n	800bbe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bbe4:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <vPortValidateInterruptPriority+0x78>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bbec:	4b0d      	ldr	r3, [pc, #52]	; (800bc24 <vPortValidateInterruptPriority+0x7c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d90a      	bls.n	800bc0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	603b      	str	r3, [r7, #0]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <vPortValidateInterruptPriority+0x60>
	}
 800bc0a:	bf00      	nop
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	e000e3f0 	.word	0xe000e3f0
 800bc1c:	20001434 	.word	0x20001434
 800bc20:	e000ed0c 	.word	0xe000ed0c
 800bc24:	20001438 	.word	0x20001438

0800bc28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08a      	sub	sp, #40	; 0x28
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc30:	2300      	movs	r3, #0
 800bc32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc34:	f7ff f8a2 	bl	800ad7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc38:	4b5b      	ldr	r3, [pc, #364]	; (800bda8 <pvPortMalloc+0x180>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d101      	bne.n	800bc44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc40:	f000 f920 	bl	800be84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc44:	4b59      	ldr	r3, [pc, #356]	; (800bdac <pvPortMalloc+0x184>)
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f040 8093 	bne.w	800bd78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d01d      	beq.n	800bc94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bc58:	2208      	movs	r2, #8
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f003 0307 	and.w	r3, r3, #7
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d014      	beq.n	800bc94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f023 0307 	bic.w	r3, r3, #7
 800bc70:	3308      	adds	r3, #8
 800bc72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f003 0307 	and.w	r3, r3, #7
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00a      	beq.n	800bc94 <pvPortMalloc+0x6c>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	617b      	str	r3, [r7, #20]
}
 800bc90:	bf00      	nop
 800bc92:	e7fe      	b.n	800bc92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d06e      	beq.n	800bd78 <pvPortMalloc+0x150>
 800bc9a:	4b45      	ldr	r3, [pc, #276]	; (800bdb0 <pvPortMalloc+0x188>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d869      	bhi.n	800bd78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bca4:	4b43      	ldr	r3, [pc, #268]	; (800bdb4 <pvPortMalloc+0x18c>)
 800bca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bca8:	4b42      	ldr	r3, [pc, #264]	; (800bdb4 <pvPortMalloc+0x18c>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcae:	e004      	b.n	800bcba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d903      	bls.n	800bccc <pvPortMalloc+0xa4>
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1f1      	bne.n	800bcb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bccc:	4b36      	ldr	r3, [pc, #216]	; (800bda8 <pvPortMalloc+0x180>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d050      	beq.n	800bd78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2208      	movs	r2, #8
 800bcdc:	4413      	add	r3, r2
 800bcde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	1ad2      	subs	r2, r2, r3
 800bcf0:	2308      	movs	r3, #8
 800bcf2:	005b      	lsls	r3, r3, #1
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d91f      	bls.n	800bd38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bcf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00a      	beq.n	800bd20 <pvPortMalloc+0xf8>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	613b      	str	r3, [r7, #16]
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd22:	685a      	ldr	r2, [r3, #4]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	1ad2      	subs	r2, r2, r3
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd32:	69b8      	ldr	r0, [r7, #24]
 800bd34:	f000 f908 	bl	800bf48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd38:	4b1d      	ldr	r3, [pc, #116]	; (800bdb0 <pvPortMalloc+0x188>)
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	4a1b      	ldr	r2, [pc, #108]	; (800bdb0 <pvPortMalloc+0x188>)
 800bd44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd46:	4b1a      	ldr	r3, [pc, #104]	; (800bdb0 <pvPortMalloc+0x188>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	4b1b      	ldr	r3, [pc, #108]	; (800bdb8 <pvPortMalloc+0x190>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d203      	bcs.n	800bd5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd52:	4b17      	ldr	r3, [pc, #92]	; (800bdb0 <pvPortMalloc+0x188>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a18      	ldr	r2, [pc, #96]	; (800bdb8 <pvPortMalloc+0x190>)
 800bd58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5c:	685a      	ldr	r2, [r3, #4]
 800bd5e:	4b13      	ldr	r3, [pc, #76]	; (800bdac <pvPortMalloc+0x184>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	431a      	orrs	r2, r3
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd6e:	4b13      	ldr	r3, [pc, #76]	; (800bdbc <pvPortMalloc+0x194>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3301      	adds	r3, #1
 800bd74:	4a11      	ldr	r2, [pc, #68]	; (800bdbc <pvPortMalloc+0x194>)
 800bd76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd78:	f7ff f80e 	bl	800ad98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	f003 0307 	and.w	r3, r3, #7
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00a      	beq.n	800bd9c <pvPortMalloc+0x174>
	__asm volatile
 800bd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8a:	f383 8811 	msr	BASEPRI, r3
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	f3bf 8f4f 	dsb	sy
 800bd96:	60fb      	str	r3, [r7, #12]
}
 800bd98:	bf00      	nop
 800bd9a:	e7fe      	b.n	800bd9a <pvPortMalloc+0x172>
	return pvReturn;
 800bd9c:	69fb      	ldr	r3, [r7, #28]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3728      	adds	r7, #40	; 0x28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20005044 	.word	0x20005044
 800bdac:	20005058 	.word	0x20005058
 800bdb0:	20005048 	.word	0x20005048
 800bdb4:	2000503c 	.word	0x2000503c
 800bdb8:	2000504c 	.word	0x2000504c
 800bdbc:	20005050 	.word	0x20005050

0800bdc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d04d      	beq.n	800be6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bdd2:	2308      	movs	r3, #8
 800bdd4:	425b      	negs	r3, r3
 800bdd6:	697a      	ldr	r2, [r7, #20]
 800bdd8:	4413      	add	r3, r2
 800bdda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	4b24      	ldr	r3, [pc, #144]	; (800be78 <vPortFree+0xb8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4013      	ands	r3, r2
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10a      	bne.n	800be04 <vPortFree+0x44>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	60fb      	str	r3, [r7, #12]
}
 800be00:	bf00      	nop
 800be02:	e7fe      	b.n	800be02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00a      	beq.n	800be22 <vPortFree+0x62>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	60bb      	str	r3, [r7, #8]
}
 800be1e:	bf00      	nop
 800be20:	e7fe      	b.n	800be20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	4b14      	ldr	r3, [pc, #80]	; (800be78 <vPortFree+0xb8>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4013      	ands	r3, r2
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d01e      	beq.n	800be6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d11a      	bne.n	800be6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	685a      	ldr	r2, [r3, #4]
 800be3c:	4b0e      	ldr	r3, [pc, #56]	; (800be78 <vPortFree+0xb8>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	43db      	mvns	r3, r3
 800be42:	401a      	ands	r2, r3
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be48:	f7fe ff98 	bl	800ad7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	685a      	ldr	r2, [r3, #4]
 800be50:	4b0a      	ldr	r3, [pc, #40]	; (800be7c <vPortFree+0xbc>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4413      	add	r3, r2
 800be56:	4a09      	ldr	r2, [pc, #36]	; (800be7c <vPortFree+0xbc>)
 800be58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be5a:	6938      	ldr	r0, [r7, #16]
 800be5c:	f000 f874 	bl	800bf48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be60:	4b07      	ldr	r3, [pc, #28]	; (800be80 <vPortFree+0xc0>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	3301      	adds	r3, #1
 800be66:	4a06      	ldr	r2, [pc, #24]	; (800be80 <vPortFree+0xc0>)
 800be68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be6a:	f7fe ff95 	bl	800ad98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be6e:	bf00      	nop
 800be70:	3718      	adds	r7, #24
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20005058 	.word	0x20005058
 800be7c:	20005048 	.word	0x20005048
 800be80:	20005054 	.word	0x20005054

0800be84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800be8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be90:	4b27      	ldr	r3, [pc, #156]	; (800bf30 <prvHeapInit+0xac>)
 800be92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f003 0307 	and.w	r3, r3, #7
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00c      	beq.n	800beb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3307      	adds	r3, #7
 800bea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f023 0307 	bic.w	r3, r3, #7
 800beaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	4a1f      	ldr	r2, [pc, #124]	; (800bf30 <prvHeapInit+0xac>)
 800beb4:	4413      	add	r3, r2
 800beb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bebc:	4a1d      	ldr	r2, [pc, #116]	; (800bf34 <prvHeapInit+0xb0>)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bec2:	4b1c      	ldr	r3, [pc, #112]	; (800bf34 <prvHeapInit+0xb0>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	4413      	add	r3, r2
 800bece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bed0:	2208      	movs	r2, #8
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	1a9b      	subs	r3, r3, r2
 800bed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f023 0307 	bic.w	r3, r3, #7
 800bede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4a15      	ldr	r2, [pc, #84]	; (800bf38 <prvHeapInit+0xb4>)
 800bee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bee6:	4b14      	ldr	r3, [pc, #80]	; (800bf38 <prvHeapInit+0xb4>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2200      	movs	r2, #0
 800beec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800beee:	4b12      	ldr	r3, [pc, #72]	; (800bf38 <prvHeapInit+0xb4>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	1ad2      	subs	r2, r2, r3
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf04:	4b0c      	ldr	r3, [pc, #48]	; (800bf38 <prvHeapInit+0xb4>)
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	4a0a      	ldr	r2, [pc, #40]	; (800bf3c <prvHeapInit+0xb8>)
 800bf12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	4a09      	ldr	r2, [pc, #36]	; (800bf40 <prvHeapInit+0xbc>)
 800bf1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf1c:	4b09      	ldr	r3, [pc, #36]	; (800bf44 <prvHeapInit+0xc0>)
 800bf1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf22:	601a      	str	r2, [r3, #0]
}
 800bf24:	bf00      	nop
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	2000143c 	.word	0x2000143c
 800bf34:	2000503c 	.word	0x2000503c
 800bf38:	20005044 	.word	0x20005044
 800bf3c:	2000504c 	.word	0x2000504c
 800bf40:	20005048 	.word	0x20005048
 800bf44:	20005058 	.word	0x20005058

0800bf48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf50:	4b28      	ldr	r3, [pc, #160]	; (800bff4 <prvInsertBlockIntoFreeList+0xac>)
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	e002      	b.n	800bf5c <prvInsertBlockIntoFreeList+0x14>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d8f7      	bhi.n	800bf56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	4413      	add	r3, r2
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d108      	bne.n	800bf8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	441a      	add	r2, r3
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	68ba      	ldr	r2, [r7, #8]
 800bf94:	441a      	add	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d118      	bne.n	800bfd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	4b15      	ldr	r3, [pc, #84]	; (800bff8 <prvInsertBlockIntoFreeList+0xb0>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d00d      	beq.n	800bfc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	441a      	add	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	e008      	b.n	800bfd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfc6:	4b0c      	ldr	r3, [pc, #48]	; (800bff8 <prvInsertBlockIntoFreeList+0xb0>)
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	601a      	str	r2, [r3, #0]
 800bfce:	e003      	b.n	800bfd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d002      	beq.n	800bfe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfe6:	bf00      	nop
 800bfe8:	3714      	adds	r7, #20
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	2000503c 	.word	0x2000503c
 800bff8:	20005044 	.word	0x20005044

0800bffc <__cvt>:
 800bffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c000:	ec55 4b10 	vmov	r4, r5, d0
 800c004:	2d00      	cmp	r5, #0
 800c006:	460e      	mov	r6, r1
 800c008:	4619      	mov	r1, r3
 800c00a:	462b      	mov	r3, r5
 800c00c:	bfbb      	ittet	lt
 800c00e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c012:	461d      	movlt	r5, r3
 800c014:	2300      	movge	r3, #0
 800c016:	232d      	movlt	r3, #45	; 0x2d
 800c018:	700b      	strb	r3, [r1, #0]
 800c01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c01c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c020:	4691      	mov	r9, r2
 800c022:	f023 0820 	bic.w	r8, r3, #32
 800c026:	bfbc      	itt	lt
 800c028:	4622      	movlt	r2, r4
 800c02a:	4614      	movlt	r4, r2
 800c02c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c030:	d005      	beq.n	800c03e <__cvt+0x42>
 800c032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c036:	d100      	bne.n	800c03a <__cvt+0x3e>
 800c038:	3601      	adds	r6, #1
 800c03a:	2102      	movs	r1, #2
 800c03c:	e000      	b.n	800c040 <__cvt+0x44>
 800c03e:	2103      	movs	r1, #3
 800c040:	ab03      	add	r3, sp, #12
 800c042:	9301      	str	r3, [sp, #4]
 800c044:	ab02      	add	r3, sp, #8
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	ec45 4b10 	vmov	d0, r4, r5
 800c04c:	4653      	mov	r3, sl
 800c04e:	4632      	mov	r2, r6
 800c050:	f000 fed6 	bl	800ce00 <_dtoa_r>
 800c054:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c058:	4607      	mov	r7, r0
 800c05a:	d102      	bne.n	800c062 <__cvt+0x66>
 800c05c:	f019 0f01 	tst.w	r9, #1
 800c060:	d022      	beq.n	800c0a8 <__cvt+0xac>
 800c062:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c066:	eb07 0906 	add.w	r9, r7, r6
 800c06a:	d110      	bne.n	800c08e <__cvt+0x92>
 800c06c:	783b      	ldrb	r3, [r7, #0]
 800c06e:	2b30      	cmp	r3, #48	; 0x30
 800c070:	d10a      	bne.n	800c088 <__cvt+0x8c>
 800c072:	2200      	movs	r2, #0
 800c074:	2300      	movs	r3, #0
 800c076:	4620      	mov	r0, r4
 800c078:	4629      	mov	r1, r5
 800c07a:	f7f4 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800c07e:	b918      	cbnz	r0, 800c088 <__cvt+0x8c>
 800c080:	f1c6 0601 	rsb	r6, r6, #1
 800c084:	f8ca 6000 	str.w	r6, [sl]
 800c088:	f8da 3000 	ldr.w	r3, [sl]
 800c08c:	4499      	add	r9, r3
 800c08e:	2200      	movs	r2, #0
 800c090:	2300      	movs	r3, #0
 800c092:	4620      	mov	r0, r4
 800c094:	4629      	mov	r1, r5
 800c096:	f7f4 fd17 	bl	8000ac8 <__aeabi_dcmpeq>
 800c09a:	b108      	cbz	r0, 800c0a0 <__cvt+0xa4>
 800c09c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c0a0:	2230      	movs	r2, #48	; 0x30
 800c0a2:	9b03      	ldr	r3, [sp, #12]
 800c0a4:	454b      	cmp	r3, r9
 800c0a6:	d307      	bcc.n	800c0b8 <__cvt+0xbc>
 800c0a8:	9b03      	ldr	r3, [sp, #12]
 800c0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0ac:	1bdb      	subs	r3, r3, r7
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	6013      	str	r3, [r2, #0]
 800c0b2:	b004      	add	sp, #16
 800c0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b8:	1c59      	adds	r1, r3, #1
 800c0ba:	9103      	str	r1, [sp, #12]
 800c0bc:	701a      	strb	r2, [r3, #0]
 800c0be:	e7f0      	b.n	800c0a2 <__cvt+0xa6>

0800c0c0 <__exponent>:
 800c0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2900      	cmp	r1, #0
 800c0c6:	bfb8      	it	lt
 800c0c8:	4249      	neglt	r1, r1
 800c0ca:	f803 2b02 	strb.w	r2, [r3], #2
 800c0ce:	bfb4      	ite	lt
 800c0d0:	222d      	movlt	r2, #45	; 0x2d
 800c0d2:	222b      	movge	r2, #43	; 0x2b
 800c0d4:	2909      	cmp	r1, #9
 800c0d6:	7042      	strb	r2, [r0, #1]
 800c0d8:	dd2a      	ble.n	800c130 <__exponent+0x70>
 800c0da:	f10d 0207 	add.w	r2, sp, #7
 800c0de:	4617      	mov	r7, r2
 800c0e0:	260a      	movs	r6, #10
 800c0e2:	4694      	mov	ip, r2
 800c0e4:	fb91 f5f6 	sdiv	r5, r1, r6
 800c0e8:	fb06 1415 	mls	r4, r6, r5, r1
 800c0ec:	3430      	adds	r4, #48	; 0x30
 800c0ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	2c63      	cmp	r4, #99	; 0x63
 800c0f6:	f102 32ff 	add.w	r2, r2, #4294967295
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	dcf1      	bgt.n	800c0e2 <__exponent+0x22>
 800c0fe:	3130      	adds	r1, #48	; 0x30
 800c100:	f1ac 0402 	sub.w	r4, ip, #2
 800c104:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c108:	1c41      	adds	r1, r0, #1
 800c10a:	4622      	mov	r2, r4
 800c10c:	42ba      	cmp	r2, r7
 800c10e:	d30a      	bcc.n	800c126 <__exponent+0x66>
 800c110:	f10d 0209 	add.w	r2, sp, #9
 800c114:	eba2 020c 	sub.w	r2, r2, ip
 800c118:	42bc      	cmp	r4, r7
 800c11a:	bf88      	it	hi
 800c11c:	2200      	movhi	r2, #0
 800c11e:	4413      	add	r3, r2
 800c120:	1a18      	subs	r0, r3, r0
 800c122:	b003      	add	sp, #12
 800c124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c126:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c12a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c12e:	e7ed      	b.n	800c10c <__exponent+0x4c>
 800c130:	2330      	movs	r3, #48	; 0x30
 800c132:	3130      	adds	r1, #48	; 0x30
 800c134:	7083      	strb	r3, [r0, #2]
 800c136:	70c1      	strb	r1, [r0, #3]
 800c138:	1d03      	adds	r3, r0, #4
 800c13a:	e7f1      	b.n	800c120 <__exponent+0x60>

0800c13c <_printf_float>:
 800c13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c140:	ed2d 8b02 	vpush	{d8}
 800c144:	b08d      	sub	sp, #52	; 0x34
 800c146:	460c      	mov	r4, r1
 800c148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c14c:	4616      	mov	r6, r2
 800c14e:	461f      	mov	r7, r3
 800c150:	4605      	mov	r5, r0
 800c152:	f000 fce7 	bl	800cb24 <_localeconv_r>
 800c156:	f8d0 a000 	ldr.w	sl, [r0]
 800c15a:	4650      	mov	r0, sl
 800c15c:	f7f4 f888 	bl	8000270 <strlen>
 800c160:	2300      	movs	r3, #0
 800c162:	930a      	str	r3, [sp, #40]	; 0x28
 800c164:	6823      	ldr	r3, [r4, #0]
 800c166:	9305      	str	r3, [sp, #20]
 800c168:	f8d8 3000 	ldr.w	r3, [r8]
 800c16c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c170:	3307      	adds	r3, #7
 800c172:	f023 0307 	bic.w	r3, r3, #7
 800c176:	f103 0208 	add.w	r2, r3, #8
 800c17a:	f8c8 2000 	str.w	r2, [r8]
 800c17e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c182:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c186:	9307      	str	r3, [sp, #28]
 800c188:	f8cd 8018 	str.w	r8, [sp, #24]
 800c18c:	ee08 0a10 	vmov	s16, r0
 800c190:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c198:	4b9e      	ldr	r3, [pc, #632]	; (800c414 <_printf_float+0x2d8>)
 800c19a:	f04f 32ff 	mov.w	r2, #4294967295
 800c19e:	f7f4 fcc5 	bl	8000b2c <__aeabi_dcmpun>
 800c1a2:	bb88      	cbnz	r0, 800c208 <_printf_float+0xcc>
 800c1a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1a8:	4b9a      	ldr	r3, [pc, #616]	; (800c414 <_printf_float+0x2d8>)
 800c1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ae:	f7f4 fc9f 	bl	8000af0 <__aeabi_dcmple>
 800c1b2:	bb48      	cbnz	r0, 800c208 <_printf_float+0xcc>
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	4640      	mov	r0, r8
 800c1ba:	4649      	mov	r1, r9
 800c1bc:	f7f4 fc8e 	bl	8000adc <__aeabi_dcmplt>
 800c1c0:	b110      	cbz	r0, 800c1c8 <_printf_float+0x8c>
 800c1c2:	232d      	movs	r3, #45	; 0x2d
 800c1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1c8:	4a93      	ldr	r2, [pc, #588]	; (800c418 <_printf_float+0x2dc>)
 800c1ca:	4b94      	ldr	r3, [pc, #592]	; (800c41c <_printf_float+0x2e0>)
 800c1cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c1d0:	bf94      	ite	ls
 800c1d2:	4690      	movls	r8, r2
 800c1d4:	4698      	movhi	r8, r3
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	6123      	str	r3, [r4, #16]
 800c1da:	9b05      	ldr	r3, [sp, #20]
 800c1dc:	f023 0304 	bic.w	r3, r3, #4
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	f04f 0900 	mov.w	r9, #0
 800c1e6:	9700      	str	r7, [sp, #0]
 800c1e8:	4633      	mov	r3, r6
 800c1ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	f000 f9da 	bl	800c5a8 <_printf_common>
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	f040 8090 	bne.w	800c31a <_printf_float+0x1de>
 800c1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fe:	b00d      	add	sp, #52	; 0x34
 800c200:	ecbd 8b02 	vpop	{d8}
 800c204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c208:	4642      	mov	r2, r8
 800c20a:	464b      	mov	r3, r9
 800c20c:	4640      	mov	r0, r8
 800c20e:	4649      	mov	r1, r9
 800c210:	f7f4 fc8c 	bl	8000b2c <__aeabi_dcmpun>
 800c214:	b140      	cbz	r0, 800c228 <_printf_float+0xec>
 800c216:	464b      	mov	r3, r9
 800c218:	2b00      	cmp	r3, #0
 800c21a:	bfbc      	itt	lt
 800c21c:	232d      	movlt	r3, #45	; 0x2d
 800c21e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c222:	4a7f      	ldr	r2, [pc, #508]	; (800c420 <_printf_float+0x2e4>)
 800c224:	4b7f      	ldr	r3, [pc, #508]	; (800c424 <_printf_float+0x2e8>)
 800c226:	e7d1      	b.n	800c1cc <_printf_float+0x90>
 800c228:	6863      	ldr	r3, [r4, #4]
 800c22a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c22e:	9206      	str	r2, [sp, #24]
 800c230:	1c5a      	adds	r2, r3, #1
 800c232:	d13f      	bne.n	800c2b4 <_printf_float+0x178>
 800c234:	2306      	movs	r3, #6
 800c236:	6063      	str	r3, [r4, #4]
 800c238:	9b05      	ldr	r3, [sp, #20]
 800c23a:	6861      	ldr	r1, [r4, #4]
 800c23c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c240:	2300      	movs	r3, #0
 800c242:	9303      	str	r3, [sp, #12]
 800c244:	ab0a      	add	r3, sp, #40	; 0x28
 800c246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c24a:	ab09      	add	r3, sp, #36	; 0x24
 800c24c:	ec49 8b10 	vmov	d0, r8, r9
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	6022      	str	r2, [r4, #0]
 800c254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c258:	4628      	mov	r0, r5
 800c25a:	f7ff fecf 	bl	800bffc <__cvt>
 800c25e:	9b06      	ldr	r3, [sp, #24]
 800c260:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c262:	2b47      	cmp	r3, #71	; 0x47
 800c264:	4680      	mov	r8, r0
 800c266:	d108      	bne.n	800c27a <_printf_float+0x13e>
 800c268:	1cc8      	adds	r0, r1, #3
 800c26a:	db02      	blt.n	800c272 <_printf_float+0x136>
 800c26c:	6863      	ldr	r3, [r4, #4]
 800c26e:	4299      	cmp	r1, r3
 800c270:	dd41      	ble.n	800c2f6 <_printf_float+0x1ba>
 800c272:	f1ab 0302 	sub.w	r3, fp, #2
 800c276:	fa5f fb83 	uxtb.w	fp, r3
 800c27a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c27e:	d820      	bhi.n	800c2c2 <_printf_float+0x186>
 800c280:	3901      	subs	r1, #1
 800c282:	465a      	mov	r2, fp
 800c284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c288:	9109      	str	r1, [sp, #36]	; 0x24
 800c28a:	f7ff ff19 	bl	800c0c0 <__exponent>
 800c28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c290:	1813      	adds	r3, r2, r0
 800c292:	2a01      	cmp	r2, #1
 800c294:	4681      	mov	r9, r0
 800c296:	6123      	str	r3, [r4, #16]
 800c298:	dc02      	bgt.n	800c2a0 <_printf_float+0x164>
 800c29a:	6822      	ldr	r2, [r4, #0]
 800c29c:	07d2      	lsls	r2, r2, #31
 800c29e:	d501      	bpl.n	800c2a4 <_printf_float+0x168>
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	6123      	str	r3, [r4, #16]
 800c2a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d09c      	beq.n	800c1e6 <_printf_float+0xaa>
 800c2ac:	232d      	movs	r3, #45	; 0x2d
 800c2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2b2:	e798      	b.n	800c1e6 <_printf_float+0xaa>
 800c2b4:	9a06      	ldr	r2, [sp, #24]
 800c2b6:	2a47      	cmp	r2, #71	; 0x47
 800c2b8:	d1be      	bne.n	800c238 <_printf_float+0xfc>
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1bc      	bne.n	800c238 <_printf_float+0xfc>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e7b9      	b.n	800c236 <_printf_float+0xfa>
 800c2c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c2c6:	d118      	bne.n	800c2fa <_printf_float+0x1be>
 800c2c8:	2900      	cmp	r1, #0
 800c2ca:	6863      	ldr	r3, [r4, #4]
 800c2cc:	dd0b      	ble.n	800c2e6 <_printf_float+0x1aa>
 800c2ce:	6121      	str	r1, [r4, #16]
 800c2d0:	b913      	cbnz	r3, 800c2d8 <_printf_float+0x19c>
 800c2d2:	6822      	ldr	r2, [r4, #0]
 800c2d4:	07d0      	lsls	r0, r2, #31
 800c2d6:	d502      	bpl.n	800c2de <_printf_float+0x1a2>
 800c2d8:	3301      	adds	r3, #1
 800c2da:	440b      	add	r3, r1
 800c2dc:	6123      	str	r3, [r4, #16]
 800c2de:	65a1      	str	r1, [r4, #88]	; 0x58
 800c2e0:	f04f 0900 	mov.w	r9, #0
 800c2e4:	e7de      	b.n	800c2a4 <_printf_float+0x168>
 800c2e6:	b913      	cbnz	r3, 800c2ee <_printf_float+0x1b2>
 800c2e8:	6822      	ldr	r2, [r4, #0]
 800c2ea:	07d2      	lsls	r2, r2, #31
 800c2ec:	d501      	bpl.n	800c2f2 <_printf_float+0x1b6>
 800c2ee:	3302      	adds	r3, #2
 800c2f0:	e7f4      	b.n	800c2dc <_printf_float+0x1a0>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e7f2      	b.n	800c2dc <_printf_float+0x1a0>
 800c2f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2fc:	4299      	cmp	r1, r3
 800c2fe:	db05      	blt.n	800c30c <_printf_float+0x1d0>
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	6121      	str	r1, [r4, #16]
 800c304:	07d8      	lsls	r0, r3, #31
 800c306:	d5ea      	bpl.n	800c2de <_printf_float+0x1a2>
 800c308:	1c4b      	adds	r3, r1, #1
 800c30a:	e7e7      	b.n	800c2dc <_printf_float+0x1a0>
 800c30c:	2900      	cmp	r1, #0
 800c30e:	bfd4      	ite	le
 800c310:	f1c1 0202 	rsble	r2, r1, #2
 800c314:	2201      	movgt	r2, #1
 800c316:	4413      	add	r3, r2
 800c318:	e7e0      	b.n	800c2dc <_printf_float+0x1a0>
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	055a      	lsls	r2, r3, #21
 800c31e:	d407      	bmi.n	800c330 <_printf_float+0x1f4>
 800c320:	6923      	ldr	r3, [r4, #16]
 800c322:	4642      	mov	r2, r8
 800c324:	4631      	mov	r1, r6
 800c326:	4628      	mov	r0, r5
 800c328:	47b8      	blx	r7
 800c32a:	3001      	adds	r0, #1
 800c32c:	d12c      	bne.n	800c388 <_printf_float+0x24c>
 800c32e:	e764      	b.n	800c1fa <_printf_float+0xbe>
 800c330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c334:	f240 80e0 	bls.w	800c4f8 <_printf_float+0x3bc>
 800c338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c33c:	2200      	movs	r2, #0
 800c33e:	2300      	movs	r3, #0
 800c340:	f7f4 fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c344:	2800      	cmp	r0, #0
 800c346:	d034      	beq.n	800c3b2 <_printf_float+0x276>
 800c348:	4a37      	ldr	r2, [pc, #220]	; (800c428 <_printf_float+0x2ec>)
 800c34a:	2301      	movs	r3, #1
 800c34c:	4631      	mov	r1, r6
 800c34e:	4628      	mov	r0, r5
 800c350:	47b8      	blx	r7
 800c352:	3001      	adds	r0, #1
 800c354:	f43f af51 	beq.w	800c1fa <_printf_float+0xbe>
 800c358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c35c:	429a      	cmp	r2, r3
 800c35e:	db02      	blt.n	800c366 <_printf_float+0x22a>
 800c360:	6823      	ldr	r3, [r4, #0]
 800c362:	07d8      	lsls	r0, r3, #31
 800c364:	d510      	bpl.n	800c388 <_printf_float+0x24c>
 800c366:	ee18 3a10 	vmov	r3, s16
 800c36a:	4652      	mov	r2, sl
 800c36c:	4631      	mov	r1, r6
 800c36e:	4628      	mov	r0, r5
 800c370:	47b8      	blx	r7
 800c372:	3001      	adds	r0, #1
 800c374:	f43f af41 	beq.w	800c1fa <_printf_float+0xbe>
 800c378:	f04f 0800 	mov.w	r8, #0
 800c37c:	f104 091a 	add.w	r9, r4, #26
 800c380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c382:	3b01      	subs	r3, #1
 800c384:	4543      	cmp	r3, r8
 800c386:	dc09      	bgt.n	800c39c <_printf_float+0x260>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	079b      	lsls	r3, r3, #30
 800c38c:	f100 8107 	bmi.w	800c59e <_printf_float+0x462>
 800c390:	68e0      	ldr	r0, [r4, #12]
 800c392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c394:	4298      	cmp	r0, r3
 800c396:	bfb8      	it	lt
 800c398:	4618      	movlt	r0, r3
 800c39a:	e730      	b.n	800c1fe <_printf_float+0xc2>
 800c39c:	2301      	movs	r3, #1
 800c39e:	464a      	mov	r2, r9
 800c3a0:	4631      	mov	r1, r6
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	47b8      	blx	r7
 800c3a6:	3001      	adds	r0, #1
 800c3a8:	f43f af27 	beq.w	800c1fa <_printf_float+0xbe>
 800c3ac:	f108 0801 	add.w	r8, r8, #1
 800c3b0:	e7e6      	b.n	800c380 <_printf_float+0x244>
 800c3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	dc39      	bgt.n	800c42c <_printf_float+0x2f0>
 800c3b8:	4a1b      	ldr	r2, [pc, #108]	; (800c428 <_printf_float+0x2ec>)
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4628      	mov	r0, r5
 800c3c0:	47b8      	blx	r7
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	f43f af19 	beq.w	800c1fa <_printf_float+0xbe>
 800c3c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	d102      	bne.n	800c3d6 <_printf_float+0x29a>
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	07d9      	lsls	r1, r3, #31
 800c3d4:	d5d8      	bpl.n	800c388 <_printf_float+0x24c>
 800c3d6:	ee18 3a10 	vmov	r3, s16
 800c3da:	4652      	mov	r2, sl
 800c3dc:	4631      	mov	r1, r6
 800c3de:	4628      	mov	r0, r5
 800c3e0:	47b8      	blx	r7
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	f43f af09 	beq.w	800c1fa <_printf_float+0xbe>
 800c3e8:	f04f 0900 	mov.w	r9, #0
 800c3ec:	f104 0a1a 	add.w	sl, r4, #26
 800c3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3f2:	425b      	negs	r3, r3
 800c3f4:	454b      	cmp	r3, r9
 800c3f6:	dc01      	bgt.n	800c3fc <_printf_float+0x2c0>
 800c3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3fa:	e792      	b.n	800c322 <_printf_float+0x1e6>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	4652      	mov	r2, sl
 800c400:	4631      	mov	r1, r6
 800c402:	4628      	mov	r0, r5
 800c404:	47b8      	blx	r7
 800c406:	3001      	adds	r0, #1
 800c408:	f43f aef7 	beq.w	800c1fa <_printf_float+0xbe>
 800c40c:	f109 0901 	add.w	r9, r9, #1
 800c410:	e7ee      	b.n	800c3f0 <_printf_float+0x2b4>
 800c412:	bf00      	nop
 800c414:	7fefffff 	.word	0x7fefffff
 800c418:	080112c8 	.word	0x080112c8
 800c41c:	080112cc 	.word	0x080112cc
 800c420:	080112d0 	.word	0x080112d0
 800c424:	080112d4 	.word	0x080112d4
 800c428:	080112d8 	.word	0x080112d8
 800c42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c42e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c430:	429a      	cmp	r2, r3
 800c432:	bfa8      	it	ge
 800c434:	461a      	movge	r2, r3
 800c436:	2a00      	cmp	r2, #0
 800c438:	4691      	mov	r9, r2
 800c43a:	dc37      	bgt.n	800c4ac <_printf_float+0x370>
 800c43c:	f04f 0b00 	mov.w	fp, #0
 800c440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c444:	f104 021a 	add.w	r2, r4, #26
 800c448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c44a:	9305      	str	r3, [sp, #20]
 800c44c:	eba3 0309 	sub.w	r3, r3, r9
 800c450:	455b      	cmp	r3, fp
 800c452:	dc33      	bgt.n	800c4bc <_printf_float+0x380>
 800c454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c458:	429a      	cmp	r2, r3
 800c45a:	db3b      	blt.n	800c4d4 <_printf_float+0x398>
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	07da      	lsls	r2, r3, #31
 800c460:	d438      	bmi.n	800c4d4 <_printf_float+0x398>
 800c462:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c466:	eba2 0903 	sub.w	r9, r2, r3
 800c46a:	9b05      	ldr	r3, [sp, #20]
 800c46c:	1ad2      	subs	r2, r2, r3
 800c46e:	4591      	cmp	r9, r2
 800c470:	bfa8      	it	ge
 800c472:	4691      	movge	r9, r2
 800c474:	f1b9 0f00 	cmp.w	r9, #0
 800c478:	dc35      	bgt.n	800c4e6 <_printf_float+0x3aa>
 800c47a:	f04f 0800 	mov.w	r8, #0
 800c47e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c482:	f104 0a1a 	add.w	sl, r4, #26
 800c486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c48a:	1a9b      	subs	r3, r3, r2
 800c48c:	eba3 0309 	sub.w	r3, r3, r9
 800c490:	4543      	cmp	r3, r8
 800c492:	f77f af79 	ble.w	800c388 <_printf_float+0x24c>
 800c496:	2301      	movs	r3, #1
 800c498:	4652      	mov	r2, sl
 800c49a:	4631      	mov	r1, r6
 800c49c:	4628      	mov	r0, r5
 800c49e:	47b8      	blx	r7
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	f43f aeaa 	beq.w	800c1fa <_printf_float+0xbe>
 800c4a6:	f108 0801 	add.w	r8, r8, #1
 800c4aa:	e7ec      	b.n	800c486 <_printf_float+0x34a>
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	4642      	mov	r2, r8
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	47b8      	blx	r7
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	d1c0      	bne.n	800c43c <_printf_float+0x300>
 800c4ba:	e69e      	b.n	800c1fa <_printf_float+0xbe>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	4631      	mov	r1, r6
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	9205      	str	r2, [sp, #20]
 800c4c4:	47b8      	blx	r7
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	f43f ae97 	beq.w	800c1fa <_printf_float+0xbe>
 800c4cc:	9a05      	ldr	r2, [sp, #20]
 800c4ce:	f10b 0b01 	add.w	fp, fp, #1
 800c4d2:	e7b9      	b.n	800c448 <_printf_float+0x30c>
 800c4d4:	ee18 3a10 	vmov	r3, s16
 800c4d8:	4652      	mov	r2, sl
 800c4da:	4631      	mov	r1, r6
 800c4dc:	4628      	mov	r0, r5
 800c4de:	47b8      	blx	r7
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	d1be      	bne.n	800c462 <_printf_float+0x326>
 800c4e4:	e689      	b.n	800c1fa <_printf_float+0xbe>
 800c4e6:	9a05      	ldr	r2, [sp, #20]
 800c4e8:	464b      	mov	r3, r9
 800c4ea:	4442      	add	r2, r8
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	47b8      	blx	r7
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	d1c1      	bne.n	800c47a <_printf_float+0x33e>
 800c4f6:	e680      	b.n	800c1fa <_printf_float+0xbe>
 800c4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4fa:	2a01      	cmp	r2, #1
 800c4fc:	dc01      	bgt.n	800c502 <_printf_float+0x3c6>
 800c4fe:	07db      	lsls	r3, r3, #31
 800c500:	d53a      	bpl.n	800c578 <_printf_float+0x43c>
 800c502:	2301      	movs	r3, #1
 800c504:	4642      	mov	r2, r8
 800c506:	4631      	mov	r1, r6
 800c508:	4628      	mov	r0, r5
 800c50a:	47b8      	blx	r7
 800c50c:	3001      	adds	r0, #1
 800c50e:	f43f ae74 	beq.w	800c1fa <_printf_float+0xbe>
 800c512:	ee18 3a10 	vmov	r3, s16
 800c516:	4652      	mov	r2, sl
 800c518:	4631      	mov	r1, r6
 800c51a:	4628      	mov	r0, r5
 800c51c:	47b8      	blx	r7
 800c51e:	3001      	adds	r0, #1
 800c520:	f43f ae6b 	beq.w	800c1fa <_printf_float+0xbe>
 800c524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c528:	2200      	movs	r2, #0
 800c52a:	2300      	movs	r3, #0
 800c52c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c530:	f7f4 faca 	bl	8000ac8 <__aeabi_dcmpeq>
 800c534:	b9d8      	cbnz	r0, 800c56e <_printf_float+0x432>
 800c536:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c53a:	f108 0201 	add.w	r2, r8, #1
 800c53e:	4631      	mov	r1, r6
 800c540:	4628      	mov	r0, r5
 800c542:	47b8      	blx	r7
 800c544:	3001      	adds	r0, #1
 800c546:	d10e      	bne.n	800c566 <_printf_float+0x42a>
 800c548:	e657      	b.n	800c1fa <_printf_float+0xbe>
 800c54a:	2301      	movs	r3, #1
 800c54c:	4652      	mov	r2, sl
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	47b8      	blx	r7
 800c554:	3001      	adds	r0, #1
 800c556:	f43f ae50 	beq.w	800c1fa <_printf_float+0xbe>
 800c55a:	f108 0801 	add.w	r8, r8, #1
 800c55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c560:	3b01      	subs	r3, #1
 800c562:	4543      	cmp	r3, r8
 800c564:	dcf1      	bgt.n	800c54a <_printf_float+0x40e>
 800c566:	464b      	mov	r3, r9
 800c568:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c56c:	e6da      	b.n	800c324 <_printf_float+0x1e8>
 800c56e:	f04f 0800 	mov.w	r8, #0
 800c572:	f104 0a1a 	add.w	sl, r4, #26
 800c576:	e7f2      	b.n	800c55e <_printf_float+0x422>
 800c578:	2301      	movs	r3, #1
 800c57a:	4642      	mov	r2, r8
 800c57c:	e7df      	b.n	800c53e <_printf_float+0x402>
 800c57e:	2301      	movs	r3, #1
 800c580:	464a      	mov	r2, r9
 800c582:	4631      	mov	r1, r6
 800c584:	4628      	mov	r0, r5
 800c586:	47b8      	blx	r7
 800c588:	3001      	adds	r0, #1
 800c58a:	f43f ae36 	beq.w	800c1fa <_printf_float+0xbe>
 800c58e:	f108 0801 	add.w	r8, r8, #1
 800c592:	68e3      	ldr	r3, [r4, #12]
 800c594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c596:	1a5b      	subs	r3, r3, r1
 800c598:	4543      	cmp	r3, r8
 800c59a:	dcf0      	bgt.n	800c57e <_printf_float+0x442>
 800c59c:	e6f8      	b.n	800c390 <_printf_float+0x254>
 800c59e:	f04f 0800 	mov.w	r8, #0
 800c5a2:	f104 0919 	add.w	r9, r4, #25
 800c5a6:	e7f4      	b.n	800c592 <_printf_float+0x456>

0800c5a8 <_printf_common>:
 800c5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ac:	4616      	mov	r6, r2
 800c5ae:	4699      	mov	r9, r3
 800c5b0:	688a      	ldr	r2, [r1, #8]
 800c5b2:	690b      	ldr	r3, [r1, #16]
 800c5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	bfb8      	it	lt
 800c5bc:	4613      	movlt	r3, r2
 800c5be:	6033      	str	r3, [r6, #0]
 800c5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	b10a      	cbz	r2, 800c5ce <_printf_common+0x26>
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	6033      	str	r3, [r6, #0]
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	0699      	lsls	r1, r3, #26
 800c5d2:	bf42      	ittt	mi
 800c5d4:	6833      	ldrmi	r3, [r6, #0]
 800c5d6:	3302      	addmi	r3, #2
 800c5d8:	6033      	strmi	r3, [r6, #0]
 800c5da:	6825      	ldr	r5, [r4, #0]
 800c5dc:	f015 0506 	ands.w	r5, r5, #6
 800c5e0:	d106      	bne.n	800c5f0 <_printf_common+0x48>
 800c5e2:	f104 0a19 	add.w	sl, r4, #25
 800c5e6:	68e3      	ldr	r3, [r4, #12]
 800c5e8:	6832      	ldr	r2, [r6, #0]
 800c5ea:	1a9b      	subs	r3, r3, r2
 800c5ec:	42ab      	cmp	r3, r5
 800c5ee:	dc26      	bgt.n	800c63e <_printf_common+0x96>
 800c5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5f4:	1e13      	subs	r3, r2, #0
 800c5f6:	6822      	ldr	r2, [r4, #0]
 800c5f8:	bf18      	it	ne
 800c5fa:	2301      	movne	r3, #1
 800c5fc:	0692      	lsls	r2, r2, #26
 800c5fe:	d42b      	bmi.n	800c658 <_printf_common+0xb0>
 800c600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c604:	4649      	mov	r1, r9
 800c606:	4638      	mov	r0, r7
 800c608:	47c0      	blx	r8
 800c60a:	3001      	adds	r0, #1
 800c60c:	d01e      	beq.n	800c64c <_printf_common+0xa4>
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	6922      	ldr	r2, [r4, #16]
 800c612:	f003 0306 	and.w	r3, r3, #6
 800c616:	2b04      	cmp	r3, #4
 800c618:	bf02      	ittt	eq
 800c61a:	68e5      	ldreq	r5, [r4, #12]
 800c61c:	6833      	ldreq	r3, [r6, #0]
 800c61e:	1aed      	subeq	r5, r5, r3
 800c620:	68a3      	ldr	r3, [r4, #8]
 800c622:	bf0c      	ite	eq
 800c624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c628:	2500      	movne	r5, #0
 800c62a:	4293      	cmp	r3, r2
 800c62c:	bfc4      	itt	gt
 800c62e:	1a9b      	subgt	r3, r3, r2
 800c630:	18ed      	addgt	r5, r5, r3
 800c632:	2600      	movs	r6, #0
 800c634:	341a      	adds	r4, #26
 800c636:	42b5      	cmp	r5, r6
 800c638:	d11a      	bne.n	800c670 <_printf_common+0xc8>
 800c63a:	2000      	movs	r0, #0
 800c63c:	e008      	b.n	800c650 <_printf_common+0xa8>
 800c63e:	2301      	movs	r3, #1
 800c640:	4652      	mov	r2, sl
 800c642:	4649      	mov	r1, r9
 800c644:	4638      	mov	r0, r7
 800c646:	47c0      	blx	r8
 800c648:	3001      	adds	r0, #1
 800c64a:	d103      	bne.n	800c654 <_printf_common+0xac>
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c654:	3501      	adds	r5, #1
 800c656:	e7c6      	b.n	800c5e6 <_printf_common+0x3e>
 800c658:	18e1      	adds	r1, r4, r3
 800c65a:	1c5a      	adds	r2, r3, #1
 800c65c:	2030      	movs	r0, #48	; 0x30
 800c65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c662:	4422      	add	r2, r4
 800c664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c66c:	3302      	adds	r3, #2
 800c66e:	e7c7      	b.n	800c600 <_printf_common+0x58>
 800c670:	2301      	movs	r3, #1
 800c672:	4622      	mov	r2, r4
 800c674:	4649      	mov	r1, r9
 800c676:	4638      	mov	r0, r7
 800c678:	47c0      	blx	r8
 800c67a:	3001      	adds	r0, #1
 800c67c:	d0e6      	beq.n	800c64c <_printf_common+0xa4>
 800c67e:	3601      	adds	r6, #1
 800c680:	e7d9      	b.n	800c636 <_printf_common+0x8e>
	...

0800c684 <_printf_i>:
 800c684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c688:	7e0f      	ldrb	r7, [r1, #24]
 800c68a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c68c:	2f78      	cmp	r7, #120	; 0x78
 800c68e:	4691      	mov	r9, r2
 800c690:	4680      	mov	r8, r0
 800c692:	460c      	mov	r4, r1
 800c694:	469a      	mov	sl, r3
 800c696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c69a:	d807      	bhi.n	800c6ac <_printf_i+0x28>
 800c69c:	2f62      	cmp	r7, #98	; 0x62
 800c69e:	d80a      	bhi.n	800c6b6 <_printf_i+0x32>
 800c6a0:	2f00      	cmp	r7, #0
 800c6a2:	f000 80d4 	beq.w	800c84e <_printf_i+0x1ca>
 800c6a6:	2f58      	cmp	r7, #88	; 0x58
 800c6a8:	f000 80c0 	beq.w	800c82c <_printf_i+0x1a8>
 800c6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6b4:	e03a      	b.n	800c72c <_printf_i+0xa8>
 800c6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6ba:	2b15      	cmp	r3, #21
 800c6bc:	d8f6      	bhi.n	800c6ac <_printf_i+0x28>
 800c6be:	a101      	add	r1, pc, #4	; (adr r1, 800c6c4 <_printf_i+0x40>)
 800c6c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6c4:	0800c71d 	.word	0x0800c71d
 800c6c8:	0800c731 	.word	0x0800c731
 800c6cc:	0800c6ad 	.word	0x0800c6ad
 800c6d0:	0800c6ad 	.word	0x0800c6ad
 800c6d4:	0800c6ad 	.word	0x0800c6ad
 800c6d8:	0800c6ad 	.word	0x0800c6ad
 800c6dc:	0800c731 	.word	0x0800c731
 800c6e0:	0800c6ad 	.word	0x0800c6ad
 800c6e4:	0800c6ad 	.word	0x0800c6ad
 800c6e8:	0800c6ad 	.word	0x0800c6ad
 800c6ec:	0800c6ad 	.word	0x0800c6ad
 800c6f0:	0800c835 	.word	0x0800c835
 800c6f4:	0800c75d 	.word	0x0800c75d
 800c6f8:	0800c7ef 	.word	0x0800c7ef
 800c6fc:	0800c6ad 	.word	0x0800c6ad
 800c700:	0800c6ad 	.word	0x0800c6ad
 800c704:	0800c857 	.word	0x0800c857
 800c708:	0800c6ad 	.word	0x0800c6ad
 800c70c:	0800c75d 	.word	0x0800c75d
 800c710:	0800c6ad 	.word	0x0800c6ad
 800c714:	0800c6ad 	.word	0x0800c6ad
 800c718:	0800c7f7 	.word	0x0800c7f7
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	1d1a      	adds	r2, r3, #4
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	602a      	str	r2, [r5, #0]
 800c724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c72c:	2301      	movs	r3, #1
 800c72e:	e09f      	b.n	800c870 <_printf_i+0x1ec>
 800c730:	6820      	ldr	r0, [r4, #0]
 800c732:	682b      	ldr	r3, [r5, #0]
 800c734:	0607      	lsls	r7, r0, #24
 800c736:	f103 0104 	add.w	r1, r3, #4
 800c73a:	6029      	str	r1, [r5, #0]
 800c73c:	d501      	bpl.n	800c742 <_printf_i+0xbe>
 800c73e:	681e      	ldr	r6, [r3, #0]
 800c740:	e003      	b.n	800c74a <_printf_i+0xc6>
 800c742:	0646      	lsls	r6, r0, #25
 800c744:	d5fb      	bpl.n	800c73e <_printf_i+0xba>
 800c746:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c74a:	2e00      	cmp	r6, #0
 800c74c:	da03      	bge.n	800c756 <_printf_i+0xd2>
 800c74e:	232d      	movs	r3, #45	; 0x2d
 800c750:	4276      	negs	r6, r6
 800c752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c756:	485a      	ldr	r0, [pc, #360]	; (800c8c0 <_printf_i+0x23c>)
 800c758:	230a      	movs	r3, #10
 800c75a:	e012      	b.n	800c782 <_printf_i+0xfe>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	6820      	ldr	r0, [r4, #0]
 800c760:	1d19      	adds	r1, r3, #4
 800c762:	6029      	str	r1, [r5, #0]
 800c764:	0605      	lsls	r5, r0, #24
 800c766:	d501      	bpl.n	800c76c <_printf_i+0xe8>
 800c768:	681e      	ldr	r6, [r3, #0]
 800c76a:	e002      	b.n	800c772 <_printf_i+0xee>
 800c76c:	0641      	lsls	r1, r0, #25
 800c76e:	d5fb      	bpl.n	800c768 <_printf_i+0xe4>
 800c770:	881e      	ldrh	r6, [r3, #0]
 800c772:	4853      	ldr	r0, [pc, #332]	; (800c8c0 <_printf_i+0x23c>)
 800c774:	2f6f      	cmp	r7, #111	; 0x6f
 800c776:	bf0c      	ite	eq
 800c778:	2308      	moveq	r3, #8
 800c77a:	230a      	movne	r3, #10
 800c77c:	2100      	movs	r1, #0
 800c77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c782:	6865      	ldr	r5, [r4, #4]
 800c784:	60a5      	str	r5, [r4, #8]
 800c786:	2d00      	cmp	r5, #0
 800c788:	bfa2      	ittt	ge
 800c78a:	6821      	ldrge	r1, [r4, #0]
 800c78c:	f021 0104 	bicge.w	r1, r1, #4
 800c790:	6021      	strge	r1, [r4, #0]
 800c792:	b90e      	cbnz	r6, 800c798 <_printf_i+0x114>
 800c794:	2d00      	cmp	r5, #0
 800c796:	d04b      	beq.n	800c830 <_printf_i+0x1ac>
 800c798:	4615      	mov	r5, r2
 800c79a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c79e:	fb03 6711 	mls	r7, r3, r1, r6
 800c7a2:	5dc7      	ldrb	r7, [r0, r7]
 800c7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c7a8:	4637      	mov	r7, r6
 800c7aa:	42bb      	cmp	r3, r7
 800c7ac:	460e      	mov	r6, r1
 800c7ae:	d9f4      	bls.n	800c79a <_printf_i+0x116>
 800c7b0:	2b08      	cmp	r3, #8
 800c7b2:	d10b      	bne.n	800c7cc <_printf_i+0x148>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	07de      	lsls	r6, r3, #31
 800c7b8:	d508      	bpl.n	800c7cc <_printf_i+0x148>
 800c7ba:	6923      	ldr	r3, [r4, #16]
 800c7bc:	6861      	ldr	r1, [r4, #4]
 800c7be:	4299      	cmp	r1, r3
 800c7c0:	bfde      	ittt	le
 800c7c2:	2330      	movle	r3, #48	; 0x30
 800c7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7cc:	1b52      	subs	r2, r2, r5
 800c7ce:	6122      	str	r2, [r4, #16]
 800c7d0:	f8cd a000 	str.w	sl, [sp]
 800c7d4:	464b      	mov	r3, r9
 800c7d6:	aa03      	add	r2, sp, #12
 800c7d8:	4621      	mov	r1, r4
 800c7da:	4640      	mov	r0, r8
 800c7dc:	f7ff fee4 	bl	800c5a8 <_printf_common>
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	d14a      	bne.n	800c87a <_printf_i+0x1f6>
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e8:	b004      	add	sp, #16
 800c7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	f043 0320 	orr.w	r3, r3, #32
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	4833      	ldr	r0, [pc, #204]	; (800c8c4 <_printf_i+0x240>)
 800c7f8:	2778      	movs	r7, #120	; 0x78
 800c7fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	6829      	ldr	r1, [r5, #0]
 800c802:	061f      	lsls	r7, r3, #24
 800c804:	f851 6b04 	ldr.w	r6, [r1], #4
 800c808:	d402      	bmi.n	800c810 <_printf_i+0x18c>
 800c80a:	065f      	lsls	r7, r3, #25
 800c80c:	bf48      	it	mi
 800c80e:	b2b6      	uxthmi	r6, r6
 800c810:	07df      	lsls	r7, r3, #31
 800c812:	bf48      	it	mi
 800c814:	f043 0320 	orrmi.w	r3, r3, #32
 800c818:	6029      	str	r1, [r5, #0]
 800c81a:	bf48      	it	mi
 800c81c:	6023      	strmi	r3, [r4, #0]
 800c81e:	b91e      	cbnz	r6, 800c828 <_printf_i+0x1a4>
 800c820:	6823      	ldr	r3, [r4, #0]
 800c822:	f023 0320 	bic.w	r3, r3, #32
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	2310      	movs	r3, #16
 800c82a:	e7a7      	b.n	800c77c <_printf_i+0xf8>
 800c82c:	4824      	ldr	r0, [pc, #144]	; (800c8c0 <_printf_i+0x23c>)
 800c82e:	e7e4      	b.n	800c7fa <_printf_i+0x176>
 800c830:	4615      	mov	r5, r2
 800c832:	e7bd      	b.n	800c7b0 <_printf_i+0x12c>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	6826      	ldr	r6, [r4, #0]
 800c838:	6961      	ldr	r1, [r4, #20]
 800c83a:	1d18      	adds	r0, r3, #4
 800c83c:	6028      	str	r0, [r5, #0]
 800c83e:	0635      	lsls	r5, r6, #24
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	d501      	bpl.n	800c848 <_printf_i+0x1c4>
 800c844:	6019      	str	r1, [r3, #0]
 800c846:	e002      	b.n	800c84e <_printf_i+0x1ca>
 800c848:	0670      	lsls	r0, r6, #25
 800c84a:	d5fb      	bpl.n	800c844 <_printf_i+0x1c0>
 800c84c:	8019      	strh	r1, [r3, #0]
 800c84e:	2300      	movs	r3, #0
 800c850:	6123      	str	r3, [r4, #16]
 800c852:	4615      	mov	r5, r2
 800c854:	e7bc      	b.n	800c7d0 <_printf_i+0x14c>
 800c856:	682b      	ldr	r3, [r5, #0]
 800c858:	1d1a      	adds	r2, r3, #4
 800c85a:	602a      	str	r2, [r5, #0]
 800c85c:	681d      	ldr	r5, [r3, #0]
 800c85e:	6862      	ldr	r2, [r4, #4]
 800c860:	2100      	movs	r1, #0
 800c862:	4628      	mov	r0, r5
 800c864:	f7f3 fcb4 	bl	80001d0 <memchr>
 800c868:	b108      	cbz	r0, 800c86e <_printf_i+0x1ea>
 800c86a:	1b40      	subs	r0, r0, r5
 800c86c:	6060      	str	r0, [r4, #4]
 800c86e:	6863      	ldr	r3, [r4, #4]
 800c870:	6123      	str	r3, [r4, #16]
 800c872:	2300      	movs	r3, #0
 800c874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c878:	e7aa      	b.n	800c7d0 <_printf_i+0x14c>
 800c87a:	6923      	ldr	r3, [r4, #16]
 800c87c:	462a      	mov	r2, r5
 800c87e:	4649      	mov	r1, r9
 800c880:	4640      	mov	r0, r8
 800c882:	47d0      	blx	sl
 800c884:	3001      	adds	r0, #1
 800c886:	d0ad      	beq.n	800c7e4 <_printf_i+0x160>
 800c888:	6823      	ldr	r3, [r4, #0]
 800c88a:	079b      	lsls	r3, r3, #30
 800c88c:	d413      	bmi.n	800c8b6 <_printf_i+0x232>
 800c88e:	68e0      	ldr	r0, [r4, #12]
 800c890:	9b03      	ldr	r3, [sp, #12]
 800c892:	4298      	cmp	r0, r3
 800c894:	bfb8      	it	lt
 800c896:	4618      	movlt	r0, r3
 800c898:	e7a6      	b.n	800c7e8 <_printf_i+0x164>
 800c89a:	2301      	movs	r3, #1
 800c89c:	4632      	mov	r2, r6
 800c89e:	4649      	mov	r1, r9
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	47d0      	blx	sl
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	d09d      	beq.n	800c7e4 <_printf_i+0x160>
 800c8a8:	3501      	adds	r5, #1
 800c8aa:	68e3      	ldr	r3, [r4, #12]
 800c8ac:	9903      	ldr	r1, [sp, #12]
 800c8ae:	1a5b      	subs	r3, r3, r1
 800c8b0:	42ab      	cmp	r3, r5
 800c8b2:	dcf2      	bgt.n	800c89a <_printf_i+0x216>
 800c8b4:	e7eb      	b.n	800c88e <_printf_i+0x20a>
 800c8b6:	2500      	movs	r5, #0
 800c8b8:	f104 0619 	add.w	r6, r4, #25
 800c8bc:	e7f5      	b.n	800c8aa <_printf_i+0x226>
 800c8be:	bf00      	nop
 800c8c0:	080112da 	.word	0x080112da
 800c8c4:	080112eb 	.word	0x080112eb

0800c8c8 <std>:
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	b510      	push	{r4, lr}
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c8d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c8d6:	6083      	str	r3, [r0, #8]
 800c8d8:	8181      	strh	r1, [r0, #12]
 800c8da:	6643      	str	r3, [r0, #100]	; 0x64
 800c8dc:	81c2      	strh	r2, [r0, #14]
 800c8de:	6183      	str	r3, [r0, #24]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	2208      	movs	r2, #8
 800c8e4:	305c      	adds	r0, #92	; 0x5c
 800c8e6:	f000 f914 	bl	800cb12 <memset>
 800c8ea:	4b0d      	ldr	r3, [pc, #52]	; (800c920 <std+0x58>)
 800c8ec:	6263      	str	r3, [r4, #36]	; 0x24
 800c8ee:	4b0d      	ldr	r3, [pc, #52]	; (800c924 <std+0x5c>)
 800c8f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c8f2:	4b0d      	ldr	r3, [pc, #52]	; (800c928 <std+0x60>)
 800c8f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c8f6:	4b0d      	ldr	r3, [pc, #52]	; (800c92c <std+0x64>)
 800c8f8:	6323      	str	r3, [r4, #48]	; 0x30
 800c8fa:	4b0d      	ldr	r3, [pc, #52]	; (800c930 <std+0x68>)
 800c8fc:	6224      	str	r4, [r4, #32]
 800c8fe:	429c      	cmp	r4, r3
 800c900:	d006      	beq.n	800c910 <std+0x48>
 800c902:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c906:	4294      	cmp	r4, r2
 800c908:	d002      	beq.n	800c910 <std+0x48>
 800c90a:	33d0      	adds	r3, #208	; 0xd0
 800c90c:	429c      	cmp	r4, r3
 800c90e:	d105      	bne.n	800c91c <std+0x54>
 800c910:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c918:	f000 b9ce 	b.w	800ccb8 <__retarget_lock_init_recursive>
 800c91c:	bd10      	pop	{r4, pc}
 800c91e:	bf00      	nop
 800c920:	0800ca8d 	.word	0x0800ca8d
 800c924:	0800caaf 	.word	0x0800caaf
 800c928:	0800cae7 	.word	0x0800cae7
 800c92c:	0800cb0b 	.word	0x0800cb0b
 800c930:	2000505c 	.word	0x2000505c

0800c934 <stdio_exit_handler>:
 800c934:	4a02      	ldr	r2, [pc, #8]	; (800c940 <stdio_exit_handler+0xc>)
 800c936:	4903      	ldr	r1, [pc, #12]	; (800c944 <stdio_exit_handler+0x10>)
 800c938:	4803      	ldr	r0, [pc, #12]	; (800c948 <stdio_exit_handler+0x14>)
 800c93a:	f000 b869 	b.w	800ca10 <_fwalk_sglue>
 800c93e:	bf00      	nop
 800c940:	20000014 	.word	0x20000014
 800c944:	0800e699 	.word	0x0800e699
 800c948:	20000020 	.word	0x20000020

0800c94c <cleanup_stdio>:
 800c94c:	6841      	ldr	r1, [r0, #4]
 800c94e:	4b0c      	ldr	r3, [pc, #48]	; (800c980 <cleanup_stdio+0x34>)
 800c950:	4299      	cmp	r1, r3
 800c952:	b510      	push	{r4, lr}
 800c954:	4604      	mov	r4, r0
 800c956:	d001      	beq.n	800c95c <cleanup_stdio+0x10>
 800c958:	f001 fe9e 	bl	800e698 <_fflush_r>
 800c95c:	68a1      	ldr	r1, [r4, #8]
 800c95e:	4b09      	ldr	r3, [pc, #36]	; (800c984 <cleanup_stdio+0x38>)
 800c960:	4299      	cmp	r1, r3
 800c962:	d002      	beq.n	800c96a <cleanup_stdio+0x1e>
 800c964:	4620      	mov	r0, r4
 800c966:	f001 fe97 	bl	800e698 <_fflush_r>
 800c96a:	68e1      	ldr	r1, [r4, #12]
 800c96c:	4b06      	ldr	r3, [pc, #24]	; (800c988 <cleanup_stdio+0x3c>)
 800c96e:	4299      	cmp	r1, r3
 800c970:	d004      	beq.n	800c97c <cleanup_stdio+0x30>
 800c972:	4620      	mov	r0, r4
 800c974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c978:	f001 be8e 	b.w	800e698 <_fflush_r>
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	bf00      	nop
 800c980:	2000505c 	.word	0x2000505c
 800c984:	200050c4 	.word	0x200050c4
 800c988:	2000512c 	.word	0x2000512c

0800c98c <global_stdio_init.part.0>:
 800c98c:	b510      	push	{r4, lr}
 800c98e:	4b0b      	ldr	r3, [pc, #44]	; (800c9bc <global_stdio_init.part.0+0x30>)
 800c990:	4c0b      	ldr	r4, [pc, #44]	; (800c9c0 <global_stdio_init.part.0+0x34>)
 800c992:	4a0c      	ldr	r2, [pc, #48]	; (800c9c4 <global_stdio_init.part.0+0x38>)
 800c994:	601a      	str	r2, [r3, #0]
 800c996:	4620      	mov	r0, r4
 800c998:	2200      	movs	r2, #0
 800c99a:	2104      	movs	r1, #4
 800c99c:	f7ff ff94 	bl	800c8c8 <std>
 800c9a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	2109      	movs	r1, #9
 800c9a8:	f7ff ff8e 	bl	800c8c8 <std>
 800c9ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9b6:	2112      	movs	r1, #18
 800c9b8:	f7ff bf86 	b.w	800c8c8 <std>
 800c9bc:	20005194 	.word	0x20005194
 800c9c0:	2000505c 	.word	0x2000505c
 800c9c4:	0800c935 	.word	0x0800c935

0800c9c8 <__sfp_lock_acquire>:
 800c9c8:	4801      	ldr	r0, [pc, #4]	; (800c9d0 <__sfp_lock_acquire+0x8>)
 800c9ca:	f000 b976 	b.w	800ccba <__retarget_lock_acquire_recursive>
 800c9ce:	bf00      	nop
 800c9d0:	2000519d 	.word	0x2000519d

0800c9d4 <__sfp_lock_release>:
 800c9d4:	4801      	ldr	r0, [pc, #4]	; (800c9dc <__sfp_lock_release+0x8>)
 800c9d6:	f000 b971 	b.w	800ccbc <__retarget_lock_release_recursive>
 800c9da:	bf00      	nop
 800c9dc:	2000519d 	.word	0x2000519d

0800c9e0 <__sinit>:
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	f7ff fff0 	bl	800c9c8 <__sfp_lock_acquire>
 800c9e8:	6a23      	ldr	r3, [r4, #32]
 800c9ea:	b11b      	cbz	r3, 800c9f4 <__sinit+0x14>
 800c9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f0:	f7ff bff0 	b.w	800c9d4 <__sfp_lock_release>
 800c9f4:	4b04      	ldr	r3, [pc, #16]	; (800ca08 <__sinit+0x28>)
 800c9f6:	6223      	str	r3, [r4, #32]
 800c9f8:	4b04      	ldr	r3, [pc, #16]	; (800ca0c <__sinit+0x2c>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1f5      	bne.n	800c9ec <__sinit+0xc>
 800ca00:	f7ff ffc4 	bl	800c98c <global_stdio_init.part.0>
 800ca04:	e7f2      	b.n	800c9ec <__sinit+0xc>
 800ca06:	bf00      	nop
 800ca08:	0800c94d 	.word	0x0800c94d
 800ca0c:	20005194 	.word	0x20005194

0800ca10 <_fwalk_sglue>:
 800ca10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca14:	4607      	mov	r7, r0
 800ca16:	4688      	mov	r8, r1
 800ca18:	4614      	mov	r4, r2
 800ca1a:	2600      	movs	r6, #0
 800ca1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca20:	f1b9 0901 	subs.w	r9, r9, #1
 800ca24:	d505      	bpl.n	800ca32 <_fwalk_sglue+0x22>
 800ca26:	6824      	ldr	r4, [r4, #0]
 800ca28:	2c00      	cmp	r4, #0
 800ca2a:	d1f7      	bne.n	800ca1c <_fwalk_sglue+0xc>
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca32:	89ab      	ldrh	r3, [r5, #12]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d907      	bls.n	800ca48 <_fwalk_sglue+0x38>
 800ca38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	d003      	beq.n	800ca48 <_fwalk_sglue+0x38>
 800ca40:	4629      	mov	r1, r5
 800ca42:	4638      	mov	r0, r7
 800ca44:	47c0      	blx	r8
 800ca46:	4306      	orrs	r6, r0
 800ca48:	3568      	adds	r5, #104	; 0x68
 800ca4a:	e7e9      	b.n	800ca20 <_fwalk_sglue+0x10>

0800ca4c <siprintf>:
 800ca4c:	b40e      	push	{r1, r2, r3}
 800ca4e:	b500      	push	{lr}
 800ca50:	b09c      	sub	sp, #112	; 0x70
 800ca52:	ab1d      	add	r3, sp, #116	; 0x74
 800ca54:	9002      	str	r0, [sp, #8]
 800ca56:	9006      	str	r0, [sp, #24]
 800ca58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca5c:	4809      	ldr	r0, [pc, #36]	; (800ca84 <siprintf+0x38>)
 800ca5e:	9107      	str	r1, [sp, #28]
 800ca60:	9104      	str	r1, [sp, #16]
 800ca62:	4909      	ldr	r1, [pc, #36]	; (800ca88 <siprintf+0x3c>)
 800ca64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca68:	9105      	str	r1, [sp, #20]
 800ca6a:	6800      	ldr	r0, [r0, #0]
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	a902      	add	r1, sp, #8
 800ca70:	f001 fc8e 	bl	800e390 <_svfiprintf_r>
 800ca74:	9b02      	ldr	r3, [sp, #8]
 800ca76:	2200      	movs	r2, #0
 800ca78:	701a      	strb	r2, [r3, #0]
 800ca7a:	b01c      	add	sp, #112	; 0x70
 800ca7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca80:	b003      	add	sp, #12
 800ca82:	4770      	bx	lr
 800ca84:	2000006c 	.word	0x2000006c
 800ca88:	ffff0208 	.word	0xffff0208

0800ca8c <__sread>:
 800ca8c:	b510      	push	{r4, lr}
 800ca8e:	460c      	mov	r4, r1
 800ca90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca94:	f000 f8c2 	bl	800cc1c <_read_r>
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	bfab      	itete	ge
 800ca9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca9e:	89a3      	ldrhlt	r3, [r4, #12]
 800caa0:	181b      	addge	r3, r3, r0
 800caa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800caa6:	bfac      	ite	ge
 800caa8:	6563      	strge	r3, [r4, #84]	; 0x54
 800caaa:	81a3      	strhlt	r3, [r4, #12]
 800caac:	bd10      	pop	{r4, pc}

0800caae <__swrite>:
 800caae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab2:	461f      	mov	r7, r3
 800cab4:	898b      	ldrh	r3, [r1, #12]
 800cab6:	05db      	lsls	r3, r3, #23
 800cab8:	4605      	mov	r5, r0
 800caba:	460c      	mov	r4, r1
 800cabc:	4616      	mov	r6, r2
 800cabe:	d505      	bpl.n	800cacc <__swrite+0x1e>
 800cac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac4:	2302      	movs	r3, #2
 800cac6:	2200      	movs	r2, #0
 800cac8:	f000 f896 	bl	800cbf8 <_lseek_r>
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cad6:	81a3      	strh	r3, [r4, #12]
 800cad8:	4632      	mov	r2, r6
 800cada:	463b      	mov	r3, r7
 800cadc:	4628      	mov	r0, r5
 800cade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cae2:	f000 b8ad 	b.w	800cc40 <_write_r>

0800cae6 <__sseek>:
 800cae6:	b510      	push	{r4, lr}
 800cae8:	460c      	mov	r4, r1
 800caea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caee:	f000 f883 	bl	800cbf8 <_lseek_r>
 800caf2:	1c43      	adds	r3, r0, #1
 800caf4:	89a3      	ldrh	r3, [r4, #12]
 800caf6:	bf15      	itete	ne
 800caf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800cafa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cafe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb02:	81a3      	strheq	r3, [r4, #12]
 800cb04:	bf18      	it	ne
 800cb06:	81a3      	strhne	r3, [r4, #12]
 800cb08:	bd10      	pop	{r4, pc}

0800cb0a <__sclose>:
 800cb0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb0e:	f000 b80d 	b.w	800cb2c <_close_r>

0800cb12 <memset>:
 800cb12:	4402      	add	r2, r0
 800cb14:	4603      	mov	r3, r0
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d100      	bne.n	800cb1c <memset+0xa>
 800cb1a:	4770      	bx	lr
 800cb1c:	f803 1b01 	strb.w	r1, [r3], #1
 800cb20:	e7f9      	b.n	800cb16 <memset+0x4>
	...

0800cb24 <_localeconv_r>:
 800cb24:	4800      	ldr	r0, [pc, #0]	; (800cb28 <_localeconv_r+0x4>)
 800cb26:	4770      	bx	lr
 800cb28:	20000160 	.word	0x20000160

0800cb2c <_close_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4d06      	ldr	r5, [pc, #24]	; (800cb48 <_close_r+0x1c>)
 800cb30:	2300      	movs	r3, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	4608      	mov	r0, r1
 800cb36:	602b      	str	r3, [r5, #0]
 800cb38:	f7f8 fa1f 	bl	8004f7a <_close>
 800cb3c:	1c43      	adds	r3, r0, #1
 800cb3e:	d102      	bne.n	800cb46 <_close_r+0x1a>
 800cb40:	682b      	ldr	r3, [r5, #0]
 800cb42:	b103      	cbz	r3, 800cb46 <_close_r+0x1a>
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	bd38      	pop	{r3, r4, r5, pc}
 800cb48:	20005198 	.word	0x20005198

0800cb4c <_reclaim_reent>:
 800cb4c:	4b29      	ldr	r3, [pc, #164]	; (800cbf4 <_reclaim_reent+0xa8>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4283      	cmp	r3, r0
 800cb52:	b570      	push	{r4, r5, r6, lr}
 800cb54:	4604      	mov	r4, r0
 800cb56:	d04b      	beq.n	800cbf0 <_reclaim_reent+0xa4>
 800cb58:	69c3      	ldr	r3, [r0, #28]
 800cb5a:	b143      	cbz	r3, 800cb6e <_reclaim_reent+0x22>
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d144      	bne.n	800cbec <_reclaim_reent+0xa0>
 800cb62:	69e3      	ldr	r3, [r4, #28]
 800cb64:	6819      	ldr	r1, [r3, #0]
 800cb66:	b111      	cbz	r1, 800cb6e <_reclaim_reent+0x22>
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 ff3b 	bl	800d9e4 <_free_r>
 800cb6e:	6961      	ldr	r1, [r4, #20]
 800cb70:	b111      	cbz	r1, 800cb78 <_reclaim_reent+0x2c>
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 ff36 	bl	800d9e4 <_free_r>
 800cb78:	69e1      	ldr	r1, [r4, #28]
 800cb7a:	b111      	cbz	r1, 800cb82 <_reclaim_reent+0x36>
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f000 ff31 	bl	800d9e4 <_free_r>
 800cb82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cb84:	b111      	cbz	r1, 800cb8c <_reclaim_reent+0x40>
 800cb86:	4620      	mov	r0, r4
 800cb88:	f000 ff2c 	bl	800d9e4 <_free_r>
 800cb8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb8e:	b111      	cbz	r1, 800cb96 <_reclaim_reent+0x4a>
 800cb90:	4620      	mov	r0, r4
 800cb92:	f000 ff27 	bl	800d9e4 <_free_r>
 800cb96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb98:	b111      	cbz	r1, 800cba0 <_reclaim_reent+0x54>
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f000 ff22 	bl	800d9e4 <_free_r>
 800cba0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cba2:	b111      	cbz	r1, 800cbaa <_reclaim_reent+0x5e>
 800cba4:	4620      	mov	r0, r4
 800cba6:	f000 ff1d 	bl	800d9e4 <_free_r>
 800cbaa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cbac:	b111      	cbz	r1, 800cbb4 <_reclaim_reent+0x68>
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f000 ff18 	bl	800d9e4 <_free_r>
 800cbb4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cbb6:	b111      	cbz	r1, 800cbbe <_reclaim_reent+0x72>
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f000 ff13 	bl	800d9e4 <_free_r>
 800cbbe:	6a23      	ldr	r3, [r4, #32]
 800cbc0:	b1b3      	cbz	r3, 800cbf0 <_reclaim_reent+0xa4>
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cbc8:	4718      	bx	r3
 800cbca:	5949      	ldr	r1, [r1, r5]
 800cbcc:	b941      	cbnz	r1, 800cbe0 <_reclaim_reent+0x94>
 800cbce:	3504      	adds	r5, #4
 800cbd0:	69e3      	ldr	r3, [r4, #28]
 800cbd2:	2d80      	cmp	r5, #128	; 0x80
 800cbd4:	68d9      	ldr	r1, [r3, #12]
 800cbd6:	d1f8      	bne.n	800cbca <_reclaim_reent+0x7e>
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f000 ff03 	bl	800d9e4 <_free_r>
 800cbde:	e7c0      	b.n	800cb62 <_reclaim_reent+0x16>
 800cbe0:	680e      	ldr	r6, [r1, #0]
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f000 fefe 	bl	800d9e4 <_free_r>
 800cbe8:	4631      	mov	r1, r6
 800cbea:	e7ef      	b.n	800cbcc <_reclaim_reent+0x80>
 800cbec:	2500      	movs	r5, #0
 800cbee:	e7ef      	b.n	800cbd0 <_reclaim_reent+0x84>
 800cbf0:	bd70      	pop	{r4, r5, r6, pc}
 800cbf2:	bf00      	nop
 800cbf4:	2000006c 	.word	0x2000006c

0800cbf8 <_lseek_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4d07      	ldr	r5, [pc, #28]	; (800cc18 <_lseek_r+0x20>)
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	4608      	mov	r0, r1
 800cc00:	4611      	mov	r1, r2
 800cc02:	2200      	movs	r2, #0
 800cc04:	602a      	str	r2, [r5, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	f7f8 f9de 	bl	8004fc8 <_lseek>
 800cc0c:	1c43      	adds	r3, r0, #1
 800cc0e:	d102      	bne.n	800cc16 <_lseek_r+0x1e>
 800cc10:	682b      	ldr	r3, [r5, #0]
 800cc12:	b103      	cbz	r3, 800cc16 <_lseek_r+0x1e>
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	bd38      	pop	{r3, r4, r5, pc}
 800cc18:	20005198 	.word	0x20005198

0800cc1c <_read_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4d07      	ldr	r5, [pc, #28]	; (800cc3c <_read_r+0x20>)
 800cc20:	4604      	mov	r4, r0
 800cc22:	4608      	mov	r0, r1
 800cc24:	4611      	mov	r1, r2
 800cc26:	2200      	movs	r2, #0
 800cc28:	602a      	str	r2, [r5, #0]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	f7f8 f96c 	bl	8004f08 <_read>
 800cc30:	1c43      	adds	r3, r0, #1
 800cc32:	d102      	bne.n	800cc3a <_read_r+0x1e>
 800cc34:	682b      	ldr	r3, [r5, #0]
 800cc36:	b103      	cbz	r3, 800cc3a <_read_r+0x1e>
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	bd38      	pop	{r3, r4, r5, pc}
 800cc3c:	20005198 	.word	0x20005198

0800cc40 <_write_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4d07      	ldr	r5, [pc, #28]	; (800cc60 <_write_r+0x20>)
 800cc44:	4604      	mov	r4, r0
 800cc46:	4608      	mov	r0, r1
 800cc48:	4611      	mov	r1, r2
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	602a      	str	r2, [r5, #0]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	f7f8 f977 	bl	8004f42 <_write>
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d102      	bne.n	800cc5e <_write_r+0x1e>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	b103      	cbz	r3, 800cc5e <_write_r+0x1e>
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	20005198 	.word	0x20005198

0800cc64 <__errno>:
 800cc64:	4b01      	ldr	r3, [pc, #4]	; (800cc6c <__errno+0x8>)
 800cc66:	6818      	ldr	r0, [r3, #0]
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	2000006c 	.word	0x2000006c

0800cc70 <__libc_init_array>:
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	4d0d      	ldr	r5, [pc, #52]	; (800cca8 <__libc_init_array+0x38>)
 800cc74:	4c0d      	ldr	r4, [pc, #52]	; (800ccac <__libc_init_array+0x3c>)
 800cc76:	1b64      	subs	r4, r4, r5
 800cc78:	10a4      	asrs	r4, r4, #2
 800cc7a:	2600      	movs	r6, #0
 800cc7c:	42a6      	cmp	r6, r4
 800cc7e:	d109      	bne.n	800cc94 <__libc_init_array+0x24>
 800cc80:	4d0b      	ldr	r5, [pc, #44]	; (800ccb0 <__libc_init_array+0x40>)
 800cc82:	4c0c      	ldr	r4, [pc, #48]	; (800ccb4 <__libc_init_array+0x44>)
 800cc84:	f004 fa80 	bl	8011188 <_init>
 800cc88:	1b64      	subs	r4, r4, r5
 800cc8a:	10a4      	asrs	r4, r4, #2
 800cc8c:	2600      	movs	r6, #0
 800cc8e:	42a6      	cmp	r6, r4
 800cc90:	d105      	bne.n	800cc9e <__libc_init_array+0x2e>
 800cc92:	bd70      	pop	{r4, r5, r6, pc}
 800cc94:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc98:	4798      	blx	r3
 800cc9a:	3601      	adds	r6, #1
 800cc9c:	e7ee      	b.n	800cc7c <__libc_init_array+0xc>
 800cc9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cca2:	4798      	blx	r3
 800cca4:	3601      	adds	r6, #1
 800cca6:	e7f2      	b.n	800cc8e <__libc_init_array+0x1e>
 800cca8:	080118c0 	.word	0x080118c0
 800ccac:	080118c0 	.word	0x080118c0
 800ccb0:	080118c0 	.word	0x080118c0
 800ccb4:	080118c4 	.word	0x080118c4

0800ccb8 <__retarget_lock_init_recursive>:
 800ccb8:	4770      	bx	lr

0800ccba <__retarget_lock_acquire_recursive>:
 800ccba:	4770      	bx	lr

0800ccbc <__retarget_lock_release_recursive>:
 800ccbc:	4770      	bx	lr

0800ccbe <strcpy>:
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccc4:	f803 2b01 	strb.w	r2, [r3], #1
 800ccc8:	2a00      	cmp	r2, #0
 800ccca:	d1f9      	bne.n	800ccc0 <strcpy+0x2>
 800cccc:	4770      	bx	lr

0800ccce <memcpy>:
 800ccce:	440a      	add	r2, r1
 800ccd0:	4291      	cmp	r1, r2
 800ccd2:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccd6:	d100      	bne.n	800ccda <memcpy+0xc>
 800ccd8:	4770      	bx	lr
 800ccda:	b510      	push	{r4, lr}
 800ccdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cce4:	4291      	cmp	r1, r2
 800cce6:	d1f9      	bne.n	800ccdc <memcpy+0xe>
 800cce8:	bd10      	pop	{r4, pc}

0800ccea <quorem>:
 800ccea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccee:	6903      	ldr	r3, [r0, #16]
 800ccf0:	690c      	ldr	r4, [r1, #16]
 800ccf2:	42a3      	cmp	r3, r4
 800ccf4:	4607      	mov	r7, r0
 800ccf6:	db7e      	blt.n	800cdf6 <quorem+0x10c>
 800ccf8:	3c01      	subs	r4, #1
 800ccfa:	f101 0814 	add.w	r8, r1, #20
 800ccfe:	f100 0514 	add.w	r5, r0, #20
 800cd02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd10:	3301      	adds	r3, #1
 800cd12:	429a      	cmp	r2, r3
 800cd14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cd18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd1c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd20:	d331      	bcc.n	800cd86 <quorem+0x9c>
 800cd22:	f04f 0e00 	mov.w	lr, #0
 800cd26:	4640      	mov	r0, r8
 800cd28:	46ac      	mov	ip, r5
 800cd2a:	46f2      	mov	sl, lr
 800cd2c:	f850 2b04 	ldr.w	r2, [r0], #4
 800cd30:	b293      	uxth	r3, r2
 800cd32:	fb06 e303 	mla	r3, r6, r3, lr
 800cd36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cd3a:	0c1a      	lsrs	r2, r3, #16
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	ebaa 0303 	sub.w	r3, sl, r3
 800cd42:	f8dc a000 	ldr.w	sl, [ip]
 800cd46:	fa13 f38a 	uxtah	r3, r3, sl
 800cd4a:	fb06 220e 	mla	r2, r6, lr, r2
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	9b00      	ldr	r3, [sp, #0]
 800cd52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cd56:	b292      	uxth	r2, r2
 800cd58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cd5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd60:	f8bd 3000 	ldrh.w	r3, [sp]
 800cd64:	4581      	cmp	r9, r0
 800cd66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd6a:	f84c 3b04 	str.w	r3, [ip], #4
 800cd6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cd72:	d2db      	bcs.n	800cd2c <quorem+0x42>
 800cd74:	f855 300b 	ldr.w	r3, [r5, fp]
 800cd78:	b92b      	cbnz	r3, 800cd86 <quorem+0x9c>
 800cd7a:	9b01      	ldr	r3, [sp, #4]
 800cd7c:	3b04      	subs	r3, #4
 800cd7e:	429d      	cmp	r5, r3
 800cd80:	461a      	mov	r2, r3
 800cd82:	d32c      	bcc.n	800cdde <quorem+0xf4>
 800cd84:	613c      	str	r4, [r7, #16]
 800cd86:	4638      	mov	r0, r7
 800cd88:	f001 f9a8 	bl	800e0dc <__mcmp>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	db22      	blt.n	800cdd6 <quorem+0xec>
 800cd90:	3601      	adds	r6, #1
 800cd92:	4629      	mov	r1, r5
 800cd94:	2000      	movs	r0, #0
 800cd96:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd9a:	f8d1 c000 	ldr.w	ip, [r1]
 800cd9e:	b293      	uxth	r3, r2
 800cda0:	1ac3      	subs	r3, r0, r3
 800cda2:	0c12      	lsrs	r2, r2, #16
 800cda4:	fa13 f38c 	uxtah	r3, r3, ip
 800cda8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cdac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdb6:	45c1      	cmp	r9, r8
 800cdb8:	f841 3b04 	str.w	r3, [r1], #4
 800cdbc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cdc0:	d2e9      	bcs.n	800cd96 <quorem+0xac>
 800cdc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cdc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdca:	b922      	cbnz	r2, 800cdd6 <quorem+0xec>
 800cdcc:	3b04      	subs	r3, #4
 800cdce:	429d      	cmp	r5, r3
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	d30a      	bcc.n	800cdea <quorem+0x100>
 800cdd4:	613c      	str	r4, [r7, #16]
 800cdd6:	4630      	mov	r0, r6
 800cdd8:	b003      	add	sp, #12
 800cdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdde:	6812      	ldr	r2, [r2, #0]
 800cde0:	3b04      	subs	r3, #4
 800cde2:	2a00      	cmp	r2, #0
 800cde4:	d1ce      	bne.n	800cd84 <quorem+0x9a>
 800cde6:	3c01      	subs	r4, #1
 800cde8:	e7c9      	b.n	800cd7e <quorem+0x94>
 800cdea:	6812      	ldr	r2, [r2, #0]
 800cdec:	3b04      	subs	r3, #4
 800cdee:	2a00      	cmp	r2, #0
 800cdf0:	d1f0      	bne.n	800cdd4 <quorem+0xea>
 800cdf2:	3c01      	subs	r4, #1
 800cdf4:	e7eb      	b.n	800cdce <quorem+0xe4>
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	e7ee      	b.n	800cdd8 <quorem+0xee>
 800cdfa:	0000      	movs	r0, r0
 800cdfc:	0000      	movs	r0, r0
	...

0800ce00 <_dtoa_r>:
 800ce00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce04:	ed2d 8b04 	vpush	{d8-d9}
 800ce08:	69c5      	ldr	r5, [r0, #28]
 800ce0a:	b093      	sub	sp, #76	; 0x4c
 800ce0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ce10:	ec57 6b10 	vmov	r6, r7, d0
 800ce14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ce18:	9107      	str	r1, [sp, #28]
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	920a      	str	r2, [sp, #40]	; 0x28
 800ce1e:	930d      	str	r3, [sp, #52]	; 0x34
 800ce20:	b975      	cbnz	r5, 800ce40 <_dtoa_r+0x40>
 800ce22:	2010      	movs	r0, #16
 800ce24:	f000 fe2a 	bl	800da7c <malloc>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	61e0      	str	r0, [r4, #28]
 800ce2c:	b920      	cbnz	r0, 800ce38 <_dtoa_r+0x38>
 800ce2e:	4bae      	ldr	r3, [pc, #696]	; (800d0e8 <_dtoa_r+0x2e8>)
 800ce30:	21ef      	movs	r1, #239	; 0xef
 800ce32:	48ae      	ldr	r0, [pc, #696]	; (800d0ec <_dtoa_r+0x2ec>)
 800ce34:	f001 fc82 	bl	800e73c <__assert_func>
 800ce38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ce3c:	6005      	str	r5, [r0, #0]
 800ce3e:	60c5      	str	r5, [r0, #12]
 800ce40:	69e3      	ldr	r3, [r4, #28]
 800ce42:	6819      	ldr	r1, [r3, #0]
 800ce44:	b151      	cbz	r1, 800ce5c <_dtoa_r+0x5c>
 800ce46:	685a      	ldr	r2, [r3, #4]
 800ce48:	604a      	str	r2, [r1, #4]
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	4093      	lsls	r3, r2
 800ce4e:	608b      	str	r3, [r1, #8]
 800ce50:	4620      	mov	r0, r4
 800ce52:	f000 ff07 	bl	800dc64 <_Bfree>
 800ce56:	69e3      	ldr	r3, [r4, #28]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	1e3b      	subs	r3, r7, #0
 800ce5e:	bfbb      	ittet	lt
 800ce60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ce64:	9303      	strlt	r3, [sp, #12]
 800ce66:	2300      	movge	r3, #0
 800ce68:	2201      	movlt	r2, #1
 800ce6a:	bfac      	ite	ge
 800ce6c:	f8c8 3000 	strge.w	r3, [r8]
 800ce70:	f8c8 2000 	strlt.w	r2, [r8]
 800ce74:	4b9e      	ldr	r3, [pc, #632]	; (800d0f0 <_dtoa_r+0x2f0>)
 800ce76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ce7a:	ea33 0308 	bics.w	r3, r3, r8
 800ce7e:	d11b      	bne.n	800ceb8 <_dtoa_r+0xb8>
 800ce80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce82:	f242 730f 	movw	r3, #9999	; 0x270f
 800ce86:	6013      	str	r3, [r2, #0]
 800ce88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ce8c:	4333      	orrs	r3, r6
 800ce8e:	f000 8593 	beq.w	800d9b8 <_dtoa_r+0xbb8>
 800ce92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce94:	b963      	cbnz	r3, 800ceb0 <_dtoa_r+0xb0>
 800ce96:	4b97      	ldr	r3, [pc, #604]	; (800d0f4 <_dtoa_r+0x2f4>)
 800ce98:	e027      	b.n	800ceea <_dtoa_r+0xea>
 800ce9a:	4b97      	ldr	r3, [pc, #604]	; (800d0f8 <_dtoa_r+0x2f8>)
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	3308      	adds	r3, #8
 800cea0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cea2:	6013      	str	r3, [r2, #0]
 800cea4:	9800      	ldr	r0, [sp, #0]
 800cea6:	b013      	add	sp, #76	; 0x4c
 800cea8:	ecbd 8b04 	vpop	{d8-d9}
 800ceac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb0:	4b90      	ldr	r3, [pc, #576]	; (800d0f4 <_dtoa_r+0x2f4>)
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	3303      	adds	r3, #3
 800ceb6:	e7f3      	b.n	800cea0 <_dtoa_r+0xa0>
 800ceb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cebc:	2200      	movs	r2, #0
 800cebe:	ec51 0b17 	vmov	r0, r1, d7
 800cec2:	eeb0 8a47 	vmov.f32	s16, s14
 800cec6:	eef0 8a67 	vmov.f32	s17, s15
 800ceca:	2300      	movs	r3, #0
 800cecc:	f7f3 fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 800ced0:	4681      	mov	r9, r0
 800ced2:	b160      	cbz	r0, 800ceee <_dtoa_r+0xee>
 800ced4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ced6:	2301      	movs	r3, #1
 800ced8:	6013      	str	r3, [r2, #0]
 800ceda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f000 8568 	beq.w	800d9b2 <_dtoa_r+0xbb2>
 800cee2:	4b86      	ldr	r3, [pc, #536]	; (800d0fc <_dtoa_r+0x2fc>)
 800cee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	3b01      	subs	r3, #1
 800ceea:	9300      	str	r3, [sp, #0]
 800ceec:	e7da      	b.n	800cea4 <_dtoa_r+0xa4>
 800ceee:	aa10      	add	r2, sp, #64	; 0x40
 800cef0:	a911      	add	r1, sp, #68	; 0x44
 800cef2:	4620      	mov	r0, r4
 800cef4:	eeb0 0a48 	vmov.f32	s0, s16
 800cef8:	eef0 0a68 	vmov.f32	s1, s17
 800cefc:	f001 f994 	bl	800e228 <__d2b>
 800cf00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cf04:	4682      	mov	sl, r0
 800cf06:	2d00      	cmp	r5, #0
 800cf08:	d07f      	beq.n	800d00a <_dtoa_r+0x20a>
 800cf0a:	ee18 3a90 	vmov	r3, s17
 800cf0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cf16:	ec51 0b18 	vmov	r0, r1, d8
 800cf1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cf1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cf22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cf26:	4619      	mov	r1, r3
 800cf28:	2200      	movs	r2, #0
 800cf2a:	4b75      	ldr	r3, [pc, #468]	; (800d100 <_dtoa_r+0x300>)
 800cf2c:	f7f3 f9ac 	bl	8000288 <__aeabi_dsub>
 800cf30:	a367      	add	r3, pc, #412	; (adr r3, 800d0d0 <_dtoa_r+0x2d0>)
 800cf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf36:	f7f3 fb5f 	bl	80005f8 <__aeabi_dmul>
 800cf3a:	a367      	add	r3, pc, #412	; (adr r3, 800d0d8 <_dtoa_r+0x2d8>)
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	f7f3 f9a4 	bl	800028c <__adddf3>
 800cf44:	4606      	mov	r6, r0
 800cf46:	4628      	mov	r0, r5
 800cf48:	460f      	mov	r7, r1
 800cf4a:	f7f3 faeb 	bl	8000524 <__aeabi_i2d>
 800cf4e:	a364      	add	r3, pc, #400	; (adr r3, 800d0e0 <_dtoa_r+0x2e0>)
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	f7f3 fb50 	bl	80005f8 <__aeabi_dmul>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	4639      	mov	r1, r7
 800cf60:	f7f3 f994 	bl	800028c <__adddf3>
 800cf64:	4606      	mov	r6, r0
 800cf66:	460f      	mov	r7, r1
 800cf68:	f7f3 fdf6 	bl	8000b58 <__aeabi_d2iz>
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	4683      	mov	fp, r0
 800cf70:	2300      	movs	r3, #0
 800cf72:	4630      	mov	r0, r6
 800cf74:	4639      	mov	r1, r7
 800cf76:	f7f3 fdb1 	bl	8000adc <__aeabi_dcmplt>
 800cf7a:	b148      	cbz	r0, 800cf90 <_dtoa_r+0x190>
 800cf7c:	4658      	mov	r0, fp
 800cf7e:	f7f3 fad1 	bl	8000524 <__aeabi_i2d>
 800cf82:	4632      	mov	r2, r6
 800cf84:	463b      	mov	r3, r7
 800cf86:	f7f3 fd9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf8a:	b908      	cbnz	r0, 800cf90 <_dtoa_r+0x190>
 800cf8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf90:	f1bb 0f16 	cmp.w	fp, #22
 800cf94:	d857      	bhi.n	800d046 <_dtoa_r+0x246>
 800cf96:	4b5b      	ldr	r3, [pc, #364]	; (800d104 <_dtoa_r+0x304>)
 800cf98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa0:	ec51 0b18 	vmov	r0, r1, d8
 800cfa4:	f7f3 fd9a 	bl	8000adc <__aeabi_dcmplt>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d04e      	beq.n	800d04a <_dtoa_r+0x24a>
 800cfac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	930c      	str	r3, [sp, #48]	; 0x30
 800cfb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfb6:	1b5b      	subs	r3, r3, r5
 800cfb8:	1e5a      	subs	r2, r3, #1
 800cfba:	bf45      	ittet	mi
 800cfbc:	f1c3 0301 	rsbmi	r3, r3, #1
 800cfc0:	9305      	strmi	r3, [sp, #20]
 800cfc2:	2300      	movpl	r3, #0
 800cfc4:	2300      	movmi	r3, #0
 800cfc6:	9206      	str	r2, [sp, #24]
 800cfc8:	bf54      	ite	pl
 800cfca:	9305      	strpl	r3, [sp, #20]
 800cfcc:	9306      	strmi	r3, [sp, #24]
 800cfce:	f1bb 0f00 	cmp.w	fp, #0
 800cfd2:	db3c      	blt.n	800d04e <_dtoa_r+0x24e>
 800cfd4:	9b06      	ldr	r3, [sp, #24]
 800cfd6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cfda:	445b      	add	r3, fp
 800cfdc:	9306      	str	r3, [sp, #24]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	9308      	str	r3, [sp, #32]
 800cfe2:	9b07      	ldr	r3, [sp, #28]
 800cfe4:	2b09      	cmp	r3, #9
 800cfe6:	d868      	bhi.n	800d0ba <_dtoa_r+0x2ba>
 800cfe8:	2b05      	cmp	r3, #5
 800cfea:	bfc4      	itt	gt
 800cfec:	3b04      	subgt	r3, #4
 800cfee:	9307      	strgt	r3, [sp, #28]
 800cff0:	9b07      	ldr	r3, [sp, #28]
 800cff2:	f1a3 0302 	sub.w	r3, r3, #2
 800cff6:	bfcc      	ite	gt
 800cff8:	2500      	movgt	r5, #0
 800cffa:	2501      	movle	r5, #1
 800cffc:	2b03      	cmp	r3, #3
 800cffe:	f200 8085 	bhi.w	800d10c <_dtoa_r+0x30c>
 800d002:	e8df f003 	tbb	[pc, r3]
 800d006:	3b2e      	.short	0x3b2e
 800d008:	5839      	.short	0x5839
 800d00a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d00e:	441d      	add	r5, r3
 800d010:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d014:	2b20      	cmp	r3, #32
 800d016:	bfc1      	itttt	gt
 800d018:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d01c:	fa08 f803 	lslgt.w	r8, r8, r3
 800d020:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d024:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d028:	bfd6      	itet	le
 800d02a:	f1c3 0320 	rsble	r3, r3, #32
 800d02e:	ea48 0003 	orrgt.w	r0, r8, r3
 800d032:	fa06 f003 	lslle.w	r0, r6, r3
 800d036:	f7f3 fa65 	bl	8000504 <__aeabi_ui2d>
 800d03a:	2201      	movs	r2, #1
 800d03c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d040:	3d01      	subs	r5, #1
 800d042:	920e      	str	r2, [sp, #56]	; 0x38
 800d044:	e76f      	b.n	800cf26 <_dtoa_r+0x126>
 800d046:	2301      	movs	r3, #1
 800d048:	e7b3      	b.n	800cfb2 <_dtoa_r+0x1b2>
 800d04a:	900c      	str	r0, [sp, #48]	; 0x30
 800d04c:	e7b2      	b.n	800cfb4 <_dtoa_r+0x1b4>
 800d04e:	9b05      	ldr	r3, [sp, #20]
 800d050:	eba3 030b 	sub.w	r3, r3, fp
 800d054:	9305      	str	r3, [sp, #20]
 800d056:	f1cb 0300 	rsb	r3, fp, #0
 800d05a:	9308      	str	r3, [sp, #32]
 800d05c:	2300      	movs	r3, #0
 800d05e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d060:	e7bf      	b.n	800cfe2 <_dtoa_r+0x1e2>
 800d062:	2300      	movs	r3, #0
 800d064:	9309      	str	r3, [sp, #36]	; 0x24
 800d066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d068:	2b00      	cmp	r3, #0
 800d06a:	dc52      	bgt.n	800d112 <_dtoa_r+0x312>
 800d06c:	2301      	movs	r3, #1
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	9304      	str	r3, [sp, #16]
 800d072:	461a      	mov	r2, r3
 800d074:	920a      	str	r2, [sp, #40]	; 0x28
 800d076:	e00b      	b.n	800d090 <_dtoa_r+0x290>
 800d078:	2301      	movs	r3, #1
 800d07a:	e7f3      	b.n	800d064 <_dtoa_r+0x264>
 800d07c:	2300      	movs	r3, #0
 800d07e:	9309      	str	r3, [sp, #36]	; 0x24
 800d080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d082:	445b      	add	r3, fp
 800d084:	9301      	str	r3, [sp, #4]
 800d086:	3301      	adds	r3, #1
 800d088:	2b01      	cmp	r3, #1
 800d08a:	9304      	str	r3, [sp, #16]
 800d08c:	bfb8      	it	lt
 800d08e:	2301      	movlt	r3, #1
 800d090:	69e0      	ldr	r0, [r4, #28]
 800d092:	2100      	movs	r1, #0
 800d094:	2204      	movs	r2, #4
 800d096:	f102 0614 	add.w	r6, r2, #20
 800d09a:	429e      	cmp	r6, r3
 800d09c:	d93d      	bls.n	800d11a <_dtoa_r+0x31a>
 800d09e:	6041      	str	r1, [r0, #4]
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f000 fd9f 	bl	800dbe4 <_Balloc>
 800d0a6:	9000      	str	r0, [sp, #0]
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d139      	bne.n	800d120 <_dtoa_r+0x320>
 800d0ac:	4b16      	ldr	r3, [pc, #88]	; (800d108 <_dtoa_r+0x308>)
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	f240 11af 	movw	r1, #431	; 0x1af
 800d0b4:	e6bd      	b.n	800ce32 <_dtoa_r+0x32>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e7e1      	b.n	800d07e <_dtoa_r+0x27e>
 800d0ba:	2501      	movs	r5, #1
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9307      	str	r3, [sp, #28]
 800d0c0:	9509      	str	r5, [sp, #36]	; 0x24
 800d0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c6:	9301      	str	r3, [sp, #4]
 800d0c8:	9304      	str	r3, [sp, #16]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	2312      	movs	r3, #18
 800d0ce:	e7d1      	b.n	800d074 <_dtoa_r+0x274>
 800d0d0:	636f4361 	.word	0x636f4361
 800d0d4:	3fd287a7 	.word	0x3fd287a7
 800d0d8:	8b60c8b3 	.word	0x8b60c8b3
 800d0dc:	3fc68a28 	.word	0x3fc68a28
 800d0e0:	509f79fb 	.word	0x509f79fb
 800d0e4:	3fd34413 	.word	0x3fd34413
 800d0e8:	08011309 	.word	0x08011309
 800d0ec:	08011320 	.word	0x08011320
 800d0f0:	7ff00000 	.word	0x7ff00000
 800d0f4:	08011305 	.word	0x08011305
 800d0f8:	080112fc 	.word	0x080112fc
 800d0fc:	080112d9 	.word	0x080112d9
 800d100:	3ff80000 	.word	0x3ff80000
 800d104:	08011410 	.word	0x08011410
 800d108:	08011378 	.word	0x08011378
 800d10c:	2301      	movs	r3, #1
 800d10e:	9309      	str	r3, [sp, #36]	; 0x24
 800d110:	e7d7      	b.n	800d0c2 <_dtoa_r+0x2c2>
 800d112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d114:	9301      	str	r3, [sp, #4]
 800d116:	9304      	str	r3, [sp, #16]
 800d118:	e7ba      	b.n	800d090 <_dtoa_r+0x290>
 800d11a:	3101      	adds	r1, #1
 800d11c:	0052      	lsls	r2, r2, #1
 800d11e:	e7ba      	b.n	800d096 <_dtoa_r+0x296>
 800d120:	69e3      	ldr	r3, [r4, #28]
 800d122:	9a00      	ldr	r2, [sp, #0]
 800d124:	601a      	str	r2, [r3, #0]
 800d126:	9b04      	ldr	r3, [sp, #16]
 800d128:	2b0e      	cmp	r3, #14
 800d12a:	f200 80a8 	bhi.w	800d27e <_dtoa_r+0x47e>
 800d12e:	2d00      	cmp	r5, #0
 800d130:	f000 80a5 	beq.w	800d27e <_dtoa_r+0x47e>
 800d134:	f1bb 0f00 	cmp.w	fp, #0
 800d138:	dd38      	ble.n	800d1ac <_dtoa_r+0x3ac>
 800d13a:	4bc0      	ldr	r3, [pc, #768]	; (800d43c <_dtoa_r+0x63c>)
 800d13c:	f00b 020f 	and.w	r2, fp, #15
 800d140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d144:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d148:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d14c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d150:	d019      	beq.n	800d186 <_dtoa_r+0x386>
 800d152:	4bbb      	ldr	r3, [pc, #748]	; (800d440 <_dtoa_r+0x640>)
 800d154:	ec51 0b18 	vmov	r0, r1, d8
 800d158:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d15c:	f7f3 fb76 	bl	800084c <__aeabi_ddiv>
 800d160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d164:	f008 080f 	and.w	r8, r8, #15
 800d168:	2503      	movs	r5, #3
 800d16a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d440 <_dtoa_r+0x640>
 800d16e:	f1b8 0f00 	cmp.w	r8, #0
 800d172:	d10a      	bne.n	800d18a <_dtoa_r+0x38a>
 800d174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d178:	4632      	mov	r2, r6
 800d17a:	463b      	mov	r3, r7
 800d17c:	f7f3 fb66 	bl	800084c <__aeabi_ddiv>
 800d180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d184:	e02b      	b.n	800d1de <_dtoa_r+0x3de>
 800d186:	2502      	movs	r5, #2
 800d188:	e7ef      	b.n	800d16a <_dtoa_r+0x36a>
 800d18a:	f018 0f01 	tst.w	r8, #1
 800d18e:	d008      	beq.n	800d1a2 <_dtoa_r+0x3a2>
 800d190:	4630      	mov	r0, r6
 800d192:	4639      	mov	r1, r7
 800d194:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d198:	f7f3 fa2e 	bl	80005f8 <__aeabi_dmul>
 800d19c:	3501      	adds	r5, #1
 800d19e:	4606      	mov	r6, r0
 800d1a0:	460f      	mov	r7, r1
 800d1a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d1a6:	f109 0908 	add.w	r9, r9, #8
 800d1aa:	e7e0      	b.n	800d16e <_dtoa_r+0x36e>
 800d1ac:	f000 809f 	beq.w	800d2ee <_dtoa_r+0x4ee>
 800d1b0:	f1cb 0600 	rsb	r6, fp, #0
 800d1b4:	4ba1      	ldr	r3, [pc, #644]	; (800d43c <_dtoa_r+0x63c>)
 800d1b6:	4fa2      	ldr	r7, [pc, #648]	; (800d440 <_dtoa_r+0x640>)
 800d1b8:	f006 020f 	and.w	r2, r6, #15
 800d1bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	ec51 0b18 	vmov	r0, r1, d8
 800d1c8:	f7f3 fa16 	bl	80005f8 <__aeabi_dmul>
 800d1cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1d0:	1136      	asrs	r6, r6, #4
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	2502      	movs	r5, #2
 800d1d6:	2e00      	cmp	r6, #0
 800d1d8:	d17e      	bne.n	800d2d8 <_dtoa_r+0x4d8>
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1d0      	bne.n	800d180 <_dtoa_r+0x380>
 800d1de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f000 8084 	beq.w	800d2f2 <_dtoa_r+0x4f2>
 800d1ea:	4b96      	ldr	r3, [pc, #600]	; (800d444 <_dtoa_r+0x644>)
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4640      	mov	r0, r8
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	f7f3 fc73 	bl	8000adc <__aeabi_dcmplt>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	d07b      	beq.n	800d2f2 <_dtoa_r+0x4f2>
 800d1fa:	9b04      	ldr	r3, [sp, #16]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d078      	beq.n	800d2f2 <_dtoa_r+0x4f2>
 800d200:	9b01      	ldr	r3, [sp, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	dd39      	ble.n	800d27a <_dtoa_r+0x47a>
 800d206:	4b90      	ldr	r3, [pc, #576]	; (800d448 <_dtoa_r+0x648>)
 800d208:	2200      	movs	r2, #0
 800d20a:	4640      	mov	r0, r8
 800d20c:	4649      	mov	r1, r9
 800d20e:	f7f3 f9f3 	bl	80005f8 <__aeabi_dmul>
 800d212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d216:	9e01      	ldr	r6, [sp, #4]
 800d218:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d21c:	3501      	adds	r5, #1
 800d21e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d222:	4628      	mov	r0, r5
 800d224:	f7f3 f97e 	bl	8000524 <__aeabi_i2d>
 800d228:	4642      	mov	r2, r8
 800d22a:	464b      	mov	r3, r9
 800d22c:	f7f3 f9e4 	bl	80005f8 <__aeabi_dmul>
 800d230:	4b86      	ldr	r3, [pc, #536]	; (800d44c <_dtoa_r+0x64c>)
 800d232:	2200      	movs	r2, #0
 800d234:	f7f3 f82a 	bl	800028c <__adddf3>
 800d238:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d23c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d240:	9303      	str	r3, [sp, #12]
 800d242:	2e00      	cmp	r6, #0
 800d244:	d158      	bne.n	800d2f8 <_dtoa_r+0x4f8>
 800d246:	4b82      	ldr	r3, [pc, #520]	; (800d450 <_dtoa_r+0x650>)
 800d248:	2200      	movs	r2, #0
 800d24a:	4640      	mov	r0, r8
 800d24c:	4649      	mov	r1, r9
 800d24e:	f7f3 f81b 	bl	8000288 <__aeabi_dsub>
 800d252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d256:	4680      	mov	r8, r0
 800d258:	4689      	mov	r9, r1
 800d25a:	f7f3 fc5d 	bl	8000b18 <__aeabi_dcmpgt>
 800d25e:	2800      	cmp	r0, #0
 800d260:	f040 8296 	bne.w	800d790 <_dtoa_r+0x990>
 800d264:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d268:	4640      	mov	r0, r8
 800d26a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d26e:	4649      	mov	r1, r9
 800d270:	f7f3 fc34 	bl	8000adc <__aeabi_dcmplt>
 800d274:	2800      	cmp	r0, #0
 800d276:	f040 8289 	bne.w	800d78c <_dtoa_r+0x98c>
 800d27a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d27e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d280:	2b00      	cmp	r3, #0
 800d282:	f2c0 814e 	blt.w	800d522 <_dtoa_r+0x722>
 800d286:	f1bb 0f0e 	cmp.w	fp, #14
 800d28a:	f300 814a 	bgt.w	800d522 <_dtoa_r+0x722>
 800d28e:	4b6b      	ldr	r3, [pc, #428]	; (800d43c <_dtoa_r+0x63c>)
 800d290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d294:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	f280 80dc 	bge.w	800d458 <_dtoa_r+0x658>
 800d2a0:	9b04      	ldr	r3, [sp, #16]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f300 80d8 	bgt.w	800d458 <_dtoa_r+0x658>
 800d2a8:	f040 826f 	bne.w	800d78a <_dtoa_r+0x98a>
 800d2ac:	4b68      	ldr	r3, [pc, #416]	; (800d450 <_dtoa_r+0x650>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	4640      	mov	r0, r8
 800d2b2:	4649      	mov	r1, r9
 800d2b4:	f7f3 f9a0 	bl	80005f8 <__aeabi_dmul>
 800d2b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2bc:	f7f3 fc22 	bl	8000b04 <__aeabi_dcmpge>
 800d2c0:	9e04      	ldr	r6, [sp, #16]
 800d2c2:	4637      	mov	r7, r6
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	f040 8245 	bne.w	800d754 <_dtoa_r+0x954>
 800d2ca:	9d00      	ldr	r5, [sp, #0]
 800d2cc:	2331      	movs	r3, #49	; 0x31
 800d2ce:	f805 3b01 	strb.w	r3, [r5], #1
 800d2d2:	f10b 0b01 	add.w	fp, fp, #1
 800d2d6:	e241      	b.n	800d75c <_dtoa_r+0x95c>
 800d2d8:	07f2      	lsls	r2, r6, #31
 800d2da:	d505      	bpl.n	800d2e8 <_dtoa_r+0x4e8>
 800d2dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2e0:	f7f3 f98a 	bl	80005f8 <__aeabi_dmul>
 800d2e4:	3501      	adds	r5, #1
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	1076      	asrs	r6, r6, #1
 800d2ea:	3708      	adds	r7, #8
 800d2ec:	e773      	b.n	800d1d6 <_dtoa_r+0x3d6>
 800d2ee:	2502      	movs	r5, #2
 800d2f0:	e775      	b.n	800d1de <_dtoa_r+0x3de>
 800d2f2:	9e04      	ldr	r6, [sp, #16]
 800d2f4:	465f      	mov	r7, fp
 800d2f6:	e792      	b.n	800d21e <_dtoa_r+0x41e>
 800d2f8:	9900      	ldr	r1, [sp, #0]
 800d2fa:	4b50      	ldr	r3, [pc, #320]	; (800d43c <_dtoa_r+0x63c>)
 800d2fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d300:	4431      	add	r1, r6
 800d302:	9102      	str	r1, [sp, #8]
 800d304:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d306:	eeb0 9a47 	vmov.f32	s18, s14
 800d30a:	eef0 9a67 	vmov.f32	s19, s15
 800d30e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d312:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d316:	2900      	cmp	r1, #0
 800d318:	d044      	beq.n	800d3a4 <_dtoa_r+0x5a4>
 800d31a:	494e      	ldr	r1, [pc, #312]	; (800d454 <_dtoa_r+0x654>)
 800d31c:	2000      	movs	r0, #0
 800d31e:	f7f3 fa95 	bl	800084c <__aeabi_ddiv>
 800d322:	ec53 2b19 	vmov	r2, r3, d9
 800d326:	f7f2 ffaf 	bl	8000288 <__aeabi_dsub>
 800d32a:	9d00      	ldr	r5, [sp, #0]
 800d32c:	ec41 0b19 	vmov	d9, r0, r1
 800d330:	4649      	mov	r1, r9
 800d332:	4640      	mov	r0, r8
 800d334:	f7f3 fc10 	bl	8000b58 <__aeabi_d2iz>
 800d338:	4606      	mov	r6, r0
 800d33a:	f7f3 f8f3 	bl	8000524 <__aeabi_i2d>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	4640      	mov	r0, r8
 800d344:	4649      	mov	r1, r9
 800d346:	f7f2 ff9f 	bl	8000288 <__aeabi_dsub>
 800d34a:	3630      	adds	r6, #48	; 0x30
 800d34c:	f805 6b01 	strb.w	r6, [r5], #1
 800d350:	ec53 2b19 	vmov	r2, r3, d9
 800d354:	4680      	mov	r8, r0
 800d356:	4689      	mov	r9, r1
 800d358:	f7f3 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d164      	bne.n	800d42a <_dtoa_r+0x62a>
 800d360:	4642      	mov	r2, r8
 800d362:	464b      	mov	r3, r9
 800d364:	4937      	ldr	r1, [pc, #220]	; (800d444 <_dtoa_r+0x644>)
 800d366:	2000      	movs	r0, #0
 800d368:	f7f2 ff8e 	bl	8000288 <__aeabi_dsub>
 800d36c:	ec53 2b19 	vmov	r2, r3, d9
 800d370:	f7f3 fbb4 	bl	8000adc <__aeabi_dcmplt>
 800d374:	2800      	cmp	r0, #0
 800d376:	f040 80b6 	bne.w	800d4e6 <_dtoa_r+0x6e6>
 800d37a:	9b02      	ldr	r3, [sp, #8]
 800d37c:	429d      	cmp	r5, r3
 800d37e:	f43f af7c 	beq.w	800d27a <_dtoa_r+0x47a>
 800d382:	4b31      	ldr	r3, [pc, #196]	; (800d448 <_dtoa_r+0x648>)
 800d384:	ec51 0b19 	vmov	r0, r1, d9
 800d388:	2200      	movs	r2, #0
 800d38a:	f7f3 f935 	bl	80005f8 <__aeabi_dmul>
 800d38e:	4b2e      	ldr	r3, [pc, #184]	; (800d448 <_dtoa_r+0x648>)
 800d390:	ec41 0b19 	vmov	d9, r0, r1
 800d394:	2200      	movs	r2, #0
 800d396:	4640      	mov	r0, r8
 800d398:	4649      	mov	r1, r9
 800d39a:	f7f3 f92d 	bl	80005f8 <__aeabi_dmul>
 800d39e:	4680      	mov	r8, r0
 800d3a0:	4689      	mov	r9, r1
 800d3a2:	e7c5      	b.n	800d330 <_dtoa_r+0x530>
 800d3a4:	ec51 0b17 	vmov	r0, r1, d7
 800d3a8:	f7f3 f926 	bl	80005f8 <__aeabi_dmul>
 800d3ac:	9b02      	ldr	r3, [sp, #8]
 800d3ae:	9d00      	ldr	r5, [sp, #0]
 800d3b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3b2:	ec41 0b19 	vmov	d9, r0, r1
 800d3b6:	4649      	mov	r1, r9
 800d3b8:	4640      	mov	r0, r8
 800d3ba:	f7f3 fbcd 	bl	8000b58 <__aeabi_d2iz>
 800d3be:	4606      	mov	r6, r0
 800d3c0:	f7f3 f8b0 	bl	8000524 <__aeabi_i2d>
 800d3c4:	3630      	adds	r6, #48	; 0x30
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	4649      	mov	r1, r9
 800d3ce:	f7f2 ff5b 	bl	8000288 <__aeabi_dsub>
 800d3d2:	f805 6b01 	strb.w	r6, [r5], #1
 800d3d6:	9b02      	ldr	r3, [sp, #8]
 800d3d8:	429d      	cmp	r5, r3
 800d3da:	4680      	mov	r8, r0
 800d3dc:	4689      	mov	r9, r1
 800d3de:	f04f 0200 	mov.w	r2, #0
 800d3e2:	d124      	bne.n	800d42e <_dtoa_r+0x62e>
 800d3e4:	4b1b      	ldr	r3, [pc, #108]	; (800d454 <_dtoa_r+0x654>)
 800d3e6:	ec51 0b19 	vmov	r0, r1, d9
 800d3ea:	f7f2 ff4f 	bl	800028c <__adddf3>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	4640      	mov	r0, r8
 800d3f4:	4649      	mov	r1, r9
 800d3f6:	f7f3 fb8f 	bl	8000b18 <__aeabi_dcmpgt>
 800d3fa:	2800      	cmp	r0, #0
 800d3fc:	d173      	bne.n	800d4e6 <_dtoa_r+0x6e6>
 800d3fe:	ec53 2b19 	vmov	r2, r3, d9
 800d402:	4914      	ldr	r1, [pc, #80]	; (800d454 <_dtoa_r+0x654>)
 800d404:	2000      	movs	r0, #0
 800d406:	f7f2 ff3f 	bl	8000288 <__aeabi_dsub>
 800d40a:	4602      	mov	r2, r0
 800d40c:	460b      	mov	r3, r1
 800d40e:	4640      	mov	r0, r8
 800d410:	4649      	mov	r1, r9
 800d412:	f7f3 fb63 	bl	8000adc <__aeabi_dcmplt>
 800d416:	2800      	cmp	r0, #0
 800d418:	f43f af2f 	beq.w	800d27a <_dtoa_r+0x47a>
 800d41c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d41e:	1e6b      	subs	r3, r5, #1
 800d420:	930f      	str	r3, [sp, #60]	; 0x3c
 800d422:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d426:	2b30      	cmp	r3, #48	; 0x30
 800d428:	d0f8      	beq.n	800d41c <_dtoa_r+0x61c>
 800d42a:	46bb      	mov	fp, r7
 800d42c:	e04a      	b.n	800d4c4 <_dtoa_r+0x6c4>
 800d42e:	4b06      	ldr	r3, [pc, #24]	; (800d448 <_dtoa_r+0x648>)
 800d430:	f7f3 f8e2 	bl	80005f8 <__aeabi_dmul>
 800d434:	4680      	mov	r8, r0
 800d436:	4689      	mov	r9, r1
 800d438:	e7bd      	b.n	800d3b6 <_dtoa_r+0x5b6>
 800d43a:	bf00      	nop
 800d43c:	08011410 	.word	0x08011410
 800d440:	080113e8 	.word	0x080113e8
 800d444:	3ff00000 	.word	0x3ff00000
 800d448:	40240000 	.word	0x40240000
 800d44c:	401c0000 	.word	0x401c0000
 800d450:	40140000 	.word	0x40140000
 800d454:	3fe00000 	.word	0x3fe00000
 800d458:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d45c:	9d00      	ldr	r5, [sp, #0]
 800d45e:	4642      	mov	r2, r8
 800d460:	464b      	mov	r3, r9
 800d462:	4630      	mov	r0, r6
 800d464:	4639      	mov	r1, r7
 800d466:	f7f3 f9f1 	bl	800084c <__aeabi_ddiv>
 800d46a:	f7f3 fb75 	bl	8000b58 <__aeabi_d2iz>
 800d46e:	9001      	str	r0, [sp, #4]
 800d470:	f7f3 f858 	bl	8000524 <__aeabi_i2d>
 800d474:	4642      	mov	r2, r8
 800d476:	464b      	mov	r3, r9
 800d478:	f7f3 f8be 	bl	80005f8 <__aeabi_dmul>
 800d47c:	4602      	mov	r2, r0
 800d47e:	460b      	mov	r3, r1
 800d480:	4630      	mov	r0, r6
 800d482:	4639      	mov	r1, r7
 800d484:	f7f2 ff00 	bl	8000288 <__aeabi_dsub>
 800d488:	9e01      	ldr	r6, [sp, #4]
 800d48a:	9f04      	ldr	r7, [sp, #16]
 800d48c:	3630      	adds	r6, #48	; 0x30
 800d48e:	f805 6b01 	strb.w	r6, [r5], #1
 800d492:	9e00      	ldr	r6, [sp, #0]
 800d494:	1bae      	subs	r6, r5, r6
 800d496:	42b7      	cmp	r7, r6
 800d498:	4602      	mov	r2, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	d134      	bne.n	800d508 <_dtoa_r+0x708>
 800d49e:	f7f2 fef5 	bl	800028c <__adddf3>
 800d4a2:	4642      	mov	r2, r8
 800d4a4:	464b      	mov	r3, r9
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	460f      	mov	r7, r1
 800d4aa:	f7f3 fb35 	bl	8000b18 <__aeabi_dcmpgt>
 800d4ae:	b9c8      	cbnz	r0, 800d4e4 <_dtoa_r+0x6e4>
 800d4b0:	4642      	mov	r2, r8
 800d4b2:	464b      	mov	r3, r9
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	4639      	mov	r1, r7
 800d4b8:	f7f3 fb06 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4bc:	b110      	cbz	r0, 800d4c4 <_dtoa_r+0x6c4>
 800d4be:	9b01      	ldr	r3, [sp, #4]
 800d4c0:	07db      	lsls	r3, r3, #31
 800d4c2:	d40f      	bmi.n	800d4e4 <_dtoa_r+0x6e4>
 800d4c4:	4651      	mov	r1, sl
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f000 fbcc 	bl	800dc64 <_Bfree>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4d0:	702b      	strb	r3, [r5, #0]
 800d4d2:	f10b 0301 	add.w	r3, fp, #1
 800d4d6:	6013      	str	r3, [r2, #0]
 800d4d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f43f ace2 	beq.w	800cea4 <_dtoa_r+0xa4>
 800d4e0:	601d      	str	r5, [r3, #0]
 800d4e2:	e4df      	b.n	800cea4 <_dtoa_r+0xa4>
 800d4e4:	465f      	mov	r7, fp
 800d4e6:	462b      	mov	r3, r5
 800d4e8:	461d      	mov	r5, r3
 800d4ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4ee:	2a39      	cmp	r2, #57	; 0x39
 800d4f0:	d106      	bne.n	800d500 <_dtoa_r+0x700>
 800d4f2:	9a00      	ldr	r2, [sp, #0]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d1f7      	bne.n	800d4e8 <_dtoa_r+0x6e8>
 800d4f8:	9900      	ldr	r1, [sp, #0]
 800d4fa:	2230      	movs	r2, #48	; 0x30
 800d4fc:	3701      	adds	r7, #1
 800d4fe:	700a      	strb	r2, [r1, #0]
 800d500:	781a      	ldrb	r2, [r3, #0]
 800d502:	3201      	adds	r2, #1
 800d504:	701a      	strb	r2, [r3, #0]
 800d506:	e790      	b.n	800d42a <_dtoa_r+0x62a>
 800d508:	4ba3      	ldr	r3, [pc, #652]	; (800d798 <_dtoa_r+0x998>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	f7f3 f874 	bl	80005f8 <__aeabi_dmul>
 800d510:	2200      	movs	r2, #0
 800d512:	2300      	movs	r3, #0
 800d514:	4606      	mov	r6, r0
 800d516:	460f      	mov	r7, r1
 800d518:	f7f3 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d09e      	beq.n	800d45e <_dtoa_r+0x65e>
 800d520:	e7d0      	b.n	800d4c4 <_dtoa_r+0x6c4>
 800d522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d524:	2a00      	cmp	r2, #0
 800d526:	f000 80ca 	beq.w	800d6be <_dtoa_r+0x8be>
 800d52a:	9a07      	ldr	r2, [sp, #28]
 800d52c:	2a01      	cmp	r2, #1
 800d52e:	f300 80ad 	bgt.w	800d68c <_dtoa_r+0x88c>
 800d532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d534:	2a00      	cmp	r2, #0
 800d536:	f000 80a5 	beq.w	800d684 <_dtoa_r+0x884>
 800d53a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d53e:	9e08      	ldr	r6, [sp, #32]
 800d540:	9d05      	ldr	r5, [sp, #20]
 800d542:	9a05      	ldr	r2, [sp, #20]
 800d544:	441a      	add	r2, r3
 800d546:	9205      	str	r2, [sp, #20]
 800d548:	9a06      	ldr	r2, [sp, #24]
 800d54a:	2101      	movs	r1, #1
 800d54c:	441a      	add	r2, r3
 800d54e:	4620      	mov	r0, r4
 800d550:	9206      	str	r2, [sp, #24]
 800d552:	f000 fc3d 	bl	800ddd0 <__i2b>
 800d556:	4607      	mov	r7, r0
 800d558:	b165      	cbz	r5, 800d574 <_dtoa_r+0x774>
 800d55a:	9b06      	ldr	r3, [sp, #24]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	dd09      	ble.n	800d574 <_dtoa_r+0x774>
 800d560:	42ab      	cmp	r3, r5
 800d562:	9a05      	ldr	r2, [sp, #20]
 800d564:	bfa8      	it	ge
 800d566:	462b      	movge	r3, r5
 800d568:	1ad2      	subs	r2, r2, r3
 800d56a:	9205      	str	r2, [sp, #20]
 800d56c:	9a06      	ldr	r2, [sp, #24]
 800d56e:	1aed      	subs	r5, r5, r3
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	9306      	str	r3, [sp, #24]
 800d574:	9b08      	ldr	r3, [sp, #32]
 800d576:	b1f3      	cbz	r3, 800d5b6 <_dtoa_r+0x7b6>
 800d578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f000 80a3 	beq.w	800d6c6 <_dtoa_r+0x8c6>
 800d580:	2e00      	cmp	r6, #0
 800d582:	dd10      	ble.n	800d5a6 <_dtoa_r+0x7a6>
 800d584:	4639      	mov	r1, r7
 800d586:	4632      	mov	r2, r6
 800d588:	4620      	mov	r0, r4
 800d58a:	f000 fce1 	bl	800df50 <__pow5mult>
 800d58e:	4652      	mov	r2, sl
 800d590:	4601      	mov	r1, r0
 800d592:	4607      	mov	r7, r0
 800d594:	4620      	mov	r0, r4
 800d596:	f000 fc31 	bl	800ddfc <__multiply>
 800d59a:	4651      	mov	r1, sl
 800d59c:	4680      	mov	r8, r0
 800d59e:	4620      	mov	r0, r4
 800d5a0:	f000 fb60 	bl	800dc64 <_Bfree>
 800d5a4:	46c2      	mov	sl, r8
 800d5a6:	9b08      	ldr	r3, [sp, #32]
 800d5a8:	1b9a      	subs	r2, r3, r6
 800d5aa:	d004      	beq.n	800d5b6 <_dtoa_r+0x7b6>
 800d5ac:	4651      	mov	r1, sl
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f000 fcce 	bl	800df50 <__pow5mult>
 800d5b4:	4682      	mov	sl, r0
 800d5b6:	2101      	movs	r1, #1
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 fc09 	bl	800ddd0 <__i2b>
 800d5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	4606      	mov	r6, r0
 800d5c4:	f340 8081 	ble.w	800d6ca <_dtoa_r+0x8ca>
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	4601      	mov	r1, r0
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	f000 fcbf 	bl	800df50 <__pow5mult>
 800d5d2:	9b07      	ldr	r3, [sp, #28]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	dd7a      	ble.n	800d6d0 <_dtoa_r+0x8d0>
 800d5da:	f04f 0800 	mov.w	r8, #0
 800d5de:	6933      	ldr	r3, [r6, #16]
 800d5e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d5e4:	6918      	ldr	r0, [r3, #16]
 800d5e6:	f000 fba5 	bl	800dd34 <__hi0bits>
 800d5ea:	f1c0 0020 	rsb	r0, r0, #32
 800d5ee:	9b06      	ldr	r3, [sp, #24]
 800d5f0:	4418      	add	r0, r3
 800d5f2:	f010 001f 	ands.w	r0, r0, #31
 800d5f6:	f000 8094 	beq.w	800d722 <_dtoa_r+0x922>
 800d5fa:	f1c0 0320 	rsb	r3, r0, #32
 800d5fe:	2b04      	cmp	r3, #4
 800d600:	f340 8085 	ble.w	800d70e <_dtoa_r+0x90e>
 800d604:	9b05      	ldr	r3, [sp, #20]
 800d606:	f1c0 001c 	rsb	r0, r0, #28
 800d60a:	4403      	add	r3, r0
 800d60c:	9305      	str	r3, [sp, #20]
 800d60e:	9b06      	ldr	r3, [sp, #24]
 800d610:	4403      	add	r3, r0
 800d612:	4405      	add	r5, r0
 800d614:	9306      	str	r3, [sp, #24]
 800d616:	9b05      	ldr	r3, [sp, #20]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	dd05      	ble.n	800d628 <_dtoa_r+0x828>
 800d61c:	4651      	mov	r1, sl
 800d61e:	461a      	mov	r2, r3
 800d620:	4620      	mov	r0, r4
 800d622:	f000 fcef 	bl	800e004 <__lshift>
 800d626:	4682      	mov	sl, r0
 800d628:	9b06      	ldr	r3, [sp, #24]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	dd05      	ble.n	800d63a <_dtoa_r+0x83a>
 800d62e:	4631      	mov	r1, r6
 800d630:	461a      	mov	r2, r3
 800d632:	4620      	mov	r0, r4
 800d634:	f000 fce6 	bl	800e004 <__lshift>
 800d638:	4606      	mov	r6, r0
 800d63a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d072      	beq.n	800d726 <_dtoa_r+0x926>
 800d640:	4631      	mov	r1, r6
 800d642:	4650      	mov	r0, sl
 800d644:	f000 fd4a 	bl	800e0dc <__mcmp>
 800d648:	2800      	cmp	r0, #0
 800d64a:	da6c      	bge.n	800d726 <_dtoa_r+0x926>
 800d64c:	2300      	movs	r3, #0
 800d64e:	4651      	mov	r1, sl
 800d650:	220a      	movs	r2, #10
 800d652:	4620      	mov	r0, r4
 800d654:	f000 fb28 	bl	800dca8 <__multadd>
 800d658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d65a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d65e:	4682      	mov	sl, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	f000 81b0 	beq.w	800d9c6 <_dtoa_r+0xbc6>
 800d666:	2300      	movs	r3, #0
 800d668:	4639      	mov	r1, r7
 800d66a:	220a      	movs	r2, #10
 800d66c:	4620      	mov	r0, r4
 800d66e:	f000 fb1b 	bl	800dca8 <__multadd>
 800d672:	9b01      	ldr	r3, [sp, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	4607      	mov	r7, r0
 800d678:	f300 8096 	bgt.w	800d7a8 <_dtoa_r+0x9a8>
 800d67c:	9b07      	ldr	r3, [sp, #28]
 800d67e:	2b02      	cmp	r3, #2
 800d680:	dc59      	bgt.n	800d736 <_dtoa_r+0x936>
 800d682:	e091      	b.n	800d7a8 <_dtoa_r+0x9a8>
 800d684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d68a:	e758      	b.n	800d53e <_dtoa_r+0x73e>
 800d68c:	9b04      	ldr	r3, [sp, #16]
 800d68e:	1e5e      	subs	r6, r3, #1
 800d690:	9b08      	ldr	r3, [sp, #32]
 800d692:	42b3      	cmp	r3, r6
 800d694:	bfbf      	itttt	lt
 800d696:	9b08      	ldrlt	r3, [sp, #32]
 800d698:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d69a:	9608      	strlt	r6, [sp, #32]
 800d69c:	1af3      	sublt	r3, r6, r3
 800d69e:	bfb4      	ite	lt
 800d6a0:	18d2      	addlt	r2, r2, r3
 800d6a2:	1b9e      	subge	r6, r3, r6
 800d6a4:	9b04      	ldr	r3, [sp, #16]
 800d6a6:	bfbc      	itt	lt
 800d6a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d6aa:	2600      	movlt	r6, #0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	bfb7      	itett	lt
 800d6b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d6b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d6b8:	1a9d      	sublt	r5, r3, r2
 800d6ba:	2300      	movlt	r3, #0
 800d6bc:	e741      	b.n	800d542 <_dtoa_r+0x742>
 800d6be:	9e08      	ldr	r6, [sp, #32]
 800d6c0:	9d05      	ldr	r5, [sp, #20]
 800d6c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d6c4:	e748      	b.n	800d558 <_dtoa_r+0x758>
 800d6c6:	9a08      	ldr	r2, [sp, #32]
 800d6c8:	e770      	b.n	800d5ac <_dtoa_r+0x7ac>
 800d6ca:	9b07      	ldr	r3, [sp, #28]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	dc19      	bgt.n	800d704 <_dtoa_r+0x904>
 800d6d0:	9b02      	ldr	r3, [sp, #8]
 800d6d2:	b9bb      	cbnz	r3, 800d704 <_dtoa_r+0x904>
 800d6d4:	9b03      	ldr	r3, [sp, #12]
 800d6d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6da:	b99b      	cbnz	r3, 800d704 <_dtoa_r+0x904>
 800d6dc:	9b03      	ldr	r3, [sp, #12]
 800d6de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6e2:	0d1b      	lsrs	r3, r3, #20
 800d6e4:	051b      	lsls	r3, r3, #20
 800d6e6:	b183      	cbz	r3, 800d70a <_dtoa_r+0x90a>
 800d6e8:	9b05      	ldr	r3, [sp, #20]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	9305      	str	r3, [sp, #20]
 800d6ee:	9b06      	ldr	r3, [sp, #24]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	9306      	str	r3, [sp, #24]
 800d6f4:	f04f 0801 	mov.w	r8, #1
 800d6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f47f af6f 	bne.w	800d5de <_dtoa_r+0x7de>
 800d700:	2001      	movs	r0, #1
 800d702:	e774      	b.n	800d5ee <_dtoa_r+0x7ee>
 800d704:	f04f 0800 	mov.w	r8, #0
 800d708:	e7f6      	b.n	800d6f8 <_dtoa_r+0x8f8>
 800d70a:	4698      	mov	r8, r3
 800d70c:	e7f4      	b.n	800d6f8 <_dtoa_r+0x8f8>
 800d70e:	d082      	beq.n	800d616 <_dtoa_r+0x816>
 800d710:	9a05      	ldr	r2, [sp, #20]
 800d712:	331c      	adds	r3, #28
 800d714:	441a      	add	r2, r3
 800d716:	9205      	str	r2, [sp, #20]
 800d718:	9a06      	ldr	r2, [sp, #24]
 800d71a:	441a      	add	r2, r3
 800d71c:	441d      	add	r5, r3
 800d71e:	9206      	str	r2, [sp, #24]
 800d720:	e779      	b.n	800d616 <_dtoa_r+0x816>
 800d722:	4603      	mov	r3, r0
 800d724:	e7f4      	b.n	800d710 <_dtoa_r+0x910>
 800d726:	9b04      	ldr	r3, [sp, #16]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	dc37      	bgt.n	800d79c <_dtoa_r+0x99c>
 800d72c:	9b07      	ldr	r3, [sp, #28]
 800d72e:	2b02      	cmp	r3, #2
 800d730:	dd34      	ble.n	800d79c <_dtoa_r+0x99c>
 800d732:	9b04      	ldr	r3, [sp, #16]
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	9b01      	ldr	r3, [sp, #4]
 800d738:	b963      	cbnz	r3, 800d754 <_dtoa_r+0x954>
 800d73a:	4631      	mov	r1, r6
 800d73c:	2205      	movs	r2, #5
 800d73e:	4620      	mov	r0, r4
 800d740:	f000 fab2 	bl	800dca8 <__multadd>
 800d744:	4601      	mov	r1, r0
 800d746:	4606      	mov	r6, r0
 800d748:	4650      	mov	r0, sl
 800d74a:	f000 fcc7 	bl	800e0dc <__mcmp>
 800d74e:	2800      	cmp	r0, #0
 800d750:	f73f adbb 	bgt.w	800d2ca <_dtoa_r+0x4ca>
 800d754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d756:	9d00      	ldr	r5, [sp, #0]
 800d758:	ea6f 0b03 	mvn.w	fp, r3
 800d75c:	f04f 0800 	mov.w	r8, #0
 800d760:	4631      	mov	r1, r6
 800d762:	4620      	mov	r0, r4
 800d764:	f000 fa7e 	bl	800dc64 <_Bfree>
 800d768:	2f00      	cmp	r7, #0
 800d76a:	f43f aeab 	beq.w	800d4c4 <_dtoa_r+0x6c4>
 800d76e:	f1b8 0f00 	cmp.w	r8, #0
 800d772:	d005      	beq.n	800d780 <_dtoa_r+0x980>
 800d774:	45b8      	cmp	r8, r7
 800d776:	d003      	beq.n	800d780 <_dtoa_r+0x980>
 800d778:	4641      	mov	r1, r8
 800d77a:	4620      	mov	r0, r4
 800d77c:	f000 fa72 	bl	800dc64 <_Bfree>
 800d780:	4639      	mov	r1, r7
 800d782:	4620      	mov	r0, r4
 800d784:	f000 fa6e 	bl	800dc64 <_Bfree>
 800d788:	e69c      	b.n	800d4c4 <_dtoa_r+0x6c4>
 800d78a:	2600      	movs	r6, #0
 800d78c:	4637      	mov	r7, r6
 800d78e:	e7e1      	b.n	800d754 <_dtoa_r+0x954>
 800d790:	46bb      	mov	fp, r7
 800d792:	4637      	mov	r7, r6
 800d794:	e599      	b.n	800d2ca <_dtoa_r+0x4ca>
 800d796:	bf00      	nop
 800d798:	40240000 	.word	0x40240000
 800d79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 80c8 	beq.w	800d934 <_dtoa_r+0xb34>
 800d7a4:	9b04      	ldr	r3, [sp, #16]
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	2d00      	cmp	r5, #0
 800d7aa:	dd05      	ble.n	800d7b8 <_dtoa_r+0x9b8>
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	462a      	mov	r2, r5
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f000 fc27 	bl	800e004 <__lshift>
 800d7b6:	4607      	mov	r7, r0
 800d7b8:	f1b8 0f00 	cmp.w	r8, #0
 800d7bc:	d05b      	beq.n	800d876 <_dtoa_r+0xa76>
 800d7be:	6879      	ldr	r1, [r7, #4]
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f000 fa0f 	bl	800dbe4 <_Balloc>
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	b928      	cbnz	r0, 800d7d6 <_dtoa_r+0x9d6>
 800d7ca:	4b83      	ldr	r3, [pc, #524]	; (800d9d8 <_dtoa_r+0xbd8>)
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d7d2:	f7ff bb2e 	b.w	800ce32 <_dtoa_r+0x32>
 800d7d6:	693a      	ldr	r2, [r7, #16]
 800d7d8:	3202      	adds	r2, #2
 800d7da:	0092      	lsls	r2, r2, #2
 800d7dc:	f107 010c 	add.w	r1, r7, #12
 800d7e0:	300c      	adds	r0, #12
 800d7e2:	f7ff fa74 	bl	800ccce <memcpy>
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f000 fc0a 	bl	800e004 <__lshift>
 800d7f0:	9b00      	ldr	r3, [sp, #0]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	9304      	str	r3, [sp, #16]
 800d7f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	9308      	str	r3, [sp, #32]
 800d7fe:	9b02      	ldr	r3, [sp, #8]
 800d800:	f003 0301 	and.w	r3, r3, #1
 800d804:	46b8      	mov	r8, r7
 800d806:	9306      	str	r3, [sp, #24]
 800d808:	4607      	mov	r7, r0
 800d80a:	9b04      	ldr	r3, [sp, #16]
 800d80c:	4631      	mov	r1, r6
 800d80e:	3b01      	subs	r3, #1
 800d810:	4650      	mov	r0, sl
 800d812:	9301      	str	r3, [sp, #4]
 800d814:	f7ff fa69 	bl	800ccea <quorem>
 800d818:	4641      	mov	r1, r8
 800d81a:	9002      	str	r0, [sp, #8]
 800d81c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d820:	4650      	mov	r0, sl
 800d822:	f000 fc5b 	bl	800e0dc <__mcmp>
 800d826:	463a      	mov	r2, r7
 800d828:	9005      	str	r0, [sp, #20]
 800d82a:	4631      	mov	r1, r6
 800d82c:	4620      	mov	r0, r4
 800d82e:	f000 fc71 	bl	800e114 <__mdiff>
 800d832:	68c2      	ldr	r2, [r0, #12]
 800d834:	4605      	mov	r5, r0
 800d836:	bb02      	cbnz	r2, 800d87a <_dtoa_r+0xa7a>
 800d838:	4601      	mov	r1, r0
 800d83a:	4650      	mov	r0, sl
 800d83c:	f000 fc4e 	bl	800e0dc <__mcmp>
 800d840:	4602      	mov	r2, r0
 800d842:	4629      	mov	r1, r5
 800d844:	4620      	mov	r0, r4
 800d846:	9209      	str	r2, [sp, #36]	; 0x24
 800d848:	f000 fa0c 	bl	800dc64 <_Bfree>
 800d84c:	9b07      	ldr	r3, [sp, #28]
 800d84e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d850:	9d04      	ldr	r5, [sp, #16]
 800d852:	ea43 0102 	orr.w	r1, r3, r2
 800d856:	9b06      	ldr	r3, [sp, #24]
 800d858:	4319      	orrs	r1, r3
 800d85a:	d110      	bne.n	800d87e <_dtoa_r+0xa7e>
 800d85c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d860:	d029      	beq.n	800d8b6 <_dtoa_r+0xab6>
 800d862:	9b05      	ldr	r3, [sp, #20]
 800d864:	2b00      	cmp	r3, #0
 800d866:	dd02      	ble.n	800d86e <_dtoa_r+0xa6e>
 800d868:	9b02      	ldr	r3, [sp, #8]
 800d86a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d86e:	9b01      	ldr	r3, [sp, #4]
 800d870:	f883 9000 	strb.w	r9, [r3]
 800d874:	e774      	b.n	800d760 <_dtoa_r+0x960>
 800d876:	4638      	mov	r0, r7
 800d878:	e7ba      	b.n	800d7f0 <_dtoa_r+0x9f0>
 800d87a:	2201      	movs	r2, #1
 800d87c:	e7e1      	b.n	800d842 <_dtoa_r+0xa42>
 800d87e:	9b05      	ldr	r3, [sp, #20]
 800d880:	2b00      	cmp	r3, #0
 800d882:	db04      	blt.n	800d88e <_dtoa_r+0xa8e>
 800d884:	9907      	ldr	r1, [sp, #28]
 800d886:	430b      	orrs	r3, r1
 800d888:	9906      	ldr	r1, [sp, #24]
 800d88a:	430b      	orrs	r3, r1
 800d88c:	d120      	bne.n	800d8d0 <_dtoa_r+0xad0>
 800d88e:	2a00      	cmp	r2, #0
 800d890:	dded      	ble.n	800d86e <_dtoa_r+0xa6e>
 800d892:	4651      	mov	r1, sl
 800d894:	2201      	movs	r2, #1
 800d896:	4620      	mov	r0, r4
 800d898:	f000 fbb4 	bl	800e004 <__lshift>
 800d89c:	4631      	mov	r1, r6
 800d89e:	4682      	mov	sl, r0
 800d8a0:	f000 fc1c 	bl	800e0dc <__mcmp>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	dc03      	bgt.n	800d8b0 <_dtoa_r+0xab0>
 800d8a8:	d1e1      	bne.n	800d86e <_dtoa_r+0xa6e>
 800d8aa:	f019 0f01 	tst.w	r9, #1
 800d8ae:	d0de      	beq.n	800d86e <_dtoa_r+0xa6e>
 800d8b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d8b4:	d1d8      	bne.n	800d868 <_dtoa_r+0xa68>
 800d8b6:	9a01      	ldr	r2, [sp, #4]
 800d8b8:	2339      	movs	r3, #57	; 0x39
 800d8ba:	7013      	strb	r3, [r2, #0]
 800d8bc:	462b      	mov	r3, r5
 800d8be:	461d      	mov	r5, r3
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d8c6:	2a39      	cmp	r2, #57	; 0x39
 800d8c8:	d06c      	beq.n	800d9a4 <_dtoa_r+0xba4>
 800d8ca:	3201      	adds	r2, #1
 800d8cc:	701a      	strb	r2, [r3, #0]
 800d8ce:	e747      	b.n	800d760 <_dtoa_r+0x960>
 800d8d0:	2a00      	cmp	r2, #0
 800d8d2:	dd07      	ble.n	800d8e4 <_dtoa_r+0xae4>
 800d8d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d8d8:	d0ed      	beq.n	800d8b6 <_dtoa_r+0xab6>
 800d8da:	9a01      	ldr	r2, [sp, #4]
 800d8dc:	f109 0301 	add.w	r3, r9, #1
 800d8e0:	7013      	strb	r3, [r2, #0]
 800d8e2:	e73d      	b.n	800d760 <_dtoa_r+0x960>
 800d8e4:	9b04      	ldr	r3, [sp, #16]
 800d8e6:	9a08      	ldr	r2, [sp, #32]
 800d8e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d043      	beq.n	800d978 <_dtoa_r+0xb78>
 800d8f0:	4651      	mov	r1, sl
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	220a      	movs	r2, #10
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f000 f9d6 	bl	800dca8 <__multadd>
 800d8fc:	45b8      	cmp	r8, r7
 800d8fe:	4682      	mov	sl, r0
 800d900:	f04f 0300 	mov.w	r3, #0
 800d904:	f04f 020a 	mov.w	r2, #10
 800d908:	4641      	mov	r1, r8
 800d90a:	4620      	mov	r0, r4
 800d90c:	d107      	bne.n	800d91e <_dtoa_r+0xb1e>
 800d90e:	f000 f9cb 	bl	800dca8 <__multadd>
 800d912:	4680      	mov	r8, r0
 800d914:	4607      	mov	r7, r0
 800d916:	9b04      	ldr	r3, [sp, #16]
 800d918:	3301      	adds	r3, #1
 800d91a:	9304      	str	r3, [sp, #16]
 800d91c:	e775      	b.n	800d80a <_dtoa_r+0xa0a>
 800d91e:	f000 f9c3 	bl	800dca8 <__multadd>
 800d922:	4639      	mov	r1, r7
 800d924:	4680      	mov	r8, r0
 800d926:	2300      	movs	r3, #0
 800d928:	220a      	movs	r2, #10
 800d92a:	4620      	mov	r0, r4
 800d92c:	f000 f9bc 	bl	800dca8 <__multadd>
 800d930:	4607      	mov	r7, r0
 800d932:	e7f0      	b.n	800d916 <_dtoa_r+0xb16>
 800d934:	9b04      	ldr	r3, [sp, #16]
 800d936:	9301      	str	r3, [sp, #4]
 800d938:	9d00      	ldr	r5, [sp, #0]
 800d93a:	4631      	mov	r1, r6
 800d93c:	4650      	mov	r0, sl
 800d93e:	f7ff f9d4 	bl	800ccea <quorem>
 800d942:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d946:	9b00      	ldr	r3, [sp, #0]
 800d948:	f805 9b01 	strb.w	r9, [r5], #1
 800d94c:	1aea      	subs	r2, r5, r3
 800d94e:	9b01      	ldr	r3, [sp, #4]
 800d950:	4293      	cmp	r3, r2
 800d952:	dd07      	ble.n	800d964 <_dtoa_r+0xb64>
 800d954:	4651      	mov	r1, sl
 800d956:	2300      	movs	r3, #0
 800d958:	220a      	movs	r2, #10
 800d95a:	4620      	mov	r0, r4
 800d95c:	f000 f9a4 	bl	800dca8 <__multadd>
 800d960:	4682      	mov	sl, r0
 800d962:	e7ea      	b.n	800d93a <_dtoa_r+0xb3a>
 800d964:	9b01      	ldr	r3, [sp, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	bfc8      	it	gt
 800d96a:	461d      	movgt	r5, r3
 800d96c:	9b00      	ldr	r3, [sp, #0]
 800d96e:	bfd8      	it	le
 800d970:	2501      	movle	r5, #1
 800d972:	441d      	add	r5, r3
 800d974:	f04f 0800 	mov.w	r8, #0
 800d978:	4651      	mov	r1, sl
 800d97a:	2201      	movs	r2, #1
 800d97c:	4620      	mov	r0, r4
 800d97e:	f000 fb41 	bl	800e004 <__lshift>
 800d982:	4631      	mov	r1, r6
 800d984:	4682      	mov	sl, r0
 800d986:	f000 fba9 	bl	800e0dc <__mcmp>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	dc96      	bgt.n	800d8bc <_dtoa_r+0xabc>
 800d98e:	d102      	bne.n	800d996 <_dtoa_r+0xb96>
 800d990:	f019 0f01 	tst.w	r9, #1
 800d994:	d192      	bne.n	800d8bc <_dtoa_r+0xabc>
 800d996:	462b      	mov	r3, r5
 800d998:	461d      	mov	r5, r3
 800d99a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d99e:	2a30      	cmp	r2, #48	; 0x30
 800d9a0:	d0fa      	beq.n	800d998 <_dtoa_r+0xb98>
 800d9a2:	e6dd      	b.n	800d760 <_dtoa_r+0x960>
 800d9a4:	9a00      	ldr	r2, [sp, #0]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d189      	bne.n	800d8be <_dtoa_r+0xabe>
 800d9aa:	f10b 0b01 	add.w	fp, fp, #1
 800d9ae:	2331      	movs	r3, #49	; 0x31
 800d9b0:	e796      	b.n	800d8e0 <_dtoa_r+0xae0>
 800d9b2:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <_dtoa_r+0xbdc>)
 800d9b4:	f7ff ba99 	b.w	800ceea <_dtoa_r+0xea>
 800d9b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f47f aa6d 	bne.w	800ce9a <_dtoa_r+0x9a>
 800d9c0:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <_dtoa_r+0xbe0>)
 800d9c2:	f7ff ba92 	b.w	800ceea <_dtoa_r+0xea>
 800d9c6:	9b01      	ldr	r3, [sp, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	dcb5      	bgt.n	800d938 <_dtoa_r+0xb38>
 800d9cc:	9b07      	ldr	r3, [sp, #28]
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	f73f aeb1 	bgt.w	800d736 <_dtoa_r+0x936>
 800d9d4:	e7b0      	b.n	800d938 <_dtoa_r+0xb38>
 800d9d6:	bf00      	nop
 800d9d8:	08011378 	.word	0x08011378
 800d9dc:	080112d8 	.word	0x080112d8
 800d9e0:	080112fc 	.word	0x080112fc

0800d9e4 <_free_r>:
 800d9e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9e6:	2900      	cmp	r1, #0
 800d9e8:	d044      	beq.n	800da74 <_free_r+0x90>
 800d9ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9ee:	9001      	str	r0, [sp, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f1a1 0404 	sub.w	r4, r1, #4
 800d9f6:	bfb8      	it	lt
 800d9f8:	18e4      	addlt	r4, r4, r3
 800d9fa:	f000 f8e7 	bl	800dbcc <__malloc_lock>
 800d9fe:	4a1e      	ldr	r2, [pc, #120]	; (800da78 <_free_r+0x94>)
 800da00:	9801      	ldr	r0, [sp, #4]
 800da02:	6813      	ldr	r3, [r2, #0]
 800da04:	b933      	cbnz	r3, 800da14 <_free_r+0x30>
 800da06:	6063      	str	r3, [r4, #4]
 800da08:	6014      	str	r4, [r2, #0]
 800da0a:	b003      	add	sp, #12
 800da0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da10:	f000 b8e2 	b.w	800dbd8 <__malloc_unlock>
 800da14:	42a3      	cmp	r3, r4
 800da16:	d908      	bls.n	800da2a <_free_r+0x46>
 800da18:	6825      	ldr	r5, [r4, #0]
 800da1a:	1961      	adds	r1, r4, r5
 800da1c:	428b      	cmp	r3, r1
 800da1e:	bf01      	itttt	eq
 800da20:	6819      	ldreq	r1, [r3, #0]
 800da22:	685b      	ldreq	r3, [r3, #4]
 800da24:	1949      	addeq	r1, r1, r5
 800da26:	6021      	streq	r1, [r4, #0]
 800da28:	e7ed      	b.n	800da06 <_free_r+0x22>
 800da2a:	461a      	mov	r2, r3
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	b10b      	cbz	r3, 800da34 <_free_r+0x50>
 800da30:	42a3      	cmp	r3, r4
 800da32:	d9fa      	bls.n	800da2a <_free_r+0x46>
 800da34:	6811      	ldr	r1, [r2, #0]
 800da36:	1855      	adds	r5, r2, r1
 800da38:	42a5      	cmp	r5, r4
 800da3a:	d10b      	bne.n	800da54 <_free_r+0x70>
 800da3c:	6824      	ldr	r4, [r4, #0]
 800da3e:	4421      	add	r1, r4
 800da40:	1854      	adds	r4, r2, r1
 800da42:	42a3      	cmp	r3, r4
 800da44:	6011      	str	r1, [r2, #0]
 800da46:	d1e0      	bne.n	800da0a <_free_r+0x26>
 800da48:	681c      	ldr	r4, [r3, #0]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	6053      	str	r3, [r2, #4]
 800da4e:	440c      	add	r4, r1
 800da50:	6014      	str	r4, [r2, #0]
 800da52:	e7da      	b.n	800da0a <_free_r+0x26>
 800da54:	d902      	bls.n	800da5c <_free_r+0x78>
 800da56:	230c      	movs	r3, #12
 800da58:	6003      	str	r3, [r0, #0]
 800da5a:	e7d6      	b.n	800da0a <_free_r+0x26>
 800da5c:	6825      	ldr	r5, [r4, #0]
 800da5e:	1961      	adds	r1, r4, r5
 800da60:	428b      	cmp	r3, r1
 800da62:	bf04      	itt	eq
 800da64:	6819      	ldreq	r1, [r3, #0]
 800da66:	685b      	ldreq	r3, [r3, #4]
 800da68:	6063      	str	r3, [r4, #4]
 800da6a:	bf04      	itt	eq
 800da6c:	1949      	addeq	r1, r1, r5
 800da6e:	6021      	streq	r1, [r4, #0]
 800da70:	6054      	str	r4, [r2, #4]
 800da72:	e7ca      	b.n	800da0a <_free_r+0x26>
 800da74:	b003      	add	sp, #12
 800da76:	bd30      	pop	{r4, r5, pc}
 800da78:	200051a0 	.word	0x200051a0

0800da7c <malloc>:
 800da7c:	4b02      	ldr	r3, [pc, #8]	; (800da88 <malloc+0xc>)
 800da7e:	4601      	mov	r1, r0
 800da80:	6818      	ldr	r0, [r3, #0]
 800da82:	f000 b823 	b.w	800dacc <_malloc_r>
 800da86:	bf00      	nop
 800da88:	2000006c 	.word	0x2000006c

0800da8c <sbrk_aligned>:
 800da8c:	b570      	push	{r4, r5, r6, lr}
 800da8e:	4e0e      	ldr	r6, [pc, #56]	; (800dac8 <sbrk_aligned+0x3c>)
 800da90:	460c      	mov	r4, r1
 800da92:	6831      	ldr	r1, [r6, #0]
 800da94:	4605      	mov	r5, r0
 800da96:	b911      	cbnz	r1, 800da9e <sbrk_aligned+0x12>
 800da98:	f000 fe40 	bl	800e71c <_sbrk_r>
 800da9c:	6030      	str	r0, [r6, #0]
 800da9e:	4621      	mov	r1, r4
 800daa0:	4628      	mov	r0, r5
 800daa2:	f000 fe3b 	bl	800e71c <_sbrk_r>
 800daa6:	1c43      	adds	r3, r0, #1
 800daa8:	d00a      	beq.n	800dac0 <sbrk_aligned+0x34>
 800daaa:	1cc4      	adds	r4, r0, #3
 800daac:	f024 0403 	bic.w	r4, r4, #3
 800dab0:	42a0      	cmp	r0, r4
 800dab2:	d007      	beq.n	800dac4 <sbrk_aligned+0x38>
 800dab4:	1a21      	subs	r1, r4, r0
 800dab6:	4628      	mov	r0, r5
 800dab8:	f000 fe30 	bl	800e71c <_sbrk_r>
 800dabc:	3001      	adds	r0, #1
 800dabe:	d101      	bne.n	800dac4 <sbrk_aligned+0x38>
 800dac0:	f04f 34ff 	mov.w	r4, #4294967295
 800dac4:	4620      	mov	r0, r4
 800dac6:	bd70      	pop	{r4, r5, r6, pc}
 800dac8:	200051a4 	.word	0x200051a4

0800dacc <_malloc_r>:
 800dacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dad0:	1ccd      	adds	r5, r1, #3
 800dad2:	f025 0503 	bic.w	r5, r5, #3
 800dad6:	3508      	adds	r5, #8
 800dad8:	2d0c      	cmp	r5, #12
 800dada:	bf38      	it	cc
 800dadc:	250c      	movcc	r5, #12
 800dade:	2d00      	cmp	r5, #0
 800dae0:	4607      	mov	r7, r0
 800dae2:	db01      	blt.n	800dae8 <_malloc_r+0x1c>
 800dae4:	42a9      	cmp	r1, r5
 800dae6:	d905      	bls.n	800daf4 <_malloc_r+0x28>
 800dae8:	230c      	movs	r3, #12
 800daea:	603b      	str	r3, [r7, #0]
 800daec:	2600      	movs	r6, #0
 800daee:	4630      	mov	r0, r6
 800daf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dbc8 <_malloc_r+0xfc>
 800daf8:	f000 f868 	bl	800dbcc <__malloc_lock>
 800dafc:	f8d8 3000 	ldr.w	r3, [r8]
 800db00:	461c      	mov	r4, r3
 800db02:	bb5c      	cbnz	r4, 800db5c <_malloc_r+0x90>
 800db04:	4629      	mov	r1, r5
 800db06:	4638      	mov	r0, r7
 800db08:	f7ff ffc0 	bl	800da8c <sbrk_aligned>
 800db0c:	1c43      	adds	r3, r0, #1
 800db0e:	4604      	mov	r4, r0
 800db10:	d155      	bne.n	800dbbe <_malloc_r+0xf2>
 800db12:	f8d8 4000 	ldr.w	r4, [r8]
 800db16:	4626      	mov	r6, r4
 800db18:	2e00      	cmp	r6, #0
 800db1a:	d145      	bne.n	800dba8 <_malloc_r+0xdc>
 800db1c:	2c00      	cmp	r4, #0
 800db1e:	d048      	beq.n	800dbb2 <_malloc_r+0xe6>
 800db20:	6823      	ldr	r3, [r4, #0]
 800db22:	4631      	mov	r1, r6
 800db24:	4638      	mov	r0, r7
 800db26:	eb04 0903 	add.w	r9, r4, r3
 800db2a:	f000 fdf7 	bl	800e71c <_sbrk_r>
 800db2e:	4581      	cmp	r9, r0
 800db30:	d13f      	bne.n	800dbb2 <_malloc_r+0xe6>
 800db32:	6821      	ldr	r1, [r4, #0]
 800db34:	1a6d      	subs	r5, r5, r1
 800db36:	4629      	mov	r1, r5
 800db38:	4638      	mov	r0, r7
 800db3a:	f7ff ffa7 	bl	800da8c <sbrk_aligned>
 800db3e:	3001      	adds	r0, #1
 800db40:	d037      	beq.n	800dbb2 <_malloc_r+0xe6>
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	442b      	add	r3, r5
 800db46:	6023      	str	r3, [r4, #0]
 800db48:	f8d8 3000 	ldr.w	r3, [r8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d038      	beq.n	800dbc2 <_malloc_r+0xf6>
 800db50:	685a      	ldr	r2, [r3, #4]
 800db52:	42a2      	cmp	r2, r4
 800db54:	d12b      	bne.n	800dbae <_malloc_r+0xe2>
 800db56:	2200      	movs	r2, #0
 800db58:	605a      	str	r2, [r3, #4]
 800db5a:	e00f      	b.n	800db7c <_malloc_r+0xb0>
 800db5c:	6822      	ldr	r2, [r4, #0]
 800db5e:	1b52      	subs	r2, r2, r5
 800db60:	d41f      	bmi.n	800dba2 <_malloc_r+0xd6>
 800db62:	2a0b      	cmp	r2, #11
 800db64:	d917      	bls.n	800db96 <_malloc_r+0xca>
 800db66:	1961      	adds	r1, r4, r5
 800db68:	42a3      	cmp	r3, r4
 800db6a:	6025      	str	r5, [r4, #0]
 800db6c:	bf18      	it	ne
 800db6e:	6059      	strne	r1, [r3, #4]
 800db70:	6863      	ldr	r3, [r4, #4]
 800db72:	bf08      	it	eq
 800db74:	f8c8 1000 	streq.w	r1, [r8]
 800db78:	5162      	str	r2, [r4, r5]
 800db7a:	604b      	str	r3, [r1, #4]
 800db7c:	4638      	mov	r0, r7
 800db7e:	f104 060b 	add.w	r6, r4, #11
 800db82:	f000 f829 	bl	800dbd8 <__malloc_unlock>
 800db86:	f026 0607 	bic.w	r6, r6, #7
 800db8a:	1d23      	adds	r3, r4, #4
 800db8c:	1af2      	subs	r2, r6, r3
 800db8e:	d0ae      	beq.n	800daee <_malloc_r+0x22>
 800db90:	1b9b      	subs	r3, r3, r6
 800db92:	50a3      	str	r3, [r4, r2]
 800db94:	e7ab      	b.n	800daee <_malloc_r+0x22>
 800db96:	42a3      	cmp	r3, r4
 800db98:	6862      	ldr	r2, [r4, #4]
 800db9a:	d1dd      	bne.n	800db58 <_malloc_r+0x8c>
 800db9c:	f8c8 2000 	str.w	r2, [r8]
 800dba0:	e7ec      	b.n	800db7c <_malloc_r+0xb0>
 800dba2:	4623      	mov	r3, r4
 800dba4:	6864      	ldr	r4, [r4, #4]
 800dba6:	e7ac      	b.n	800db02 <_malloc_r+0x36>
 800dba8:	4634      	mov	r4, r6
 800dbaa:	6876      	ldr	r6, [r6, #4]
 800dbac:	e7b4      	b.n	800db18 <_malloc_r+0x4c>
 800dbae:	4613      	mov	r3, r2
 800dbb0:	e7cc      	b.n	800db4c <_malloc_r+0x80>
 800dbb2:	230c      	movs	r3, #12
 800dbb4:	603b      	str	r3, [r7, #0]
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	f000 f80e 	bl	800dbd8 <__malloc_unlock>
 800dbbc:	e797      	b.n	800daee <_malloc_r+0x22>
 800dbbe:	6025      	str	r5, [r4, #0]
 800dbc0:	e7dc      	b.n	800db7c <_malloc_r+0xb0>
 800dbc2:	605b      	str	r3, [r3, #4]
 800dbc4:	deff      	udf	#255	; 0xff
 800dbc6:	bf00      	nop
 800dbc8:	200051a0 	.word	0x200051a0

0800dbcc <__malloc_lock>:
 800dbcc:	4801      	ldr	r0, [pc, #4]	; (800dbd4 <__malloc_lock+0x8>)
 800dbce:	f7ff b874 	b.w	800ccba <__retarget_lock_acquire_recursive>
 800dbd2:	bf00      	nop
 800dbd4:	2000519c 	.word	0x2000519c

0800dbd8 <__malloc_unlock>:
 800dbd8:	4801      	ldr	r0, [pc, #4]	; (800dbe0 <__malloc_unlock+0x8>)
 800dbda:	f7ff b86f 	b.w	800ccbc <__retarget_lock_release_recursive>
 800dbde:	bf00      	nop
 800dbe0:	2000519c 	.word	0x2000519c

0800dbe4 <_Balloc>:
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	69c6      	ldr	r6, [r0, #28]
 800dbe8:	4604      	mov	r4, r0
 800dbea:	460d      	mov	r5, r1
 800dbec:	b976      	cbnz	r6, 800dc0c <_Balloc+0x28>
 800dbee:	2010      	movs	r0, #16
 800dbf0:	f7ff ff44 	bl	800da7c <malloc>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	61e0      	str	r0, [r4, #28]
 800dbf8:	b920      	cbnz	r0, 800dc04 <_Balloc+0x20>
 800dbfa:	4b18      	ldr	r3, [pc, #96]	; (800dc5c <_Balloc+0x78>)
 800dbfc:	4818      	ldr	r0, [pc, #96]	; (800dc60 <_Balloc+0x7c>)
 800dbfe:	216b      	movs	r1, #107	; 0x6b
 800dc00:	f000 fd9c 	bl	800e73c <__assert_func>
 800dc04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc08:	6006      	str	r6, [r0, #0]
 800dc0a:	60c6      	str	r6, [r0, #12]
 800dc0c:	69e6      	ldr	r6, [r4, #28]
 800dc0e:	68f3      	ldr	r3, [r6, #12]
 800dc10:	b183      	cbz	r3, 800dc34 <_Balloc+0x50>
 800dc12:	69e3      	ldr	r3, [r4, #28]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc1a:	b9b8      	cbnz	r0, 800dc4c <_Balloc+0x68>
 800dc1c:	2101      	movs	r1, #1
 800dc1e:	fa01 f605 	lsl.w	r6, r1, r5
 800dc22:	1d72      	adds	r2, r6, #5
 800dc24:	0092      	lsls	r2, r2, #2
 800dc26:	4620      	mov	r0, r4
 800dc28:	f000 fda6 	bl	800e778 <_calloc_r>
 800dc2c:	b160      	cbz	r0, 800dc48 <_Balloc+0x64>
 800dc2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc32:	e00e      	b.n	800dc52 <_Balloc+0x6e>
 800dc34:	2221      	movs	r2, #33	; 0x21
 800dc36:	2104      	movs	r1, #4
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f000 fd9d 	bl	800e778 <_calloc_r>
 800dc3e:	69e3      	ldr	r3, [r4, #28]
 800dc40:	60f0      	str	r0, [r6, #12]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1e4      	bne.n	800dc12 <_Balloc+0x2e>
 800dc48:	2000      	movs	r0, #0
 800dc4a:	bd70      	pop	{r4, r5, r6, pc}
 800dc4c:	6802      	ldr	r2, [r0, #0]
 800dc4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc52:	2300      	movs	r3, #0
 800dc54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc58:	e7f7      	b.n	800dc4a <_Balloc+0x66>
 800dc5a:	bf00      	nop
 800dc5c:	08011309 	.word	0x08011309
 800dc60:	08011389 	.word	0x08011389

0800dc64 <_Bfree>:
 800dc64:	b570      	push	{r4, r5, r6, lr}
 800dc66:	69c6      	ldr	r6, [r0, #28]
 800dc68:	4605      	mov	r5, r0
 800dc6a:	460c      	mov	r4, r1
 800dc6c:	b976      	cbnz	r6, 800dc8c <_Bfree+0x28>
 800dc6e:	2010      	movs	r0, #16
 800dc70:	f7ff ff04 	bl	800da7c <malloc>
 800dc74:	4602      	mov	r2, r0
 800dc76:	61e8      	str	r0, [r5, #28]
 800dc78:	b920      	cbnz	r0, 800dc84 <_Bfree+0x20>
 800dc7a:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <_Bfree+0x3c>)
 800dc7c:	4809      	ldr	r0, [pc, #36]	; (800dca4 <_Bfree+0x40>)
 800dc7e:	218f      	movs	r1, #143	; 0x8f
 800dc80:	f000 fd5c 	bl	800e73c <__assert_func>
 800dc84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc88:	6006      	str	r6, [r0, #0]
 800dc8a:	60c6      	str	r6, [r0, #12]
 800dc8c:	b13c      	cbz	r4, 800dc9e <_Bfree+0x3a>
 800dc8e:	69eb      	ldr	r3, [r5, #28]
 800dc90:	6862      	ldr	r2, [r4, #4]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc98:	6021      	str	r1, [r4, #0]
 800dc9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc9e:	bd70      	pop	{r4, r5, r6, pc}
 800dca0:	08011309 	.word	0x08011309
 800dca4:	08011389 	.word	0x08011389

0800dca8 <__multadd>:
 800dca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcac:	690d      	ldr	r5, [r1, #16]
 800dcae:	4607      	mov	r7, r0
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	461e      	mov	r6, r3
 800dcb4:	f101 0c14 	add.w	ip, r1, #20
 800dcb8:	2000      	movs	r0, #0
 800dcba:	f8dc 3000 	ldr.w	r3, [ip]
 800dcbe:	b299      	uxth	r1, r3
 800dcc0:	fb02 6101 	mla	r1, r2, r1, r6
 800dcc4:	0c1e      	lsrs	r6, r3, #16
 800dcc6:	0c0b      	lsrs	r3, r1, #16
 800dcc8:	fb02 3306 	mla	r3, r2, r6, r3
 800dccc:	b289      	uxth	r1, r1
 800dcce:	3001      	adds	r0, #1
 800dcd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dcd4:	4285      	cmp	r5, r0
 800dcd6:	f84c 1b04 	str.w	r1, [ip], #4
 800dcda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dcde:	dcec      	bgt.n	800dcba <__multadd+0x12>
 800dce0:	b30e      	cbz	r6, 800dd26 <__multadd+0x7e>
 800dce2:	68a3      	ldr	r3, [r4, #8]
 800dce4:	42ab      	cmp	r3, r5
 800dce6:	dc19      	bgt.n	800dd1c <__multadd+0x74>
 800dce8:	6861      	ldr	r1, [r4, #4]
 800dcea:	4638      	mov	r0, r7
 800dcec:	3101      	adds	r1, #1
 800dcee:	f7ff ff79 	bl	800dbe4 <_Balloc>
 800dcf2:	4680      	mov	r8, r0
 800dcf4:	b928      	cbnz	r0, 800dd02 <__multadd+0x5a>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	4b0c      	ldr	r3, [pc, #48]	; (800dd2c <__multadd+0x84>)
 800dcfa:	480d      	ldr	r0, [pc, #52]	; (800dd30 <__multadd+0x88>)
 800dcfc:	21ba      	movs	r1, #186	; 0xba
 800dcfe:	f000 fd1d 	bl	800e73c <__assert_func>
 800dd02:	6922      	ldr	r2, [r4, #16]
 800dd04:	3202      	adds	r2, #2
 800dd06:	f104 010c 	add.w	r1, r4, #12
 800dd0a:	0092      	lsls	r2, r2, #2
 800dd0c:	300c      	adds	r0, #12
 800dd0e:	f7fe ffde 	bl	800ccce <memcpy>
 800dd12:	4621      	mov	r1, r4
 800dd14:	4638      	mov	r0, r7
 800dd16:	f7ff ffa5 	bl	800dc64 <_Bfree>
 800dd1a:	4644      	mov	r4, r8
 800dd1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd20:	3501      	adds	r5, #1
 800dd22:	615e      	str	r6, [r3, #20]
 800dd24:	6125      	str	r5, [r4, #16]
 800dd26:	4620      	mov	r0, r4
 800dd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd2c:	08011378 	.word	0x08011378
 800dd30:	08011389 	.word	0x08011389

0800dd34 <__hi0bits>:
 800dd34:	0c03      	lsrs	r3, r0, #16
 800dd36:	041b      	lsls	r3, r3, #16
 800dd38:	b9d3      	cbnz	r3, 800dd70 <__hi0bits+0x3c>
 800dd3a:	0400      	lsls	r0, r0, #16
 800dd3c:	2310      	movs	r3, #16
 800dd3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dd42:	bf04      	itt	eq
 800dd44:	0200      	lsleq	r0, r0, #8
 800dd46:	3308      	addeq	r3, #8
 800dd48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dd4c:	bf04      	itt	eq
 800dd4e:	0100      	lsleq	r0, r0, #4
 800dd50:	3304      	addeq	r3, #4
 800dd52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dd56:	bf04      	itt	eq
 800dd58:	0080      	lsleq	r0, r0, #2
 800dd5a:	3302      	addeq	r3, #2
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	db05      	blt.n	800dd6c <__hi0bits+0x38>
 800dd60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dd64:	f103 0301 	add.w	r3, r3, #1
 800dd68:	bf08      	it	eq
 800dd6a:	2320      	moveq	r3, #32
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	4770      	bx	lr
 800dd70:	2300      	movs	r3, #0
 800dd72:	e7e4      	b.n	800dd3e <__hi0bits+0xa>

0800dd74 <__lo0bits>:
 800dd74:	6803      	ldr	r3, [r0, #0]
 800dd76:	f013 0207 	ands.w	r2, r3, #7
 800dd7a:	d00c      	beq.n	800dd96 <__lo0bits+0x22>
 800dd7c:	07d9      	lsls	r1, r3, #31
 800dd7e:	d422      	bmi.n	800ddc6 <__lo0bits+0x52>
 800dd80:	079a      	lsls	r2, r3, #30
 800dd82:	bf49      	itett	mi
 800dd84:	085b      	lsrmi	r3, r3, #1
 800dd86:	089b      	lsrpl	r3, r3, #2
 800dd88:	6003      	strmi	r3, [r0, #0]
 800dd8a:	2201      	movmi	r2, #1
 800dd8c:	bf5c      	itt	pl
 800dd8e:	6003      	strpl	r3, [r0, #0]
 800dd90:	2202      	movpl	r2, #2
 800dd92:	4610      	mov	r0, r2
 800dd94:	4770      	bx	lr
 800dd96:	b299      	uxth	r1, r3
 800dd98:	b909      	cbnz	r1, 800dd9e <__lo0bits+0x2a>
 800dd9a:	0c1b      	lsrs	r3, r3, #16
 800dd9c:	2210      	movs	r2, #16
 800dd9e:	b2d9      	uxtb	r1, r3
 800dda0:	b909      	cbnz	r1, 800dda6 <__lo0bits+0x32>
 800dda2:	3208      	adds	r2, #8
 800dda4:	0a1b      	lsrs	r3, r3, #8
 800dda6:	0719      	lsls	r1, r3, #28
 800dda8:	bf04      	itt	eq
 800ddaa:	091b      	lsreq	r3, r3, #4
 800ddac:	3204      	addeq	r2, #4
 800ddae:	0799      	lsls	r1, r3, #30
 800ddb0:	bf04      	itt	eq
 800ddb2:	089b      	lsreq	r3, r3, #2
 800ddb4:	3202      	addeq	r2, #2
 800ddb6:	07d9      	lsls	r1, r3, #31
 800ddb8:	d403      	bmi.n	800ddc2 <__lo0bits+0x4e>
 800ddba:	085b      	lsrs	r3, r3, #1
 800ddbc:	f102 0201 	add.w	r2, r2, #1
 800ddc0:	d003      	beq.n	800ddca <__lo0bits+0x56>
 800ddc2:	6003      	str	r3, [r0, #0]
 800ddc4:	e7e5      	b.n	800dd92 <__lo0bits+0x1e>
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	e7e3      	b.n	800dd92 <__lo0bits+0x1e>
 800ddca:	2220      	movs	r2, #32
 800ddcc:	e7e1      	b.n	800dd92 <__lo0bits+0x1e>
	...

0800ddd0 <__i2b>:
 800ddd0:	b510      	push	{r4, lr}
 800ddd2:	460c      	mov	r4, r1
 800ddd4:	2101      	movs	r1, #1
 800ddd6:	f7ff ff05 	bl	800dbe4 <_Balloc>
 800ddda:	4602      	mov	r2, r0
 800dddc:	b928      	cbnz	r0, 800ddea <__i2b+0x1a>
 800ddde:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <__i2b+0x24>)
 800dde0:	4805      	ldr	r0, [pc, #20]	; (800ddf8 <__i2b+0x28>)
 800dde2:	f240 1145 	movw	r1, #325	; 0x145
 800dde6:	f000 fca9 	bl	800e73c <__assert_func>
 800ddea:	2301      	movs	r3, #1
 800ddec:	6144      	str	r4, [r0, #20]
 800ddee:	6103      	str	r3, [r0, #16]
 800ddf0:	bd10      	pop	{r4, pc}
 800ddf2:	bf00      	nop
 800ddf4:	08011378 	.word	0x08011378
 800ddf8:	08011389 	.word	0x08011389

0800ddfc <__multiply>:
 800ddfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de00:	4691      	mov	r9, r2
 800de02:	690a      	ldr	r2, [r1, #16]
 800de04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de08:	429a      	cmp	r2, r3
 800de0a:	bfb8      	it	lt
 800de0c:	460b      	movlt	r3, r1
 800de0e:	460c      	mov	r4, r1
 800de10:	bfbc      	itt	lt
 800de12:	464c      	movlt	r4, r9
 800de14:	4699      	movlt	r9, r3
 800de16:	6927      	ldr	r7, [r4, #16]
 800de18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de1c:	68a3      	ldr	r3, [r4, #8]
 800de1e:	6861      	ldr	r1, [r4, #4]
 800de20:	eb07 060a 	add.w	r6, r7, sl
 800de24:	42b3      	cmp	r3, r6
 800de26:	b085      	sub	sp, #20
 800de28:	bfb8      	it	lt
 800de2a:	3101      	addlt	r1, #1
 800de2c:	f7ff feda 	bl	800dbe4 <_Balloc>
 800de30:	b930      	cbnz	r0, 800de40 <__multiply+0x44>
 800de32:	4602      	mov	r2, r0
 800de34:	4b44      	ldr	r3, [pc, #272]	; (800df48 <__multiply+0x14c>)
 800de36:	4845      	ldr	r0, [pc, #276]	; (800df4c <__multiply+0x150>)
 800de38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800de3c:	f000 fc7e 	bl	800e73c <__assert_func>
 800de40:	f100 0514 	add.w	r5, r0, #20
 800de44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de48:	462b      	mov	r3, r5
 800de4a:	2200      	movs	r2, #0
 800de4c:	4543      	cmp	r3, r8
 800de4e:	d321      	bcc.n	800de94 <__multiply+0x98>
 800de50:	f104 0314 	add.w	r3, r4, #20
 800de54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800de58:	f109 0314 	add.w	r3, r9, #20
 800de5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800de60:	9202      	str	r2, [sp, #8]
 800de62:	1b3a      	subs	r2, r7, r4
 800de64:	3a15      	subs	r2, #21
 800de66:	f022 0203 	bic.w	r2, r2, #3
 800de6a:	3204      	adds	r2, #4
 800de6c:	f104 0115 	add.w	r1, r4, #21
 800de70:	428f      	cmp	r7, r1
 800de72:	bf38      	it	cc
 800de74:	2204      	movcc	r2, #4
 800de76:	9201      	str	r2, [sp, #4]
 800de78:	9a02      	ldr	r2, [sp, #8]
 800de7a:	9303      	str	r3, [sp, #12]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d80c      	bhi.n	800de9a <__multiply+0x9e>
 800de80:	2e00      	cmp	r6, #0
 800de82:	dd03      	ble.n	800de8c <__multiply+0x90>
 800de84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d05b      	beq.n	800df44 <__multiply+0x148>
 800de8c:	6106      	str	r6, [r0, #16]
 800de8e:	b005      	add	sp, #20
 800de90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de94:	f843 2b04 	str.w	r2, [r3], #4
 800de98:	e7d8      	b.n	800de4c <__multiply+0x50>
 800de9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800de9e:	f1ba 0f00 	cmp.w	sl, #0
 800dea2:	d024      	beq.n	800deee <__multiply+0xf2>
 800dea4:	f104 0e14 	add.w	lr, r4, #20
 800dea8:	46a9      	mov	r9, r5
 800deaa:	f04f 0c00 	mov.w	ip, #0
 800deae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800deb2:	f8d9 1000 	ldr.w	r1, [r9]
 800deb6:	fa1f fb82 	uxth.w	fp, r2
 800deba:	b289      	uxth	r1, r1
 800debc:	fb0a 110b 	mla	r1, sl, fp, r1
 800dec0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dec4:	f8d9 2000 	ldr.w	r2, [r9]
 800dec8:	4461      	add	r1, ip
 800deca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dece:	fb0a c20b 	mla	r2, sl, fp, ip
 800ded2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ded6:	b289      	uxth	r1, r1
 800ded8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dedc:	4577      	cmp	r7, lr
 800dede:	f849 1b04 	str.w	r1, [r9], #4
 800dee2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dee6:	d8e2      	bhi.n	800deae <__multiply+0xb2>
 800dee8:	9a01      	ldr	r2, [sp, #4]
 800deea:	f845 c002 	str.w	ip, [r5, r2]
 800deee:	9a03      	ldr	r2, [sp, #12]
 800def0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800def4:	3304      	adds	r3, #4
 800def6:	f1b9 0f00 	cmp.w	r9, #0
 800defa:	d021      	beq.n	800df40 <__multiply+0x144>
 800defc:	6829      	ldr	r1, [r5, #0]
 800defe:	f104 0c14 	add.w	ip, r4, #20
 800df02:	46ae      	mov	lr, r5
 800df04:	f04f 0a00 	mov.w	sl, #0
 800df08:	f8bc b000 	ldrh.w	fp, [ip]
 800df0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df10:	fb09 220b 	mla	r2, r9, fp, r2
 800df14:	4452      	add	r2, sl
 800df16:	b289      	uxth	r1, r1
 800df18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df1c:	f84e 1b04 	str.w	r1, [lr], #4
 800df20:	f85c 1b04 	ldr.w	r1, [ip], #4
 800df24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df28:	f8be 1000 	ldrh.w	r1, [lr]
 800df2c:	fb09 110a 	mla	r1, r9, sl, r1
 800df30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800df34:	4567      	cmp	r7, ip
 800df36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df3a:	d8e5      	bhi.n	800df08 <__multiply+0x10c>
 800df3c:	9a01      	ldr	r2, [sp, #4]
 800df3e:	50a9      	str	r1, [r5, r2]
 800df40:	3504      	adds	r5, #4
 800df42:	e799      	b.n	800de78 <__multiply+0x7c>
 800df44:	3e01      	subs	r6, #1
 800df46:	e79b      	b.n	800de80 <__multiply+0x84>
 800df48:	08011378 	.word	0x08011378
 800df4c:	08011389 	.word	0x08011389

0800df50 <__pow5mult>:
 800df50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df54:	4615      	mov	r5, r2
 800df56:	f012 0203 	ands.w	r2, r2, #3
 800df5a:	4606      	mov	r6, r0
 800df5c:	460f      	mov	r7, r1
 800df5e:	d007      	beq.n	800df70 <__pow5mult+0x20>
 800df60:	4c25      	ldr	r4, [pc, #148]	; (800dff8 <__pow5mult+0xa8>)
 800df62:	3a01      	subs	r2, #1
 800df64:	2300      	movs	r3, #0
 800df66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df6a:	f7ff fe9d 	bl	800dca8 <__multadd>
 800df6e:	4607      	mov	r7, r0
 800df70:	10ad      	asrs	r5, r5, #2
 800df72:	d03d      	beq.n	800dff0 <__pow5mult+0xa0>
 800df74:	69f4      	ldr	r4, [r6, #28]
 800df76:	b97c      	cbnz	r4, 800df98 <__pow5mult+0x48>
 800df78:	2010      	movs	r0, #16
 800df7a:	f7ff fd7f 	bl	800da7c <malloc>
 800df7e:	4602      	mov	r2, r0
 800df80:	61f0      	str	r0, [r6, #28]
 800df82:	b928      	cbnz	r0, 800df90 <__pow5mult+0x40>
 800df84:	4b1d      	ldr	r3, [pc, #116]	; (800dffc <__pow5mult+0xac>)
 800df86:	481e      	ldr	r0, [pc, #120]	; (800e000 <__pow5mult+0xb0>)
 800df88:	f240 11b3 	movw	r1, #435	; 0x1b3
 800df8c:	f000 fbd6 	bl	800e73c <__assert_func>
 800df90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df94:	6004      	str	r4, [r0, #0]
 800df96:	60c4      	str	r4, [r0, #12]
 800df98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800df9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dfa0:	b94c      	cbnz	r4, 800dfb6 <__pow5mult+0x66>
 800dfa2:	f240 2171 	movw	r1, #625	; 0x271
 800dfa6:	4630      	mov	r0, r6
 800dfa8:	f7ff ff12 	bl	800ddd0 <__i2b>
 800dfac:	2300      	movs	r3, #0
 800dfae:	f8c8 0008 	str.w	r0, [r8, #8]
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	6003      	str	r3, [r0, #0]
 800dfb6:	f04f 0900 	mov.w	r9, #0
 800dfba:	07eb      	lsls	r3, r5, #31
 800dfbc:	d50a      	bpl.n	800dfd4 <__pow5mult+0x84>
 800dfbe:	4639      	mov	r1, r7
 800dfc0:	4622      	mov	r2, r4
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f7ff ff1a 	bl	800ddfc <__multiply>
 800dfc8:	4639      	mov	r1, r7
 800dfca:	4680      	mov	r8, r0
 800dfcc:	4630      	mov	r0, r6
 800dfce:	f7ff fe49 	bl	800dc64 <_Bfree>
 800dfd2:	4647      	mov	r7, r8
 800dfd4:	106d      	asrs	r5, r5, #1
 800dfd6:	d00b      	beq.n	800dff0 <__pow5mult+0xa0>
 800dfd8:	6820      	ldr	r0, [r4, #0]
 800dfda:	b938      	cbnz	r0, 800dfec <__pow5mult+0x9c>
 800dfdc:	4622      	mov	r2, r4
 800dfde:	4621      	mov	r1, r4
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	f7ff ff0b 	bl	800ddfc <__multiply>
 800dfe6:	6020      	str	r0, [r4, #0]
 800dfe8:	f8c0 9000 	str.w	r9, [r0]
 800dfec:	4604      	mov	r4, r0
 800dfee:	e7e4      	b.n	800dfba <__pow5mult+0x6a>
 800dff0:	4638      	mov	r0, r7
 800dff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dff6:	bf00      	nop
 800dff8:	080114d8 	.word	0x080114d8
 800dffc:	08011309 	.word	0x08011309
 800e000:	08011389 	.word	0x08011389

0800e004 <__lshift>:
 800e004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e008:	460c      	mov	r4, r1
 800e00a:	6849      	ldr	r1, [r1, #4]
 800e00c:	6923      	ldr	r3, [r4, #16]
 800e00e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e012:	68a3      	ldr	r3, [r4, #8]
 800e014:	4607      	mov	r7, r0
 800e016:	4691      	mov	r9, r2
 800e018:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e01c:	f108 0601 	add.w	r6, r8, #1
 800e020:	42b3      	cmp	r3, r6
 800e022:	db0b      	blt.n	800e03c <__lshift+0x38>
 800e024:	4638      	mov	r0, r7
 800e026:	f7ff fddd 	bl	800dbe4 <_Balloc>
 800e02a:	4605      	mov	r5, r0
 800e02c:	b948      	cbnz	r0, 800e042 <__lshift+0x3e>
 800e02e:	4602      	mov	r2, r0
 800e030:	4b28      	ldr	r3, [pc, #160]	; (800e0d4 <__lshift+0xd0>)
 800e032:	4829      	ldr	r0, [pc, #164]	; (800e0d8 <__lshift+0xd4>)
 800e034:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e038:	f000 fb80 	bl	800e73c <__assert_func>
 800e03c:	3101      	adds	r1, #1
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	e7ee      	b.n	800e020 <__lshift+0x1c>
 800e042:	2300      	movs	r3, #0
 800e044:	f100 0114 	add.w	r1, r0, #20
 800e048:	f100 0210 	add.w	r2, r0, #16
 800e04c:	4618      	mov	r0, r3
 800e04e:	4553      	cmp	r3, sl
 800e050:	db33      	blt.n	800e0ba <__lshift+0xb6>
 800e052:	6920      	ldr	r0, [r4, #16]
 800e054:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e058:	f104 0314 	add.w	r3, r4, #20
 800e05c:	f019 091f 	ands.w	r9, r9, #31
 800e060:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e064:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e068:	d02b      	beq.n	800e0c2 <__lshift+0xbe>
 800e06a:	f1c9 0e20 	rsb	lr, r9, #32
 800e06e:	468a      	mov	sl, r1
 800e070:	2200      	movs	r2, #0
 800e072:	6818      	ldr	r0, [r3, #0]
 800e074:	fa00 f009 	lsl.w	r0, r0, r9
 800e078:	4310      	orrs	r0, r2
 800e07a:	f84a 0b04 	str.w	r0, [sl], #4
 800e07e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e082:	459c      	cmp	ip, r3
 800e084:	fa22 f20e 	lsr.w	r2, r2, lr
 800e088:	d8f3      	bhi.n	800e072 <__lshift+0x6e>
 800e08a:	ebac 0304 	sub.w	r3, ip, r4
 800e08e:	3b15      	subs	r3, #21
 800e090:	f023 0303 	bic.w	r3, r3, #3
 800e094:	3304      	adds	r3, #4
 800e096:	f104 0015 	add.w	r0, r4, #21
 800e09a:	4584      	cmp	ip, r0
 800e09c:	bf38      	it	cc
 800e09e:	2304      	movcc	r3, #4
 800e0a0:	50ca      	str	r2, [r1, r3]
 800e0a2:	b10a      	cbz	r2, 800e0a8 <__lshift+0xa4>
 800e0a4:	f108 0602 	add.w	r6, r8, #2
 800e0a8:	3e01      	subs	r6, #1
 800e0aa:	4638      	mov	r0, r7
 800e0ac:	612e      	str	r6, [r5, #16]
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	f7ff fdd8 	bl	800dc64 <_Bfree>
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0be:	3301      	adds	r3, #1
 800e0c0:	e7c5      	b.n	800e04e <__lshift+0x4a>
 800e0c2:	3904      	subs	r1, #4
 800e0c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e0cc:	459c      	cmp	ip, r3
 800e0ce:	d8f9      	bhi.n	800e0c4 <__lshift+0xc0>
 800e0d0:	e7ea      	b.n	800e0a8 <__lshift+0xa4>
 800e0d2:	bf00      	nop
 800e0d4:	08011378 	.word	0x08011378
 800e0d8:	08011389 	.word	0x08011389

0800e0dc <__mcmp>:
 800e0dc:	b530      	push	{r4, r5, lr}
 800e0de:	6902      	ldr	r2, [r0, #16]
 800e0e0:	690c      	ldr	r4, [r1, #16]
 800e0e2:	1b12      	subs	r2, r2, r4
 800e0e4:	d10e      	bne.n	800e104 <__mcmp+0x28>
 800e0e6:	f100 0314 	add.w	r3, r0, #20
 800e0ea:	3114      	adds	r1, #20
 800e0ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e0f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e0f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e0f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e0fc:	42a5      	cmp	r5, r4
 800e0fe:	d003      	beq.n	800e108 <__mcmp+0x2c>
 800e100:	d305      	bcc.n	800e10e <__mcmp+0x32>
 800e102:	2201      	movs	r2, #1
 800e104:	4610      	mov	r0, r2
 800e106:	bd30      	pop	{r4, r5, pc}
 800e108:	4283      	cmp	r3, r0
 800e10a:	d3f3      	bcc.n	800e0f4 <__mcmp+0x18>
 800e10c:	e7fa      	b.n	800e104 <__mcmp+0x28>
 800e10e:	f04f 32ff 	mov.w	r2, #4294967295
 800e112:	e7f7      	b.n	800e104 <__mcmp+0x28>

0800e114 <__mdiff>:
 800e114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e118:	460c      	mov	r4, r1
 800e11a:	4606      	mov	r6, r0
 800e11c:	4611      	mov	r1, r2
 800e11e:	4620      	mov	r0, r4
 800e120:	4690      	mov	r8, r2
 800e122:	f7ff ffdb 	bl	800e0dc <__mcmp>
 800e126:	1e05      	subs	r5, r0, #0
 800e128:	d110      	bne.n	800e14c <__mdiff+0x38>
 800e12a:	4629      	mov	r1, r5
 800e12c:	4630      	mov	r0, r6
 800e12e:	f7ff fd59 	bl	800dbe4 <_Balloc>
 800e132:	b930      	cbnz	r0, 800e142 <__mdiff+0x2e>
 800e134:	4b3a      	ldr	r3, [pc, #232]	; (800e220 <__mdiff+0x10c>)
 800e136:	4602      	mov	r2, r0
 800e138:	f240 2137 	movw	r1, #567	; 0x237
 800e13c:	4839      	ldr	r0, [pc, #228]	; (800e224 <__mdiff+0x110>)
 800e13e:	f000 fafd 	bl	800e73c <__assert_func>
 800e142:	2301      	movs	r3, #1
 800e144:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14c:	bfa4      	itt	ge
 800e14e:	4643      	movge	r3, r8
 800e150:	46a0      	movge	r8, r4
 800e152:	4630      	mov	r0, r6
 800e154:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e158:	bfa6      	itte	ge
 800e15a:	461c      	movge	r4, r3
 800e15c:	2500      	movge	r5, #0
 800e15e:	2501      	movlt	r5, #1
 800e160:	f7ff fd40 	bl	800dbe4 <_Balloc>
 800e164:	b920      	cbnz	r0, 800e170 <__mdiff+0x5c>
 800e166:	4b2e      	ldr	r3, [pc, #184]	; (800e220 <__mdiff+0x10c>)
 800e168:	4602      	mov	r2, r0
 800e16a:	f240 2145 	movw	r1, #581	; 0x245
 800e16e:	e7e5      	b.n	800e13c <__mdiff+0x28>
 800e170:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e174:	6926      	ldr	r6, [r4, #16]
 800e176:	60c5      	str	r5, [r0, #12]
 800e178:	f104 0914 	add.w	r9, r4, #20
 800e17c:	f108 0514 	add.w	r5, r8, #20
 800e180:	f100 0e14 	add.w	lr, r0, #20
 800e184:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e188:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e18c:	f108 0210 	add.w	r2, r8, #16
 800e190:	46f2      	mov	sl, lr
 800e192:	2100      	movs	r1, #0
 800e194:	f859 3b04 	ldr.w	r3, [r9], #4
 800e198:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e19c:	fa11 f88b 	uxtah	r8, r1, fp
 800e1a0:	b299      	uxth	r1, r3
 800e1a2:	0c1b      	lsrs	r3, r3, #16
 800e1a4:	eba8 0801 	sub.w	r8, r8, r1
 800e1a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e1ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e1b0:	fa1f f888 	uxth.w	r8, r8
 800e1b4:	1419      	asrs	r1, r3, #16
 800e1b6:	454e      	cmp	r6, r9
 800e1b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e1bc:	f84a 3b04 	str.w	r3, [sl], #4
 800e1c0:	d8e8      	bhi.n	800e194 <__mdiff+0x80>
 800e1c2:	1b33      	subs	r3, r6, r4
 800e1c4:	3b15      	subs	r3, #21
 800e1c6:	f023 0303 	bic.w	r3, r3, #3
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	3415      	adds	r4, #21
 800e1ce:	42a6      	cmp	r6, r4
 800e1d0:	bf38      	it	cc
 800e1d2:	2304      	movcc	r3, #4
 800e1d4:	441d      	add	r5, r3
 800e1d6:	4473      	add	r3, lr
 800e1d8:	469e      	mov	lr, r3
 800e1da:	462e      	mov	r6, r5
 800e1dc:	4566      	cmp	r6, ip
 800e1de:	d30e      	bcc.n	800e1fe <__mdiff+0xea>
 800e1e0:	f10c 0203 	add.w	r2, ip, #3
 800e1e4:	1b52      	subs	r2, r2, r5
 800e1e6:	f022 0203 	bic.w	r2, r2, #3
 800e1ea:	3d03      	subs	r5, #3
 800e1ec:	45ac      	cmp	ip, r5
 800e1ee:	bf38      	it	cc
 800e1f0:	2200      	movcc	r2, #0
 800e1f2:	4413      	add	r3, r2
 800e1f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e1f8:	b17a      	cbz	r2, 800e21a <__mdiff+0x106>
 800e1fa:	6107      	str	r7, [r0, #16]
 800e1fc:	e7a4      	b.n	800e148 <__mdiff+0x34>
 800e1fe:	f856 8b04 	ldr.w	r8, [r6], #4
 800e202:	fa11 f288 	uxtah	r2, r1, r8
 800e206:	1414      	asrs	r4, r2, #16
 800e208:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e20c:	b292      	uxth	r2, r2
 800e20e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e212:	f84e 2b04 	str.w	r2, [lr], #4
 800e216:	1421      	asrs	r1, r4, #16
 800e218:	e7e0      	b.n	800e1dc <__mdiff+0xc8>
 800e21a:	3f01      	subs	r7, #1
 800e21c:	e7ea      	b.n	800e1f4 <__mdiff+0xe0>
 800e21e:	bf00      	nop
 800e220:	08011378 	.word	0x08011378
 800e224:	08011389 	.word	0x08011389

0800e228 <__d2b>:
 800e228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e22c:	460f      	mov	r7, r1
 800e22e:	2101      	movs	r1, #1
 800e230:	ec59 8b10 	vmov	r8, r9, d0
 800e234:	4616      	mov	r6, r2
 800e236:	f7ff fcd5 	bl	800dbe4 <_Balloc>
 800e23a:	4604      	mov	r4, r0
 800e23c:	b930      	cbnz	r0, 800e24c <__d2b+0x24>
 800e23e:	4602      	mov	r2, r0
 800e240:	4b24      	ldr	r3, [pc, #144]	; (800e2d4 <__d2b+0xac>)
 800e242:	4825      	ldr	r0, [pc, #148]	; (800e2d8 <__d2b+0xb0>)
 800e244:	f240 310f 	movw	r1, #783	; 0x30f
 800e248:	f000 fa78 	bl	800e73c <__assert_func>
 800e24c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e254:	bb2d      	cbnz	r5, 800e2a2 <__d2b+0x7a>
 800e256:	9301      	str	r3, [sp, #4]
 800e258:	f1b8 0300 	subs.w	r3, r8, #0
 800e25c:	d026      	beq.n	800e2ac <__d2b+0x84>
 800e25e:	4668      	mov	r0, sp
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	f7ff fd87 	bl	800dd74 <__lo0bits>
 800e266:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e26a:	b1e8      	cbz	r0, 800e2a8 <__d2b+0x80>
 800e26c:	f1c0 0320 	rsb	r3, r0, #32
 800e270:	fa02 f303 	lsl.w	r3, r2, r3
 800e274:	430b      	orrs	r3, r1
 800e276:	40c2      	lsrs	r2, r0
 800e278:	6163      	str	r3, [r4, #20]
 800e27a:	9201      	str	r2, [sp, #4]
 800e27c:	9b01      	ldr	r3, [sp, #4]
 800e27e:	61a3      	str	r3, [r4, #24]
 800e280:	2b00      	cmp	r3, #0
 800e282:	bf14      	ite	ne
 800e284:	2202      	movne	r2, #2
 800e286:	2201      	moveq	r2, #1
 800e288:	6122      	str	r2, [r4, #16]
 800e28a:	b1bd      	cbz	r5, 800e2bc <__d2b+0x94>
 800e28c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e290:	4405      	add	r5, r0
 800e292:	603d      	str	r5, [r7, #0]
 800e294:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e298:	6030      	str	r0, [r6, #0]
 800e29a:	4620      	mov	r0, r4
 800e29c:	b003      	add	sp, #12
 800e29e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2a6:	e7d6      	b.n	800e256 <__d2b+0x2e>
 800e2a8:	6161      	str	r1, [r4, #20]
 800e2aa:	e7e7      	b.n	800e27c <__d2b+0x54>
 800e2ac:	a801      	add	r0, sp, #4
 800e2ae:	f7ff fd61 	bl	800dd74 <__lo0bits>
 800e2b2:	9b01      	ldr	r3, [sp, #4]
 800e2b4:	6163      	str	r3, [r4, #20]
 800e2b6:	3020      	adds	r0, #32
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	e7e5      	b.n	800e288 <__d2b+0x60>
 800e2bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e2c4:	6038      	str	r0, [r7, #0]
 800e2c6:	6918      	ldr	r0, [r3, #16]
 800e2c8:	f7ff fd34 	bl	800dd34 <__hi0bits>
 800e2cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2d0:	e7e2      	b.n	800e298 <__d2b+0x70>
 800e2d2:	bf00      	nop
 800e2d4:	08011378 	.word	0x08011378
 800e2d8:	08011389 	.word	0x08011389

0800e2dc <__ssputs_r>:
 800e2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e0:	688e      	ldr	r6, [r1, #8]
 800e2e2:	461f      	mov	r7, r3
 800e2e4:	42be      	cmp	r6, r7
 800e2e6:	680b      	ldr	r3, [r1, #0]
 800e2e8:	4682      	mov	sl, r0
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	4690      	mov	r8, r2
 800e2ee:	d82c      	bhi.n	800e34a <__ssputs_r+0x6e>
 800e2f0:	898a      	ldrh	r2, [r1, #12]
 800e2f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2f6:	d026      	beq.n	800e346 <__ssputs_r+0x6a>
 800e2f8:	6965      	ldr	r5, [r4, #20]
 800e2fa:	6909      	ldr	r1, [r1, #16]
 800e2fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e300:	eba3 0901 	sub.w	r9, r3, r1
 800e304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e308:	1c7b      	adds	r3, r7, #1
 800e30a:	444b      	add	r3, r9
 800e30c:	106d      	asrs	r5, r5, #1
 800e30e:	429d      	cmp	r5, r3
 800e310:	bf38      	it	cc
 800e312:	461d      	movcc	r5, r3
 800e314:	0553      	lsls	r3, r2, #21
 800e316:	d527      	bpl.n	800e368 <__ssputs_r+0x8c>
 800e318:	4629      	mov	r1, r5
 800e31a:	f7ff fbd7 	bl	800dacc <_malloc_r>
 800e31e:	4606      	mov	r6, r0
 800e320:	b360      	cbz	r0, 800e37c <__ssputs_r+0xa0>
 800e322:	6921      	ldr	r1, [r4, #16]
 800e324:	464a      	mov	r2, r9
 800e326:	f7fe fcd2 	bl	800ccce <memcpy>
 800e32a:	89a3      	ldrh	r3, [r4, #12]
 800e32c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e334:	81a3      	strh	r3, [r4, #12]
 800e336:	6126      	str	r6, [r4, #16]
 800e338:	6165      	str	r5, [r4, #20]
 800e33a:	444e      	add	r6, r9
 800e33c:	eba5 0509 	sub.w	r5, r5, r9
 800e340:	6026      	str	r6, [r4, #0]
 800e342:	60a5      	str	r5, [r4, #8]
 800e344:	463e      	mov	r6, r7
 800e346:	42be      	cmp	r6, r7
 800e348:	d900      	bls.n	800e34c <__ssputs_r+0x70>
 800e34a:	463e      	mov	r6, r7
 800e34c:	6820      	ldr	r0, [r4, #0]
 800e34e:	4632      	mov	r2, r6
 800e350:	4641      	mov	r1, r8
 800e352:	f000 f9c9 	bl	800e6e8 <memmove>
 800e356:	68a3      	ldr	r3, [r4, #8]
 800e358:	1b9b      	subs	r3, r3, r6
 800e35a:	60a3      	str	r3, [r4, #8]
 800e35c:	6823      	ldr	r3, [r4, #0]
 800e35e:	4433      	add	r3, r6
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	2000      	movs	r0, #0
 800e364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e368:	462a      	mov	r2, r5
 800e36a:	f000 fa2d 	bl	800e7c8 <_realloc_r>
 800e36e:	4606      	mov	r6, r0
 800e370:	2800      	cmp	r0, #0
 800e372:	d1e0      	bne.n	800e336 <__ssputs_r+0x5a>
 800e374:	6921      	ldr	r1, [r4, #16]
 800e376:	4650      	mov	r0, sl
 800e378:	f7ff fb34 	bl	800d9e4 <_free_r>
 800e37c:	230c      	movs	r3, #12
 800e37e:	f8ca 3000 	str.w	r3, [sl]
 800e382:	89a3      	ldrh	r3, [r4, #12]
 800e384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e388:	81a3      	strh	r3, [r4, #12]
 800e38a:	f04f 30ff 	mov.w	r0, #4294967295
 800e38e:	e7e9      	b.n	800e364 <__ssputs_r+0x88>

0800e390 <_svfiprintf_r>:
 800e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e394:	4698      	mov	r8, r3
 800e396:	898b      	ldrh	r3, [r1, #12]
 800e398:	061b      	lsls	r3, r3, #24
 800e39a:	b09d      	sub	sp, #116	; 0x74
 800e39c:	4607      	mov	r7, r0
 800e39e:	460d      	mov	r5, r1
 800e3a0:	4614      	mov	r4, r2
 800e3a2:	d50e      	bpl.n	800e3c2 <_svfiprintf_r+0x32>
 800e3a4:	690b      	ldr	r3, [r1, #16]
 800e3a6:	b963      	cbnz	r3, 800e3c2 <_svfiprintf_r+0x32>
 800e3a8:	2140      	movs	r1, #64	; 0x40
 800e3aa:	f7ff fb8f 	bl	800dacc <_malloc_r>
 800e3ae:	6028      	str	r0, [r5, #0]
 800e3b0:	6128      	str	r0, [r5, #16]
 800e3b2:	b920      	cbnz	r0, 800e3be <_svfiprintf_r+0x2e>
 800e3b4:	230c      	movs	r3, #12
 800e3b6:	603b      	str	r3, [r7, #0]
 800e3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3bc:	e0d0      	b.n	800e560 <_svfiprintf_r+0x1d0>
 800e3be:	2340      	movs	r3, #64	; 0x40
 800e3c0:	616b      	str	r3, [r5, #20]
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e3c6:	2320      	movs	r3, #32
 800e3c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3d0:	2330      	movs	r3, #48	; 0x30
 800e3d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e578 <_svfiprintf_r+0x1e8>
 800e3d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3da:	f04f 0901 	mov.w	r9, #1
 800e3de:	4623      	mov	r3, r4
 800e3e0:	469a      	mov	sl, r3
 800e3e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3e6:	b10a      	cbz	r2, 800e3ec <_svfiprintf_r+0x5c>
 800e3e8:	2a25      	cmp	r2, #37	; 0x25
 800e3ea:	d1f9      	bne.n	800e3e0 <_svfiprintf_r+0x50>
 800e3ec:	ebba 0b04 	subs.w	fp, sl, r4
 800e3f0:	d00b      	beq.n	800e40a <_svfiprintf_r+0x7a>
 800e3f2:	465b      	mov	r3, fp
 800e3f4:	4622      	mov	r2, r4
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	4638      	mov	r0, r7
 800e3fa:	f7ff ff6f 	bl	800e2dc <__ssputs_r>
 800e3fe:	3001      	adds	r0, #1
 800e400:	f000 80a9 	beq.w	800e556 <_svfiprintf_r+0x1c6>
 800e404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e406:	445a      	add	r2, fp
 800e408:	9209      	str	r2, [sp, #36]	; 0x24
 800e40a:	f89a 3000 	ldrb.w	r3, [sl]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 80a1 	beq.w	800e556 <_svfiprintf_r+0x1c6>
 800e414:	2300      	movs	r3, #0
 800e416:	f04f 32ff 	mov.w	r2, #4294967295
 800e41a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e41e:	f10a 0a01 	add.w	sl, sl, #1
 800e422:	9304      	str	r3, [sp, #16]
 800e424:	9307      	str	r3, [sp, #28]
 800e426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e42a:	931a      	str	r3, [sp, #104]	; 0x68
 800e42c:	4654      	mov	r4, sl
 800e42e:	2205      	movs	r2, #5
 800e430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e434:	4850      	ldr	r0, [pc, #320]	; (800e578 <_svfiprintf_r+0x1e8>)
 800e436:	f7f1 fecb 	bl	80001d0 <memchr>
 800e43a:	9a04      	ldr	r2, [sp, #16]
 800e43c:	b9d8      	cbnz	r0, 800e476 <_svfiprintf_r+0xe6>
 800e43e:	06d0      	lsls	r0, r2, #27
 800e440:	bf44      	itt	mi
 800e442:	2320      	movmi	r3, #32
 800e444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e448:	0711      	lsls	r1, r2, #28
 800e44a:	bf44      	itt	mi
 800e44c:	232b      	movmi	r3, #43	; 0x2b
 800e44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e452:	f89a 3000 	ldrb.w	r3, [sl]
 800e456:	2b2a      	cmp	r3, #42	; 0x2a
 800e458:	d015      	beq.n	800e486 <_svfiprintf_r+0xf6>
 800e45a:	9a07      	ldr	r2, [sp, #28]
 800e45c:	4654      	mov	r4, sl
 800e45e:	2000      	movs	r0, #0
 800e460:	f04f 0c0a 	mov.w	ip, #10
 800e464:	4621      	mov	r1, r4
 800e466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e46a:	3b30      	subs	r3, #48	; 0x30
 800e46c:	2b09      	cmp	r3, #9
 800e46e:	d94d      	bls.n	800e50c <_svfiprintf_r+0x17c>
 800e470:	b1b0      	cbz	r0, 800e4a0 <_svfiprintf_r+0x110>
 800e472:	9207      	str	r2, [sp, #28]
 800e474:	e014      	b.n	800e4a0 <_svfiprintf_r+0x110>
 800e476:	eba0 0308 	sub.w	r3, r0, r8
 800e47a:	fa09 f303 	lsl.w	r3, r9, r3
 800e47e:	4313      	orrs	r3, r2
 800e480:	9304      	str	r3, [sp, #16]
 800e482:	46a2      	mov	sl, r4
 800e484:	e7d2      	b.n	800e42c <_svfiprintf_r+0x9c>
 800e486:	9b03      	ldr	r3, [sp, #12]
 800e488:	1d19      	adds	r1, r3, #4
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	9103      	str	r1, [sp, #12]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	bfbb      	ittet	lt
 800e492:	425b      	neglt	r3, r3
 800e494:	f042 0202 	orrlt.w	r2, r2, #2
 800e498:	9307      	strge	r3, [sp, #28]
 800e49a:	9307      	strlt	r3, [sp, #28]
 800e49c:	bfb8      	it	lt
 800e49e:	9204      	strlt	r2, [sp, #16]
 800e4a0:	7823      	ldrb	r3, [r4, #0]
 800e4a2:	2b2e      	cmp	r3, #46	; 0x2e
 800e4a4:	d10c      	bne.n	800e4c0 <_svfiprintf_r+0x130>
 800e4a6:	7863      	ldrb	r3, [r4, #1]
 800e4a8:	2b2a      	cmp	r3, #42	; 0x2a
 800e4aa:	d134      	bne.n	800e516 <_svfiprintf_r+0x186>
 800e4ac:	9b03      	ldr	r3, [sp, #12]
 800e4ae:	1d1a      	adds	r2, r3, #4
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	9203      	str	r2, [sp, #12]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	bfb8      	it	lt
 800e4b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4bc:	3402      	adds	r4, #2
 800e4be:	9305      	str	r3, [sp, #20]
 800e4c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e588 <_svfiprintf_r+0x1f8>
 800e4c4:	7821      	ldrb	r1, [r4, #0]
 800e4c6:	2203      	movs	r2, #3
 800e4c8:	4650      	mov	r0, sl
 800e4ca:	f7f1 fe81 	bl	80001d0 <memchr>
 800e4ce:	b138      	cbz	r0, 800e4e0 <_svfiprintf_r+0x150>
 800e4d0:	9b04      	ldr	r3, [sp, #16]
 800e4d2:	eba0 000a 	sub.w	r0, r0, sl
 800e4d6:	2240      	movs	r2, #64	; 0x40
 800e4d8:	4082      	lsls	r2, r0
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	3401      	adds	r4, #1
 800e4de:	9304      	str	r3, [sp, #16]
 800e4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e4:	4825      	ldr	r0, [pc, #148]	; (800e57c <_svfiprintf_r+0x1ec>)
 800e4e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4ea:	2206      	movs	r2, #6
 800e4ec:	f7f1 fe70 	bl	80001d0 <memchr>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d038      	beq.n	800e566 <_svfiprintf_r+0x1d6>
 800e4f4:	4b22      	ldr	r3, [pc, #136]	; (800e580 <_svfiprintf_r+0x1f0>)
 800e4f6:	bb1b      	cbnz	r3, 800e540 <_svfiprintf_r+0x1b0>
 800e4f8:	9b03      	ldr	r3, [sp, #12]
 800e4fa:	3307      	adds	r3, #7
 800e4fc:	f023 0307 	bic.w	r3, r3, #7
 800e500:	3308      	adds	r3, #8
 800e502:	9303      	str	r3, [sp, #12]
 800e504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e506:	4433      	add	r3, r6
 800e508:	9309      	str	r3, [sp, #36]	; 0x24
 800e50a:	e768      	b.n	800e3de <_svfiprintf_r+0x4e>
 800e50c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e510:	460c      	mov	r4, r1
 800e512:	2001      	movs	r0, #1
 800e514:	e7a6      	b.n	800e464 <_svfiprintf_r+0xd4>
 800e516:	2300      	movs	r3, #0
 800e518:	3401      	adds	r4, #1
 800e51a:	9305      	str	r3, [sp, #20]
 800e51c:	4619      	mov	r1, r3
 800e51e:	f04f 0c0a 	mov.w	ip, #10
 800e522:	4620      	mov	r0, r4
 800e524:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e528:	3a30      	subs	r2, #48	; 0x30
 800e52a:	2a09      	cmp	r2, #9
 800e52c:	d903      	bls.n	800e536 <_svfiprintf_r+0x1a6>
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d0c6      	beq.n	800e4c0 <_svfiprintf_r+0x130>
 800e532:	9105      	str	r1, [sp, #20]
 800e534:	e7c4      	b.n	800e4c0 <_svfiprintf_r+0x130>
 800e536:	fb0c 2101 	mla	r1, ip, r1, r2
 800e53a:	4604      	mov	r4, r0
 800e53c:	2301      	movs	r3, #1
 800e53e:	e7f0      	b.n	800e522 <_svfiprintf_r+0x192>
 800e540:	ab03      	add	r3, sp, #12
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	462a      	mov	r2, r5
 800e546:	4b0f      	ldr	r3, [pc, #60]	; (800e584 <_svfiprintf_r+0x1f4>)
 800e548:	a904      	add	r1, sp, #16
 800e54a:	4638      	mov	r0, r7
 800e54c:	f7fd fdf6 	bl	800c13c <_printf_float>
 800e550:	1c42      	adds	r2, r0, #1
 800e552:	4606      	mov	r6, r0
 800e554:	d1d6      	bne.n	800e504 <_svfiprintf_r+0x174>
 800e556:	89ab      	ldrh	r3, [r5, #12]
 800e558:	065b      	lsls	r3, r3, #25
 800e55a:	f53f af2d 	bmi.w	800e3b8 <_svfiprintf_r+0x28>
 800e55e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e560:	b01d      	add	sp, #116	; 0x74
 800e562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e566:	ab03      	add	r3, sp, #12
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	462a      	mov	r2, r5
 800e56c:	4b05      	ldr	r3, [pc, #20]	; (800e584 <_svfiprintf_r+0x1f4>)
 800e56e:	a904      	add	r1, sp, #16
 800e570:	4638      	mov	r0, r7
 800e572:	f7fe f887 	bl	800c684 <_printf_i>
 800e576:	e7eb      	b.n	800e550 <_svfiprintf_r+0x1c0>
 800e578:	080114e4 	.word	0x080114e4
 800e57c:	080114ee 	.word	0x080114ee
 800e580:	0800c13d 	.word	0x0800c13d
 800e584:	0800e2dd 	.word	0x0800e2dd
 800e588:	080114ea 	.word	0x080114ea

0800e58c <__sflush_r>:
 800e58c:	898a      	ldrh	r2, [r1, #12]
 800e58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e592:	4605      	mov	r5, r0
 800e594:	0710      	lsls	r0, r2, #28
 800e596:	460c      	mov	r4, r1
 800e598:	d458      	bmi.n	800e64c <__sflush_r+0xc0>
 800e59a:	684b      	ldr	r3, [r1, #4]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	dc05      	bgt.n	800e5ac <__sflush_r+0x20>
 800e5a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	dc02      	bgt.n	800e5ac <__sflush_r+0x20>
 800e5a6:	2000      	movs	r0, #0
 800e5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5ae:	2e00      	cmp	r6, #0
 800e5b0:	d0f9      	beq.n	800e5a6 <__sflush_r+0x1a>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e5b8:	682f      	ldr	r7, [r5, #0]
 800e5ba:	6a21      	ldr	r1, [r4, #32]
 800e5bc:	602b      	str	r3, [r5, #0]
 800e5be:	d032      	beq.n	800e626 <__sflush_r+0x9a>
 800e5c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	075a      	lsls	r2, r3, #29
 800e5c6:	d505      	bpl.n	800e5d4 <__sflush_r+0x48>
 800e5c8:	6863      	ldr	r3, [r4, #4]
 800e5ca:	1ac0      	subs	r0, r0, r3
 800e5cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5ce:	b10b      	cbz	r3, 800e5d4 <__sflush_r+0x48>
 800e5d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e5d2:	1ac0      	subs	r0, r0, r3
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5da:	6a21      	ldr	r1, [r4, #32]
 800e5dc:	4628      	mov	r0, r5
 800e5de:	47b0      	blx	r6
 800e5e0:	1c43      	adds	r3, r0, #1
 800e5e2:	89a3      	ldrh	r3, [r4, #12]
 800e5e4:	d106      	bne.n	800e5f4 <__sflush_r+0x68>
 800e5e6:	6829      	ldr	r1, [r5, #0]
 800e5e8:	291d      	cmp	r1, #29
 800e5ea:	d82b      	bhi.n	800e644 <__sflush_r+0xb8>
 800e5ec:	4a29      	ldr	r2, [pc, #164]	; (800e694 <__sflush_r+0x108>)
 800e5ee:	410a      	asrs	r2, r1
 800e5f0:	07d6      	lsls	r6, r2, #31
 800e5f2:	d427      	bmi.n	800e644 <__sflush_r+0xb8>
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	6062      	str	r2, [r4, #4]
 800e5f8:	04d9      	lsls	r1, r3, #19
 800e5fa:	6922      	ldr	r2, [r4, #16]
 800e5fc:	6022      	str	r2, [r4, #0]
 800e5fe:	d504      	bpl.n	800e60a <__sflush_r+0x7e>
 800e600:	1c42      	adds	r2, r0, #1
 800e602:	d101      	bne.n	800e608 <__sflush_r+0x7c>
 800e604:	682b      	ldr	r3, [r5, #0]
 800e606:	b903      	cbnz	r3, 800e60a <__sflush_r+0x7e>
 800e608:	6560      	str	r0, [r4, #84]	; 0x54
 800e60a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e60c:	602f      	str	r7, [r5, #0]
 800e60e:	2900      	cmp	r1, #0
 800e610:	d0c9      	beq.n	800e5a6 <__sflush_r+0x1a>
 800e612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e616:	4299      	cmp	r1, r3
 800e618:	d002      	beq.n	800e620 <__sflush_r+0x94>
 800e61a:	4628      	mov	r0, r5
 800e61c:	f7ff f9e2 	bl	800d9e4 <_free_r>
 800e620:	2000      	movs	r0, #0
 800e622:	6360      	str	r0, [r4, #52]	; 0x34
 800e624:	e7c0      	b.n	800e5a8 <__sflush_r+0x1c>
 800e626:	2301      	movs	r3, #1
 800e628:	4628      	mov	r0, r5
 800e62a:	47b0      	blx	r6
 800e62c:	1c41      	adds	r1, r0, #1
 800e62e:	d1c8      	bne.n	800e5c2 <__sflush_r+0x36>
 800e630:	682b      	ldr	r3, [r5, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0c5      	beq.n	800e5c2 <__sflush_r+0x36>
 800e636:	2b1d      	cmp	r3, #29
 800e638:	d001      	beq.n	800e63e <__sflush_r+0xb2>
 800e63a:	2b16      	cmp	r3, #22
 800e63c:	d101      	bne.n	800e642 <__sflush_r+0xb6>
 800e63e:	602f      	str	r7, [r5, #0]
 800e640:	e7b1      	b.n	800e5a6 <__sflush_r+0x1a>
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e648:	81a3      	strh	r3, [r4, #12]
 800e64a:	e7ad      	b.n	800e5a8 <__sflush_r+0x1c>
 800e64c:	690f      	ldr	r7, [r1, #16]
 800e64e:	2f00      	cmp	r7, #0
 800e650:	d0a9      	beq.n	800e5a6 <__sflush_r+0x1a>
 800e652:	0793      	lsls	r3, r2, #30
 800e654:	680e      	ldr	r6, [r1, #0]
 800e656:	bf08      	it	eq
 800e658:	694b      	ldreq	r3, [r1, #20]
 800e65a:	600f      	str	r7, [r1, #0]
 800e65c:	bf18      	it	ne
 800e65e:	2300      	movne	r3, #0
 800e660:	eba6 0807 	sub.w	r8, r6, r7
 800e664:	608b      	str	r3, [r1, #8]
 800e666:	f1b8 0f00 	cmp.w	r8, #0
 800e66a:	dd9c      	ble.n	800e5a6 <__sflush_r+0x1a>
 800e66c:	6a21      	ldr	r1, [r4, #32]
 800e66e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e670:	4643      	mov	r3, r8
 800e672:	463a      	mov	r2, r7
 800e674:	4628      	mov	r0, r5
 800e676:	47b0      	blx	r6
 800e678:	2800      	cmp	r0, #0
 800e67a:	dc06      	bgt.n	800e68a <__sflush_r+0xfe>
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e682:	81a3      	strh	r3, [r4, #12]
 800e684:	f04f 30ff 	mov.w	r0, #4294967295
 800e688:	e78e      	b.n	800e5a8 <__sflush_r+0x1c>
 800e68a:	4407      	add	r7, r0
 800e68c:	eba8 0800 	sub.w	r8, r8, r0
 800e690:	e7e9      	b.n	800e666 <__sflush_r+0xda>
 800e692:	bf00      	nop
 800e694:	dfbffffe 	.word	0xdfbffffe

0800e698 <_fflush_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	690b      	ldr	r3, [r1, #16]
 800e69c:	4605      	mov	r5, r0
 800e69e:	460c      	mov	r4, r1
 800e6a0:	b913      	cbnz	r3, 800e6a8 <_fflush_r+0x10>
 800e6a2:	2500      	movs	r5, #0
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	b118      	cbz	r0, 800e6b2 <_fflush_r+0x1a>
 800e6aa:	6a03      	ldr	r3, [r0, #32]
 800e6ac:	b90b      	cbnz	r3, 800e6b2 <_fflush_r+0x1a>
 800e6ae:	f7fe f997 	bl	800c9e0 <__sinit>
 800e6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d0f3      	beq.n	800e6a2 <_fflush_r+0xa>
 800e6ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e6bc:	07d0      	lsls	r0, r2, #31
 800e6be:	d404      	bmi.n	800e6ca <_fflush_r+0x32>
 800e6c0:	0599      	lsls	r1, r3, #22
 800e6c2:	d402      	bmi.n	800e6ca <_fflush_r+0x32>
 800e6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6c6:	f7fe faf8 	bl	800ccba <__retarget_lock_acquire_recursive>
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	4621      	mov	r1, r4
 800e6ce:	f7ff ff5d 	bl	800e58c <__sflush_r>
 800e6d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6d4:	07da      	lsls	r2, r3, #31
 800e6d6:	4605      	mov	r5, r0
 800e6d8:	d4e4      	bmi.n	800e6a4 <_fflush_r+0xc>
 800e6da:	89a3      	ldrh	r3, [r4, #12]
 800e6dc:	059b      	lsls	r3, r3, #22
 800e6de:	d4e1      	bmi.n	800e6a4 <_fflush_r+0xc>
 800e6e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6e2:	f7fe faeb 	bl	800ccbc <__retarget_lock_release_recursive>
 800e6e6:	e7dd      	b.n	800e6a4 <_fflush_r+0xc>

0800e6e8 <memmove>:
 800e6e8:	4288      	cmp	r0, r1
 800e6ea:	b510      	push	{r4, lr}
 800e6ec:	eb01 0402 	add.w	r4, r1, r2
 800e6f0:	d902      	bls.n	800e6f8 <memmove+0x10>
 800e6f2:	4284      	cmp	r4, r0
 800e6f4:	4623      	mov	r3, r4
 800e6f6:	d807      	bhi.n	800e708 <memmove+0x20>
 800e6f8:	1e43      	subs	r3, r0, #1
 800e6fa:	42a1      	cmp	r1, r4
 800e6fc:	d008      	beq.n	800e710 <memmove+0x28>
 800e6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e702:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e706:	e7f8      	b.n	800e6fa <memmove+0x12>
 800e708:	4402      	add	r2, r0
 800e70a:	4601      	mov	r1, r0
 800e70c:	428a      	cmp	r2, r1
 800e70e:	d100      	bne.n	800e712 <memmove+0x2a>
 800e710:	bd10      	pop	{r4, pc}
 800e712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e71a:	e7f7      	b.n	800e70c <memmove+0x24>

0800e71c <_sbrk_r>:
 800e71c:	b538      	push	{r3, r4, r5, lr}
 800e71e:	4d06      	ldr	r5, [pc, #24]	; (800e738 <_sbrk_r+0x1c>)
 800e720:	2300      	movs	r3, #0
 800e722:	4604      	mov	r4, r0
 800e724:	4608      	mov	r0, r1
 800e726:	602b      	str	r3, [r5, #0]
 800e728:	f7f6 fc5c 	bl	8004fe4 <_sbrk>
 800e72c:	1c43      	adds	r3, r0, #1
 800e72e:	d102      	bne.n	800e736 <_sbrk_r+0x1a>
 800e730:	682b      	ldr	r3, [r5, #0]
 800e732:	b103      	cbz	r3, 800e736 <_sbrk_r+0x1a>
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	bd38      	pop	{r3, r4, r5, pc}
 800e738:	20005198 	.word	0x20005198

0800e73c <__assert_func>:
 800e73c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e73e:	4614      	mov	r4, r2
 800e740:	461a      	mov	r2, r3
 800e742:	4b09      	ldr	r3, [pc, #36]	; (800e768 <__assert_func+0x2c>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4605      	mov	r5, r0
 800e748:	68d8      	ldr	r0, [r3, #12]
 800e74a:	b14c      	cbz	r4, 800e760 <__assert_func+0x24>
 800e74c:	4b07      	ldr	r3, [pc, #28]	; (800e76c <__assert_func+0x30>)
 800e74e:	9100      	str	r1, [sp, #0]
 800e750:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e754:	4906      	ldr	r1, [pc, #24]	; (800e770 <__assert_func+0x34>)
 800e756:	462b      	mov	r3, r5
 800e758:	f000 f872 	bl	800e840 <fiprintf>
 800e75c:	f000 f882 	bl	800e864 <abort>
 800e760:	4b04      	ldr	r3, [pc, #16]	; (800e774 <__assert_func+0x38>)
 800e762:	461c      	mov	r4, r3
 800e764:	e7f3      	b.n	800e74e <__assert_func+0x12>
 800e766:	bf00      	nop
 800e768:	2000006c 	.word	0x2000006c
 800e76c:	080114ff 	.word	0x080114ff
 800e770:	0801150c 	.word	0x0801150c
 800e774:	0801153a 	.word	0x0801153a

0800e778 <_calloc_r>:
 800e778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e77a:	fba1 2402 	umull	r2, r4, r1, r2
 800e77e:	b94c      	cbnz	r4, 800e794 <_calloc_r+0x1c>
 800e780:	4611      	mov	r1, r2
 800e782:	9201      	str	r2, [sp, #4]
 800e784:	f7ff f9a2 	bl	800dacc <_malloc_r>
 800e788:	9a01      	ldr	r2, [sp, #4]
 800e78a:	4605      	mov	r5, r0
 800e78c:	b930      	cbnz	r0, 800e79c <_calloc_r+0x24>
 800e78e:	4628      	mov	r0, r5
 800e790:	b003      	add	sp, #12
 800e792:	bd30      	pop	{r4, r5, pc}
 800e794:	220c      	movs	r2, #12
 800e796:	6002      	str	r2, [r0, #0]
 800e798:	2500      	movs	r5, #0
 800e79a:	e7f8      	b.n	800e78e <_calloc_r+0x16>
 800e79c:	4621      	mov	r1, r4
 800e79e:	f7fe f9b8 	bl	800cb12 <memset>
 800e7a2:	e7f4      	b.n	800e78e <_calloc_r+0x16>

0800e7a4 <__ascii_mbtowc>:
 800e7a4:	b082      	sub	sp, #8
 800e7a6:	b901      	cbnz	r1, 800e7aa <__ascii_mbtowc+0x6>
 800e7a8:	a901      	add	r1, sp, #4
 800e7aa:	b142      	cbz	r2, 800e7be <__ascii_mbtowc+0x1a>
 800e7ac:	b14b      	cbz	r3, 800e7c2 <__ascii_mbtowc+0x1e>
 800e7ae:	7813      	ldrb	r3, [r2, #0]
 800e7b0:	600b      	str	r3, [r1, #0]
 800e7b2:	7812      	ldrb	r2, [r2, #0]
 800e7b4:	1e10      	subs	r0, r2, #0
 800e7b6:	bf18      	it	ne
 800e7b8:	2001      	movne	r0, #1
 800e7ba:	b002      	add	sp, #8
 800e7bc:	4770      	bx	lr
 800e7be:	4610      	mov	r0, r2
 800e7c0:	e7fb      	b.n	800e7ba <__ascii_mbtowc+0x16>
 800e7c2:	f06f 0001 	mvn.w	r0, #1
 800e7c6:	e7f8      	b.n	800e7ba <__ascii_mbtowc+0x16>

0800e7c8 <_realloc_r>:
 800e7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7cc:	4680      	mov	r8, r0
 800e7ce:	4614      	mov	r4, r2
 800e7d0:	460e      	mov	r6, r1
 800e7d2:	b921      	cbnz	r1, 800e7de <_realloc_r+0x16>
 800e7d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d8:	4611      	mov	r1, r2
 800e7da:	f7ff b977 	b.w	800dacc <_malloc_r>
 800e7de:	b92a      	cbnz	r2, 800e7ec <_realloc_r+0x24>
 800e7e0:	f7ff f900 	bl	800d9e4 <_free_r>
 800e7e4:	4625      	mov	r5, r4
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ec:	f000 f841 	bl	800e872 <_malloc_usable_size_r>
 800e7f0:	4284      	cmp	r4, r0
 800e7f2:	4607      	mov	r7, r0
 800e7f4:	d802      	bhi.n	800e7fc <_realloc_r+0x34>
 800e7f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7fa:	d812      	bhi.n	800e822 <_realloc_r+0x5a>
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	4640      	mov	r0, r8
 800e800:	f7ff f964 	bl	800dacc <_malloc_r>
 800e804:	4605      	mov	r5, r0
 800e806:	2800      	cmp	r0, #0
 800e808:	d0ed      	beq.n	800e7e6 <_realloc_r+0x1e>
 800e80a:	42bc      	cmp	r4, r7
 800e80c:	4622      	mov	r2, r4
 800e80e:	4631      	mov	r1, r6
 800e810:	bf28      	it	cs
 800e812:	463a      	movcs	r2, r7
 800e814:	f7fe fa5b 	bl	800ccce <memcpy>
 800e818:	4631      	mov	r1, r6
 800e81a:	4640      	mov	r0, r8
 800e81c:	f7ff f8e2 	bl	800d9e4 <_free_r>
 800e820:	e7e1      	b.n	800e7e6 <_realloc_r+0x1e>
 800e822:	4635      	mov	r5, r6
 800e824:	e7df      	b.n	800e7e6 <_realloc_r+0x1e>

0800e826 <__ascii_wctomb>:
 800e826:	b149      	cbz	r1, 800e83c <__ascii_wctomb+0x16>
 800e828:	2aff      	cmp	r2, #255	; 0xff
 800e82a:	bf85      	ittet	hi
 800e82c:	238a      	movhi	r3, #138	; 0x8a
 800e82e:	6003      	strhi	r3, [r0, #0]
 800e830:	700a      	strbls	r2, [r1, #0]
 800e832:	f04f 30ff 	movhi.w	r0, #4294967295
 800e836:	bf98      	it	ls
 800e838:	2001      	movls	r0, #1
 800e83a:	4770      	bx	lr
 800e83c:	4608      	mov	r0, r1
 800e83e:	4770      	bx	lr

0800e840 <fiprintf>:
 800e840:	b40e      	push	{r1, r2, r3}
 800e842:	b503      	push	{r0, r1, lr}
 800e844:	4601      	mov	r1, r0
 800e846:	ab03      	add	r3, sp, #12
 800e848:	4805      	ldr	r0, [pc, #20]	; (800e860 <fiprintf+0x20>)
 800e84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e84e:	6800      	ldr	r0, [r0, #0]
 800e850:	9301      	str	r3, [sp, #4]
 800e852:	f000 f83f 	bl	800e8d4 <_vfiprintf_r>
 800e856:	b002      	add	sp, #8
 800e858:	f85d eb04 	ldr.w	lr, [sp], #4
 800e85c:	b003      	add	sp, #12
 800e85e:	4770      	bx	lr
 800e860:	2000006c 	.word	0x2000006c

0800e864 <abort>:
 800e864:	b508      	push	{r3, lr}
 800e866:	2006      	movs	r0, #6
 800e868:	f000 fa0c 	bl	800ec84 <raise>
 800e86c:	2001      	movs	r0, #1
 800e86e:	f7f6 fb41 	bl	8004ef4 <_exit>

0800e872 <_malloc_usable_size_r>:
 800e872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e876:	1f18      	subs	r0, r3, #4
 800e878:	2b00      	cmp	r3, #0
 800e87a:	bfbc      	itt	lt
 800e87c:	580b      	ldrlt	r3, [r1, r0]
 800e87e:	18c0      	addlt	r0, r0, r3
 800e880:	4770      	bx	lr

0800e882 <__sfputc_r>:
 800e882:	6893      	ldr	r3, [r2, #8]
 800e884:	3b01      	subs	r3, #1
 800e886:	2b00      	cmp	r3, #0
 800e888:	b410      	push	{r4}
 800e88a:	6093      	str	r3, [r2, #8]
 800e88c:	da08      	bge.n	800e8a0 <__sfputc_r+0x1e>
 800e88e:	6994      	ldr	r4, [r2, #24]
 800e890:	42a3      	cmp	r3, r4
 800e892:	db01      	blt.n	800e898 <__sfputc_r+0x16>
 800e894:	290a      	cmp	r1, #10
 800e896:	d103      	bne.n	800e8a0 <__sfputc_r+0x1e>
 800e898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e89c:	f000 b934 	b.w	800eb08 <__swbuf_r>
 800e8a0:	6813      	ldr	r3, [r2, #0]
 800e8a2:	1c58      	adds	r0, r3, #1
 800e8a4:	6010      	str	r0, [r2, #0]
 800e8a6:	7019      	strb	r1, [r3, #0]
 800e8a8:	4608      	mov	r0, r1
 800e8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <__sfputs_r>:
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b2:	4606      	mov	r6, r0
 800e8b4:	460f      	mov	r7, r1
 800e8b6:	4614      	mov	r4, r2
 800e8b8:	18d5      	adds	r5, r2, r3
 800e8ba:	42ac      	cmp	r4, r5
 800e8bc:	d101      	bne.n	800e8c2 <__sfputs_r+0x12>
 800e8be:	2000      	movs	r0, #0
 800e8c0:	e007      	b.n	800e8d2 <__sfputs_r+0x22>
 800e8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c6:	463a      	mov	r2, r7
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f7ff ffda 	bl	800e882 <__sfputc_r>
 800e8ce:	1c43      	adds	r3, r0, #1
 800e8d0:	d1f3      	bne.n	800e8ba <__sfputs_r+0xa>
 800e8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e8d4 <_vfiprintf_r>:
 800e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d8:	460d      	mov	r5, r1
 800e8da:	b09d      	sub	sp, #116	; 0x74
 800e8dc:	4614      	mov	r4, r2
 800e8de:	4698      	mov	r8, r3
 800e8e0:	4606      	mov	r6, r0
 800e8e2:	b118      	cbz	r0, 800e8ec <_vfiprintf_r+0x18>
 800e8e4:	6a03      	ldr	r3, [r0, #32]
 800e8e6:	b90b      	cbnz	r3, 800e8ec <_vfiprintf_r+0x18>
 800e8e8:	f7fe f87a 	bl	800c9e0 <__sinit>
 800e8ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8ee:	07d9      	lsls	r1, r3, #31
 800e8f0:	d405      	bmi.n	800e8fe <_vfiprintf_r+0x2a>
 800e8f2:	89ab      	ldrh	r3, [r5, #12]
 800e8f4:	059a      	lsls	r2, r3, #22
 800e8f6:	d402      	bmi.n	800e8fe <_vfiprintf_r+0x2a>
 800e8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8fa:	f7fe f9de 	bl	800ccba <__retarget_lock_acquire_recursive>
 800e8fe:	89ab      	ldrh	r3, [r5, #12]
 800e900:	071b      	lsls	r3, r3, #28
 800e902:	d501      	bpl.n	800e908 <_vfiprintf_r+0x34>
 800e904:	692b      	ldr	r3, [r5, #16]
 800e906:	b99b      	cbnz	r3, 800e930 <_vfiprintf_r+0x5c>
 800e908:	4629      	mov	r1, r5
 800e90a:	4630      	mov	r0, r6
 800e90c:	f000 f93a 	bl	800eb84 <__swsetup_r>
 800e910:	b170      	cbz	r0, 800e930 <_vfiprintf_r+0x5c>
 800e912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e914:	07dc      	lsls	r4, r3, #31
 800e916:	d504      	bpl.n	800e922 <_vfiprintf_r+0x4e>
 800e918:	f04f 30ff 	mov.w	r0, #4294967295
 800e91c:	b01d      	add	sp, #116	; 0x74
 800e91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e922:	89ab      	ldrh	r3, [r5, #12]
 800e924:	0598      	lsls	r0, r3, #22
 800e926:	d4f7      	bmi.n	800e918 <_vfiprintf_r+0x44>
 800e928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e92a:	f7fe f9c7 	bl	800ccbc <__retarget_lock_release_recursive>
 800e92e:	e7f3      	b.n	800e918 <_vfiprintf_r+0x44>
 800e930:	2300      	movs	r3, #0
 800e932:	9309      	str	r3, [sp, #36]	; 0x24
 800e934:	2320      	movs	r3, #32
 800e936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e93a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e93e:	2330      	movs	r3, #48	; 0x30
 800e940:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800eaf4 <_vfiprintf_r+0x220>
 800e944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e948:	f04f 0901 	mov.w	r9, #1
 800e94c:	4623      	mov	r3, r4
 800e94e:	469a      	mov	sl, r3
 800e950:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e954:	b10a      	cbz	r2, 800e95a <_vfiprintf_r+0x86>
 800e956:	2a25      	cmp	r2, #37	; 0x25
 800e958:	d1f9      	bne.n	800e94e <_vfiprintf_r+0x7a>
 800e95a:	ebba 0b04 	subs.w	fp, sl, r4
 800e95e:	d00b      	beq.n	800e978 <_vfiprintf_r+0xa4>
 800e960:	465b      	mov	r3, fp
 800e962:	4622      	mov	r2, r4
 800e964:	4629      	mov	r1, r5
 800e966:	4630      	mov	r0, r6
 800e968:	f7ff ffa2 	bl	800e8b0 <__sfputs_r>
 800e96c:	3001      	adds	r0, #1
 800e96e:	f000 80a9 	beq.w	800eac4 <_vfiprintf_r+0x1f0>
 800e972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e974:	445a      	add	r2, fp
 800e976:	9209      	str	r2, [sp, #36]	; 0x24
 800e978:	f89a 3000 	ldrb.w	r3, [sl]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 80a1 	beq.w	800eac4 <_vfiprintf_r+0x1f0>
 800e982:	2300      	movs	r3, #0
 800e984:	f04f 32ff 	mov.w	r2, #4294967295
 800e988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e98c:	f10a 0a01 	add.w	sl, sl, #1
 800e990:	9304      	str	r3, [sp, #16]
 800e992:	9307      	str	r3, [sp, #28]
 800e994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e998:	931a      	str	r3, [sp, #104]	; 0x68
 800e99a:	4654      	mov	r4, sl
 800e99c:	2205      	movs	r2, #5
 800e99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a2:	4854      	ldr	r0, [pc, #336]	; (800eaf4 <_vfiprintf_r+0x220>)
 800e9a4:	f7f1 fc14 	bl	80001d0 <memchr>
 800e9a8:	9a04      	ldr	r2, [sp, #16]
 800e9aa:	b9d8      	cbnz	r0, 800e9e4 <_vfiprintf_r+0x110>
 800e9ac:	06d1      	lsls	r1, r2, #27
 800e9ae:	bf44      	itt	mi
 800e9b0:	2320      	movmi	r3, #32
 800e9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9b6:	0713      	lsls	r3, r2, #28
 800e9b8:	bf44      	itt	mi
 800e9ba:	232b      	movmi	r3, #43	; 0x2b
 800e9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e9c6:	d015      	beq.n	800e9f4 <_vfiprintf_r+0x120>
 800e9c8:	9a07      	ldr	r2, [sp, #28]
 800e9ca:	4654      	mov	r4, sl
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	f04f 0c0a 	mov.w	ip, #10
 800e9d2:	4621      	mov	r1, r4
 800e9d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9d8:	3b30      	subs	r3, #48	; 0x30
 800e9da:	2b09      	cmp	r3, #9
 800e9dc:	d94d      	bls.n	800ea7a <_vfiprintf_r+0x1a6>
 800e9de:	b1b0      	cbz	r0, 800ea0e <_vfiprintf_r+0x13a>
 800e9e0:	9207      	str	r2, [sp, #28]
 800e9e2:	e014      	b.n	800ea0e <_vfiprintf_r+0x13a>
 800e9e4:	eba0 0308 	sub.w	r3, r0, r8
 800e9e8:	fa09 f303 	lsl.w	r3, r9, r3
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	9304      	str	r3, [sp, #16]
 800e9f0:	46a2      	mov	sl, r4
 800e9f2:	e7d2      	b.n	800e99a <_vfiprintf_r+0xc6>
 800e9f4:	9b03      	ldr	r3, [sp, #12]
 800e9f6:	1d19      	adds	r1, r3, #4
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	9103      	str	r1, [sp, #12]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	bfbb      	ittet	lt
 800ea00:	425b      	neglt	r3, r3
 800ea02:	f042 0202 	orrlt.w	r2, r2, #2
 800ea06:	9307      	strge	r3, [sp, #28]
 800ea08:	9307      	strlt	r3, [sp, #28]
 800ea0a:	bfb8      	it	lt
 800ea0c:	9204      	strlt	r2, [sp, #16]
 800ea0e:	7823      	ldrb	r3, [r4, #0]
 800ea10:	2b2e      	cmp	r3, #46	; 0x2e
 800ea12:	d10c      	bne.n	800ea2e <_vfiprintf_r+0x15a>
 800ea14:	7863      	ldrb	r3, [r4, #1]
 800ea16:	2b2a      	cmp	r3, #42	; 0x2a
 800ea18:	d134      	bne.n	800ea84 <_vfiprintf_r+0x1b0>
 800ea1a:	9b03      	ldr	r3, [sp, #12]
 800ea1c:	1d1a      	adds	r2, r3, #4
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	9203      	str	r2, [sp, #12]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	bfb8      	it	lt
 800ea26:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea2a:	3402      	adds	r4, #2
 800ea2c:	9305      	str	r3, [sp, #20]
 800ea2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800eb04 <_vfiprintf_r+0x230>
 800ea32:	7821      	ldrb	r1, [r4, #0]
 800ea34:	2203      	movs	r2, #3
 800ea36:	4650      	mov	r0, sl
 800ea38:	f7f1 fbca 	bl	80001d0 <memchr>
 800ea3c:	b138      	cbz	r0, 800ea4e <_vfiprintf_r+0x17a>
 800ea3e:	9b04      	ldr	r3, [sp, #16]
 800ea40:	eba0 000a 	sub.w	r0, r0, sl
 800ea44:	2240      	movs	r2, #64	; 0x40
 800ea46:	4082      	lsls	r2, r0
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	3401      	adds	r4, #1
 800ea4c:	9304      	str	r3, [sp, #16]
 800ea4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea52:	4829      	ldr	r0, [pc, #164]	; (800eaf8 <_vfiprintf_r+0x224>)
 800ea54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea58:	2206      	movs	r2, #6
 800ea5a:	f7f1 fbb9 	bl	80001d0 <memchr>
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d03f      	beq.n	800eae2 <_vfiprintf_r+0x20e>
 800ea62:	4b26      	ldr	r3, [pc, #152]	; (800eafc <_vfiprintf_r+0x228>)
 800ea64:	bb1b      	cbnz	r3, 800eaae <_vfiprintf_r+0x1da>
 800ea66:	9b03      	ldr	r3, [sp, #12]
 800ea68:	3307      	adds	r3, #7
 800ea6a:	f023 0307 	bic.w	r3, r3, #7
 800ea6e:	3308      	adds	r3, #8
 800ea70:	9303      	str	r3, [sp, #12]
 800ea72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea74:	443b      	add	r3, r7
 800ea76:	9309      	str	r3, [sp, #36]	; 0x24
 800ea78:	e768      	b.n	800e94c <_vfiprintf_r+0x78>
 800ea7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea7e:	460c      	mov	r4, r1
 800ea80:	2001      	movs	r0, #1
 800ea82:	e7a6      	b.n	800e9d2 <_vfiprintf_r+0xfe>
 800ea84:	2300      	movs	r3, #0
 800ea86:	3401      	adds	r4, #1
 800ea88:	9305      	str	r3, [sp, #20]
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	f04f 0c0a 	mov.w	ip, #10
 800ea90:	4620      	mov	r0, r4
 800ea92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea96:	3a30      	subs	r2, #48	; 0x30
 800ea98:	2a09      	cmp	r2, #9
 800ea9a:	d903      	bls.n	800eaa4 <_vfiprintf_r+0x1d0>
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d0c6      	beq.n	800ea2e <_vfiprintf_r+0x15a>
 800eaa0:	9105      	str	r1, [sp, #20]
 800eaa2:	e7c4      	b.n	800ea2e <_vfiprintf_r+0x15a>
 800eaa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e7f0      	b.n	800ea90 <_vfiprintf_r+0x1bc>
 800eaae:	ab03      	add	r3, sp, #12
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	462a      	mov	r2, r5
 800eab4:	4b12      	ldr	r3, [pc, #72]	; (800eb00 <_vfiprintf_r+0x22c>)
 800eab6:	a904      	add	r1, sp, #16
 800eab8:	4630      	mov	r0, r6
 800eaba:	f7fd fb3f 	bl	800c13c <_printf_float>
 800eabe:	4607      	mov	r7, r0
 800eac0:	1c78      	adds	r0, r7, #1
 800eac2:	d1d6      	bne.n	800ea72 <_vfiprintf_r+0x19e>
 800eac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eac6:	07d9      	lsls	r1, r3, #31
 800eac8:	d405      	bmi.n	800ead6 <_vfiprintf_r+0x202>
 800eaca:	89ab      	ldrh	r3, [r5, #12]
 800eacc:	059a      	lsls	r2, r3, #22
 800eace:	d402      	bmi.n	800ead6 <_vfiprintf_r+0x202>
 800ead0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ead2:	f7fe f8f3 	bl	800ccbc <__retarget_lock_release_recursive>
 800ead6:	89ab      	ldrh	r3, [r5, #12]
 800ead8:	065b      	lsls	r3, r3, #25
 800eada:	f53f af1d 	bmi.w	800e918 <_vfiprintf_r+0x44>
 800eade:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eae0:	e71c      	b.n	800e91c <_vfiprintf_r+0x48>
 800eae2:	ab03      	add	r3, sp, #12
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	462a      	mov	r2, r5
 800eae8:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <_vfiprintf_r+0x22c>)
 800eaea:	a904      	add	r1, sp, #16
 800eaec:	4630      	mov	r0, r6
 800eaee:	f7fd fdc9 	bl	800c684 <_printf_i>
 800eaf2:	e7e4      	b.n	800eabe <_vfiprintf_r+0x1ea>
 800eaf4:	080114e4 	.word	0x080114e4
 800eaf8:	080114ee 	.word	0x080114ee
 800eafc:	0800c13d 	.word	0x0800c13d
 800eb00:	0800e8b1 	.word	0x0800e8b1
 800eb04:	080114ea 	.word	0x080114ea

0800eb08 <__swbuf_r>:
 800eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0a:	460e      	mov	r6, r1
 800eb0c:	4614      	mov	r4, r2
 800eb0e:	4605      	mov	r5, r0
 800eb10:	b118      	cbz	r0, 800eb1a <__swbuf_r+0x12>
 800eb12:	6a03      	ldr	r3, [r0, #32]
 800eb14:	b90b      	cbnz	r3, 800eb1a <__swbuf_r+0x12>
 800eb16:	f7fd ff63 	bl	800c9e0 <__sinit>
 800eb1a:	69a3      	ldr	r3, [r4, #24]
 800eb1c:	60a3      	str	r3, [r4, #8]
 800eb1e:	89a3      	ldrh	r3, [r4, #12]
 800eb20:	071a      	lsls	r2, r3, #28
 800eb22:	d525      	bpl.n	800eb70 <__swbuf_r+0x68>
 800eb24:	6923      	ldr	r3, [r4, #16]
 800eb26:	b31b      	cbz	r3, 800eb70 <__swbuf_r+0x68>
 800eb28:	6823      	ldr	r3, [r4, #0]
 800eb2a:	6922      	ldr	r2, [r4, #16]
 800eb2c:	1a98      	subs	r0, r3, r2
 800eb2e:	6963      	ldr	r3, [r4, #20]
 800eb30:	b2f6      	uxtb	r6, r6
 800eb32:	4283      	cmp	r3, r0
 800eb34:	4637      	mov	r7, r6
 800eb36:	dc04      	bgt.n	800eb42 <__swbuf_r+0x3a>
 800eb38:	4621      	mov	r1, r4
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f7ff fdac 	bl	800e698 <_fflush_r>
 800eb40:	b9e0      	cbnz	r0, 800eb7c <__swbuf_r+0x74>
 800eb42:	68a3      	ldr	r3, [r4, #8]
 800eb44:	3b01      	subs	r3, #1
 800eb46:	60a3      	str	r3, [r4, #8]
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	1c5a      	adds	r2, r3, #1
 800eb4c:	6022      	str	r2, [r4, #0]
 800eb4e:	701e      	strb	r6, [r3, #0]
 800eb50:	6962      	ldr	r2, [r4, #20]
 800eb52:	1c43      	adds	r3, r0, #1
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d004      	beq.n	800eb62 <__swbuf_r+0x5a>
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	07db      	lsls	r3, r3, #31
 800eb5c:	d506      	bpl.n	800eb6c <__swbuf_r+0x64>
 800eb5e:	2e0a      	cmp	r6, #10
 800eb60:	d104      	bne.n	800eb6c <__swbuf_r+0x64>
 800eb62:	4621      	mov	r1, r4
 800eb64:	4628      	mov	r0, r5
 800eb66:	f7ff fd97 	bl	800e698 <_fflush_r>
 800eb6a:	b938      	cbnz	r0, 800eb7c <__swbuf_r+0x74>
 800eb6c:	4638      	mov	r0, r7
 800eb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb70:	4621      	mov	r1, r4
 800eb72:	4628      	mov	r0, r5
 800eb74:	f000 f806 	bl	800eb84 <__swsetup_r>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d0d5      	beq.n	800eb28 <__swbuf_r+0x20>
 800eb7c:	f04f 37ff 	mov.w	r7, #4294967295
 800eb80:	e7f4      	b.n	800eb6c <__swbuf_r+0x64>
	...

0800eb84 <__swsetup_r>:
 800eb84:	b538      	push	{r3, r4, r5, lr}
 800eb86:	4b2a      	ldr	r3, [pc, #168]	; (800ec30 <__swsetup_r+0xac>)
 800eb88:	4605      	mov	r5, r0
 800eb8a:	6818      	ldr	r0, [r3, #0]
 800eb8c:	460c      	mov	r4, r1
 800eb8e:	b118      	cbz	r0, 800eb98 <__swsetup_r+0x14>
 800eb90:	6a03      	ldr	r3, [r0, #32]
 800eb92:	b90b      	cbnz	r3, 800eb98 <__swsetup_r+0x14>
 800eb94:	f7fd ff24 	bl	800c9e0 <__sinit>
 800eb98:	89a3      	ldrh	r3, [r4, #12]
 800eb9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb9e:	0718      	lsls	r0, r3, #28
 800eba0:	d422      	bmi.n	800ebe8 <__swsetup_r+0x64>
 800eba2:	06d9      	lsls	r1, r3, #27
 800eba4:	d407      	bmi.n	800ebb6 <__swsetup_r+0x32>
 800eba6:	2309      	movs	r3, #9
 800eba8:	602b      	str	r3, [r5, #0]
 800ebaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ebae:	81a3      	strh	r3, [r4, #12]
 800ebb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb4:	e034      	b.n	800ec20 <__swsetup_r+0x9c>
 800ebb6:	0758      	lsls	r0, r3, #29
 800ebb8:	d512      	bpl.n	800ebe0 <__swsetup_r+0x5c>
 800ebba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebbc:	b141      	cbz	r1, 800ebd0 <__swsetup_r+0x4c>
 800ebbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebc2:	4299      	cmp	r1, r3
 800ebc4:	d002      	beq.n	800ebcc <__swsetup_r+0x48>
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f7fe ff0c 	bl	800d9e4 <_free_r>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	6363      	str	r3, [r4, #52]	; 0x34
 800ebd0:	89a3      	ldrh	r3, [r4, #12]
 800ebd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ebd6:	81a3      	strh	r3, [r4, #12]
 800ebd8:	2300      	movs	r3, #0
 800ebda:	6063      	str	r3, [r4, #4]
 800ebdc:	6923      	ldr	r3, [r4, #16]
 800ebde:	6023      	str	r3, [r4, #0]
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	f043 0308 	orr.w	r3, r3, #8
 800ebe6:	81a3      	strh	r3, [r4, #12]
 800ebe8:	6923      	ldr	r3, [r4, #16]
 800ebea:	b94b      	cbnz	r3, 800ec00 <__swsetup_r+0x7c>
 800ebec:	89a3      	ldrh	r3, [r4, #12]
 800ebee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ebf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebf6:	d003      	beq.n	800ec00 <__swsetup_r+0x7c>
 800ebf8:	4621      	mov	r1, r4
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	f000 f884 	bl	800ed08 <__smakebuf_r>
 800ec00:	89a0      	ldrh	r0, [r4, #12]
 800ec02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec06:	f010 0301 	ands.w	r3, r0, #1
 800ec0a:	d00a      	beq.n	800ec22 <__swsetup_r+0x9e>
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	60a3      	str	r3, [r4, #8]
 800ec10:	6963      	ldr	r3, [r4, #20]
 800ec12:	425b      	negs	r3, r3
 800ec14:	61a3      	str	r3, [r4, #24]
 800ec16:	6923      	ldr	r3, [r4, #16]
 800ec18:	b943      	cbnz	r3, 800ec2c <__swsetup_r+0xa8>
 800ec1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec1e:	d1c4      	bne.n	800ebaa <__swsetup_r+0x26>
 800ec20:	bd38      	pop	{r3, r4, r5, pc}
 800ec22:	0781      	lsls	r1, r0, #30
 800ec24:	bf58      	it	pl
 800ec26:	6963      	ldrpl	r3, [r4, #20]
 800ec28:	60a3      	str	r3, [r4, #8]
 800ec2a:	e7f4      	b.n	800ec16 <__swsetup_r+0x92>
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	e7f7      	b.n	800ec20 <__swsetup_r+0x9c>
 800ec30:	2000006c 	.word	0x2000006c

0800ec34 <_raise_r>:
 800ec34:	291f      	cmp	r1, #31
 800ec36:	b538      	push	{r3, r4, r5, lr}
 800ec38:	4604      	mov	r4, r0
 800ec3a:	460d      	mov	r5, r1
 800ec3c:	d904      	bls.n	800ec48 <_raise_r+0x14>
 800ec3e:	2316      	movs	r3, #22
 800ec40:	6003      	str	r3, [r0, #0]
 800ec42:	f04f 30ff 	mov.w	r0, #4294967295
 800ec46:	bd38      	pop	{r3, r4, r5, pc}
 800ec48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ec4a:	b112      	cbz	r2, 800ec52 <_raise_r+0x1e>
 800ec4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec50:	b94b      	cbnz	r3, 800ec66 <_raise_r+0x32>
 800ec52:	4620      	mov	r0, r4
 800ec54:	f000 f830 	bl	800ecb8 <_getpid_r>
 800ec58:	462a      	mov	r2, r5
 800ec5a:	4601      	mov	r1, r0
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec62:	f000 b817 	b.w	800ec94 <_kill_r>
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d00a      	beq.n	800ec80 <_raise_r+0x4c>
 800ec6a:	1c59      	adds	r1, r3, #1
 800ec6c:	d103      	bne.n	800ec76 <_raise_r+0x42>
 800ec6e:	2316      	movs	r3, #22
 800ec70:	6003      	str	r3, [r0, #0]
 800ec72:	2001      	movs	r0, #1
 800ec74:	e7e7      	b.n	800ec46 <_raise_r+0x12>
 800ec76:	2400      	movs	r4, #0
 800ec78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	4798      	blx	r3
 800ec80:	2000      	movs	r0, #0
 800ec82:	e7e0      	b.n	800ec46 <_raise_r+0x12>

0800ec84 <raise>:
 800ec84:	4b02      	ldr	r3, [pc, #8]	; (800ec90 <raise+0xc>)
 800ec86:	4601      	mov	r1, r0
 800ec88:	6818      	ldr	r0, [r3, #0]
 800ec8a:	f7ff bfd3 	b.w	800ec34 <_raise_r>
 800ec8e:	bf00      	nop
 800ec90:	2000006c 	.word	0x2000006c

0800ec94 <_kill_r>:
 800ec94:	b538      	push	{r3, r4, r5, lr}
 800ec96:	4d07      	ldr	r5, [pc, #28]	; (800ecb4 <_kill_r+0x20>)
 800ec98:	2300      	movs	r3, #0
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	4608      	mov	r0, r1
 800ec9e:	4611      	mov	r1, r2
 800eca0:	602b      	str	r3, [r5, #0]
 800eca2:	f7f6 f917 	bl	8004ed4 <_kill>
 800eca6:	1c43      	adds	r3, r0, #1
 800eca8:	d102      	bne.n	800ecb0 <_kill_r+0x1c>
 800ecaa:	682b      	ldr	r3, [r5, #0]
 800ecac:	b103      	cbz	r3, 800ecb0 <_kill_r+0x1c>
 800ecae:	6023      	str	r3, [r4, #0]
 800ecb0:	bd38      	pop	{r3, r4, r5, pc}
 800ecb2:	bf00      	nop
 800ecb4:	20005198 	.word	0x20005198

0800ecb8 <_getpid_r>:
 800ecb8:	f7f6 b904 	b.w	8004ec4 <_getpid>

0800ecbc <__swhatbuf_r>:
 800ecbc:	b570      	push	{r4, r5, r6, lr}
 800ecbe:	460c      	mov	r4, r1
 800ecc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecc4:	2900      	cmp	r1, #0
 800ecc6:	b096      	sub	sp, #88	; 0x58
 800ecc8:	4615      	mov	r5, r2
 800ecca:	461e      	mov	r6, r3
 800eccc:	da0d      	bge.n	800ecea <__swhatbuf_r+0x2e>
 800ecce:	89a3      	ldrh	r3, [r4, #12]
 800ecd0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ecd4:	f04f 0100 	mov.w	r1, #0
 800ecd8:	bf0c      	ite	eq
 800ecda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ecde:	2340      	movne	r3, #64	; 0x40
 800ece0:	2000      	movs	r0, #0
 800ece2:	6031      	str	r1, [r6, #0]
 800ece4:	602b      	str	r3, [r5, #0]
 800ece6:	b016      	add	sp, #88	; 0x58
 800ece8:	bd70      	pop	{r4, r5, r6, pc}
 800ecea:	466a      	mov	r2, sp
 800ecec:	f000 f848 	bl	800ed80 <_fstat_r>
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	dbec      	blt.n	800ecce <__swhatbuf_r+0x12>
 800ecf4:	9901      	ldr	r1, [sp, #4]
 800ecf6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ecfa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ecfe:	4259      	negs	r1, r3
 800ed00:	4159      	adcs	r1, r3
 800ed02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed06:	e7eb      	b.n	800ece0 <__swhatbuf_r+0x24>

0800ed08 <__smakebuf_r>:
 800ed08:	898b      	ldrh	r3, [r1, #12]
 800ed0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed0c:	079d      	lsls	r5, r3, #30
 800ed0e:	4606      	mov	r6, r0
 800ed10:	460c      	mov	r4, r1
 800ed12:	d507      	bpl.n	800ed24 <__smakebuf_r+0x1c>
 800ed14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed18:	6023      	str	r3, [r4, #0]
 800ed1a:	6123      	str	r3, [r4, #16]
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	6163      	str	r3, [r4, #20]
 800ed20:	b002      	add	sp, #8
 800ed22:	bd70      	pop	{r4, r5, r6, pc}
 800ed24:	ab01      	add	r3, sp, #4
 800ed26:	466a      	mov	r2, sp
 800ed28:	f7ff ffc8 	bl	800ecbc <__swhatbuf_r>
 800ed2c:	9900      	ldr	r1, [sp, #0]
 800ed2e:	4605      	mov	r5, r0
 800ed30:	4630      	mov	r0, r6
 800ed32:	f7fe fecb 	bl	800dacc <_malloc_r>
 800ed36:	b948      	cbnz	r0, 800ed4c <__smakebuf_r+0x44>
 800ed38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed3c:	059a      	lsls	r2, r3, #22
 800ed3e:	d4ef      	bmi.n	800ed20 <__smakebuf_r+0x18>
 800ed40:	f023 0303 	bic.w	r3, r3, #3
 800ed44:	f043 0302 	orr.w	r3, r3, #2
 800ed48:	81a3      	strh	r3, [r4, #12]
 800ed4a:	e7e3      	b.n	800ed14 <__smakebuf_r+0xc>
 800ed4c:	89a3      	ldrh	r3, [r4, #12]
 800ed4e:	6020      	str	r0, [r4, #0]
 800ed50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed54:	81a3      	strh	r3, [r4, #12]
 800ed56:	9b00      	ldr	r3, [sp, #0]
 800ed58:	6163      	str	r3, [r4, #20]
 800ed5a:	9b01      	ldr	r3, [sp, #4]
 800ed5c:	6120      	str	r0, [r4, #16]
 800ed5e:	b15b      	cbz	r3, 800ed78 <__smakebuf_r+0x70>
 800ed60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed64:	4630      	mov	r0, r6
 800ed66:	f000 f81d 	bl	800eda4 <_isatty_r>
 800ed6a:	b128      	cbz	r0, 800ed78 <__smakebuf_r+0x70>
 800ed6c:	89a3      	ldrh	r3, [r4, #12]
 800ed6e:	f023 0303 	bic.w	r3, r3, #3
 800ed72:	f043 0301 	orr.w	r3, r3, #1
 800ed76:	81a3      	strh	r3, [r4, #12]
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	431d      	orrs	r5, r3
 800ed7c:	81a5      	strh	r5, [r4, #12]
 800ed7e:	e7cf      	b.n	800ed20 <__smakebuf_r+0x18>

0800ed80 <_fstat_r>:
 800ed80:	b538      	push	{r3, r4, r5, lr}
 800ed82:	4d07      	ldr	r5, [pc, #28]	; (800eda0 <_fstat_r+0x20>)
 800ed84:	2300      	movs	r3, #0
 800ed86:	4604      	mov	r4, r0
 800ed88:	4608      	mov	r0, r1
 800ed8a:	4611      	mov	r1, r2
 800ed8c:	602b      	str	r3, [r5, #0]
 800ed8e:	f7f6 f900 	bl	8004f92 <_fstat>
 800ed92:	1c43      	adds	r3, r0, #1
 800ed94:	d102      	bne.n	800ed9c <_fstat_r+0x1c>
 800ed96:	682b      	ldr	r3, [r5, #0]
 800ed98:	b103      	cbz	r3, 800ed9c <_fstat_r+0x1c>
 800ed9a:	6023      	str	r3, [r4, #0]
 800ed9c:	bd38      	pop	{r3, r4, r5, pc}
 800ed9e:	bf00      	nop
 800eda0:	20005198 	.word	0x20005198

0800eda4 <_isatty_r>:
 800eda4:	b538      	push	{r3, r4, r5, lr}
 800eda6:	4d06      	ldr	r5, [pc, #24]	; (800edc0 <_isatty_r+0x1c>)
 800eda8:	2300      	movs	r3, #0
 800edaa:	4604      	mov	r4, r0
 800edac:	4608      	mov	r0, r1
 800edae:	602b      	str	r3, [r5, #0]
 800edb0:	f7f6 f8ff 	bl	8004fb2 <_isatty>
 800edb4:	1c43      	adds	r3, r0, #1
 800edb6:	d102      	bne.n	800edbe <_isatty_r+0x1a>
 800edb8:	682b      	ldr	r3, [r5, #0]
 800edba:	b103      	cbz	r3, 800edbe <_isatty_r+0x1a>
 800edbc:	6023      	str	r3, [r4, #0]
 800edbe:	bd38      	pop	{r3, r4, r5, pc}
 800edc0:	20005198 	.word	0x20005198

0800edc4 <atan2>:
 800edc4:	f000 bbb8 	b.w	800f538 <__ieee754_atan2>

0800edc8 <pow>:
 800edc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edca:	ed2d 8b02 	vpush	{d8}
 800edce:	eeb0 8a40 	vmov.f32	s16, s0
 800edd2:	eef0 8a60 	vmov.f32	s17, s1
 800edd6:	ec55 4b11 	vmov	r4, r5, d1
 800edda:	f000 fc75 	bl	800f6c8 <__ieee754_pow>
 800edde:	4622      	mov	r2, r4
 800ede0:	462b      	mov	r3, r5
 800ede2:	4620      	mov	r0, r4
 800ede4:	4629      	mov	r1, r5
 800ede6:	ec57 6b10 	vmov	r6, r7, d0
 800edea:	f7f1 fe9f 	bl	8000b2c <__aeabi_dcmpun>
 800edee:	2800      	cmp	r0, #0
 800edf0:	d13b      	bne.n	800ee6a <pow+0xa2>
 800edf2:	ec51 0b18 	vmov	r0, r1, d8
 800edf6:	2200      	movs	r2, #0
 800edf8:	2300      	movs	r3, #0
 800edfa:	f7f1 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 800edfe:	b1b8      	cbz	r0, 800ee30 <pow+0x68>
 800ee00:	2200      	movs	r2, #0
 800ee02:	2300      	movs	r3, #0
 800ee04:	4620      	mov	r0, r4
 800ee06:	4629      	mov	r1, r5
 800ee08:	f7f1 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	d146      	bne.n	800ee9e <pow+0xd6>
 800ee10:	ec45 4b10 	vmov	d0, r4, r5
 800ee14:	f000 f920 	bl	800f058 <finite>
 800ee18:	b338      	cbz	r0, 800ee6a <pow+0xa2>
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	4620      	mov	r0, r4
 800ee20:	4629      	mov	r1, r5
 800ee22:	f7f1 fe5b 	bl	8000adc <__aeabi_dcmplt>
 800ee26:	b300      	cbz	r0, 800ee6a <pow+0xa2>
 800ee28:	f7fd ff1c 	bl	800cc64 <__errno>
 800ee2c:	2322      	movs	r3, #34	; 0x22
 800ee2e:	e01b      	b.n	800ee68 <pow+0xa0>
 800ee30:	ec47 6b10 	vmov	d0, r6, r7
 800ee34:	f000 f910 	bl	800f058 <finite>
 800ee38:	b9e0      	cbnz	r0, 800ee74 <pow+0xac>
 800ee3a:	eeb0 0a48 	vmov.f32	s0, s16
 800ee3e:	eef0 0a68 	vmov.f32	s1, s17
 800ee42:	f000 f909 	bl	800f058 <finite>
 800ee46:	b1a8      	cbz	r0, 800ee74 <pow+0xac>
 800ee48:	ec45 4b10 	vmov	d0, r4, r5
 800ee4c:	f000 f904 	bl	800f058 <finite>
 800ee50:	b180      	cbz	r0, 800ee74 <pow+0xac>
 800ee52:	4632      	mov	r2, r6
 800ee54:	463b      	mov	r3, r7
 800ee56:	4630      	mov	r0, r6
 800ee58:	4639      	mov	r1, r7
 800ee5a:	f7f1 fe67 	bl	8000b2c <__aeabi_dcmpun>
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d0e2      	beq.n	800ee28 <pow+0x60>
 800ee62:	f7fd feff 	bl	800cc64 <__errno>
 800ee66:	2321      	movs	r3, #33	; 0x21
 800ee68:	6003      	str	r3, [r0, #0]
 800ee6a:	ecbd 8b02 	vpop	{d8}
 800ee6e:	ec47 6b10 	vmov	d0, r6, r7
 800ee72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee74:	2200      	movs	r2, #0
 800ee76:	2300      	movs	r3, #0
 800ee78:	4630      	mov	r0, r6
 800ee7a:	4639      	mov	r1, r7
 800ee7c:	f7f1 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee80:	2800      	cmp	r0, #0
 800ee82:	d0f2      	beq.n	800ee6a <pow+0xa2>
 800ee84:	eeb0 0a48 	vmov.f32	s0, s16
 800ee88:	eef0 0a68 	vmov.f32	s1, s17
 800ee8c:	f000 f8e4 	bl	800f058 <finite>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	d0ea      	beq.n	800ee6a <pow+0xa2>
 800ee94:	ec45 4b10 	vmov	d0, r4, r5
 800ee98:	f000 f8de 	bl	800f058 <finite>
 800ee9c:	e7c3      	b.n	800ee26 <pow+0x5e>
 800ee9e:	4f01      	ldr	r7, [pc, #4]	; (800eea4 <pow+0xdc>)
 800eea0:	2600      	movs	r6, #0
 800eea2:	e7e2      	b.n	800ee6a <pow+0xa2>
 800eea4:	3ff00000 	.word	0x3ff00000

0800eea8 <sqrt>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	ed2d 8b02 	vpush	{d8}
 800eeae:	ec55 4b10 	vmov	r4, r5, d0
 800eeb2:	f000 f8dd 	bl	800f070 <__ieee754_sqrt>
 800eeb6:	4622      	mov	r2, r4
 800eeb8:	462b      	mov	r3, r5
 800eeba:	4620      	mov	r0, r4
 800eebc:	4629      	mov	r1, r5
 800eebe:	eeb0 8a40 	vmov.f32	s16, s0
 800eec2:	eef0 8a60 	vmov.f32	s17, s1
 800eec6:	f7f1 fe31 	bl	8000b2c <__aeabi_dcmpun>
 800eeca:	b990      	cbnz	r0, 800eef2 <sqrt+0x4a>
 800eecc:	2200      	movs	r2, #0
 800eece:	2300      	movs	r3, #0
 800eed0:	4620      	mov	r0, r4
 800eed2:	4629      	mov	r1, r5
 800eed4:	f7f1 fe02 	bl	8000adc <__aeabi_dcmplt>
 800eed8:	b158      	cbz	r0, 800eef2 <sqrt+0x4a>
 800eeda:	f7fd fec3 	bl	800cc64 <__errno>
 800eede:	2321      	movs	r3, #33	; 0x21
 800eee0:	6003      	str	r3, [r0, #0]
 800eee2:	2200      	movs	r2, #0
 800eee4:	2300      	movs	r3, #0
 800eee6:	4610      	mov	r0, r2
 800eee8:	4619      	mov	r1, r3
 800eeea:	f7f1 fcaf 	bl	800084c <__aeabi_ddiv>
 800eeee:	ec41 0b18 	vmov	d8, r0, r1
 800eef2:	eeb0 0a48 	vmov.f32	s0, s16
 800eef6:	eef0 0a68 	vmov.f32	s1, s17
 800eefa:	ecbd 8b02 	vpop	{d8}
 800eefe:	bd38      	pop	{r3, r4, r5, pc}

0800ef00 <cos>:
 800ef00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef02:	ec53 2b10 	vmov	r2, r3, d0
 800ef06:	4826      	ldr	r0, [pc, #152]	; (800efa0 <cos+0xa0>)
 800ef08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ef0c:	4281      	cmp	r1, r0
 800ef0e:	dc06      	bgt.n	800ef1e <cos+0x1e>
 800ef10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ef98 <cos+0x98>
 800ef14:	b005      	add	sp, #20
 800ef16:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef1a:	f000 b985 	b.w	800f228 <__kernel_cos>
 800ef1e:	4821      	ldr	r0, [pc, #132]	; (800efa4 <cos+0xa4>)
 800ef20:	4281      	cmp	r1, r0
 800ef22:	dd09      	ble.n	800ef38 <cos+0x38>
 800ef24:	ee10 0a10 	vmov	r0, s0
 800ef28:	4619      	mov	r1, r3
 800ef2a:	f7f1 f9ad 	bl	8000288 <__aeabi_dsub>
 800ef2e:	ec41 0b10 	vmov	d0, r0, r1
 800ef32:	b005      	add	sp, #20
 800ef34:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef38:	4668      	mov	r0, sp
 800ef3a:	f001 f8f1 	bl	8010120 <__ieee754_rem_pio2>
 800ef3e:	f000 0003 	and.w	r0, r0, #3
 800ef42:	2801      	cmp	r0, #1
 800ef44:	d00b      	beq.n	800ef5e <cos+0x5e>
 800ef46:	2802      	cmp	r0, #2
 800ef48:	d016      	beq.n	800ef78 <cos+0x78>
 800ef4a:	b9e0      	cbnz	r0, 800ef86 <cos+0x86>
 800ef4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef50:	ed9d 0b00 	vldr	d0, [sp]
 800ef54:	f000 f968 	bl	800f228 <__kernel_cos>
 800ef58:	ec51 0b10 	vmov	r0, r1, d0
 800ef5c:	e7e7      	b.n	800ef2e <cos+0x2e>
 800ef5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef62:	ed9d 0b00 	vldr	d0, [sp]
 800ef66:	f000 fa27 	bl	800f3b8 <__kernel_sin>
 800ef6a:	ec53 2b10 	vmov	r2, r3, d0
 800ef6e:	ee10 0a10 	vmov	r0, s0
 800ef72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ef76:	e7da      	b.n	800ef2e <cos+0x2e>
 800ef78:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef7c:	ed9d 0b00 	vldr	d0, [sp]
 800ef80:	f000 f952 	bl	800f228 <__kernel_cos>
 800ef84:	e7f1      	b.n	800ef6a <cos+0x6a>
 800ef86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef8a:	ed9d 0b00 	vldr	d0, [sp]
 800ef8e:	2001      	movs	r0, #1
 800ef90:	f000 fa12 	bl	800f3b8 <__kernel_sin>
 800ef94:	e7e0      	b.n	800ef58 <cos+0x58>
 800ef96:	bf00      	nop
	...
 800efa0:	3fe921fb 	.word	0x3fe921fb
 800efa4:	7fefffff 	.word	0x7fefffff

0800efa8 <sin>:
 800efa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800efaa:	ec53 2b10 	vmov	r2, r3, d0
 800efae:	4828      	ldr	r0, [pc, #160]	; (800f050 <sin+0xa8>)
 800efb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800efb4:	4281      	cmp	r1, r0
 800efb6:	dc07      	bgt.n	800efc8 <sin+0x20>
 800efb8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f048 <sin+0xa0>
 800efbc:	2000      	movs	r0, #0
 800efbe:	b005      	add	sp, #20
 800efc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efc4:	f000 b9f8 	b.w	800f3b8 <__kernel_sin>
 800efc8:	4822      	ldr	r0, [pc, #136]	; (800f054 <sin+0xac>)
 800efca:	4281      	cmp	r1, r0
 800efcc:	dd09      	ble.n	800efe2 <sin+0x3a>
 800efce:	ee10 0a10 	vmov	r0, s0
 800efd2:	4619      	mov	r1, r3
 800efd4:	f7f1 f958 	bl	8000288 <__aeabi_dsub>
 800efd8:	ec41 0b10 	vmov	d0, r0, r1
 800efdc:	b005      	add	sp, #20
 800efde:	f85d fb04 	ldr.w	pc, [sp], #4
 800efe2:	4668      	mov	r0, sp
 800efe4:	f001 f89c 	bl	8010120 <__ieee754_rem_pio2>
 800efe8:	f000 0003 	and.w	r0, r0, #3
 800efec:	2801      	cmp	r0, #1
 800efee:	d00c      	beq.n	800f00a <sin+0x62>
 800eff0:	2802      	cmp	r0, #2
 800eff2:	d011      	beq.n	800f018 <sin+0x70>
 800eff4:	b9f0      	cbnz	r0, 800f034 <sin+0x8c>
 800eff6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800effa:	ed9d 0b00 	vldr	d0, [sp]
 800effe:	2001      	movs	r0, #1
 800f000:	f000 f9da 	bl	800f3b8 <__kernel_sin>
 800f004:	ec51 0b10 	vmov	r0, r1, d0
 800f008:	e7e6      	b.n	800efd8 <sin+0x30>
 800f00a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f00e:	ed9d 0b00 	vldr	d0, [sp]
 800f012:	f000 f909 	bl	800f228 <__kernel_cos>
 800f016:	e7f5      	b.n	800f004 <sin+0x5c>
 800f018:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f01c:	ed9d 0b00 	vldr	d0, [sp]
 800f020:	2001      	movs	r0, #1
 800f022:	f000 f9c9 	bl	800f3b8 <__kernel_sin>
 800f026:	ec53 2b10 	vmov	r2, r3, d0
 800f02a:	ee10 0a10 	vmov	r0, s0
 800f02e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f032:	e7d1      	b.n	800efd8 <sin+0x30>
 800f034:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f038:	ed9d 0b00 	vldr	d0, [sp]
 800f03c:	f000 f8f4 	bl	800f228 <__kernel_cos>
 800f040:	e7f1      	b.n	800f026 <sin+0x7e>
 800f042:	bf00      	nop
 800f044:	f3af 8000 	nop.w
	...
 800f050:	3fe921fb 	.word	0x3fe921fb
 800f054:	7fefffff 	.word	0x7fefffff

0800f058 <finite>:
 800f058:	b082      	sub	sp, #8
 800f05a:	ed8d 0b00 	vstr	d0, [sp]
 800f05e:	9801      	ldr	r0, [sp, #4]
 800f060:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f064:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f068:	0fc0      	lsrs	r0, r0, #31
 800f06a:	b002      	add	sp, #8
 800f06c:	4770      	bx	lr
	...

0800f070 <__ieee754_sqrt>:
 800f070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f074:	ec55 4b10 	vmov	r4, r5, d0
 800f078:	4e67      	ldr	r6, [pc, #412]	; (800f218 <__ieee754_sqrt+0x1a8>)
 800f07a:	43ae      	bics	r6, r5
 800f07c:	ee10 0a10 	vmov	r0, s0
 800f080:	ee10 2a10 	vmov	r2, s0
 800f084:	4629      	mov	r1, r5
 800f086:	462b      	mov	r3, r5
 800f088:	d10d      	bne.n	800f0a6 <__ieee754_sqrt+0x36>
 800f08a:	f7f1 fab5 	bl	80005f8 <__aeabi_dmul>
 800f08e:	4602      	mov	r2, r0
 800f090:	460b      	mov	r3, r1
 800f092:	4620      	mov	r0, r4
 800f094:	4629      	mov	r1, r5
 800f096:	f7f1 f8f9 	bl	800028c <__adddf3>
 800f09a:	4604      	mov	r4, r0
 800f09c:	460d      	mov	r5, r1
 800f09e:	ec45 4b10 	vmov	d0, r4, r5
 800f0a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a6:	2d00      	cmp	r5, #0
 800f0a8:	dc0b      	bgt.n	800f0c2 <__ieee754_sqrt+0x52>
 800f0aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f0ae:	4326      	orrs	r6, r4
 800f0b0:	d0f5      	beq.n	800f09e <__ieee754_sqrt+0x2e>
 800f0b2:	b135      	cbz	r5, 800f0c2 <__ieee754_sqrt+0x52>
 800f0b4:	f7f1 f8e8 	bl	8000288 <__aeabi_dsub>
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	f7f1 fbc6 	bl	800084c <__aeabi_ddiv>
 800f0c0:	e7eb      	b.n	800f09a <__ieee754_sqrt+0x2a>
 800f0c2:	1509      	asrs	r1, r1, #20
 800f0c4:	f000 808d 	beq.w	800f1e2 <__ieee754_sqrt+0x172>
 800f0c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0cc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f0d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f0d4:	07c9      	lsls	r1, r1, #31
 800f0d6:	bf5c      	itt	pl
 800f0d8:	005b      	lslpl	r3, r3, #1
 800f0da:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f0de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0e2:	bf58      	it	pl
 800f0e4:	0052      	lslpl	r2, r2, #1
 800f0e6:	2500      	movs	r5, #0
 800f0e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f0ec:	1076      	asrs	r6, r6, #1
 800f0ee:	0052      	lsls	r2, r2, #1
 800f0f0:	f04f 0e16 	mov.w	lr, #22
 800f0f4:	46ac      	mov	ip, r5
 800f0f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f0fa:	eb0c 0001 	add.w	r0, ip, r1
 800f0fe:	4298      	cmp	r0, r3
 800f100:	bfde      	ittt	le
 800f102:	1a1b      	suble	r3, r3, r0
 800f104:	eb00 0c01 	addle.w	ip, r0, r1
 800f108:	186d      	addle	r5, r5, r1
 800f10a:	005b      	lsls	r3, r3, #1
 800f10c:	f1be 0e01 	subs.w	lr, lr, #1
 800f110:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f114:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f118:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f11c:	d1ed      	bne.n	800f0fa <__ieee754_sqrt+0x8a>
 800f11e:	4674      	mov	r4, lr
 800f120:	2720      	movs	r7, #32
 800f122:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f126:	4563      	cmp	r3, ip
 800f128:	eb01 000e 	add.w	r0, r1, lr
 800f12c:	dc02      	bgt.n	800f134 <__ieee754_sqrt+0xc4>
 800f12e:	d113      	bne.n	800f158 <__ieee754_sqrt+0xe8>
 800f130:	4290      	cmp	r0, r2
 800f132:	d811      	bhi.n	800f158 <__ieee754_sqrt+0xe8>
 800f134:	2800      	cmp	r0, #0
 800f136:	eb00 0e01 	add.w	lr, r0, r1
 800f13a:	da57      	bge.n	800f1ec <__ieee754_sqrt+0x17c>
 800f13c:	f1be 0f00 	cmp.w	lr, #0
 800f140:	db54      	blt.n	800f1ec <__ieee754_sqrt+0x17c>
 800f142:	f10c 0801 	add.w	r8, ip, #1
 800f146:	eba3 030c 	sub.w	r3, r3, ip
 800f14a:	4290      	cmp	r0, r2
 800f14c:	bf88      	it	hi
 800f14e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f152:	1a12      	subs	r2, r2, r0
 800f154:	440c      	add	r4, r1
 800f156:	46c4      	mov	ip, r8
 800f158:	005b      	lsls	r3, r3, #1
 800f15a:	3f01      	subs	r7, #1
 800f15c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f160:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f164:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f168:	d1dd      	bne.n	800f126 <__ieee754_sqrt+0xb6>
 800f16a:	4313      	orrs	r3, r2
 800f16c:	d01b      	beq.n	800f1a6 <__ieee754_sqrt+0x136>
 800f16e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f21c <__ieee754_sqrt+0x1ac>
 800f172:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f220 <__ieee754_sqrt+0x1b0>
 800f176:	e9da 0100 	ldrd	r0, r1, [sl]
 800f17a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f17e:	f7f1 f883 	bl	8000288 <__aeabi_dsub>
 800f182:	e9da 8900 	ldrd	r8, r9, [sl]
 800f186:	4602      	mov	r2, r0
 800f188:	460b      	mov	r3, r1
 800f18a:	4640      	mov	r0, r8
 800f18c:	4649      	mov	r1, r9
 800f18e:	f7f1 fcaf 	bl	8000af0 <__aeabi_dcmple>
 800f192:	b140      	cbz	r0, 800f1a6 <__ieee754_sqrt+0x136>
 800f194:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f198:	e9da 0100 	ldrd	r0, r1, [sl]
 800f19c:	e9db 2300 	ldrd	r2, r3, [fp]
 800f1a0:	d126      	bne.n	800f1f0 <__ieee754_sqrt+0x180>
 800f1a2:	3501      	adds	r5, #1
 800f1a4:	463c      	mov	r4, r7
 800f1a6:	106a      	asrs	r2, r5, #1
 800f1a8:	0863      	lsrs	r3, r4, #1
 800f1aa:	07e9      	lsls	r1, r5, #31
 800f1ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f1b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f1b4:	bf48      	it	mi
 800f1b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f1ba:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f1be:	461c      	mov	r4, r3
 800f1c0:	e76d      	b.n	800f09e <__ieee754_sqrt+0x2e>
 800f1c2:	0ad3      	lsrs	r3, r2, #11
 800f1c4:	3815      	subs	r0, #21
 800f1c6:	0552      	lsls	r2, r2, #21
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d0fa      	beq.n	800f1c2 <__ieee754_sqrt+0x152>
 800f1cc:	02dc      	lsls	r4, r3, #11
 800f1ce:	d50a      	bpl.n	800f1e6 <__ieee754_sqrt+0x176>
 800f1d0:	f1c1 0420 	rsb	r4, r1, #32
 800f1d4:	fa22 f404 	lsr.w	r4, r2, r4
 800f1d8:	1e4d      	subs	r5, r1, #1
 800f1da:	408a      	lsls	r2, r1
 800f1dc:	4323      	orrs	r3, r4
 800f1de:	1b41      	subs	r1, r0, r5
 800f1e0:	e772      	b.n	800f0c8 <__ieee754_sqrt+0x58>
 800f1e2:	4608      	mov	r0, r1
 800f1e4:	e7f0      	b.n	800f1c8 <__ieee754_sqrt+0x158>
 800f1e6:	005b      	lsls	r3, r3, #1
 800f1e8:	3101      	adds	r1, #1
 800f1ea:	e7ef      	b.n	800f1cc <__ieee754_sqrt+0x15c>
 800f1ec:	46e0      	mov	r8, ip
 800f1ee:	e7aa      	b.n	800f146 <__ieee754_sqrt+0xd6>
 800f1f0:	f7f1 f84c 	bl	800028c <__adddf3>
 800f1f4:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	4640      	mov	r0, r8
 800f1fe:	4649      	mov	r1, r9
 800f200:	f7f1 fc6c 	bl	8000adc <__aeabi_dcmplt>
 800f204:	b120      	cbz	r0, 800f210 <__ieee754_sqrt+0x1a0>
 800f206:	1ca0      	adds	r0, r4, #2
 800f208:	bf08      	it	eq
 800f20a:	3501      	addeq	r5, #1
 800f20c:	3402      	adds	r4, #2
 800f20e:	e7ca      	b.n	800f1a6 <__ieee754_sqrt+0x136>
 800f210:	3401      	adds	r4, #1
 800f212:	f024 0401 	bic.w	r4, r4, #1
 800f216:	e7c6      	b.n	800f1a6 <__ieee754_sqrt+0x136>
 800f218:	7ff00000 	.word	0x7ff00000
 800f21c:	200001e0 	.word	0x200001e0
 800f220:	200001e8 	.word	0x200001e8
 800f224:	00000000 	.word	0x00000000

0800f228 <__kernel_cos>:
 800f228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22c:	ec57 6b10 	vmov	r6, r7, d0
 800f230:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f234:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f238:	ed8d 1b00 	vstr	d1, [sp]
 800f23c:	da07      	bge.n	800f24e <__kernel_cos+0x26>
 800f23e:	ee10 0a10 	vmov	r0, s0
 800f242:	4639      	mov	r1, r7
 800f244:	f7f1 fc88 	bl	8000b58 <__aeabi_d2iz>
 800f248:	2800      	cmp	r0, #0
 800f24a:	f000 8088 	beq.w	800f35e <__kernel_cos+0x136>
 800f24e:	4632      	mov	r2, r6
 800f250:	463b      	mov	r3, r7
 800f252:	4630      	mov	r0, r6
 800f254:	4639      	mov	r1, r7
 800f256:	f7f1 f9cf 	bl	80005f8 <__aeabi_dmul>
 800f25a:	4b51      	ldr	r3, [pc, #324]	; (800f3a0 <__kernel_cos+0x178>)
 800f25c:	2200      	movs	r2, #0
 800f25e:	4604      	mov	r4, r0
 800f260:	460d      	mov	r5, r1
 800f262:	f7f1 f9c9 	bl	80005f8 <__aeabi_dmul>
 800f266:	a340      	add	r3, pc, #256	; (adr r3, 800f368 <__kernel_cos+0x140>)
 800f268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26c:	4682      	mov	sl, r0
 800f26e:	468b      	mov	fp, r1
 800f270:	4620      	mov	r0, r4
 800f272:	4629      	mov	r1, r5
 800f274:	f7f1 f9c0 	bl	80005f8 <__aeabi_dmul>
 800f278:	a33d      	add	r3, pc, #244	; (adr r3, 800f370 <__kernel_cos+0x148>)
 800f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27e:	f7f1 f805 	bl	800028c <__adddf3>
 800f282:	4622      	mov	r2, r4
 800f284:	462b      	mov	r3, r5
 800f286:	f7f1 f9b7 	bl	80005f8 <__aeabi_dmul>
 800f28a:	a33b      	add	r3, pc, #236	; (adr r3, 800f378 <__kernel_cos+0x150>)
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	f7f0 fffa 	bl	8000288 <__aeabi_dsub>
 800f294:	4622      	mov	r2, r4
 800f296:	462b      	mov	r3, r5
 800f298:	f7f1 f9ae 	bl	80005f8 <__aeabi_dmul>
 800f29c:	a338      	add	r3, pc, #224	; (adr r3, 800f380 <__kernel_cos+0x158>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	f7f0 fff3 	bl	800028c <__adddf3>
 800f2a6:	4622      	mov	r2, r4
 800f2a8:	462b      	mov	r3, r5
 800f2aa:	f7f1 f9a5 	bl	80005f8 <__aeabi_dmul>
 800f2ae:	a336      	add	r3, pc, #216	; (adr r3, 800f388 <__kernel_cos+0x160>)
 800f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b4:	f7f0 ffe8 	bl	8000288 <__aeabi_dsub>
 800f2b8:	4622      	mov	r2, r4
 800f2ba:	462b      	mov	r3, r5
 800f2bc:	f7f1 f99c 	bl	80005f8 <__aeabi_dmul>
 800f2c0:	a333      	add	r3, pc, #204	; (adr r3, 800f390 <__kernel_cos+0x168>)
 800f2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c6:	f7f0 ffe1 	bl	800028c <__adddf3>
 800f2ca:	4622      	mov	r2, r4
 800f2cc:	462b      	mov	r3, r5
 800f2ce:	f7f1 f993 	bl	80005f8 <__aeabi_dmul>
 800f2d2:	4622      	mov	r2, r4
 800f2d4:	462b      	mov	r3, r5
 800f2d6:	f7f1 f98f 	bl	80005f8 <__aeabi_dmul>
 800f2da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2de:	4604      	mov	r4, r0
 800f2e0:	460d      	mov	r5, r1
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	4639      	mov	r1, r7
 800f2e6:	f7f1 f987 	bl	80005f8 <__aeabi_dmul>
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f7f0 ffc9 	bl	8000288 <__aeabi_dsub>
 800f2f6:	4b2b      	ldr	r3, [pc, #172]	; (800f3a4 <__kernel_cos+0x17c>)
 800f2f8:	4598      	cmp	r8, r3
 800f2fa:	4606      	mov	r6, r0
 800f2fc:	460f      	mov	r7, r1
 800f2fe:	dc10      	bgt.n	800f322 <__kernel_cos+0xfa>
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	4650      	mov	r0, sl
 800f306:	4659      	mov	r1, fp
 800f308:	f7f0 ffbe 	bl	8000288 <__aeabi_dsub>
 800f30c:	460b      	mov	r3, r1
 800f30e:	4926      	ldr	r1, [pc, #152]	; (800f3a8 <__kernel_cos+0x180>)
 800f310:	4602      	mov	r2, r0
 800f312:	2000      	movs	r0, #0
 800f314:	f7f0 ffb8 	bl	8000288 <__aeabi_dsub>
 800f318:	ec41 0b10 	vmov	d0, r0, r1
 800f31c:	b003      	add	sp, #12
 800f31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f322:	4b22      	ldr	r3, [pc, #136]	; (800f3ac <__kernel_cos+0x184>)
 800f324:	4920      	ldr	r1, [pc, #128]	; (800f3a8 <__kernel_cos+0x180>)
 800f326:	4598      	cmp	r8, r3
 800f328:	bfcc      	ite	gt
 800f32a:	4d21      	ldrgt	r5, [pc, #132]	; (800f3b0 <__kernel_cos+0x188>)
 800f32c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f330:	2400      	movs	r4, #0
 800f332:	4622      	mov	r2, r4
 800f334:	462b      	mov	r3, r5
 800f336:	2000      	movs	r0, #0
 800f338:	f7f0 ffa6 	bl	8000288 <__aeabi_dsub>
 800f33c:	4622      	mov	r2, r4
 800f33e:	4680      	mov	r8, r0
 800f340:	4689      	mov	r9, r1
 800f342:	462b      	mov	r3, r5
 800f344:	4650      	mov	r0, sl
 800f346:	4659      	mov	r1, fp
 800f348:	f7f0 ff9e 	bl	8000288 <__aeabi_dsub>
 800f34c:	4632      	mov	r2, r6
 800f34e:	463b      	mov	r3, r7
 800f350:	f7f0 ff9a 	bl	8000288 <__aeabi_dsub>
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	4640      	mov	r0, r8
 800f35a:	4649      	mov	r1, r9
 800f35c:	e7da      	b.n	800f314 <__kernel_cos+0xec>
 800f35e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f398 <__kernel_cos+0x170>
 800f362:	e7db      	b.n	800f31c <__kernel_cos+0xf4>
 800f364:	f3af 8000 	nop.w
 800f368:	be8838d4 	.word	0xbe8838d4
 800f36c:	bda8fae9 	.word	0xbda8fae9
 800f370:	bdb4b1c4 	.word	0xbdb4b1c4
 800f374:	3e21ee9e 	.word	0x3e21ee9e
 800f378:	809c52ad 	.word	0x809c52ad
 800f37c:	3e927e4f 	.word	0x3e927e4f
 800f380:	19cb1590 	.word	0x19cb1590
 800f384:	3efa01a0 	.word	0x3efa01a0
 800f388:	16c15177 	.word	0x16c15177
 800f38c:	3f56c16c 	.word	0x3f56c16c
 800f390:	5555554c 	.word	0x5555554c
 800f394:	3fa55555 	.word	0x3fa55555
 800f398:	00000000 	.word	0x00000000
 800f39c:	3ff00000 	.word	0x3ff00000
 800f3a0:	3fe00000 	.word	0x3fe00000
 800f3a4:	3fd33332 	.word	0x3fd33332
 800f3a8:	3ff00000 	.word	0x3ff00000
 800f3ac:	3fe90000 	.word	0x3fe90000
 800f3b0:	3fd20000 	.word	0x3fd20000
 800f3b4:	00000000 	.word	0x00000000

0800f3b8 <__kernel_sin>:
 800f3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3bc:	ed2d 8b04 	vpush	{d8-d9}
 800f3c0:	eeb0 8a41 	vmov.f32	s16, s2
 800f3c4:	eef0 8a61 	vmov.f32	s17, s3
 800f3c8:	ec55 4b10 	vmov	r4, r5, d0
 800f3cc:	b083      	sub	sp, #12
 800f3ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f3d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f3d6:	9001      	str	r0, [sp, #4]
 800f3d8:	da06      	bge.n	800f3e8 <__kernel_sin+0x30>
 800f3da:	ee10 0a10 	vmov	r0, s0
 800f3de:	4629      	mov	r1, r5
 800f3e0:	f7f1 fbba 	bl	8000b58 <__aeabi_d2iz>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d051      	beq.n	800f48c <__kernel_sin+0xd4>
 800f3e8:	4622      	mov	r2, r4
 800f3ea:	462b      	mov	r3, r5
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	f7f1 f902 	bl	80005f8 <__aeabi_dmul>
 800f3f4:	4682      	mov	sl, r0
 800f3f6:	468b      	mov	fp, r1
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	4629      	mov	r1, r5
 800f400:	f7f1 f8fa 	bl	80005f8 <__aeabi_dmul>
 800f404:	a341      	add	r3, pc, #260	; (adr r3, 800f50c <__kernel_sin+0x154>)
 800f406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40a:	4680      	mov	r8, r0
 800f40c:	4689      	mov	r9, r1
 800f40e:	4650      	mov	r0, sl
 800f410:	4659      	mov	r1, fp
 800f412:	f7f1 f8f1 	bl	80005f8 <__aeabi_dmul>
 800f416:	a33f      	add	r3, pc, #252	; (adr r3, 800f514 <__kernel_sin+0x15c>)
 800f418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41c:	f7f0 ff34 	bl	8000288 <__aeabi_dsub>
 800f420:	4652      	mov	r2, sl
 800f422:	465b      	mov	r3, fp
 800f424:	f7f1 f8e8 	bl	80005f8 <__aeabi_dmul>
 800f428:	a33c      	add	r3, pc, #240	; (adr r3, 800f51c <__kernel_sin+0x164>)
 800f42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42e:	f7f0 ff2d 	bl	800028c <__adddf3>
 800f432:	4652      	mov	r2, sl
 800f434:	465b      	mov	r3, fp
 800f436:	f7f1 f8df 	bl	80005f8 <__aeabi_dmul>
 800f43a:	a33a      	add	r3, pc, #232	; (adr r3, 800f524 <__kernel_sin+0x16c>)
 800f43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f440:	f7f0 ff22 	bl	8000288 <__aeabi_dsub>
 800f444:	4652      	mov	r2, sl
 800f446:	465b      	mov	r3, fp
 800f448:	f7f1 f8d6 	bl	80005f8 <__aeabi_dmul>
 800f44c:	a337      	add	r3, pc, #220	; (adr r3, 800f52c <__kernel_sin+0x174>)
 800f44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f452:	f7f0 ff1b 	bl	800028c <__adddf3>
 800f456:	9b01      	ldr	r3, [sp, #4]
 800f458:	4606      	mov	r6, r0
 800f45a:	460f      	mov	r7, r1
 800f45c:	b9eb      	cbnz	r3, 800f49a <__kernel_sin+0xe2>
 800f45e:	4602      	mov	r2, r0
 800f460:	460b      	mov	r3, r1
 800f462:	4650      	mov	r0, sl
 800f464:	4659      	mov	r1, fp
 800f466:	f7f1 f8c7 	bl	80005f8 <__aeabi_dmul>
 800f46a:	a325      	add	r3, pc, #148	; (adr r3, 800f500 <__kernel_sin+0x148>)
 800f46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f470:	f7f0 ff0a 	bl	8000288 <__aeabi_dsub>
 800f474:	4642      	mov	r2, r8
 800f476:	464b      	mov	r3, r9
 800f478:	f7f1 f8be 	bl	80005f8 <__aeabi_dmul>
 800f47c:	4602      	mov	r2, r0
 800f47e:	460b      	mov	r3, r1
 800f480:	4620      	mov	r0, r4
 800f482:	4629      	mov	r1, r5
 800f484:	f7f0 ff02 	bl	800028c <__adddf3>
 800f488:	4604      	mov	r4, r0
 800f48a:	460d      	mov	r5, r1
 800f48c:	ec45 4b10 	vmov	d0, r4, r5
 800f490:	b003      	add	sp, #12
 800f492:	ecbd 8b04 	vpop	{d8-d9}
 800f496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f49a:	4b1b      	ldr	r3, [pc, #108]	; (800f508 <__kernel_sin+0x150>)
 800f49c:	ec51 0b18 	vmov	r0, r1, d8
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f7f1 f8a9 	bl	80005f8 <__aeabi_dmul>
 800f4a6:	4632      	mov	r2, r6
 800f4a8:	ec41 0b19 	vmov	d9, r0, r1
 800f4ac:	463b      	mov	r3, r7
 800f4ae:	4640      	mov	r0, r8
 800f4b0:	4649      	mov	r1, r9
 800f4b2:	f7f1 f8a1 	bl	80005f8 <__aeabi_dmul>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	ec51 0b19 	vmov	r0, r1, d9
 800f4be:	f7f0 fee3 	bl	8000288 <__aeabi_dsub>
 800f4c2:	4652      	mov	r2, sl
 800f4c4:	465b      	mov	r3, fp
 800f4c6:	f7f1 f897 	bl	80005f8 <__aeabi_dmul>
 800f4ca:	ec53 2b18 	vmov	r2, r3, d8
 800f4ce:	f7f0 fedb 	bl	8000288 <__aeabi_dsub>
 800f4d2:	a30b      	add	r3, pc, #44	; (adr r3, 800f500 <__kernel_sin+0x148>)
 800f4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d8:	4606      	mov	r6, r0
 800f4da:	460f      	mov	r7, r1
 800f4dc:	4640      	mov	r0, r8
 800f4de:	4649      	mov	r1, r9
 800f4e0:	f7f1 f88a 	bl	80005f8 <__aeabi_dmul>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	4639      	mov	r1, r7
 800f4ec:	f7f0 fece 	bl	800028c <__adddf3>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	f7f0 fec6 	bl	8000288 <__aeabi_dsub>
 800f4fc:	e7c4      	b.n	800f488 <__kernel_sin+0xd0>
 800f4fe:	bf00      	nop
 800f500:	55555549 	.word	0x55555549
 800f504:	3fc55555 	.word	0x3fc55555
 800f508:	3fe00000 	.word	0x3fe00000
 800f50c:	5acfd57c 	.word	0x5acfd57c
 800f510:	3de5d93a 	.word	0x3de5d93a
 800f514:	8a2b9ceb 	.word	0x8a2b9ceb
 800f518:	3e5ae5e6 	.word	0x3e5ae5e6
 800f51c:	57b1fe7d 	.word	0x57b1fe7d
 800f520:	3ec71de3 	.word	0x3ec71de3
 800f524:	19c161d5 	.word	0x19c161d5
 800f528:	3f2a01a0 	.word	0x3f2a01a0
 800f52c:	1110f8a6 	.word	0x1110f8a6
 800f530:	3f811111 	.word	0x3f811111
 800f534:	00000000 	.word	0x00000000

0800f538 <__ieee754_atan2>:
 800f538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f53c:	ec57 6b11 	vmov	r6, r7, d1
 800f540:	4273      	negs	r3, r6
 800f542:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800f6c0 <__ieee754_atan2+0x188>
 800f546:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f54a:	4333      	orrs	r3, r6
 800f54c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f550:	4543      	cmp	r3, r8
 800f552:	ec51 0b10 	vmov	r0, r1, d0
 800f556:	ee11 5a10 	vmov	r5, s2
 800f55a:	d80a      	bhi.n	800f572 <__ieee754_atan2+0x3a>
 800f55c:	4244      	negs	r4, r0
 800f55e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f562:	4304      	orrs	r4, r0
 800f564:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f568:	4544      	cmp	r4, r8
 800f56a:	ee10 9a10 	vmov	r9, s0
 800f56e:	468e      	mov	lr, r1
 800f570:	d907      	bls.n	800f582 <__ieee754_atan2+0x4a>
 800f572:	4632      	mov	r2, r6
 800f574:	463b      	mov	r3, r7
 800f576:	f7f0 fe89 	bl	800028c <__adddf3>
 800f57a:	ec41 0b10 	vmov	d0, r0, r1
 800f57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f582:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f586:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f58a:	4334      	orrs	r4, r6
 800f58c:	d103      	bne.n	800f596 <__ieee754_atan2+0x5e>
 800f58e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f592:	f000 bfcd 	b.w	8010530 <atan>
 800f596:	17bc      	asrs	r4, r7, #30
 800f598:	f004 0402 	and.w	r4, r4, #2
 800f59c:	ea53 0909 	orrs.w	r9, r3, r9
 800f5a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f5a4:	d107      	bne.n	800f5b6 <__ieee754_atan2+0x7e>
 800f5a6:	2c02      	cmp	r4, #2
 800f5a8:	d05f      	beq.n	800f66a <__ieee754_atan2+0x132>
 800f5aa:	2c03      	cmp	r4, #3
 800f5ac:	d1e5      	bne.n	800f57a <__ieee754_atan2+0x42>
 800f5ae:	a140      	add	r1, pc, #256	; (adr r1, 800f6b0 <__ieee754_atan2+0x178>)
 800f5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5b4:	e7e1      	b.n	800f57a <__ieee754_atan2+0x42>
 800f5b6:	4315      	orrs	r5, r2
 800f5b8:	d106      	bne.n	800f5c8 <__ieee754_atan2+0x90>
 800f5ba:	f1be 0f00 	cmp.w	lr, #0
 800f5be:	da5f      	bge.n	800f680 <__ieee754_atan2+0x148>
 800f5c0:	a13d      	add	r1, pc, #244	; (adr r1, 800f6b8 <__ieee754_atan2+0x180>)
 800f5c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5c6:	e7d8      	b.n	800f57a <__ieee754_atan2+0x42>
 800f5c8:	4542      	cmp	r2, r8
 800f5ca:	d10f      	bne.n	800f5ec <__ieee754_atan2+0xb4>
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800f5d2:	d107      	bne.n	800f5e4 <__ieee754_atan2+0xac>
 800f5d4:	2c02      	cmp	r4, #2
 800f5d6:	d84c      	bhi.n	800f672 <__ieee754_atan2+0x13a>
 800f5d8:	4b33      	ldr	r3, [pc, #204]	; (800f6a8 <__ieee754_atan2+0x170>)
 800f5da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5e2:	e7ca      	b.n	800f57a <__ieee754_atan2+0x42>
 800f5e4:	2c02      	cmp	r4, #2
 800f5e6:	d848      	bhi.n	800f67a <__ieee754_atan2+0x142>
 800f5e8:	4b30      	ldr	r3, [pc, #192]	; (800f6ac <__ieee754_atan2+0x174>)
 800f5ea:	e7f6      	b.n	800f5da <__ieee754_atan2+0xa2>
 800f5ec:	4543      	cmp	r3, r8
 800f5ee:	d0e4      	beq.n	800f5ba <__ieee754_atan2+0x82>
 800f5f0:	1a9b      	subs	r3, r3, r2
 800f5f2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f5f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f5fa:	da1e      	bge.n	800f63a <__ieee754_atan2+0x102>
 800f5fc:	2f00      	cmp	r7, #0
 800f5fe:	da01      	bge.n	800f604 <__ieee754_atan2+0xcc>
 800f600:	323c      	adds	r2, #60	; 0x3c
 800f602:	db1e      	blt.n	800f642 <__ieee754_atan2+0x10a>
 800f604:	4632      	mov	r2, r6
 800f606:	463b      	mov	r3, r7
 800f608:	f7f1 f920 	bl	800084c <__aeabi_ddiv>
 800f60c:	ec41 0b10 	vmov	d0, r0, r1
 800f610:	f001 f92e 	bl	8010870 <fabs>
 800f614:	f000 ff8c 	bl	8010530 <atan>
 800f618:	ec51 0b10 	vmov	r0, r1, d0
 800f61c:	2c01      	cmp	r4, #1
 800f61e:	d013      	beq.n	800f648 <__ieee754_atan2+0x110>
 800f620:	2c02      	cmp	r4, #2
 800f622:	d015      	beq.n	800f650 <__ieee754_atan2+0x118>
 800f624:	2c00      	cmp	r4, #0
 800f626:	d0a8      	beq.n	800f57a <__ieee754_atan2+0x42>
 800f628:	a317      	add	r3, pc, #92	; (adr r3, 800f688 <__ieee754_atan2+0x150>)
 800f62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62e:	f7f0 fe2b 	bl	8000288 <__aeabi_dsub>
 800f632:	a317      	add	r3, pc, #92	; (adr r3, 800f690 <__ieee754_atan2+0x158>)
 800f634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f638:	e014      	b.n	800f664 <__ieee754_atan2+0x12c>
 800f63a:	a117      	add	r1, pc, #92	; (adr r1, 800f698 <__ieee754_atan2+0x160>)
 800f63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f640:	e7ec      	b.n	800f61c <__ieee754_atan2+0xe4>
 800f642:	2000      	movs	r0, #0
 800f644:	2100      	movs	r1, #0
 800f646:	e7e9      	b.n	800f61c <__ieee754_atan2+0xe4>
 800f648:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f64c:	4619      	mov	r1, r3
 800f64e:	e794      	b.n	800f57a <__ieee754_atan2+0x42>
 800f650:	a30d      	add	r3, pc, #52	; (adr r3, 800f688 <__ieee754_atan2+0x150>)
 800f652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f656:	f7f0 fe17 	bl	8000288 <__aeabi_dsub>
 800f65a:	4602      	mov	r2, r0
 800f65c:	460b      	mov	r3, r1
 800f65e:	a10c      	add	r1, pc, #48	; (adr r1, 800f690 <__ieee754_atan2+0x158>)
 800f660:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f664:	f7f0 fe10 	bl	8000288 <__aeabi_dsub>
 800f668:	e787      	b.n	800f57a <__ieee754_atan2+0x42>
 800f66a:	a109      	add	r1, pc, #36	; (adr r1, 800f690 <__ieee754_atan2+0x158>)
 800f66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f670:	e783      	b.n	800f57a <__ieee754_atan2+0x42>
 800f672:	a10b      	add	r1, pc, #44	; (adr r1, 800f6a0 <__ieee754_atan2+0x168>)
 800f674:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f678:	e77f      	b.n	800f57a <__ieee754_atan2+0x42>
 800f67a:	2000      	movs	r0, #0
 800f67c:	2100      	movs	r1, #0
 800f67e:	e77c      	b.n	800f57a <__ieee754_atan2+0x42>
 800f680:	a105      	add	r1, pc, #20	; (adr r1, 800f698 <__ieee754_atan2+0x160>)
 800f682:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f686:	e778      	b.n	800f57a <__ieee754_atan2+0x42>
 800f688:	33145c07 	.word	0x33145c07
 800f68c:	3ca1a626 	.word	0x3ca1a626
 800f690:	54442d18 	.word	0x54442d18
 800f694:	400921fb 	.word	0x400921fb
 800f698:	54442d18 	.word	0x54442d18
 800f69c:	3ff921fb 	.word	0x3ff921fb
 800f6a0:	54442d18 	.word	0x54442d18
 800f6a4:	3fe921fb 	.word	0x3fe921fb
 800f6a8:	08011640 	.word	0x08011640
 800f6ac:	08011658 	.word	0x08011658
 800f6b0:	54442d18 	.word	0x54442d18
 800f6b4:	c00921fb 	.word	0xc00921fb
 800f6b8:	54442d18 	.word	0x54442d18
 800f6bc:	bff921fb 	.word	0xbff921fb
 800f6c0:	7ff00000 	.word	0x7ff00000
 800f6c4:	00000000 	.word	0x00000000

0800f6c8 <__ieee754_pow>:
 800f6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6cc:	ed2d 8b06 	vpush	{d8-d10}
 800f6d0:	b089      	sub	sp, #36	; 0x24
 800f6d2:	ed8d 1b00 	vstr	d1, [sp]
 800f6d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f6da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f6de:	ea58 0102 	orrs.w	r1, r8, r2
 800f6e2:	ec57 6b10 	vmov	r6, r7, d0
 800f6e6:	d115      	bne.n	800f714 <__ieee754_pow+0x4c>
 800f6e8:	19b3      	adds	r3, r6, r6
 800f6ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f6ee:	4152      	adcs	r2, r2
 800f6f0:	4299      	cmp	r1, r3
 800f6f2:	4b89      	ldr	r3, [pc, #548]	; (800f918 <__ieee754_pow+0x250>)
 800f6f4:	4193      	sbcs	r3, r2
 800f6f6:	f080 84d1 	bcs.w	801009c <__ieee754_pow+0x9d4>
 800f6fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6fe:	4630      	mov	r0, r6
 800f700:	4639      	mov	r1, r7
 800f702:	f7f0 fdc3 	bl	800028c <__adddf3>
 800f706:	ec41 0b10 	vmov	d0, r0, r1
 800f70a:	b009      	add	sp, #36	; 0x24
 800f70c:	ecbd 8b06 	vpop	{d8-d10}
 800f710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f714:	4b81      	ldr	r3, [pc, #516]	; (800f91c <__ieee754_pow+0x254>)
 800f716:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f71a:	429c      	cmp	r4, r3
 800f71c:	ee10 aa10 	vmov	sl, s0
 800f720:	463d      	mov	r5, r7
 800f722:	dc06      	bgt.n	800f732 <__ieee754_pow+0x6a>
 800f724:	d101      	bne.n	800f72a <__ieee754_pow+0x62>
 800f726:	2e00      	cmp	r6, #0
 800f728:	d1e7      	bne.n	800f6fa <__ieee754_pow+0x32>
 800f72a:	4598      	cmp	r8, r3
 800f72c:	dc01      	bgt.n	800f732 <__ieee754_pow+0x6a>
 800f72e:	d10f      	bne.n	800f750 <__ieee754_pow+0x88>
 800f730:	b172      	cbz	r2, 800f750 <__ieee754_pow+0x88>
 800f732:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f736:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f73a:	ea55 050a 	orrs.w	r5, r5, sl
 800f73e:	d1dc      	bne.n	800f6fa <__ieee754_pow+0x32>
 800f740:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f744:	18db      	adds	r3, r3, r3
 800f746:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f74a:	4152      	adcs	r2, r2
 800f74c:	429d      	cmp	r5, r3
 800f74e:	e7d0      	b.n	800f6f2 <__ieee754_pow+0x2a>
 800f750:	2d00      	cmp	r5, #0
 800f752:	da3b      	bge.n	800f7cc <__ieee754_pow+0x104>
 800f754:	4b72      	ldr	r3, [pc, #456]	; (800f920 <__ieee754_pow+0x258>)
 800f756:	4598      	cmp	r8, r3
 800f758:	dc51      	bgt.n	800f7fe <__ieee754_pow+0x136>
 800f75a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f75e:	4598      	cmp	r8, r3
 800f760:	f340 84ab 	ble.w	80100ba <__ieee754_pow+0x9f2>
 800f764:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f768:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f76c:	2b14      	cmp	r3, #20
 800f76e:	dd0f      	ble.n	800f790 <__ieee754_pow+0xc8>
 800f770:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f774:	fa22 f103 	lsr.w	r1, r2, r3
 800f778:	fa01 f303 	lsl.w	r3, r1, r3
 800f77c:	4293      	cmp	r3, r2
 800f77e:	f040 849c 	bne.w	80100ba <__ieee754_pow+0x9f2>
 800f782:	f001 0101 	and.w	r1, r1, #1
 800f786:	f1c1 0302 	rsb	r3, r1, #2
 800f78a:	9304      	str	r3, [sp, #16]
 800f78c:	b182      	cbz	r2, 800f7b0 <__ieee754_pow+0xe8>
 800f78e:	e05f      	b.n	800f850 <__ieee754_pow+0x188>
 800f790:	2a00      	cmp	r2, #0
 800f792:	d15b      	bne.n	800f84c <__ieee754_pow+0x184>
 800f794:	f1c3 0314 	rsb	r3, r3, #20
 800f798:	fa48 f103 	asr.w	r1, r8, r3
 800f79c:	fa01 f303 	lsl.w	r3, r1, r3
 800f7a0:	4543      	cmp	r3, r8
 800f7a2:	f040 8487 	bne.w	80100b4 <__ieee754_pow+0x9ec>
 800f7a6:	f001 0101 	and.w	r1, r1, #1
 800f7aa:	f1c1 0302 	rsb	r3, r1, #2
 800f7ae:	9304      	str	r3, [sp, #16]
 800f7b0:	4b5c      	ldr	r3, [pc, #368]	; (800f924 <__ieee754_pow+0x25c>)
 800f7b2:	4598      	cmp	r8, r3
 800f7b4:	d132      	bne.n	800f81c <__ieee754_pow+0x154>
 800f7b6:	f1b9 0f00 	cmp.w	r9, #0
 800f7ba:	f280 8477 	bge.w	80100ac <__ieee754_pow+0x9e4>
 800f7be:	4959      	ldr	r1, [pc, #356]	; (800f924 <__ieee754_pow+0x25c>)
 800f7c0:	4632      	mov	r2, r6
 800f7c2:	463b      	mov	r3, r7
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	f7f1 f841 	bl	800084c <__aeabi_ddiv>
 800f7ca:	e79c      	b.n	800f706 <__ieee754_pow+0x3e>
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	9304      	str	r3, [sp, #16]
 800f7d0:	2a00      	cmp	r2, #0
 800f7d2:	d13d      	bne.n	800f850 <__ieee754_pow+0x188>
 800f7d4:	4b51      	ldr	r3, [pc, #324]	; (800f91c <__ieee754_pow+0x254>)
 800f7d6:	4598      	cmp	r8, r3
 800f7d8:	d1ea      	bne.n	800f7b0 <__ieee754_pow+0xe8>
 800f7da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f7de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f7e2:	ea53 030a 	orrs.w	r3, r3, sl
 800f7e6:	f000 8459 	beq.w	801009c <__ieee754_pow+0x9d4>
 800f7ea:	4b4f      	ldr	r3, [pc, #316]	; (800f928 <__ieee754_pow+0x260>)
 800f7ec:	429c      	cmp	r4, r3
 800f7ee:	dd08      	ble.n	800f802 <__ieee754_pow+0x13a>
 800f7f0:	f1b9 0f00 	cmp.w	r9, #0
 800f7f4:	f2c0 8456 	blt.w	80100a4 <__ieee754_pow+0x9dc>
 800f7f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7fc:	e783      	b.n	800f706 <__ieee754_pow+0x3e>
 800f7fe:	2302      	movs	r3, #2
 800f800:	e7e5      	b.n	800f7ce <__ieee754_pow+0x106>
 800f802:	f1b9 0f00 	cmp.w	r9, #0
 800f806:	f04f 0000 	mov.w	r0, #0
 800f80a:	f04f 0100 	mov.w	r1, #0
 800f80e:	f6bf af7a 	bge.w	800f706 <__ieee754_pow+0x3e>
 800f812:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f816:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f81a:	e774      	b.n	800f706 <__ieee754_pow+0x3e>
 800f81c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f820:	d106      	bne.n	800f830 <__ieee754_pow+0x168>
 800f822:	4632      	mov	r2, r6
 800f824:	463b      	mov	r3, r7
 800f826:	4630      	mov	r0, r6
 800f828:	4639      	mov	r1, r7
 800f82a:	f7f0 fee5 	bl	80005f8 <__aeabi_dmul>
 800f82e:	e76a      	b.n	800f706 <__ieee754_pow+0x3e>
 800f830:	4b3e      	ldr	r3, [pc, #248]	; (800f92c <__ieee754_pow+0x264>)
 800f832:	4599      	cmp	r9, r3
 800f834:	d10c      	bne.n	800f850 <__ieee754_pow+0x188>
 800f836:	2d00      	cmp	r5, #0
 800f838:	db0a      	blt.n	800f850 <__ieee754_pow+0x188>
 800f83a:	ec47 6b10 	vmov	d0, r6, r7
 800f83e:	b009      	add	sp, #36	; 0x24
 800f840:	ecbd 8b06 	vpop	{d8-d10}
 800f844:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f848:	f7ff bc12 	b.w	800f070 <__ieee754_sqrt>
 800f84c:	2300      	movs	r3, #0
 800f84e:	9304      	str	r3, [sp, #16]
 800f850:	ec47 6b10 	vmov	d0, r6, r7
 800f854:	f001 f80c 	bl	8010870 <fabs>
 800f858:	ec51 0b10 	vmov	r0, r1, d0
 800f85c:	f1ba 0f00 	cmp.w	sl, #0
 800f860:	d129      	bne.n	800f8b6 <__ieee754_pow+0x1ee>
 800f862:	b124      	cbz	r4, 800f86e <__ieee754_pow+0x1a6>
 800f864:	4b2f      	ldr	r3, [pc, #188]	; (800f924 <__ieee754_pow+0x25c>)
 800f866:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d123      	bne.n	800f8b6 <__ieee754_pow+0x1ee>
 800f86e:	f1b9 0f00 	cmp.w	r9, #0
 800f872:	da05      	bge.n	800f880 <__ieee754_pow+0x1b8>
 800f874:	4602      	mov	r2, r0
 800f876:	460b      	mov	r3, r1
 800f878:	2000      	movs	r0, #0
 800f87a:	492a      	ldr	r1, [pc, #168]	; (800f924 <__ieee754_pow+0x25c>)
 800f87c:	f7f0 ffe6 	bl	800084c <__aeabi_ddiv>
 800f880:	2d00      	cmp	r5, #0
 800f882:	f6bf af40 	bge.w	800f706 <__ieee754_pow+0x3e>
 800f886:	9b04      	ldr	r3, [sp, #16]
 800f888:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f88c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f890:	431c      	orrs	r4, r3
 800f892:	d108      	bne.n	800f8a6 <__ieee754_pow+0x1de>
 800f894:	4602      	mov	r2, r0
 800f896:	460b      	mov	r3, r1
 800f898:	4610      	mov	r0, r2
 800f89a:	4619      	mov	r1, r3
 800f89c:	f7f0 fcf4 	bl	8000288 <__aeabi_dsub>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	e78f      	b.n	800f7c6 <__ieee754_pow+0xfe>
 800f8a6:	9b04      	ldr	r3, [sp, #16]
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	f47f af2c 	bne.w	800f706 <__ieee754_pow+0x3e>
 800f8ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	e727      	b.n	800f706 <__ieee754_pow+0x3e>
 800f8b6:	0feb      	lsrs	r3, r5, #31
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	9306      	str	r3, [sp, #24]
 800f8bc:	9a06      	ldr	r2, [sp, #24]
 800f8be:	9b04      	ldr	r3, [sp, #16]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	d102      	bne.n	800f8ca <__ieee754_pow+0x202>
 800f8c4:	4632      	mov	r2, r6
 800f8c6:	463b      	mov	r3, r7
 800f8c8:	e7e6      	b.n	800f898 <__ieee754_pow+0x1d0>
 800f8ca:	4b19      	ldr	r3, [pc, #100]	; (800f930 <__ieee754_pow+0x268>)
 800f8cc:	4598      	cmp	r8, r3
 800f8ce:	f340 80fb 	ble.w	800fac8 <__ieee754_pow+0x400>
 800f8d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f8d6:	4598      	cmp	r8, r3
 800f8d8:	4b13      	ldr	r3, [pc, #76]	; (800f928 <__ieee754_pow+0x260>)
 800f8da:	dd0c      	ble.n	800f8f6 <__ieee754_pow+0x22e>
 800f8dc:	429c      	cmp	r4, r3
 800f8de:	dc0f      	bgt.n	800f900 <__ieee754_pow+0x238>
 800f8e0:	f1b9 0f00 	cmp.w	r9, #0
 800f8e4:	da0f      	bge.n	800f906 <__ieee754_pow+0x23e>
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	b009      	add	sp, #36	; 0x24
 800f8ea:	ecbd 8b06 	vpop	{d8-d10}
 800f8ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f2:	f001 b86e 	b.w	80109d2 <__math_oflow>
 800f8f6:	429c      	cmp	r4, r3
 800f8f8:	dbf2      	blt.n	800f8e0 <__ieee754_pow+0x218>
 800f8fa:	4b0a      	ldr	r3, [pc, #40]	; (800f924 <__ieee754_pow+0x25c>)
 800f8fc:	429c      	cmp	r4, r3
 800f8fe:	dd19      	ble.n	800f934 <__ieee754_pow+0x26c>
 800f900:	f1b9 0f00 	cmp.w	r9, #0
 800f904:	dcef      	bgt.n	800f8e6 <__ieee754_pow+0x21e>
 800f906:	2000      	movs	r0, #0
 800f908:	b009      	add	sp, #36	; 0x24
 800f90a:	ecbd 8b06 	vpop	{d8-d10}
 800f90e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f912:	f001 b855 	b.w	80109c0 <__math_uflow>
 800f916:	bf00      	nop
 800f918:	fff00000 	.word	0xfff00000
 800f91c:	7ff00000 	.word	0x7ff00000
 800f920:	433fffff 	.word	0x433fffff
 800f924:	3ff00000 	.word	0x3ff00000
 800f928:	3fefffff 	.word	0x3fefffff
 800f92c:	3fe00000 	.word	0x3fe00000
 800f930:	41e00000 	.word	0x41e00000
 800f934:	4b60      	ldr	r3, [pc, #384]	; (800fab8 <__ieee754_pow+0x3f0>)
 800f936:	2200      	movs	r2, #0
 800f938:	f7f0 fca6 	bl	8000288 <__aeabi_dsub>
 800f93c:	a354      	add	r3, pc, #336	; (adr r3, 800fa90 <__ieee754_pow+0x3c8>)
 800f93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f942:	4604      	mov	r4, r0
 800f944:	460d      	mov	r5, r1
 800f946:	f7f0 fe57 	bl	80005f8 <__aeabi_dmul>
 800f94a:	a353      	add	r3, pc, #332	; (adr r3, 800fa98 <__ieee754_pow+0x3d0>)
 800f94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f950:	4606      	mov	r6, r0
 800f952:	460f      	mov	r7, r1
 800f954:	4620      	mov	r0, r4
 800f956:	4629      	mov	r1, r5
 800f958:	f7f0 fe4e 	bl	80005f8 <__aeabi_dmul>
 800f95c:	4b57      	ldr	r3, [pc, #348]	; (800fabc <__ieee754_pow+0x3f4>)
 800f95e:	4682      	mov	sl, r0
 800f960:	468b      	mov	fp, r1
 800f962:	2200      	movs	r2, #0
 800f964:	4620      	mov	r0, r4
 800f966:	4629      	mov	r1, r5
 800f968:	f7f0 fe46 	bl	80005f8 <__aeabi_dmul>
 800f96c:	4602      	mov	r2, r0
 800f96e:	460b      	mov	r3, r1
 800f970:	a14b      	add	r1, pc, #300	; (adr r1, 800faa0 <__ieee754_pow+0x3d8>)
 800f972:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f976:	f7f0 fc87 	bl	8000288 <__aeabi_dsub>
 800f97a:	4622      	mov	r2, r4
 800f97c:	462b      	mov	r3, r5
 800f97e:	f7f0 fe3b 	bl	80005f8 <__aeabi_dmul>
 800f982:	4602      	mov	r2, r0
 800f984:	460b      	mov	r3, r1
 800f986:	2000      	movs	r0, #0
 800f988:	494d      	ldr	r1, [pc, #308]	; (800fac0 <__ieee754_pow+0x3f8>)
 800f98a:	f7f0 fc7d 	bl	8000288 <__aeabi_dsub>
 800f98e:	4622      	mov	r2, r4
 800f990:	4680      	mov	r8, r0
 800f992:	4689      	mov	r9, r1
 800f994:	462b      	mov	r3, r5
 800f996:	4620      	mov	r0, r4
 800f998:	4629      	mov	r1, r5
 800f99a:	f7f0 fe2d 	bl	80005f8 <__aeabi_dmul>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	4640      	mov	r0, r8
 800f9a4:	4649      	mov	r1, r9
 800f9a6:	f7f0 fe27 	bl	80005f8 <__aeabi_dmul>
 800f9aa:	a33f      	add	r3, pc, #252	; (adr r3, 800faa8 <__ieee754_pow+0x3e0>)
 800f9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b0:	f7f0 fe22 	bl	80005f8 <__aeabi_dmul>
 800f9b4:	4602      	mov	r2, r0
 800f9b6:	460b      	mov	r3, r1
 800f9b8:	4650      	mov	r0, sl
 800f9ba:	4659      	mov	r1, fp
 800f9bc:	f7f0 fc64 	bl	8000288 <__aeabi_dsub>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	4680      	mov	r8, r0
 800f9c6:	4689      	mov	r9, r1
 800f9c8:	4630      	mov	r0, r6
 800f9ca:	4639      	mov	r1, r7
 800f9cc:	f7f0 fc5e 	bl	800028c <__adddf3>
 800f9d0:	2000      	movs	r0, #0
 800f9d2:	4632      	mov	r2, r6
 800f9d4:	463b      	mov	r3, r7
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	460d      	mov	r5, r1
 800f9da:	f7f0 fc55 	bl	8000288 <__aeabi_dsub>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	4640      	mov	r0, r8
 800f9e4:	4649      	mov	r1, r9
 800f9e6:	f7f0 fc4f 	bl	8000288 <__aeabi_dsub>
 800f9ea:	9b04      	ldr	r3, [sp, #16]
 800f9ec:	9a06      	ldr	r2, [sp, #24]
 800f9ee:	3b01      	subs	r3, #1
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	4682      	mov	sl, r0
 800f9f4:	468b      	mov	fp, r1
 800f9f6:	f040 81e7 	bne.w	800fdc8 <__ieee754_pow+0x700>
 800f9fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fab0 <__ieee754_pow+0x3e8>
 800f9fe:	eeb0 8a47 	vmov.f32	s16, s14
 800fa02:	eef0 8a67 	vmov.f32	s17, s15
 800fa06:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fa0a:	2600      	movs	r6, #0
 800fa0c:	4632      	mov	r2, r6
 800fa0e:	463b      	mov	r3, r7
 800fa10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa14:	f7f0 fc38 	bl	8000288 <__aeabi_dsub>
 800fa18:	4622      	mov	r2, r4
 800fa1a:	462b      	mov	r3, r5
 800fa1c:	f7f0 fdec 	bl	80005f8 <__aeabi_dmul>
 800fa20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa24:	4680      	mov	r8, r0
 800fa26:	4689      	mov	r9, r1
 800fa28:	4650      	mov	r0, sl
 800fa2a:	4659      	mov	r1, fp
 800fa2c:	f7f0 fde4 	bl	80005f8 <__aeabi_dmul>
 800fa30:	4602      	mov	r2, r0
 800fa32:	460b      	mov	r3, r1
 800fa34:	4640      	mov	r0, r8
 800fa36:	4649      	mov	r1, r9
 800fa38:	f7f0 fc28 	bl	800028c <__adddf3>
 800fa3c:	4632      	mov	r2, r6
 800fa3e:	463b      	mov	r3, r7
 800fa40:	4680      	mov	r8, r0
 800fa42:	4689      	mov	r9, r1
 800fa44:	4620      	mov	r0, r4
 800fa46:	4629      	mov	r1, r5
 800fa48:	f7f0 fdd6 	bl	80005f8 <__aeabi_dmul>
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	4604      	mov	r4, r0
 800fa50:	460d      	mov	r5, r1
 800fa52:	4602      	mov	r2, r0
 800fa54:	4649      	mov	r1, r9
 800fa56:	4640      	mov	r0, r8
 800fa58:	f7f0 fc18 	bl	800028c <__adddf3>
 800fa5c:	4b19      	ldr	r3, [pc, #100]	; (800fac4 <__ieee754_pow+0x3fc>)
 800fa5e:	4299      	cmp	r1, r3
 800fa60:	ec45 4b19 	vmov	d9, r4, r5
 800fa64:	4606      	mov	r6, r0
 800fa66:	460f      	mov	r7, r1
 800fa68:	468b      	mov	fp, r1
 800fa6a:	f340 82f0 	ble.w	801004e <__ieee754_pow+0x986>
 800fa6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fa72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fa76:	4303      	orrs	r3, r0
 800fa78:	f000 81e4 	beq.w	800fe44 <__ieee754_pow+0x77c>
 800fa7c:	ec51 0b18 	vmov	r0, r1, d8
 800fa80:	2200      	movs	r2, #0
 800fa82:	2300      	movs	r3, #0
 800fa84:	f7f1 f82a 	bl	8000adc <__aeabi_dcmplt>
 800fa88:	3800      	subs	r0, #0
 800fa8a:	bf18      	it	ne
 800fa8c:	2001      	movne	r0, #1
 800fa8e:	e72b      	b.n	800f8e8 <__ieee754_pow+0x220>
 800fa90:	60000000 	.word	0x60000000
 800fa94:	3ff71547 	.word	0x3ff71547
 800fa98:	f85ddf44 	.word	0xf85ddf44
 800fa9c:	3e54ae0b 	.word	0x3e54ae0b
 800faa0:	55555555 	.word	0x55555555
 800faa4:	3fd55555 	.word	0x3fd55555
 800faa8:	652b82fe 	.word	0x652b82fe
 800faac:	3ff71547 	.word	0x3ff71547
 800fab0:	00000000 	.word	0x00000000
 800fab4:	bff00000 	.word	0xbff00000
 800fab8:	3ff00000 	.word	0x3ff00000
 800fabc:	3fd00000 	.word	0x3fd00000
 800fac0:	3fe00000 	.word	0x3fe00000
 800fac4:	408fffff 	.word	0x408fffff
 800fac8:	4bd5      	ldr	r3, [pc, #852]	; (800fe20 <__ieee754_pow+0x758>)
 800faca:	402b      	ands	r3, r5
 800facc:	2200      	movs	r2, #0
 800face:	b92b      	cbnz	r3, 800fadc <__ieee754_pow+0x414>
 800fad0:	4bd4      	ldr	r3, [pc, #848]	; (800fe24 <__ieee754_pow+0x75c>)
 800fad2:	f7f0 fd91 	bl	80005f8 <__aeabi_dmul>
 800fad6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fada:	460c      	mov	r4, r1
 800fadc:	1523      	asrs	r3, r4, #20
 800fade:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fae2:	4413      	add	r3, r2
 800fae4:	9305      	str	r3, [sp, #20]
 800fae6:	4bd0      	ldr	r3, [pc, #832]	; (800fe28 <__ieee754_pow+0x760>)
 800fae8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800faec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800faf0:	429c      	cmp	r4, r3
 800faf2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800faf6:	dd08      	ble.n	800fb0a <__ieee754_pow+0x442>
 800faf8:	4bcc      	ldr	r3, [pc, #816]	; (800fe2c <__ieee754_pow+0x764>)
 800fafa:	429c      	cmp	r4, r3
 800fafc:	f340 8162 	ble.w	800fdc4 <__ieee754_pow+0x6fc>
 800fb00:	9b05      	ldr	r3, [sp, #20]
 800fb02:	3301      	adds	r3, #1
 800fb04:	9305      	str	r3, [sp, #20]
 800fb06:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fb0a:	2400      	movs	r4, #0
 800fb0c:	00e3      	lsls	r3, r4, #3
 800fb0e:	9307      	str	r3, [sp, #28]
 800fb10:	4bc7      	ldr	r3, [pc, #796]	; (800fe30 <__ieee754_pow+0x768>)
 800fb12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb16:	ed93 7b00 	vldr	d7, [r3]
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	ec53 2b17 	vmov	r2, r3, d7
 800fb20:	eeb0 9a47 	vmov.f32	s18, s14
 800fb24:	eef0 9a67 	vmov.f32	s19, s15
 800fb28:	4682      	mov	sl, r0
 800fb2a:	f7f0 fbad 	bl	8000288 <__aeabi_dsub>
 800fb2e:	4652      	mov	r2, sl
 800fb30:	4606      	mov	r6, r0
 800fb32:	460f      	mov	r7, r1
 800fb34:	462b      	mov	r3, r5
 800fb36:	ec51 0b19 	vmov	r0, r1, d9
 800fb3a:	f7f0 fba7 	bl	800028c <__adddf3>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	460b      	mov	r3, r1
 800fb42:	2000      	movs	r0, #0
 800fb44:	49bb      	ldr	r1, [pc, #748]	; (800fe34 <__ieee754_pow+0x76c>)
 800fb46:	f7f0 fe81 	bl	800084c <__aeabi_ddiv>
 800fb4a:	ec41 0b1a 	vmov	d10, r0, r1
 800fb4e:	4602      	mov	r2, r0
 800fb50:	460b      	mov	r3, r1
 800fb52:	4630      	mov	r0, r6
 800fb54:	4639      	mov	r1, r7
 800fb56:	f7f0 fd4f 	bl	80005f8 <__aeabi_dmul>
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb60:	9302      	str	r3, [sp, #8]
 800fb62:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fb66:	46ab      	mov	fp, r5
 800fb68:	106d      	asrs	r5, r5, #1
 800fb6a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fb6e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fb72:	ec41 0b18 	vmov	d8, r0, r1
 800fb76:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	4640      	mov	r0, r8
 800fb7e:	4649      	mov	r1, r9
 800fb80:	4614      	mov	r4, r2
 800fb82:	461d      	mov	r5, r3
 800fb84:	f7f0 fd38 	bl	80005f8 <__aeabi_dmul>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	460b      	mov	r3, r1
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	4639      	mov	r1, r7
 800fb90:	f7f0 fb7a 	bl	8000288 <__aeabi_dsub>
 800fb94:	ec53 2b19 	vmov	r2, r3, d9
 800fb98:	4606      	mov	r6, r0
 800fb9a:	460f      	mov	r7, r1
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	4629      	mov	r1, r5
 800fba0:	f7f0 fb72 	bl	8000288 <__aeabi_dsub>
 800fba4:	4602      	mov	r2, r0
 800fba6:	460b      	mov	r3, r1
 800fba8:	4650      	mov	r0, sl
 800fbaa:	4659      	mov	r1, fp
 800fbac:	f7f0 fb6c 	bl	8000288 <__aeabi_dsub>
 800fbb0:	4642      	mov	r2, r8
 800fbb2:	464b      	mov	r3, r9
 800fbb4:	f7f0 fd20 	bl	80005f8 <__aeabi_dmul>
 800fbb8:	4602      	mov	r2, r0
 800fbba:	460b      	mov	r3, r1
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	4639      	mov	r1, r7
 800fbc0:	f7f0 fb62 	bl	8000288 <__aeabi_dsub>
 800fbc4:	ec53 2b1a 	vmov	r2, r3, d10
 800fbc8:	f7f0 fd16 	bl	80005f8 <__aeabi_dmul>
 800fbcc:	ec53 2b18 	vmov	r2, r3, d8
 800fbd0:	ec41 0b19 	vmov	d9, r0, r1
 800fbd4:	ec51 0b18 	vmov	r0, r1, d8
 800fbd8:	f7f0 fd0e 	bl	80005f8 <__aeabi_dmul>
 800fbdc:	a37c      	add	r3, pc, #496	; (adr r3, 800fdd0 <__ieee754_pow+0x708>)
 800fbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	460d      	mov	r5, r1
 800fbe6:	f7f0 fd07 	bl	80005f8 <__aeabi_dmul>
 800fbea:	a37b      	add	r3, pc, #492	; (adr r3, 800fdd8 <__ieee754_pow+0x710>)
 800fbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf0:	f7f0 fb4c 	bl	800028c <__adddf3>
 800fbf4:	4622      	mov	r2, r4
 800fbf6:	462b      	mov	r3, r5
 800fbf8:	f7f0 fcfe 	bl	80005f8 <__aeabi_dmul>
 800fbfc:	a378      	add	r3, pc, #480	; (adr r3, 800fde0 <__ieee754_pow+0x718>)
 800fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc02:	f7f0 fb43 	bl	800028c <__adddf3>
 800fc06:	4622      	mov	r2, r4
 800fc08:	462b      	mov	r3, r5
 800fc0a:	f7f0 fcf5 	bl	80005f8 <__aeabi_dmul>
 800fc0e:	a376      	add	r3, pc, #472	; (adr r3, 800fde8 <__ieee754_pow+0x720>)
 800fc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc14:	f7f0 fb3a 	bl	800028c <__adddf3>
 800fc18:	4622      	mov	r2, r4
 800fc1a:	462b      	mov	r3, r5
 800fc1c:	f7f0 fcec 	bl	80005f8 <__aeabi_dmul>
 800fc20:	a373      	add	r3, pc, #460	; (adr r3, 800fdf0 <__ieee754_pow+0x728>)
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	f7f0 fb31 	bl	800028c <__adddf3>
 800fc2a:	4622      	mov	r2, r4
 800fc2c:	462b      	mov	r3, r5
 800fc2e:	f7f0 fce3 	bl	80005f8 <__aeabi_dmul>
 800fc32:	a371      	add	r3, pc, #452	; (adr r3, 800fdf8 <__ieee754_pow+0x730>)
 800fc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc38:	f7f0 fb28 	bl	800028c <__adddf3>
 800fc3c:	4622      	mov	r2, r4
 800fc3e:	4606      	mov	r6, r0
 800fc40:	460f      	mov	r7, r1
 800fc42:	462b      	mov	r3, r5
 800fc44:	4620      	mov	r0, r4
 800fc46:	4629      	mov	r1, r5
 800fc48:	f7f0 fcd6 	bl	80005f8 <__aeabi_dmul>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	460b      	mov	r3, r1
 800fc50:	4630      	mov	r0, r6
 800fc52:	4639      	mov	r1, r7
 800fc54:	f7f0 fcd0 	bl	80005f8 <__aeabi_dmul>
 800fc58:	4642      	mov	r2, r8
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	460d      	mov	r5, r1
 800fc5e:	464b      	mov	r3, r9
 800fc60:	ec51 0b18 	vmov	r0, r1, d8
 800fc64:	f7f0 fb12 	bl	800028c <__adddf3>
 800fc68:	ec53 2b19 	vmov	r2, r3, d9
 800fc6c:	f7f0 fcc4 	bl	80005f8 <__aeabi_dmul>
 800fc70:	4622      	mov	r2, r4
 800fc72:	462b      	mov	r3, r5
 800fc74:	f7f0 fb0a 	bl	800028c <__adddf3>
 800fc78:	4642      	mov	r2, r8
 800fc7a:	4682      	mov	sl, r0
 800fc7c:	468b      	mov	fp, r1
 800fc7e:	464b      	mov	r3, r9
 800fc80:	4640      	mov	r0, r8
 800fc82:	4649      	mov	r1, r9
 800fc84:	f7f0 fcb8 	bl	80005f8 <__aeabi_dmul>
 800fc88:	4b6b      	ldr	r3, [pc, #428]	; (800fe38 <__ieee754_pow+0x770>)
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	4606      	mov	r6, r0
 800fc8e:	460f      	mov	r7, r1
 800fc90:	f7f0 fafc 	bl	800028c <__adddf3>
 800fc94:	4652      	mov	r2, sl
 800fc96:	465b      	mov	r3, fp
 800fc98:	f7f0 faf8 	bl	800028c <__adddf3>
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	4604      	mov	r4, r0
 800fca0:	460d      	mov	r5, r1
 800fca2:	4602      	mov	r2, r0
 800fca4:	460b      	mov	r3, r1
 800fca6:	4640      	mov	r0, r8
 800fca8:	4649      	mov	r1, r9
 800fcaa:	f7f0 fca5 	bl	80005f8 <__aeabi_dmul>
 800fcae:	4b62      	ldr	r3, [pc, #392]	; (800fe38 <__ieee754_pow+0x770>)
 800fcb0:	4680      	mov	r8, r0
 800fcb2:	4689      	mov	r9, r1
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	4629      	mov	r1, r5
 800fcba:	f7f0 fae5 	bl	8000288 <__aeabi_dsub>
 800fcbe:	4632      	mov	r2, r6
 800fcc0:	463b      	mov	r3, r7
 800fcc2:	f7f0 fae1 	bl	8000288 <__aeabi_dsub>
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	460b      	mov	r3, r1
 800fcca:	4650      	mov	r0, sl
 800fccc:	4659      	mov	r1, fp
 800fcce:	f7f0 fadb 	bl	8000288 <__aeabi_dsub>
 800fcd2:	ec53 2b18 	vmov	r2, r3, d8
 800fcd6:	f7f0 fc8f 	bl	80005f8 <__aeabi_dmul>
 800fcda:	4622      	mov	r2, r4
 800fcdc:	4606      	mov	r6, r0
 800fcde:	460f      	mov	r7, r1
 800fce0:	462b      	mov	r3, r5
 800fce2:	ec51 0b19 	vmov	r0, r1, d9
 800fce6:	f7f0 fc87 	bl	80005f8 <__aeabi_dmul>
 800fcea:	4602      	mov	r2, r0
 800fcec:	460b      	mov	r3, r1
 800fcee:	4630      	mov	r0, r6
 800fcf0:	4639      	mov	r1, r7
 800fcf2:	f7f0 facb 	bl	800028c <__adddf3>
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	460f      	mov	r7, r1
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	4640      	mov	r0, r8
 800fd00:	4649      	mov	r1, r9
 800fd02:	f7f0 fac3 	bl	800028c <__adddf3>
 800fd06:	a33e      	add	r3, pc, #248	; (adr r3, 800fe00 <__ieee754_pow+0x738>)
 800fd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	4604      	mov	r4, r0
 800fd10:	460d      	mov	r5, r1
 800fd12:	f7f0 fc71 	bl	80005f8 <__aeabi_dmul>
 800fd16:	4642      	mov	r2, r8
 800fd18:	ec41 0b18 	vmov	d8, r0, r1
 800fd1c:	464b      	mov	r3, r9
 800fd1e:	4620      	mov	r0, r4
 800fd20:	4629      	mov	r1, r5
 800fd22:	f7f0 fab1 	bl	8000288 <__aeabi_dsub>
 800fd26:	4602      	mov	r2, r0
 800fd28:	460b      	mov	r3, r1
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	4639      	mov	r1, r7
 800fd2e:	f7f0 faab 	bl	8000288 <__aeabi_dsub>
 800fd32:	a335      	add	r3, pc, #212	; (adr r3, 800fe08 <__ieee754_pow+0x740>)
 800fd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd38:	f7f0 fc5e 	bl	80005f8 <__aeabi_dmul>
 800fd3c:	a334      	add	r3, pc, #208	; (adr r3, 800fe10 <__ieee754_pow+0x748>)
 800fd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd42:	4606      	mov	r6, r0
 800fd44:	460f      	mov	r7, r1
 800fd46:	4620      	mov	r0, r4
 800fd48:	4629      	mov	r1, r5
 800fd4a:	f7f0 fc55 	bl	80005f8 <__aeabi_dmul>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	460b      	mov	r3, r1
 800fd52:	4630      	mov	r0, r6
 800fd54:	4639      	mov	r1, r7
 800fd56:	f7f0 fa99 	bl	800028c <__adddf3>
 800fd5a:	9a07      	ldr	r2, [sp, #28]
 800fd5c:	4b37      	ldr	r3, [pc, #220]	; (800fe3c <__ieee754_pow+0x774>)
 800fd5e:	4413      	add	r3, r2
 800fd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd64:	f7f0 fa92 	bl	800028c <__adddf3>
 800fd68:	4682      	mov	sl, r0
 800fd6a:	9805      	ldr	r0, [sp, #20]
 800fd6c:	468b      	mov	fp, r1
 800fd6e:	f7f0 fbd9 	bl	8000524 <__aeabi_i2d>
 800fd72:	9a07      	ldr	r2, [sp, #28]
 800fd74:	4b32      	ldr	r3, [pc, #200]	; (800fe40 <__ieee754_pow+0x778>)
 800fd76:	4413      	add	r3, r2
 800fd78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd7c:	4606      	mov	r6, r0
 800fd7e:	460f      	mov	r7, r1
 800fd80:	4652      	mov	r2, sl
 800fd82:	465b      	mov	r3, fp
 800fd84:	ec51 0b18 	vmov	r0, r1, d8
 800fd88:	f7f0 fa80 	bl	800028c <__adddf3>
 800fd8c:	4642      	mov	r2, r8
 800fd8e:	464b      	mov	r3, r9
 800fd90:	f7f0 fa7c 	bl	800028c <__adddf3>
 800fd94:	4632      	mov	r2, r6
 800fd96:	463b      	mov	r3, r7
 800fd98:	f7f0 fa78 	bl	800028c <__adddf3>
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	4632      	mov	r2, r6
 800fda0:	463b      	mov	r3, r7
 800fda2:	4604      	mov	r4, r0
 800fda4:	460d      	mov	r5, r1
 800fda6:	f7f0 fa6f 	bl	8000288 <__aeabi_dsub>
 800fdaa:	4642      	mov	r2, r8
 800fdac:	464b      	mov	r3, r9
 800fdae:	f7f0 fa6b 	bl	8000288 <__aeabi_dsub>
 800fdb2:	ec53 2b18 	vmov	r2, r3, d8
 800fdb6:	f7f0 fa67 	bl	8000288 <__aeabi_dsub>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	4650      	mov	r0, sl
 800fdc0:	4659      	mov	r1, fp
 800fdc2:	e610      	b.n	800f9e6 <__ieee754_pow+0x31e>
 800fdc4:	2401      	movs	r4, #1
 800fdc6:	e6a1      	b.n	800fb0c <__ieee754_pow+0x444>
 800fdc8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800fe18 <__ieee754_pow+0x750>
 800fdcc:	e617      	b.n	800f9fe <__ieee754_pow+0x336>
 800fdce:	bf00      	nop
 800fdd0:	4a454eef 	.word	0x4a454eef
 800fdd4:	3fca7e28 	.word	0x3fca7e28
 800fdd8:	93c9db65 	.word	0x93c9db65
 800fddc:	3fcd864a 	.word	0x3fcd864a
 800fde0:	a91d4101 	.word	0xa91d4101
 800fde4:	3fd17460 	.word	0x3fd17460
 800fde8:	518f264d 	.word	0x518f264d
 800fdec:	3fd55555 	.word	0x3fd55555
 800fdf0:	db6fabff 	.word	0xdb6fabff
 800fdf4:	3fdb6db6 	.word	0x3fdb6db6
 800fdf8:	33333303 	.word	0x33333303
 800fdfc:	3fe33333 	.word	0x3fe33333
 800fe00:	e0000000 	.word	0xe0000000
 800fe04:	3feec709 	.word	0x3feec709
 800fe08:	dc3a03fd 	.word	0xdc3a03fd
 800fe0c:	3feec709 	.word	0x3feec709
 800fe10:	145b01f5 	.word	0x145b01f5
 800fe14:	be3e2fe0 	.word	0xbe3e2fe0
 800fe18:	00000000 	.word	0x00000000
 800fe1c:	3ff00000 	.word	0x3ff00000
 800fe20:	7ff00000 	.word	0x7ff00000
 800fe24:	43400000 	.word	0x43400000
 800fe28:	0003988e 	.word	0x0003988e
 800fe2c:	000bb679 	.word	0x000bb679
 800fe30:	08011670 	.word	0x08011670
 800fe34:	3ff00000 	.word	0x3ff00000
 800fe38:	40080000 	.word	0x40080000
 800fe3c:	08011690 	.word	0x08011690
 800fe40:	08011680 	.word	0x08011680
 800fe44:	a3b3      	add	r3, pc, #716	; (adr r3, 8010114 <__ieee754_pow+0xa4c>)
 800fe46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4a:	4640      	mov	r0, r8
 800fe4c:	4649      	mov	r1, r9
 800fe4e:	f7f0 fa1d 	bl	800028c <__adddf3>
 800fe52:	4622      	mov	r2, r4
 800fe54:	ec41 0b1a 	vmov	d10, r0, r1
 800fe58:	462b      	mov	r3, r5
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	4639      	mov	r1, r7
 800fe5e:	f7f0 fa13 	bl	8000288 <__aeabi_dsub>
 800fe62:	4602      	mov	r2, r0
 800fe64:	460b      	mov	r3, r1
 800fe66:	ec51 0b1a 	vmov	r0, r1, d10
 800fe6a:	f7f0 fe55 	bl	8000b18 <__aeabi_dcmpgt>
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	f47f ae04 	bne.w	800fa7c <__ieee754_pow+0x3b4>
 800fe74:	4aa2      	ldr	r2, [pc, #648]	; (8010100 <__ieee754_pow+0xa38>)
 800fe76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	f340 8107 	ble.w	801008e <__ieee754_pow+0x9c6>
 800fe80:	151b      	asrs	r3, r3, #20
 800fe82:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fe86:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fe8a:	fa4a fa03 	asr.w	sl, sl, r3
 800fe8e:	44da      	add	sl, fp
 800fe90:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800fe94:	489b      	ldr	r0, [pc, #620]	; (8010104 <__ieee754_pow+0xa3c>)
 800fe96:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800fe9a:	4108      	asrs	r0, r1
 800fe9c:	ea00 030a 	and.w	r3, r0, sl
 800fea0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fea4:	f1c1 0114 	rsb	r1, r1, #20
 800fea8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800feac:	fa4a fa01 	asr.w	sl, sl, r1
 800feb0:	f1bb 0f00 	cmp.w	fp, #0
 800feb4:	f04f 0200 	mov.w	r2, #0
 800feb8:	4620      	mov	r0, r4
 800feba:	4629      	mov	r1, r5
 800febc:	bfb8      	it	lt
 800febe:	f1ca 0a00 	rsblt	sl, sl, #0
 800fec2:	f7f0 f9e1 	bl	8000288 <__aeabi_dsub>
 800fec6:	ec41 0b19 	vmov	d9, r0, r1
 800feca:	4642      	mov	r2, r8
 800fecc:	464b      	mov	r3, r9
 800fece:	ec51 0b19 	vmov	r0, r1, d9
 800fed2:	f7f0 f9db 	bl	800028c <__adddf3>
 800fed6:	a37a      	add	r3, pc, #488	; (adr r3, 80100c0 <__ieee754_pow+0x9f8>)
 800fed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fedc:	2000      	movs	r0, #0
 800fede:	4604      	mov	r4, r0
 800fee0:	460d      	mov	r5, r1
 800fee2:	f7f0 fb89 	bl	80005f8 <__aeabi_dmul>
 800fee6:	ec53 2b19 	vmov	r2, r3, d9
 800feea:	4606      	mov	r6, r0
 800feec:	460f      	mov	r7, r1
 800feee:	4620      	mov	r0, r4
 800fef0:	4629      	mov	r1, r5
 800fef2:	f7f0 f9c9 	bl	8000288 <__aeabi_dsub>
 800fef6:	4602      	mov	r2, r0
 800fef8:	460b      	mov	r3, r1
 800fefa:	4640      	mov	r0, r8
 800fefc:	4649      	mov	r1, r9
 800fefe:	f7f0 f9c3 	bl	8000288 <__aeabi_dsub>
 800ff02:	a371      	add	r3, pc, #452	; (adr r3, 80100c8 <__ieee754_pow+0xa00>)
 800ff04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff08:	f7f0 fb76 	bl	80005f8 <__aeabi_dmul>
 800ff0c:	a370      	add	r3, pc, #448	; (adr r3, 80100d0 <__ieee754_pow+0xa08>)
 800ff0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff12:	4680      	mov	r8, r0
 800ff14:	4689      	mov	r9, r1
 800ff16:	4620      	mov	r0, r4
 800ff18:	4629      	mov	r1, r5
 800ff1a:	f7f0 fb6d 	bl	80005f8 <__aeabi_dmul>
 800ff1e:	4602      	mov	r2, r0
 800ff20:	460b      	mov	r3, r1
 800ff22:	4640      	mov	r0, r8
 800ff24:	4649      	mov	r1, r9
 800ff26:	f7f0 f9b1 	bl	800028c <__adddf3>
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	460d      	mov	r5, r1
 800ff2e:	4602      	mov	r2, r0
 800ff30:	460b      	mov	r3, r1
 800ff32:	4630      	mov	r0, r6
 800ff34:	4639      	mov	r1, r7
 800ff36:	f7f0 f9a9 	bl	800028c <__adddf3>
 800ff3a:	4632      	mov	r2, r6
 800ff3c:	463b      	mov	r3, r7
 800ff3e:	4680      	mov	r8, r0
 800ff40:	4689      	mov	r9, r1
 800ff42:	f7f0 f9a1 	bl	8000288 <__aeabi_dsub>
 800ff46:	4602      	mov	r2, r0
 800ff48:	460b      	mov	r3, r1
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	f7f0 f99b 	bl	8000288 <__aeabi_dsub>
 800ff52:	4642      	mov	r2, r8
 800ff54:	4606      	mov	r6, r0
 800ff56:	460f      	mov	r7, r1
 800ff58:	464b      	mov	r3, r9
 800ff5a:	4640      	mov	r0, r8
 800ff5c:	4649      	mov	r1, r9
 800ff5e:	f7f0 fb4b 	bl	80005f8 <__aeabi_dmul>
 800ff62:	a35d      	add	r3, pc, #372	; (adr r3, 80100d8 <__ieee754_pow+0xa10>)
 800ff64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff68:	4604      	mov	r4, r0
 800ff6a:	460d      	mov	r5, r1
 800ff6c:	f7f0 fb44 	bl	80005f8 <__aeabi_dmul>
 800ff70:	a35b      	add	r3, pc, #364	; (adr r3, 80100e0 <__ieee754_pow+0xa18>)
 800ff72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff76:	f7f0 f987 	bl	8000288 <__aeabi_dsub>
 800ff7a:	4622      	mov	r2, r4
 800ff7c:	462b      	mov	r3, r5
 800ff7e:	f7f0 fb3b 	bl	80005f8 <__aeabi_dmul>
 800ff82:	a359      	add	r3, pc, #356	; (adr r3, 80100e8 <__ieee754_pow+0xa20>)
 800ff84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff88:	f7f0 f980 	bl	800028c <__adddf3>
 800ff8c:	4622      	mov	r2, r4
 800ff8e:	462b      	mov	r3, r5
 800ff90:	f7f0 fb32 	bl	80005f8 <__aeabi_dmul>
 800ff94:	a356      	add	r3, pc, #344	; (adr r3, 80100f0 <__ieee754_pow+0xa28>)
 800ff96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9a:	f7f0 f975 	bl	8000288 <__aeabi_dsub>
 800ff9e:	4622      	mov	r2, r4
 800ffa0:	462b      	mov	r3, r5
 800ffa2:	f7f0 fb29 	bl	80005f8 <__aeabi_dmul>
 800ffa6:	a354      	add	r3, pc, #336	; (adr r3, 80100f8 <__ieee754_pow+0xa30>)
 800ffa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffac:	f7f0 f96e 	bl	800028c <__adddf3>
 800ffb0:	4622      	mov	r2, r4
 800ffb2:	462b      	mov	r3, r5
 800ffb4:	f7f0 fb20 	bl	80005f8 <__aeabi_dmul>
 800ffb8:	4602      	mov	r2, r0
 800ffba:	460b      	mov	r3, r1
 800ffbc:	4640      	mov	r0, r8
 800ffbe:	4649      	mov	r1, r9
 800ffc0:	f7f0 f962 	bl	8000288 <__aeabi_dsub>
 800ffc4:	4604      	mov	r4, r0
 800ffc6:	460d      	mov	r5, r1
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	4640      	mov	r0, r8
 800ffce:	4649      	mov	r1, r9
 800ffd0:	f7f0 fb12 	bl	80005f8 <__aeabi_dmul>
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	ec41 0b19 	vmov	d9, r0, r1
 800ffda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ffde:	4620      	mov	r0, r4
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	f7f0 f951 	bl	8000288 <__aeabi_dsub>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	460b      	mov	r3, r1
 800ffea:	ec51 0b19 	vmov	r0, r1, d9
 800ffee:	f7f0 fc2d 	bl	800084c <__aeabi_ddiv>
 800fff2:	4632      	mov	r2, r6
 800fff4:	4604      	mov	r4, r0
 800fff6:	460d      	mov	r5, r1
 800fff8:	463b      	mov	r3, r7
 800fffa:	4640      	mov	r0, r8
 800fffc:	4649      	mov	r1, r9
 800fffe:	f7f0 fafb 	bl	80005f8 <__aeabi_dmul>
 8010002:	4632      	mov	r2, r6
 8010004:	463b      	mov	r3, r7
 8010006:	f7f0 f941 	bl	800028c <__adddf3>
 801000a:	4602      	mov	r2, r0
 801000c:	460b      	mov	r3, r1
 801000e:	4620      	mov	r0, r4
 8010010:	4629      	mov	r1, r5
 8010012:	f7f0 f939 	bl	8000288 <__aeabi_dsub>
 8010016:	4642      	mov	r2, r8
 8010018:	464b      	mov	r3, r9
 801001a:	f7f0 f935 	bl	8000288 <__aeabi_dsub>
 801001e:	460b      	mov	r3, r1
 8010020:	4602      	mov	r2, r0
 8010022:	4939      	ldr	r1, [pc, #228]	; (8010108 <__ieee754_pow+0xa40>)
 8010024:	2000      	movs	r0, #0
 8010026:	f7f0 f92f 	bl	8000288 <__aeabi_dsub>
 801002a:	ec41 0b10 	vmov	d0, r0, r1
 801002e:	ee10 3a90 	vmov	r3, s1
 8010032:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801003a:	da2b      	bge.n	8010094 <__ieee754_pow+0x9cc>
 801003c:	4650      	mov	r0, sl
 801003e:	f000 fc23 	bl	8010888 <scalbn>
 8010042:	ec51 0b10 	vmov	r0, r1, d0
 8010046:	ec53 2b18 	vmov	r2, r3, d8
 801004a:	f7ff bbee 	b.w	800f82a <__ieee754_pow+0x162>
 801004e:	4b2f      	ldr	r3, [pc, #188]	; (801010c <__ieee754_pow+0xa44>)
 8010050:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010054:	429e      	cmp	r6, r3
 8010056:	f77f af0d 	ble.w	800fe74 <__ieee754_pow+0x7ac>
 801005a:	4b2d      	ldr	r3, [pc, #180]	; (8010110 <__ieee754_pow+0xa48>)
 801005c:	440b      	add	r3, r1
 801005e:	4303      	orrs	r3, r0
 8010060:	d009      	beq.n	8010076 <__ieee754_pow+0x9ae>
 8010062:	ec51 0b18 	vmov	r0, r1, d8
 8010066:	2200      	movs	r2, #0
 8010068:	2300      	movs	r3, #0
 801006a:	f7f0 fd37 	bl	8000adc <__aeabi_dcmplt>
 801006e:	3800      	subs	r0, #0
 8010070:	bf18      	it	ne
 8010072:	2001      	movne	r0, #1
 8010074:	e448      	b.n	800f908 <__ieee754_pow+0x240>
 8010076:	4622      	mov	r2, r4
 8010078:	462b      	mov	r3, r5
 801007a:	f7f0 f905 	bl	8000288 <__aeabi_dsub>
 801007e:	4642      	mov	r2, r8
 8010080:	464b      	mov	r3, r9
 8010082:	f7f0 fd3f 	bl	8000b04 <__aeabi_dcmpge>
 8010086:	2800      	cmp	r0, #0
 8010088:	f43f aef4 	beq.w	800fe74 <__ieee754_pow+0x7ac>
 801008c:	e7e9      	b.n	8010062 <__ieee754_pow+0x99a>
 801008e:	f04f 0a00 	mov.w	sl, #0
 8010092:	e71a      	b.n	800feca <__ieee754_pow+0x802>
 8010094:	ec51 0b10 	vmov	r0, r1, d0
 8010098:	4619      	mov	r1, r3
 801009a:	e7d4      	b.n	8010046 <__ieee754_pow+0x97e>
 801009c:	491a      	ldr	r1, [pc, #104]	; (8010108 <__ieee754_pow+0xa40>)
 801009e:	2000      	movs	r0, #0
 80100a0:	f7ff bb31 	b.w	800f706 <__ieee754_pow+0x3e>
 80100a4:	2000      	movs	r0, #0
 80100a6:	2100      	movs	r1, #0
 80100a8:	f7ff bb2d 	b.w	800f706 <__ieee754_pow+0x3e>
 80100ac:	4630      	mov	r0, r6
 80100ae:	4639      	mov	r1, r7
 80100b0:	f7ff bb29 	b.w	800f706 <__ieee754_pow+0x3e>
 80100b4:	9204      	str	r2, [sp, #16]
 80100b6:	f7ff bb7b 	b.w	800f7b0 <__ieee754_pow+0xe8>
 80100ba:	2300      	movs	r3, #0
 80100bc:	f7ff bb65 	b.w	800f78a <__ieee754_pow+0xc2>
 80100c0:	00000000 	.word	0x00000000
 80100c4:	3fe62e43 	.word	0x3fe62e43
 80100c8:	fefa39ef 	.word	0xfefa39ef
 80100cc:	3fe62e42 	.word	0x3fe62e42
 80100d0:	0ca86c39 	.word	0x0ca86c39
 80100d4:	be205c61 	.word	0xbe205c61
 80100d8:	72bea4d0 	.word	0x72bea4d0
 80100dc:	3e663769 	.word	0x3e663769
 80100e0:	c5d26bf1 	.word	0xc5d26bf1
 80100e4:	3ebbbd41 	.word	0x3ebbbd41
 80100e8:	af25de2c 	.word	0xaf25de2c
 80100ec:	3f11566a 	.word	0x3f11566a
 80100f0:	16bebd93 	.word	0x16bebd93
 80100f4:	3f66c16c 	.word	0x3f66c16c
 80100f8:	5555553e 	.word	0x5555553e
 80100fc:	3fc55555 	.word	0x3fc55555
 8010100:	3fe00000 	.word	0x3fe00000
 8010104:	fff00000 	.word	0xfff00000
 8010108:	3ff00000 	.word	0x3ff00000
 801010c:	4090cbff 	.word	0x4090cbff
 8010110:	3f6f3400 	.word	0x3f6f3400
 8010114:	652b82fe 	.word	0x652b82fe
 8010118:	3c971547 	.word	0x3c971547
 801011c:	00000000 	.word	0x00000000

08010120 <__ieee754_rem_pio2>:
 8010120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010124:	ed2d 8b02 	vpush	{d8}
 8010128:	ec55 4b10 	vmov	r4, r5, d0
 801012c:	4bca      	ldr	r3, [pc, #808]	; (8010458 <__ieee754_rem_pio2+0x338>)
 801012e:	b08b      	sub	sp, #44	; 0x2c
 8010130:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010134:	4598      	cmp	r8, r3
 8010136:	4682      	mov	sl, r0
 8010138:	9502      	str	r5, [sp, #8]
 801013a:	dc08      	bgt.n	801014e <__ieee754_rem_pio2+0x2e>
 801013c:	2200      	movs	r2, #0
 801013e:	2300      	movs	r3, #0
 8010140:	ed80 0b00 	vstr	d0, [r0]
 8010144:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010148:	f04f 0b00 	mov.w	fp, #0
 801014c:	e028      	b.n	80101a0 <__ieee754_rem_pio2+0x80>
 801014e:	4bc3      	ldr	r3, [pc, #780]	; (801045c <__ieee754_rem_pio2+0x33c>)
 8010150:	4598      	cmp	r8, r3
 8010152:	dc78      	bgt.n	8010246 <__ieee754_rem_pio2+0x126>
 8010154:	9b02      	ldr	r3, [sp, #8]
 8010156:	4ec2      	ldr	r6, [pc, #776]	; (8010460 <__ieee754_rem_pio2+0x340>)
 8010158:	2b00      	cmp	r3, #0
 801015a:	ee10 0a10 	vmov	r0, s0
 801015e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010420 <__ieee754_rem_pio2+0x300>)
 8010160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010164:	4629      	mov	r1, r5
 8010166:	dd39      	ble.n	80101dc <__ieee754_rem_pio2+0xbc>
 8010168:	f7f0 f88e 	bl	8000288 <__aeabi_dsub>
 801016c:	45b0      	cmp	r8, r6
 801016e:	4604      	mov	r4, r0
 8010170:	460d      	mov	r5, r1
 8010172:	d01b      	beq.n	80101ac <__ieee754_rem_pio2+0x8c>
 8010174:	a3ac      	add	r3, pc, #688	; (adr r3, 8010428 <__ieee754_rem_pio2+0x308>)
 8010176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017a:	f7f0 f885 	bl	8000288 <__aeabi_dsub>
 801017e:	4602      	mov	r2, r0
 8010180:	460b      	mov	r3, r1
 8010182:	e9ca 2300 	strd	r2, r3, [sl]
 8010186:	4620      	mov	r0, r4
 8010188:	4629      	mov	r1, r5
 801018a:	f7f0 f87d 	bl	8000288 <__aeabi_dsub>
 801018e:	a3a6      	add	r3, pc, #664	; (adr r3, 8010428 <__ieee754_rem_pio2+0x308>)
 8010190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010194:	f7f0 f878 	bl	8000288 <__aeabi_dsub>
 8010198:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801019c:	f04f 0b01 	mov.w	fp, #1
 80101a0:	4658      	mov	r0, fp
 80101a2:	b00b      	add	sp, #44	; 0x2c
 80101a4:	ecbd 8b02 	vpop	{d8}
 80101a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8010430 <__ieee754_rem_pio2+0x310>)
 80101ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b2:	f7f0 f869 	bl	8000288 <__aeabi_dsub>
 80101b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8010438 <__ieee754_rem_pio2+0x318>)
 80101b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101bc:	4604      	mov	r4, r0
 80101be:	460d      	mov	r5, r1
 80101c0:	f7f0 f862 	bl	8000288 <__aeabi_dsub>
 80101c4:	4602      	mov	r2, r0
 80101c6:	460b      	mov	r3, r1
 80101c8:	e9ca 2300 	strd	r2, r3, [sl]
 80101cc:	4620      	mov	r0, r4
 80101ce:	4629      	mov	r1, r5
 80101d0:	f7f0 f85a 	bl	8000288 <__aeabi_dsub>
 80101d4:	a398      	add	r3, pc, #608	; (adr r3, 8010438 <__ieee754_rem_pio2+0x318>)
 80101d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101da:	e7db      	b.n	8010194 <__ieee754_rem_pio2+0x74>
 80101dc:	f7f0 f856 	bl	800028c <__adddf3>
 80101e0:	45b0      	cmp	r8, r6
 80101e2:	4604      	mov	r4, r0
 80101e4:	460d      	mov	r5, r1
 80101e6:	d016      	beq.n	8010216 <__ieee754_rem_pio2+0xf6>
 80101e8:	a38f      	add	r3, pc, #572	; (adr r3, 8010428 <__ieee754_rem_pio2+0x308>)
 80101ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ee:	f7f0 f84d 	bl	800028c <__adddf3>
 80101f2:	4602      	mov	r2, r0
 80101f4:	460b      	mov	r3, r1
 80101f6:	e9ca 2300 	strd	r2, r3, [sl]
 80101fa:	4620      	mov	r0, r4
 80101fc:	4629      	mov	r1, r5
 80101fe:	f7f0 f843 	bl	8000288 <__aeabi_dsub>
 8010202:	a389      	add	r3, pc, #548	; (adr r3, 8010428 <__ieee754_rem_pio2+0x308>)
 8010204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010208:	f7f0 f840 	bl	800028c <__adddf3>
 801020c:	f04f 3bff 	mov.w	fp, #4294967295
 8010210:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010214:	e7c4      	b.n	80101a0 <__ieee754_rem_pio2+0x80>
 8010216:	a386      	add	r3, pc, #536	; (adr r3, 8010430 <__ieee754_rem_pio2+0x310>)
 8010218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021c:	f7f0 f836 	bl	800028c <__adddf3>
 8010220:	a385      	add	r3, pc, #532	; (adr r3, 8010438 <__ieee754_rem_pio2+0x318>)
 8010222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010226:	4604      	mov	r4, r0
 8010228:	460d      	mov	r5, r1
 801022a:	f7f0 f82f 	bl	800028c <__adddf3>
 801022e:	4602      	mov	r2, r0
 8010230:	460b      	mov	r3, r1
 8010232:	e9ca 2300 	strd	r2, r3, [sl]
 8010236:	4620      	mov	r0, r4
 8010238:	4629      	mov	r1, r5
 801023a:	f7f0 f825 	bl	8000288 <__aeabi_dsub>
 801023e:	a37e      	add	r3, pc, #504	; (adr r3, 8010438 <__ieee754_rem_pio2+0x318>)
 8010240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010244:	e7e0      	b.n	8010208 <__ieee754_rem_pio2+0xe8>
 8010246:	4b87      	ldr	r3, [pc, #540]	; (8010464 <__ieee754_rem_pio2+0x344>)
 8010248:	4598      	cmp	r8, r3
 801024a:	f300 80d8 	bgt.w	80103fe <__ieee754_rem_pio2+0x2de>
 801024e:	f000 fb0f 	bl	8010870 <fabs>
 8010252:	ec55 4b10 	vmov	r4, r5, d0
 8010256:	ee10 0a10 	vmov	r0, s0
 801025a:	a379      	add	r3, pc, #484	; (adr r3, 8010440 <__ieee754_rem_pio2+0x320>)
 801025c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010260:	4629      	mov	r1, r5
 8010262:	f7f0 f9c9 	bl	80005f8 <__aeabi_dmul>
 8010266:	4b80      	ldr	r3, [pc, #512]	; (8010468 <__ieee754_rem_pio2+0x348>)
 8010268:	2200      	movs	r2, #0
 801026a:	f7f0 f80f 	bl	800028c <__adddf3>
 801026e:	f7f0 fc73 	bl	8000b58 <__aeabi_d2iz>
 8010272:	4683      	mov	fp, r0
 8010274:	f7f0 f956 	bl	8000524 <__aeabi_i2d>
 8010278:	4602      	mov	r2, r0
 801027a:	460b      	mov	r3, r1
 801027c:	ec43 2b18 	vmov	d8, r2, r3
 8010280:	a367      	add	r3, pc, #412	; (adr r3, 8010420 <__ieee754_rem_pio2+0x300>)
 8010282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010286:	f7f0 f9b7 	bl	80005f8 <__aeabi_dmul>
 801028a:	4602      	mov	r2, r0
 801028c:	460b      	mov	r3, r1
 801028e:	4620      	mov	r0, r4
 8010290:	4629      	mov	r1, r5
 8010292:	f7ef fff9 	bl	8000288 <__aeabi_dsub>
 8010296:	a364      	add	r3, pc, #400	; (adr r3, 8010428 <__ieee754_rem_pio2+0x308>)
 8010298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029c:	4606      	mov	r6, r0
 801029e:	460f      	mov	r7, r1
 80102a0:	ec51 0b18 	vmov	r0, r1, d8
 80102a4:	f7f0 f9a8 	bl	80005f8 <__aeabi_dmul>
 80102a8:	f1bb 0f1f 	cmp.w	fp, #31
 80102ac:	4604      	mov	r4, r0
 80102ae:	460d      	mov	r5, r1
 80102b0:	dc0d      	bgt.n	80102ce <__ieee754_rem_pio2+0x1ae>
 80102b2:	4b6e      	ldr	r3, [pc, #440]	; (801046c <__ieee754_rem_pio2+0x34c>)
 80102b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80102b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102bc:	4543      	cmp	r3, r8
 80102be:	d006      	beq.n	80102ce <__ieee754_rem_pio2+0x1ae>
 80102c0:	4622      	mov	r2, r4
 80102c2:	462b      	mov	r3, r5
 80102c4:	4630      	mov	r0, r6
 80102c6:	4639      	mov	r1, r7
 80102c8:	f7ef ffde 	bl	8000288 <__aeabi_dsub>
 80102cc:	e00e      	b.n	80102ec <__ieee754_rem_pio2+0x1cc>
 80102ce:	462b      	mov	r3, r5
 80102d0:	4622      	mov	r2, r4
 80102d2:	4630      	mov	r0, r6
 80102d4:	4639      	mov	r1, r7
 80102d6:	f7ef ffd7 	bl	8000288 <__aeabi_dsub>
 80102da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80102de:	9303      	str	r3, [sp, #12]
 80102e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80102e4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80102e8:	2b10      	cmp	r3, #16
 80102ea:	dc02      	bgt.n	80102f2 <__ieee754_rem_pio2+0x1d2>
 80102ec:	e9ca 0100 	strd	r0, r1, [sl]
 80102f0:	e039      	b.n	8010366 <__ieee754_rem_pio2+0x246>
 80102f2:	a34f      	add	r3, pc, #316	; (adr r3, 8010430 <__ieee754_rem_pio2+0x310>)
 80102f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f8:	ec51 0b18 	vmov	r0, r1, d8
 80102fc:	f7f0 f97c 	bl	80005f8 <__aeabi_dmul>
 8010300:	4604      	mov	r4, r0
 8010302:	460d      	mov	r5, r1
 8010304:	4602      	mov	r2, r0
 8010306:	460b      	mov	r3, r1
 8010308:	4630      	mov	r0, r6
 801030a:	4639      	mov	r1, r7
 801030c:	f7ef ffbc 	bl	8000288 <__aeabi_dsub>
 8010310:	4602      	mov	r2, r0
 8010312:	460b      	mov	r3, r1
 8010314:	4680      	mov	r8, r0
 8010316:	4689      	mov	r9, r1
 8010318:	4630      	mov	r0, r6
 801031a:	4639      	mov	r1, r7
 801031c:	f7ef ffb4 	bl	8000288 <__aeabi_dsub>
 8010320:	4622      	mov	r2, r4
 8010322:	462b      	mov	r3, r5
 8010324:	f7ef ffb0 	bl	8000288 <__aeabi_dsub>
 8010328:	a343      	add	r3, pc, #268	; (adr r3, 8010438 <__ieee754_rem_pio2+0x318>)
 801032a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032e:	4604      	mov	r4, r0
 8010330:	460d      	mov	r5, r1
 8010332:	ec51 0b18 	vmov	r0, r1, d8
 8010336:	f7f0 f95f 	bl	80005f8 <__aeabi_dmul>
 801033a:	4622      	mov	r2, r4
 801033c:	462b      	mov	r3, r5
 801033e:	f7ef ffa3 	bl	8000288 <__aeabi_dsub>
 8010342:	4602      	mov	r2, r0
 8010344:	460b      	mov	r3, r1
 8010346:	4604      	mov	r4, r0
 8010348:	460d      	mov	r5, r1
 801034a:	4640      	mov	r0, r8
 801034c:	4649      	mov	r1, r9
 801034e:	f7ef ff9b 	bl	8000288 <__aeabi_dsub>
 8010352:	9a03      	ldr	r2, [sp, #12]
 8010354:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010358:	1ad3      	subs	r3, r2, r3
 801035a:	2b31      	cmp	r3, #49	; 0x31
 801035c:	dc24      	bgt.n	80103a8 <__ieee754_rem_pio2+0x288>
 801035e:	e9ca 0100 	strd	r0, r1, [sl]
 8010362:	4646      	mov	r6, r8
 8010364:	464f      	mov	r7, r9
 8010366:	e9da 8900 	ldrd	r8, r9, [sl]
 801036a:	4630      	mov	r0, r6
 801036c:	4642      	mov	r2, r8
 801036e:	464b      	mov	r3, r9
 8010370:	4639      	mov	r1, r7
 8010372:	f7ef ff89 	bl	8000288 <__aeabi_dsub>
 8010376:	462b      	mov	r3, r5
 8010378:	4622      	mov	r2, r4
 801037a:	f7ef ff85 	bl	8000288 <__aeabi_dsub>
 801037e:	9b02      	ldr	r3, [sp, #8]
 8010380:	2b00      	cmp	r3, #0
 8010382:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010386:	f6bf af0b 	bge.w	80101a0 <__ieee754_rem_pio2+0x80>
 801038a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801038e:	f8ca 3004 	str.w	r3, [sl, #4]
 8010392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010396:	f8ca 8000 	str.w	r8, [sl]
 801039a:	f8ca 0008 	str.w	r0, [sl, #8]
 801039e:	f8ca 300c 	str.w	r3, [sl, #12]
 80103a2:	f1cb 0b00 	rsb	fp, fp, #0
 80103a6:	e6fb      	b.n	80101a0 <__ieee754_rem_pio2+0x80>
 80103a8:	a327      	add	r3, pc, #156	; (adr r3, 8010448 <__ieee754_rem_pio2+0x328>)
 80103aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ae:	ec51 0b18 	vmov	r0, r1, d8
 80103b2:	f7f0 f921 	bl	80005f8 <__aeabi_dmul>
 80103b6:	4604      	mov	r4, r0
 80103b8:	460d      	mov	r5, r1
 80103ba:	4602      	mov	r2, r0
 80103bc:	460b      	mov	r3, r1
 80103be:	4640      	mov	r0, r8
 80103c0:	4649      	mov	r1, r9
 80103c2:	f7ef ff61 	bl	8000288 <__aeabi_dsub>
 80103c6:	4602      	mov	r2, r0
 80103c8:	460b      	mov	r3, r1
 80103ca:	4606      	mov	r6, r0
 80103cc:	460f      	mov	r7, r1
 80103ce:	4640      	mov	r0, r8
 80103d0:	4649      	mov	r1, r9
 80103d2:	f7ef ff59 	bl	8000288 <__aeabi_dsub>
 80103d6:	4622      	mov	r2, r4
 80103d8:	462b      	mov	r3, r5
 80103da:	f7ef ff55 	bl	8000288 <__aeabi_dsub>
 80103de:	a31c      	add	r3, pc, #112	; (adr r3, 8010450 <__ieee754_rem_pio2+0x330>)
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	4604      	mov	r4, r0
 80103e6:	460d      	mov	r5, r1
 80103e8:	ec51 0b18 	vmov	r0, r1, d8
 80103ec:	f7f0 f904 	bl	80005f8 <__aeabi_dmul>
 80103f0:	4622      	mov	r2, r4
 80103f2:	462b      	mov	r3, r5
 80103f4:	f7ef ff48 	bl	8000288 <__aeabi_dsub>
 80103f8:	4604      	mov	r4, r0
 80103fa:	460d      	mov	r5, r1
 80103fc:	e760      	b.n	80102c0 <__ieee754_rem_pio2+0x1a0>
 80103fe:	4b1c      	ldr	r3, [pc, #112]	; (8010470 <__ieee754_rem_pio2+0x350>)
 8010400:	4598      	cmp	r8, r3
 8010402:	dd37      	ble.n	8010474 <__ieee754_rem_pio2+0x354>
 8010404:	ee10 2a10 	vmov	r2, s0
 8010408:	462b      	mov	r3, r5
 801040a:	4620      	mov	r0, r4
 801040c:	4629      	mov	r1, r5
 801040e:	f7ef ff3b 	bl	8000288 <__aeabi_dsub>
 8010412:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010416:	e9ca 0100 	strd	r0, r1, [sl]
 801041a:	e695      	b.n	8010148 <__ieee754_rem_pio2+0x28>
 801041c:	f3af 8000 	nop.w
 8010420:	54400000 	.word	0x54400000
 8010424:	3ff921fb 	.word	0x3ff921fb
 8010428:	1a626331 	.word	0x1a626331
 801042c:	3dd0b461 	.word	0x3dd0b461
 8010430:	1a600000 	.word	0x1a600000
 8010434:	3dd0b461 	.word	0x3dd0b461
 8010438:	2e037073 	.word	0x2e037073
 801043c:	3ba3198a 	.word	0x3ba3198a
 8010440:	6dc9c883 	.word	0x6dc9c883
 8010444:	3fe45f30 	.word	0x3fe45f30
 8010448:	2e000000 	.word	0x2e000000
 801044c:	3ba3198a 	.word	0x3ba3198a
 8010450:	252049c1 	.word	0x252049c1
 8010454:	397b839a 	.word	0x397b839a
 8010458:	3fe921fb 	.word	0x3fe921fb
 801045c:	4002d97b 	.word	0x4002d97b
 8010460:	3ff921fb 	.word	0x3ff921fb
 8010464:	413921fb 	.word	0x413921fb
 8010468:	3fe00000 	.word	0x3fe00000
 801046c:	080116a0 	.word	0x080116a0
 8010470:	7fefffff 	.word	0x7fefffff
 8010474:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010478:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801047c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010480:	4620      	mov	r0, r4
 8010482:	460d      	mov	r5, r1
 8010484:	f7f0 fb68 	bl	8000b58 <__aeabi_d2iz>
 8010488:	f7f0 f84c 	bl	8000524 <__aeabi_i2d>
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	4620      	mov	r0, r4
 8010492:	4629      	mov	r1, r5
 8010494:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010498:	f7ef fef6 	bl	8000288 <__aeabi_dsub>
 801049c:	4b21      	ldr	r3, [pc, #132]	; (8010524 <__ieee754_rem_pio2+0x404>)
 801049e:	2200      	movs	r2, #0
 80104a0:	f7f0 f8aa 	bl	80005f8 <__aeabi_dmul>
 80104a4:	460d      	mov	r5, r1
 80104a6:	4604      	mov	r4, r0
 80104a8:	f7f0 fb56 	bl	8000b58 <__aeabi_d2iz>
 80104ac:	f7f0 f83a 	bl	8000524 <__aeabi_i2d>
 80104b0:	4602      	mov	r2, r0
 80104b2:	460b      	mov	r3, r1
 80104b4:	4620      	mov	r0, r4
 80104b6:	4629      	mov	r1, r5
 80104b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80104bc:	f7ef fee4 	bl	8000288 <__aeabi_dsub>
 80104c0:	4b18      	ldr	r3, [pc, #96]	; (8010524 <__ieee754_rem_pio2+0x404>)
 80104c2:	2200      	movs	r2, #0
 80104c4:	f7f0 f898 	bl	80005f8 <__aeabi_dmul>
 80104c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104cc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80104d0:	2703      	movs	r7, #3
 80104d2:	2400      	movs	r4, #0
 80104d4:	2500      	movs	r5, #0
 80104d6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80104da:	4622      	mov	r2, r4
 80104dc:	462b      	mov	r3, r5
 80104de:	46b9      	mov	r9, r7
 80104e0:	3f01      	subs	r7, #1
 80104e2:	f7f0 faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d1f5      	bne.n	80104d6 <__ieee754_rem_pio2+0x3b6>
 80104ea:	4b0f      	ldr	r3, [pc, #60]	; (8010528 <__ieee754_rem_pio2+0x408>)
 80104ec:	9301      	str	r3, [sp, #4]
 80104ee:	2302      	movs	r3, #2
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	4632      	mov	r2, r6
 80104f4:	464b      	mov	r3, r9
 80104f6:	4651      	mov	r1, sl
 80104f8:	a804      	add	r0, sp, #16
 80104fa:	f000 fa75 	bl	80109e8 <__kernel_rem_pio2>
 80104fe:	9b02      	ldr	r3, [sp, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	4683      	mov	fp, r0
 8010504:	f6bf ae4c 	bge.w	80101a0 <__ieee754_rem_pio2+0x80>
 8010508:	e9da 2100 	ldrd	r2, r1, [sl]
 801050c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010510:	e9ca 2300 	strd	r2, r3, [sl]
 8010514:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010518:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801051c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010520:	e73f      	b.n	80103a2 <__ieee754_rem_pio2+0x282>
 8010522:	bf00      	nop
 8010524:	41700000 	.word	0x41700000
 8010528:	08011720 	.word	0x08011720
 801052c:	00000000 	.word	0x00000000

08010530 <atan>:
 8010530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010534:	ec55 4b10 	vmov	r4, r5, d0
 8010538:	4bc3      	ldr	r3, [pc, #780]	; (8010848 <atan+0x318>)
 801053a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801053e:	429e      	cmp	r6, r3
 8010540:	46ab      	mov	fp, r5
 8010542:	dd18      	ble.n	8010576 <atan+0x46>
 8010544:	4bc1      	ldr	r3, [pc, #772]	; (801084c <atan+0x31c>)
 8010546:	429e      	cmp	r6, r3
 8010548:	dc01      	bgt.n	801054e <atan+0x1e>
 801054a:	d109      	bne.n	8010560 <atan+0x30>
 801054c:	b144      	cbz	r4, 8010560 <atan+0x30>
 801054e:	4622      	mov	r2, r4
 8010550:	462b      	mov	r3, r5
 8010552:	4620      	mov	r0, r4
 8010554:	4629      	mov	r1, r5
 8010556:	f7ef fe99 	bl	800028c <__adddf3>
 801055a:	4604      	mov	r4, r0
 801055c:	460d      	mov	r5, r1
 801055e:	e006      	b.n	801056e <atan+0x3e>
 8010560:	f1bb 0f00 	cmp.w	fp, #0
 8010564:	f300 8131 	bgt.w	80107ca <atan+0x29a>
 8010568:	a59b      	add	r5, pc, #620	; (adr r5, 80107d8 <atan+0x2a8>)
 801056a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801056e:	ec45 4b10 	vmov	d0, r4, r5
 8010572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010576:	4bb6      	ldr	r3, [pc, #728]	; (8010850 <atan+0x320>)
 8010578:	429e      	cmp	r6, r3
 801057a:	dc14      	bgt.n	80105a6 <atan+0x76>
 801057c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010580:	429e      	cmp	r6, r3
 8010582:	dc0d      	bgt.n	80105a0 <atan+0x70>
 8010584:	a396      	add	r3, pc, #600	; (adr r3, 80107e0 <atan+0x2b0>)
 8010586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058a:	ee10 0a10 	vmov	r0, s0
 801058e:	4629      	mov	r1, r5
 8010590:	f7ef fe7c 	bl	800028c <__adddf3>
 8010594:	4baf      	ldr	r3, [pc, #700]	; (8010854 <atan+0x324>)
 8010596:	2200      	movs	r2, #0
 8010598:	f7f0 fabe 	bl	8000b18 <__aeabi_dcmpgt>
 801059c:	2800      	cmp	r0, #0
 801059e:	d1e6      	bne.n	801056e <atan+0x3e>
 80105a0:	f04f 3aff 	mov.w	sl, #4294967295
 80105a4:	e02b      	b.n	80105fe <atan+0xce>
 80105a6:	f000 f963 	bl	8010870 <fabs>
 80105aa:	4bab      	ldr	r3, [pc, #684]	; (8010858 <atan+0x328>)
 80105ac:	429e      	cmp	r6, r3
 80105ae:	ec55 4b10 	vmov	r4, r5, d0
 80105b2:	f300 80bf 	bgt.w	8010734 <atan+0x204>
 80105b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80105ba:	429e      	cmp	r6, r3
 80105bc:	f300 80a0 	bgt.w	8010700 <atan+0x1d0>
 80105c0:	ee10 2a10 	vmov	r2, s0
 80105c4:	ee10 0a10 	vmov	r0, s0
 80105c8:	462b      	mov	r3, r5
 80105ca:	4629      	mov	r1, r5
 80105cc:	f7ef fe5e 	bl	800028c <__adddf3>
 80105d0:	4ba0      	ldr	r3, [pc, #640]	; (8010854 <atan+0x324>)
 80105d2:	2200      	movs	r2, #0
 80105d4:	f7ef fe58 	bl	8000288 <__aeabi_dsub>
 80105d8:	2200      	movs	r2, #0
 80105da:	4606      	mov	r6, r0
 80105dc:	460f      	mov	r7, r1
 80105de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80105e2:	4620      	mov	r0, r4
 80105e4:	4629      	mov	r1, r5
 80105e6:	f7ef fe51 	bl	800028c <__adddf3>
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	4630      	mov	r0, r6
 80105f0:	4639      	mov	r1, r7
 80105f2:	f7f0 f92b 	bl	800084c <__aeabi_ddiv>
 80105f6:	f04f 0a00 	mov.w	sl, #0
 80105fa:	4604      	mov	r4, r0
 80105fc:	460d      	mov	r5, r1
 80105fe:	4622      	mov	r2, r4
 8010600:	462b      	mov	r3, r5
 8010602:	4620      	mov	r0, r4
 8010604:	4629      	mov	r1, r5
 8010606:	f7ef fff7 	bl	80005f8 <__aeabi_dmul>
 801060a:	4602      	mov	r2, r0
 801060c:	460b      	mov	r3, r1
 801060e:	4680      	mov	r8, r0
 8010610:	4689      	mov	r9, r1
 8010612:	f7ef fff1 	bl	80005f8 <__aeabi_dmul>
 8010616:	a374      	add	r3, pc, #464	; (adr r3, 80107e8 <atan+0x2b8>)
 8010618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061c:	4606      	mov	r6, r0
 801061e:	460f      	mov	r7, r1
 8010620:	f7ef ffea 	bl	80005f8 <__aeabi_dmul>
 8010624:	a372      	add	r3, pc, #456	; (adr r3, 80107f0 <atan+0x2c0>)
 8010626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062a:	f7ef fe2f 	bl	800028c <__adddf3>
 801062e:	4632      	mov	r2, r6
 8010630:	463b      	mov	r3, r7
 8010632:	f7ef ffe1 	bl	80005f8 <__aeabi_dmul>
 8010636:	a370      	add	r3, pc, #448	; (adr r3, 80107f8 <atan+0x2c8>)
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	f7ef fe26 	bl	800028c <__adddf3>
 8010640:	4632      	mov	r2, r6
 8010642:	463b      	mov	r3, r7
 8010644:	f7ef ffd8 	bl	80005f8 <__aeabi_dmul>
 8010648:	a36d      	add	r3, pc, #436	; (adr r3, 8010800 <atan+0x2d0>)
 801064a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064e:	f7ef fe1d 	bl	800028c <__adddf3>
 8010652:	4632      	mov	r2, r6
 8010654:	463b      	mov	r3, r7
 8010656:	f7ef ffcf 	bl	80005f8 <__aeabi_dmul>
 801065a:	a36b      	add	r3, pc, #428	; (adr r3, 8010808 <atan+0x2d8>)
 801065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010660:	f7ef fe14 	bl	800028c <__adddf3>
 8010664:	4632      	mov	r2, r6
 8010666:	463b      	mov	r3, r7
 8010668:	f7ef ffc6 	bl	80005f8 <__aeabi_dmul>
 801066c:	a368      	add	r3, pc, #416	; (adr r3, 8010810 <atan+0x2e0>)
 801066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010672:	f7ef fe0b 	bl	800028c <__adddf3>
 8010676:	4642      	mov	r2, r8
 8010678:	464b      	mov	r3, r9
 801067a:	f7ef ffbd 	bl	80005f8 <__aeabi_dmul>
 801067e:	a366      	add	r3, pc, #408	; (adr r3, 8010818 <atan+0x2e8>)
 8010680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010684:	4680      	mov	r8, r0
 8010686:	4689      	mov	r9, r1
 8010688:	4630      	mov	r0, r6
 801068a:	4639      	mov	r1, r7
 801068c:	f7ef ffb4 	bl	80005f8 <__aeabi_dmul>
 8010690:	a363      	add	r3, pc, #396	; (adr r3, 8010820 <atan+0x2f0>)
 8010692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010696:	f7ef fdf7 	bl	8000288 <__aeabi_dsub>
 801069a:	4632      	mov	r2, r6
 801069c:	463b      	mov	r3, r7
 801069e:	f7ef ffab 	bl	80005f8 <__aeabi_dmul>
 80106a2:	a361      	add	r3, pc, #388	; (adr r3, 8010828 <atan+0x2f8>)
 80106a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a8:	f7ef fdee 	bl	8000288 <__aeabi_dsub>
 80106ac:	4632      	mov	r2, r6
 80106ae:	463b      	mov	r3, r7
 80106b0:	f7ef ffa2 	bl	80005f8 <__aeabi_dmul>
 80106b4:	a35e      	add	r3, pc, #376	; (adr r3, 8010830 <atan+0x300>)
 80106b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ba:	f7ef fde5 	bl	8000288 <__aeabi_dsub>
 80106be:	4632      	mov	r2, r6
 80106c0:	463b      	mov	r3, r7
 80106c2:	f7ef ff99 	bl	80005f8 <__aeabi_dmul>
 80106c6:	a35c      	add	r3, pc, #368	; (adr r3, 8010838 <atan+0x308>)
 80106c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106cc:	f7ef fddc 	bl	8000288 <__aeabi_dsub>
 80106d0:	4632      	mov	r2, r6
 80106d2:	463b      	mov	r3, r7
 80106d4:	f7ef ff90 	bl	80005f8 <__aeabi_dmul>
 80106d8:	4602      	mov	r2, r0
 80106da:	460b      	mov	r3, r1
 80106dc:	4640      	mov	r0, r8
 80106de:	4649      	mov	r1, r9
 80106e0:	f7ef fdd4 	bl	800028c <__adddf3>
 80106e4:	4622      	mov	r2, r4
 80106e6:	462b      	mov	r3, r5
 80106e8:	f7ef ff86 	bl	80005f8 <__aeabi_dmul>
 80106ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80106f0:	4602      	mov	r2, r0
 80106f2:	460b      	mov	r3, r1
 80106f4:	d14b      	bne.n	801078e <atan+0x25e>
 80106f6:	4620      	mov	r0, r4
 80106f8:	4629      	mov	r1, r5
 80106fa:	f7ef fdc5 	bl	8000288 <__aeabi_dsub>
 80106fe:	e72c      	b.n	801055a <atan+0x2a>
 8010700:	ee10 0a10 	vmov	r0, s0
 8010704:	4b53      	ldr	r3, [pc, #332]	; (8010854 <atan+0x324>)
 8010706:	2200      	movs	r2, #0
 8010708:	4629      	mov	r1, r5
 801070a:	f7ef fdbd 	bl	8000288 <__aeabi_dsub>
 801070e:	4b51      	ldr	r3, [pc, #324]	; (8010854 <atan+0x324>)
 8010710:	4606      	mov	r6, r0
 8010712:	460f      	mov	r7, r1
 8010714:	2200      	movs	r2, #0
 8010716:	4620      	mov	r0, r4
 8010718:	4629      	mov	r1, r5
 801071a:	f7ef fdb7 	bl	800028c <__adddf3>
 801071e:	4602      	mov	r2, r0
 8010720:	460b      	mov	r3, r1
 8010722:	4630      	mov	r0, r6
 8010724:	4639      	mov	r1, r7
 8010726:	f7f0 f891 	bl	800084c <__aeabi_ddiv>
 801072a:	f04f 0a01 	mov.w	sl, #1
 801072e:	4604      	mov	r4, r0
 8010730:	460d      	mov	r5, r1
 8010732:	e764      	b.n	80105fe <atan+0xce>
 8010734:	4b49      	ldr	r3, [pc, #292]	; (801085c <atan+0x32c>)
 8010736:	429e      	cmp	r6, r3
 8010738:	da1d      	bge.n	8010776 <atan+0x246>
 801073a:	ee10 0a10 	vmov	r0, s0
 801073e:	4b48      	ldr	r3, [pc, #288]	; (8010860 <atan+0x330>)
 8010740:	2200      	movs	r2, #0
 8010742:	4629      	mov	r1, r5
 8010744:	f7ef fda0 	bl	8000288 <__aeabi_dsub>
 8010748:	4b45      	ldr	r3, [pc, #276]	; (8010860 <atan+0x330>)
 801074a:	4606      	mov	r6, r0
 801074c:	460f      	mov	r7, r1
 801074e:	2200      	movs	r2, #0
 8010750:	4620      	mov	r0, r4
 8010752:	4629      	mov	r1, r5
 8010754:	f7ef ff50 	bl	80005f8 <__aeabi_dmul>
 8010758:	4b3e      	ldr	r3, [pc, #248]	; (8010854 <atan+0x324>)
 801075a:	2200      	movs	r2, #0
 801075c:	f7ef fd96 	bl	800028c <__adddf3>
 8010760:	4602      	mov	r2, r0
 8010762:	460b      	mov	r3, r1
 8010764:	4630      	mov	r0, r6
 8010766:	4639      	mov	r1, r7
 8010768:	f7f0 f870 	bl	800084c <__aeabi_ddiv>
 801076c:	f04f 0a02 	mov.w	sl, #2
 8010770:	4604      	mov	r4, r0
 8010772:	460d      	mov	r5, r1
 8010774:	e743      	b.n	80105fe <atan+0xce>
 8010776:	462b      	mov	r3, r5
 8010778:	ee10 2a10 	vmov	r2, s0
 801077c:	4939      	ldr	r1, [pc, #228]	; (8010864 <atan+0x334>)
 801077e:	2000      	movs	r0, #0
 8010780:	f7f0 f864 	bl	800084c <__aeabi_ddiv>
 8010784:	f04f 0a03 	mov.w	sl, #3
 8010788:	4604      	mov	r4, r0
 801078a:	460d      	mov	r5, r1
 801078c:	e737      	b.n	80105fe <atan+0xce>
 801078e:	4b36      	ldr	r3, [pc, #216]	; (8010868 <atan+0x338>)
 8010790:	4e36      	ldr	r6, [pc, #216]	; (801086c <atan+0x33c>)
 8010792:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079a:	f7ef fd75 	bl	8000288 <__aeabi_dsub>
 801079e:	4622      	mov	r2, r4
 80107a0:	462b      	mov	r3, r5
 80107a2:	f7ef fd71 	bl	8000288 <__aeabi_dsub>
 80107a6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80107aa:	4602      	mov	r2, r0
 80107ac:	460b      	mov	r3, r1
 80107ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 80107b2:	f7ef fd69 	bl	8000288 <__aeabi_dsub>
 80107b6:	f1bb 0f00 	cmp.w	fp, #0
 80107ba:	4604      	mov	r4, r0
 80107bc:	460d      	mov	r5, r1
 80107be:	f6bf aed6 	bge.w	801056e <atan+0x3e>
 80107c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107c6:	461d      	mov	r5, r3
 80107c8:	e6d1      	b.n	801056e <atan+0x3e>
 80107ca:	a51d      	add	r5, pc, #116	; (adr r5, 8010840 <atan+0x310>)
 80107cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80107d0:	e6cd      	b.n	801056e <atan+0x3e>
 80107d2:	bf00      	nop
 80107d4:	f3af 8000 	nop.w
 80107d8:	54442d18 	.word	0x54442d18
 80107dc:	bff921fb 	.word	0xbff921fb
 80107e0:	8800759c 	.word	0x8800759c
 80107e4:	7e37e43c 	.word	0x7e37e43c
 80107e8:	e322da11 	.word	0xe322da11
 80107ec:	3f90ad3a 	.word	0x3f90ad3a
 80107f0:	24760deb 	.word	0x24760deb
 80107f4:	3fa97b4b 	.word	0x3fa97b4b
 80107f8:	a0d03d51 	.word	0xa0d03d51
 80107fc:	3fb10d66 	.word	0x3fb10d66
 8010800:	c54c206e 	.word	0xc54c206e
 8010804:	3fb745cd 	.word	0x3fb745cd
 8010808:	920083ff 	.word	0x920083ff
 801080c:	3fc24924 	.word	0x3fc24924
 8010810:	5555550d 	.word	0x5555550d
 8010814:	3fd55555 	.word	0x3fd55555
 8010818:	2c6a6c2f 	.word	0x2c6a6c2f
 801081c:	bfa2b444 	.word	0xbfa2b444
 8010820:	52defd9a 	.word	0x52defd9a
 8010824:	3fadde2d 	.word	0x3fadde2d
 8010828:	af749a6d 	.word	0xaf749a6d
 801082c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010830:	fe231671 	.word	0xfe231671
 8010834:	3fbc71c6 	.word	0x3fbc71c6
 8010838:	9998ebc4 	.word	0x9998ebc4
 801083c:	3fc99999 	.word	0x3fc99999
 8010840:	54442d18 	.word	0x54442d18
 8010844:	3ff921fb 	.word	0x3ff921fb
 8010848:	440fffff 	.word	0x440fffff
 801084c:	7ff00000 	.word	0x7ff00000
 8010850:	3fdbffff 	.word	0x3fdbffff
 8010854:	3ff00000 	.word	0x3ff00000
 8010858:	3ff2ffff 	.word	0x3ff2ffff
 801085c:	40038000 	.word	0x40038000
 8010860:	3ff80000 	.word	0x3ff80000
 8010864:	bff00000 	.word	0xbff00000
 8010868:	08011848 	.word	0x08011848
 801086c:	08011828 	.word	0x08011828

08010870 <fabs>:
 8010870:	ec51 0b10 	vmov	r0, r1, d0
 8010874:	ee10 2a10 	vmov	r2, s0
 8010878:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801087c:	ec43 2b10 	vmov	d0, r2, r3
 8010880:	4770      	bx	lr
 8010882:	0000      	movs	r0, r0
 8010884:	0000      	movs	r0, r0
	...

08010888 <scalbn>:
 8010888:	b570      	push	{r4, r5, r6, lr}
 801088a:	ec55 4b10 	vmov	r4, r5, d0
 801088e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010892:	4606      	mov	r6, r0
 8010894:	462b      	mov	r3, r5
 8010896:	b999      	cbnz	r1, 80108c0 <scalbn+0x38>
 8010898:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801089c:	4323      	orrs	r3, r4
 801089e:	d03f      	beq.n	8010920 <scalbn+0x98>
 80108a0:	4b35      	ldr	r3, [pc, #212]	; (8010978 <scalbn+0xf0>)
 80108a2:	4629      	mov	r1, r5
 80108a4:	ee10 0a10 	vmov	r0, s0
 80108a8:	2200      	movs	r2, #0
 80108aa:	f7ef fea5 	bl	80005f8 <__aeabi_dmul>
 80108ae:	4b33      	ldr	r3, [pc, #204]	; (801097c <scalbn+0xf4>)
 80108b0:	429e      	cmp	r6, r3
 80108b2:	4604      	mov	r4, r0
 80108b4:	460d      	mov	r5, r1
 80108b6:	da10      	bge.n	80108da <scalbn+0x52>
 80108b8:	a327      	add	r3, pc, #156	; (adr r3, 8010958 <scalbn+0xd0>)
 80108ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108be:	e01f      	b.n	8010900 <scalbn+0x78>
 80108c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80108c4:	4291      	cmp	r1, r2
 80108c6:	d10c      	bne.n	80108e2 <scalbn+0x5a>
 80108c8:	ee10 2a10 	vmov	r2, s0
 80108cc:	4620      	mov	r0, r4
 80108ce:	4629      	mov	r1, r5
 80108d0:	f7ef fcdc 	bl	800028c <__adddf3>
 80108d4:	4604      	mov	r4, r0
 80108d6:	460d      	mov	r5, r1
 80108d8:	e022      	b.n	8010920 <scalbn+0x98>
 80108da:	460b      	mov	r3, r1
 80108dc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80108e0:	3936      	subs	r1, #54	; 0x36
 80108e2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80108e6:	4296      	cmp	r6, r2
 80108e8:	dd0d      	ble.n	8010906 <scalbn+0x7e>
 80108ea:	2d00      	cmp	r5, #0
 80108ec:	a11c      	add	r1, pc, #112	; (adr r1, 8010960 <scalbn+0xd8>)
 80108ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108f2:	da02      	bge.n	80108fa <scalbn+0x72>
 80108f4:	a11c      	add	r1, pc, #112	; (adr r1, 8010968 <scalbn+0xe0>)
 80108f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108fa:	a319      	add	r3, pc, #100	; (adr r3, 8010960 <scalbn+0xd8>)
 80108fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010900:	f7ef fe7a 	bl	80005f8 <__aeabi_dmul>
 8010904:	e7e6      	b.n	80108d4 <scalbn+0x4c>
 8010906:	1872      	adds	r2, r6, r1
 8010908:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801090c:	428a      	cmp	r2, r1
 801090e:	dcec      	bgt.n	80108ea <scalbn+0x62>
 8010910:	2a00      	cmp	r2, #0
 8010912:	dd08      	ble.n	8010926 <scalbn+0x9e>
 8010914:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010918:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801091c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010920:	ec45 4b10 	vmov	d0, r4, r5
 8010924:	bd70      	pop	{r4, r5, r6, pc}
 8010926:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801092a:	da08      	bge.n	801093e <scalbn+0xb6>
 801092c:	2d00      	cmp	r5, #0
 801092e:	a10a      	add	r1, pc, #40	; (adr r1, 8010958 <scalbn+0xd0>)
 8010930:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010934:	dac0      	bge.n	80108b8 <scalbn+0x30>
 8010936:	a10e      	add	r1, pc, #56	; (adr r1, 8010970 <scalbn+0xe8>)
 8010938:	e9d1 0100 	ldrd	r0, r1, [r1]
 801093c:	e7bc      	b.n	80108b8 <scalbn+0x30>
 801093e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010942:	3236      	adds	r2, #54	; 0x36
 8010944:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010948:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801094c:	4620      	mov	r0, r4
 801094e:	4b0c      	ldr	r3, [pc, #48]	; (8010980 <scalbn+0xf8>)
 8010950:	2200      	movs	r2, #0
 8010952:	e7d5      	b.n	8010900 <scalbn+0x78>
 8010954:	f3af 8000 	nop.w
 8010958:	c2f8f359 	.word	0xc2f8f359
 801095c:	01a56e1f 	.word	0x01a56e1f
 8010960:	8800759c 	.word	0x8800759c
 8010964:	7e37e43c 	.word	0x7e37e43c
 8010968:	8800759c 	.word	0x8800759c
 801096c:	fe37e43c 	.word	0xfe37e43c
 8010970:	c2f8f359 	.word	0xc2f8f359
 8010974:	81a56e1f 	.word	0x81a56e1f
 8010978:	43500000 	.word	0x43500000
 801097c:	ffff3cb0 	.word	0xffff3cb0
 8010980:	3c900000 	.word	0x3c900000

08010984 <with_errno>:
 8010984:	b570      	push	{r4, r5, r6, lr}
 8010986:	4604      	mov	r4, r0
 8010988:	460d      	mov	r5, r1
 801098a:	4616      	mov	r6, r2
 801098c:	f7fc f96a 	bl	800cc64 <__errno>
 8010990:	4629      	mov	r1, r5
 8010992:	6006      	str	r6, [r0, #0]
 8010994:	4620      	mov	r0, r4
 8010996:	bd70      	pop	{r4, r5, r6, pc}

08010998 <xflow>:
 8010998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801099a:	4614      	mov	r4, r2
 801099c:	461d      	mov	r5, r3
 801099e:	b108      	cbz	r0, 80109a4 <xflow+0xc>
 80109a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80109a4:	e9cd 2300 	strd	r2, r3, [sp]
 80109a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109ac:	4620      	mov	r0, r4
 80109ae:	4629      	mov	r1, r5
 80109b0:	f7ef fe22 	bl	80005f8 <__aeabi_dmul>
 80109b4:	2222      	movs	r2, #34	; 0x22
 80109b6:	b003      	add	sp, #12
 80109b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109bc:	f7ff bfe2 	b.w	8010984 <with_errno>

080109c0 <__math_uflow>:
 80109c0:	b508      	push	{r3, lr}
 80109c2:	2200      	movs	r2, #0
 80109c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80109c8:	f7ff ffe6 	bl	8010998 <xflow>
 80109cc:	ec41 0b10 	vmov	d0, r0, r1
 80109d0:	bd08      	pop	{r3, pc}

080109d2 <__math_oflow>:
 80109d2:	b508      	push	{r3, lr}
 80109d4:	2200      	movs	r2, #0
 80109d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80109da:	f7ff ffdd 	bl	8010998 <xflow>
 80109de:	ec41 0b10 	vmov	d0, r0, r1
 80109e2:	bd08      	pop	{r3, pc}
 80109e4:	0000      	movs	r0, r0
	...

080109e8 <__kernel_rem_pio2>:
 80109e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ec:	ed2d 8b02 	vpush	{d8}
 80109f0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80109f4:	f112 0f14 	cmn.w	r2, #20
 80109f8:	9306      	str	r3, [sp, #24]
 80109fa:	9104      	str	r1, [sp, #16]
 80109fc:	4bc2      	ldr	r3, [pc, #776]	; (8010d08 <__kernel_rem_pio2+0x320>)
 80109fe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010a00:	9009      	str	r0, [sp, #36]	; 0x24
 8010a02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	9b06      	ldr	r3, [sp, #24]
 8010a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010a0e:	bfa8      	it	ge
 8010a10:	1ed4      	subge	r4, r2, #3
 8010a12:	9305      	str	r3, [sp, #20]
 8010a14:	bfb2      	itee	lt
 8010a16:	2400      	movlt	r4, #0
 8010a18:	2318      	movge	r3, #24
 8010a1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8010a1e:	f06f 0317 	mvn.w	r3, #23
 8010a22:	fb04 3303 	mla	r3, r4, r3, r3
 8010a26:	eb03 0a02 	add.w	sl, r3, r2
 8010a2a:	9b00      	ldr	r3, [sp, #0]
 8010a2c:	9a05      	ldr	r2, [sp, #20]
 8010a2e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8010cf8 <__kernel_rem_pio2+0x310>
 8010a32:	eb03 0802 	add.w	r8, r3, r2
 8010a36:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010a38:	1aa7      	subs	r7, r4, r2
 8010a3a:	ae20      	add	r6, sp, #128	; 0x80
 8010a3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010a40:	2500      	movs	r5, #0
 8010a42:	4545      	cmp	r5, r8
 8010a44:	dd13      	ble.n	8010a6e <__kernel_rem_pio2+0x86>
 8010a46:	9b06      	ldr	r3, [sp, #24]
 8010a48:	aa20      	add	r2, sp, #128	; 0x80
 8010a4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010a4e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010a52:	f04f 0800 	mov.w	r8, #0
 8010a56:	9b00      	ldr	r3, [sp, #0]
 8010a58:	4598      	cmp	r8, r3
 8010a5a:	dc31      	bgt.n	8010ac0 <__kernel_rem_pio2+0xd8>
 8010a5c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8010cf8 <__kernel_rem_pio2+0x310>
 8010a60:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010a64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a68:	462f      	mov	r7, r5
 8010a6a:	2600      	movs	r6, #0
 8010a6c:	e01b      	b.n	8010aa6 <__kernel_rem_pio2+0xbe>
 8010a6e:	42ef      	cmn	r7, r5
 8010a70:	d407      	bmi.n	8010a82 <__kernel_rem_pio2+0x9a>
 8010a72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010a76:	f7ef fd55 	bl	8000524 <__aeabi_i2d>
 8010a7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010a7e:	3501      	adds	r5, #1
 8010a80:	e7df      	b.n	8010a42 <__kernel_rem_pio2+0x5a>
 8010a82:	ec51 0b18 	vmov	r0, r1, d8
 8010a86:	e7f8      	b.n	8010a7a <__kernel_rem_pio2+0x92>
 8010a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010a90:	f7ef fdb2 	bl	80005f8 <__aeabi_dmul>
 8010a94:	4602      	mov	r2, r0
 8010a96:	460b      	mov	r3, r1
 8010a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a9c:	f7ef fbf6 	bl	800028c <__adddf3>
 8010aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010aa4:	3601      	adds	r6, #1
 8010aa6:	9b05      	ldr	r3, [sp, #20]
 8010aa8:	429e      	cmp	r6, r3
 8010aaa:	f1a7 0708 	sub.w	r7, r7, #8
 8010aae:	ddeb      	ble.n	8010a88 <__kernel_rem_pio2+0xa0>
 8010ab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ab4:	f108 0801 	add.w	r8, r8, #1
 8010ab8:	ecab 7b02 	vstmia	fp!, {d7}
 8010abc:	3508      	adds	r5, #8
 8010abe:	e7ca      	b.n	8010a56 <__kernel_rem_pio2+0x6e>
 8010ac0:	9b00      	ldr	r3, [sp, #0]
 8010ac2:	aa0c      	add	r2, sp, #48	; 0x30
 8010ac4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010aca:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010acc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010ad0:	9c00      	ldr	r4, [sp, #0]
 8010ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8010ad4:	00e3      	lsls	r3, r4, #3
 8010ad6:	9308      	str	r3, [sp, #32]
 8010ad8:	ab98      	add	r3, sp, #608	; 0x260
 8010ada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ade:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010ae2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010ae6:	ab70      	add	r3, sp, #448	; 0x1c0
 8010ae8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010aec:	46c3      	mov	fp, r8
 8010aee:	46a1      	mov	r9, r4
 8010af0:	f1b9 0f00 	cmp.w	r9, #0
 8010af4:	f1a5 0508 	sub.w	r5, r5, #8
 8010af8:	dc77      	bgt.n	8010bea <__kernel_rem_pio2+0x202>
 8010afa:	ec47 6b10 	vmov	d0, r6, r7
 8010afe:	4650      	mov	r0, sl
 8010b00:	f7ff fec2 	bl	8010888 <scalbn>
 8010b04:	ec57 6b10 	vmov	r6, r7, d0
 8010b08:	2200      	movs	r2, #0
 8010b0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010b0e:	ee10 0a10 	vmov	r0, s0
 8010b12:	4639      	mov	r1, r7
 8010b14:	f7ef fd70 	bl	80005f8 <__aeabi_dmul>
 8010b18:	ec41 0b10 	vmov	d0, r0, r1
 8010b1c:	f000 fab4 	bl	8011088 <floor>
 8010b20:	4b7a      	ldr	r3, [pc, #488]	; (8010d0c <__kernel_rem_pio2+0x324>)
 8010b22:	ec51 0b10 	vmov	r0, r1, d0
 8010b26:	2200      	movs	r2, #0
 8010b28:	f7ef fd66 	bl	80005f8 <__aeabi_dmul>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	4630      	mov	r0, r6
 8010b32:	4639      	mov	r1, r7
 8010b34:	f7ef fba8 	bl	8000288 <__aeabi_dsub>
 8010b38:	460f      	mov	r7, r1
 8010b3a:	4606      	mov	r6, r0
 8010b3c:	f7f0 f80c 	bl	8000b58 <__aeabi_d2iz>
 8010b40:	9002      	str	r0, [sp, #8]
 8010b42:	f7ef fcef 	bl	8000524 <__aeabi_i2d>
 8010b46:	4602      	mov	r2, r0
 8010b48:	460b      	mov	r3, r1
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	4639      	mov	r1, r7
 8010b4e:	f7ef fb9b 	bl	8000288 <__aeabi_dsub>
 8010b52:	f1ba 0f00 	cmp.w	sl, #0
 8010b56:	4606      	mov	r6, r0
 8010b58:	460f      	mov	r7, r1
 8010b5a:	dd6d      	ble.n	8010c38 <__kernel_rem_pio2+0x250>
 8010b5c:	1e61      	subs	r1, r4, #1
 8010b5e:	ab0c      	add	r3, sp, #48	; 0x30
 8010b60:	9d02      	ldr	r5, [sp, #8]
 8010b62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010b66:	f1ca 0018 	rsb	r0, sl, #24
 8010b6a:	fa43 f200 	asr.w	r2, r3, r0
 8010b6e:	4415      	add	r5, r2
 8010b70:	4082      	lsls	r2, r0
 8010b72:	1a9b      	subs	r3, r3, r2
 8010b74:	aa0c      	add	r2, sp, #48	; 0x30
 8010b76:	9502      	str	r5, [sp, #8]
 8010b78:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010b7c:	f1ca 0217 	rsb	r2, sl, #23
 8010b80:	fa43 fb02 	asr.w	fp, r3, r2
 8010b84:	f1bb 0f00 	cmp.w	fp, #0
 8010b88:	dd65      	ble.n	8010c56 <__kernel_rem_pio2+0x26e>
 8010b8a:	9b02      	ldr	r3, [sp, #8]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	3301      	adds	r3, #1
 8010b90:	9302      	str	r3, [sp, #8]
 8010b92:	4615      	mov	r5, r2
 8010b94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010b98:	4294      	cmp	r4, r2
 8010b9a:	f300 809f 	bgt.w	8010cdc <__kernel_rem_pio2+0x2f4>
 8010b9e:	f1ba 0f00 	cmp.w	sl, #0
 8010ba2:	dd07      	ble.n	8010bb4 <__kernel_rem_pio2+0x1cc>
 8010ba4:	f1ba 0f01 	cmp.w	sl, #1
 8010ba8:	f000 80c1 	beq.w	8010d2e <__kernel_rem_pio2+0x346>
 8010bac:	f1ba 0f02 	cmp.w	sl, #2
 8010bb0:	f000 80c7 	beq.w	8010d42 <__kernel_rem_pio2+0x35a>
 8010bb4:	f1bb 0f02 	cmp.w	fp, #2
 8010bb8:	d14d      	bne.n	8010c56 <__kernel_rem_pio2+0x26e>
 8010bba:	4632      	mov	r2, r6
 8010bbc:	463b      	mov	r3, r7
 8010bbe:	4954      	ldr	r1, [pc, #336]	; (8010d10 <__kernel_rem_pio2+0x328>)
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	f7ef fb61 	bl	8000288 <__aeabi_dsub>
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	460f      	mov	r7, r1
 8010bca:	2d00      	cmp	r5, #0
 8010bcc:	d043      	beq.n	8010c56 <__kernel_rem_pio2+0x26e>
 8010bce:	4650      	mov	r0, sl
 8010bd0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8010d00 <__kernel_rem_pio2+0x318>
 8010bd4:	f7ff fe58 	bl	8010888 <scalbn>
 8010bd8:	4630      	mov	r0, r6
 8010bda:	4639      	mov	r1, r7
 8010bdc:	ec53 2b10 	vmov	r2, r3, d0
 8010be0:	f7ef fb52 	bl	8000288 <__aeabi_dsub>
 8010be4:	4606      	mov	r6, r0
 8010be6:	460f      	mov	r7, r1
 8010be8:	e035      	b.n	8010c56 <__kernel_rem_pio2+0x26e>
 8010bea:	4b4a      	ldr	r3, [pc, #296]	; (8010d14 <__kernel_rem_pio2+0x32c>)
 8010bec:	2200      	movs	r2, #0
 8010bee:	4630      	mov	r0, r6
 8010bf0:	4639      	mov	r1, r7
 8010bf2:	f7ef fd01 	bl	80005f8 <__aeabi_dmul>
 8010bf6:	f7ef ffaf 	bl	8000b58 <__aeabi_d2iz>
 8010bfa:	f7ef fc93 	bl	8000524 <__aeabi_i2d>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	460b      	mov	r3, r1
 8010c02:	ec43 2b18 	vmov	d8, r2, r3
 8010c06:	4b44      	ldr	r3, [pc, #272]	; (8010d18 <__kernel_rem_pio2+0x330>)
 8010c08:	2200      	movs	r2, #0
 8010c0a:	f7ef fcf5 	bl	80005f8 <__aeabi_dmul>
 8010c0e:	4602      	mov	r2, r0
 8010c10:	460b      	mov	r3, r1
 8010c12:	4630      	mov	r0, r6
 8010c14:	4639      	mov	r1, r7
 8010c16:	f7ef fb37 	bl	8000288 <__aeabi_dsub>
 8010c1a:	f7ef ff9d 	bl	8000b58 <__aeabi_d2iz>
 8010c1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c22:	f84b 0b04 	str.w	r0, [fp], #4
 8010c26:	ec51 0b18 	vmov	r0, r1, d8
 8010c2a:	f7ef fb2f 	bl	800028c <__adddf3>
 8010c2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010c32:	4606      	mov	r6, r0
 8010c34:	460f      	mov	r7, r1
 8010c36:	e75b      	b.n	8010af0 <__kernel_rem_pio2+0x108>
 8010c38:	d106      	bne.n	8010c48 <__kernel_rem_pio2+0x260>
 8010c3a:	1e63      	subs	r3, r4, #1
 8010c3c:	aa0c      	add	r2, sp, #48	; 0x30
 8010c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c42:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8010c46:	e79d      	b.n	8010b84 <__kernel_rem_pio2+0x19c>
 8010c48:	4b34      	ldr	r3, [pc, #208]	; (8010d1c <__kernel_rem_pio2+0x334>)
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f7ef ff5a 	bl	8000b04 <__aeabi_dcmpge>
 8010c50:	2800      	cmp	r0, #0
 8010c52:	d140      	bne.n	8010cd6 <__kernel_rem_pio2+0x2ee>
 8010c54:	4683      	mov	fp, r0
 8010c56:	2200      	movs	r2, #0
 8010c58:	2300      	movs	r3, #0
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	4639      	mov	r1, r7
 8010c5e:	f7ef ff33 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c62:	2800      	cmp	r0, #0
 8010c64:	f000 80c1 	beq.w	8010dea <__kernel_rem_pio2+0x402>
 8010c68:	1e65      	subs	r5, r4, #1
 8010c6a:	462b      	mov	r3, r5
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	9900      	ldr	r1, [sp, #0]
 8010c70:	428b      	cmp	r3, r1
 8010c72:	da6d      	bge.n	8010d50 <__kernel_rem_pio2+0x368>
 8010c74:	2a00      	cmp	r2, #0
 8010c76:	f000 808a 	beq.w	8010d8e <__kernel_rem_pio2+0x3a6>
 8010c7a:	ab0c      	add	r3, sp, #48	; 0x30
 8010c7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010c80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	f000 80ae 	beq.w	8010de6 <__kernel_rem_pio2+0x3fe>
 8010c8a:	4650      	mov	r0, sl
 8010c8c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8010d00 <__kernel_rem_pio2+0x318>
 8010c90:	f7ff fdfa 	bl	8010888 <scalbn>
 8010c94:	1c6b      	adds	r3, r5, #1
 8010c96:	00da      	lsls	r2, r3, #3
 8010c98:	9205      	str	r2, [sp, #20]
 8010c9a:	ec57 6b10 	vmov	r6, r7, d0
 8010c9e:	aa70      	add	r2, sp, #448	; 0x1c0
 8010ca0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8010d14 <__kernel_rem_pio2+0x32c>
 8010ca4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010ca8:	462c      	mov	r4, r5
 8010caa:	f04f 0800 	mov.w	r8, #0
 8010cae:	2c00      	cmp	r4, #0
 8010cb0:	f280 80d4 	bge.w	8010e5c <__kernel_rem_pio2+0x474>
 8010cb4:	462c      	mov	r4, r5
 8010cb6:	2c00      	cmp	r4, #0
 8010cb8:	f2c0 8102 	blt.w	8010ec0 <__kernel_rem_pio2+0x4d8>
 8010cbc:	4b18      	ldr	r3, [pc, #96]	; (8010d20 <__kernel_rem_pio2+0x338>)
 8010cbe:	461e      	mov	r6, r3
 8010cc0:	ab70      	add	r3, sp, #448	; 0x1c0
 8010cc2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8010cc6:	1b2b      	subs	r3, r5, r4
 8010cc8:	f04f 0900 	mov.w	r9, #0
 8010ccc:	f04f 0a00 	mov.w	sl, #0
 8010cd0:	2700      	movs	r7, #0
 8010cd2:	9306      	str	r3, [sp, #24]
 8010cd4:	e0e6      	b.n	8010ea4 <__kernel_rem_pio2+0x4bc>
 8010cd6:	f04f 0b02 	mov.w	fp, #2
 8010cda:	e756      	b.n	8010b8a <__kernel_rem_pio2+0x1a2>
 8010cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8010ce0:	bb05      	cbnz	r5, 8010d24 <__kernel_rem_pio2+0x33c>
 8010ce2:	b123      	cbz	r3, 8010cee <__kernel_rem_pio2+0x306>
 8010ce4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010ce8:	f8c8 3000 	str.w	r3, [r8]
 8010cec:	2301      	movs	r3, #1
 8010cee:	3201      	adds	r2, #1
 8010cf0:	f108 0804 	add.w	r8, r8, #4
 8010cf4:	461d      	mov	r5, r3
 8010cf6:	e74f      	b.n	8010b98 <__kernel_rem_pio2+0x1b0>
	...
 8010d04:	3ff00000 	.word	0x3ff00000
 8010d08:	080118a8 	.word	0x080118a8
 8010d0c:	40200000 	.word	0x40200000
 8010d10:	3ff00000 	.word	0x3ff00000
 8010d14:	3e700000 	.word	0x3e700000
 8010d18:	41700000 	.word	0x41700000
 8010d1c:	3fe00000 	.word	0x3fe00000
 8010d20:	08011868 	.word	0x08011868
 8010d24:	1acb      	subs	r3, r1, r3
 8010d26:	f8c8 3000 	str.w	r3, [r8]
 8010d2a:	462b      	mov	r3, r5
 8010d2c:	e7df      	b.n	8010cee <__kernel_rem_pio2+0x306>
 8010d2e:	1e62      	subs	r2, r4, #1
 8010d30:	ab0c      	add	r3, sp, #48	; 0x30
 8010d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d36:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010d3a:	a90c      	add	r1, sp, #48	; 0x30
 8010d3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010d40:	e738      	b.n	8010bb4 <__kernel_rem_pio2+0x1cc>
 8010d42:	1e62      	subs	r2, r4, #1
 8010d44:	ab0c      	add	r3, sp, #48	; 0x30
 8010d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d4a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010d4e:	e7f4      	b.n	8010d3a <__kernel_rem_pio2+0x352>
 8010d50:	a90c      	add	r1, sp, #48	; 0x30
 8010d52:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010d56:	3b01      	subs	r3, #1
 8010d58:	430a      	orrs	r2, r1
 8010d5a:	e788      	b.n	8010c6e <__kernel_rem_pio2+0x286>
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010d62:	2900      	cmp	r1, #0
 8010d64:	d0fa      	beq.n	8010d5c <__kernel_rem_pio2+0x374>
 8010d66:	9a08      	ldr	r2, [sp, #32]
 8010d68:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8010d6c:	446a      	add	r2, sp
 8010d6e:	3a98      	subs	r2, #152	; 0x98
 8010d70:	9208      	str	r2, [sp, #32]
 8010d72:	9a06      	ldr	r2, [sp, #24]
 8010d74:	a920      	add	r1, sp, #128	; 0x80
 8010d76:	18a2      	adds	r2, r4, r2
 8010d78:	18e3      	adds	r3, r4, r3
 8010d7a:	f104 0801 	add.w	r8, r4, #1
 8010d7e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010d82:	9302      	str	r3, [sp, #8]
 8010d84:	9b02      	ldr	r3, [sp, #8]
 8010d86:	4543      	cmp	r3, r8
 8010d88:	da04      	bge.n	8010d94 <__kernel_rem_pio2+0x3ac>
 8010d8a:	461c      	mov	r4, r3
 8010d8c:	e6a2      	b.n	8010ad4 <__kernel_rem_pio2+0xec>
 8010d8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d90:	2301      	movs	r3, #1
 8010d92:	e7e4      	b.n	8010d5e <__kernel_rem_pio2+0x376>
 8010d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d96:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010d9a:	f7ef fbc3 	bl	8000524 <__aeabi_i2d>
 8010d9e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010da4:	46ab      	mov	fp, r5
 8010da6:	461c      	mov	r4, r3
 8010da8:	f04f 0900 	mov.w	r9, #0
 8010dac:	2600      	movs	r6, #0
 8010dae:	2700      	movs	r7, #0
 8010db0:	9b05      	ldr	r3, [sp, #20]
 8010db2:	4599      	cmp	r9, r3
 8010db4:	dd06      	ble.n	8010dc4 <__kernel_rem_pio2+0x3dc>
 8010db6:	9b08      	ldr	r3, [sp, #32]
 8010db8:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010dbc:	f108 0801 	add.w	r8, r8, #1
 8010dc0:	9308      	str	r3, [sp, #32]
 8010dc2:	e7df      	b.n	8010d84 <__kernel_rem_pio2+0x39c>
 8010dc4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010dc8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010dcc:	f7ef fc14 	bl	80005f8 <__aeabi_dmul>
 8010dd0:	4602      	mov	r2, r0
 8010dd2:	460b      	mov	r3, r1
 8010dd4:	4630      	mov	r0, r6
 8010dd6:	4639      	mov	r1, r7
 8010dd8:	f7ef fa58 	bl	800028c <__adddf3>
 8010ddc:	f109 0901 	add.w	r9, r9, #1
 8010de0:	4606      	mov	r6, r0
 8010de2:	460f      	mov	r7, r1
 8010de4:	e7e4      	b.n	8010db0 <__kernel_rem_pio2+0x3c8>
 8010de6:	3d01      	subs	r5, #1
 8010de8:	e747      	b.n	8010c7a <__kernel_rem_pio2+0x292>
 8010dea:	ec47 6b10 	vmov	d0, r6, r7
 8010dee:	f1ca 0000 	rsb	r0, sl, #0
 8010df2:	f7ff fd49 	bl	8010888 <scalbn>
 8010df6:	ec57 6b10 	vmov	r6, r7, d0
 8010dfa:	4ba0      	ldr	r3, [pc, #640]	; (801107c <__kernel_rem_pio2+0x694>)
 8010dfc:	ee10 0a10 	vmov	r0, s0
 8010e00:	2200      	movs	r2, #0
 8010e02:	4639      	mov	r1, r7
 8010e04:	f7ef fe7e 	bl	8000b04 <__aeabi_dcmpge>
 8010e08:	b1f8      	cbz	r0, 8010e4a <__kernel_rem_pio2+0x462>
 8010e0a:	4b9d      	ldr	r3, [pc, #628]	; (8011080 <__kernel_rem_pio2+0x698>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	4630      	mov	r0, r6
 8010e10:	4639      	mov	r1, r7
 8010e12:	f7ef fbf1 	bl	80005f8 <__aeabi_dmul>
 8010e16:	f7ef fe9f 	bl	8000b58 <__aeabi_d2iz>
 8010e1a:	4680      	mov	r8, r0
 8010e1c:	f7ef fb82 	bl	8000524 <__aeabi_i2d>
 8010e20:	4b96      	ldr	r3, [pc, #600]	; (801107c <__kernel_rem_pio2+0x694>)
 8010e22:	2200      	movs	r2, #0
 8010e24:	f7ef fbe8 	bl	80005f8 <__aeabi_dmul>
 8010e28:	460b      	mov	r3, r1
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	4639      	mov	r1, r7
 8010e2e:	4630      	mov	r0, r6
 8010e30:	f7ef fa2a 	bl	8000288 <__aeabi_dsub>
 8010e34:	f7ef fe90 	bl	8000b58 <__aeabi_d2iz>
 8010e38:	1c65      	adds	r5, r4, #1
 8010e3a:	ab0c      	add	r3, sp, #48	; 0x30
 8010e3c:	f10a 0a18 	add.w	sl, sl, #24
 8010e40:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e44:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010e48:	e71f      	b.n	8010c8a <__kernel_rem_pio2+0x2a2>
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	4639      	mov	r1, r7
 8010e4e:	f7ef fe83 	bl	8000b58 <__aeabi_d2iz>
 8010e52:	ab0c      	add	r3, sp, #48	; 0x30
 8010e54:	4625      	mov	r5, r4
 8010e56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e5a:	e716      	b.n	8010c8a <__kernel_rem_pio2+0x2a2>
 8010e5c:	ab0c      	add	r3, sp, #48	; 0x30
 8010e5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e62:	f7ef fb5f 	bl	8000524 <__aeabi_i2d>
 8010e66:	4632      	mov	r2, r6
 8010e68:	463b      	mov	r3, r7
 8010e6a:	f7ef fbc5 	bl	80005f8 <__aeabi_dmul>
 8010e6e:	4642      	mov	r2, r8
 8010e70:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010e74:	464b      	mov	r3, r9
 8010e76:	4630      	mov	r0, r6
 8010e78:	4639      	mov	r1, r7
 8010e7a:	f7ef fbbd 	bl	80005f8 <__aeabi_dmul>
 8010e7e:	3c01      	subs	r4, #1
 8010e80:	4606      	mov	r6, r0
 8010e82:	460f      	mov	r7, r1
 8010e84:	e713      	b.n	8010cae <__kernel_rem_pio2+0x2c6>
 8010e86:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010e8a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010e8e:	f7ef fbb3 	bl	80005f8 <__aeabi_dmul>
 8010e92:	4602      	mov	r2, r0
 8010e94:	460b      	mov	r3, r1
 8010e96:	4648      	mov	r0, r9
 8010e98:	4651      	mov	r1, sl
 8010e9a:	f7ef f9f7 	bl	800028c <__adddf3>
 8010e9e:	3701      	adds	r7, #1
 8010ea0:	4681      	mov	r9, r0
 8010ea2:	468a      	mov	sl, r1
 8010ea4:	9b00      	ldr	r3, [sp, #0]
 8010ea6:	429f      	cmp	r7, r3
 8010ea8:	dc02      	bgt.n	8010eb0 <__kernel_rem_pio2+0x4c8>
 8010eaa:	9b06      	ldr	r3, [sp, #24]
 8010eac:	429f      	cmp	r7, r3
 8010eae:	ddea      	ble.n	8010e86 <__kernel_rem_pio2+0x49e>
 8010eb0:	9a06      	ldr	r2, [sp, #24]
 8010eb2:	ab48      	add	r3, sp, #288	; 0x120
 8010eb4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8010eb8:	e9c6 9a00 	strd	r9, sl, [r6]
 8010ebc:	3c01      	subs	r4, #1
 8010ebe:	e6fa      	b.n	8010cb6 <__kernel_rem_pio2+0x2ce>
 8010ec0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010ec2:	2b02      	cmp	r3, #2
 8010ec4:	dc0b      	bgt.n	8010ede <__kernel_rem_pio2+0x4f6>
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	dc39      	bgt.n	8010f3e <__kernel_rem_pio2+0x556>
 8010eca:	d05d      	beq.n	8010f88 <__kernel_rem_pio2+0x5a0>
 8010ecc:	9b02      	ldr	r3, [sp, #8]
 8010ece:	f003 0007 	and.w	r0, r3, #7
 8010ed2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010ed6:	ecbd 8b02 	vpop	{d8}
 8010eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ede:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010ee0:	2b03      	cmp	r3, #3
 8010ee2:	d1f3      	bne.n	8010ecc <__kernel_rem_pio2+0x4e4>
 8010ee4:	9b05      	ldr	r3, [sp, #20]
 8010ee6:	9500      	str	r5, [sp, #0]
 8010ee8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010eec:	eb0d 0403 	add.w	r4, sp, r3
 8010ef0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010ef4:	46a2      	mov	sl, r4
 8010ef6:	9b00      	ldr	r3, [sp, #0]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	f1aa 0a08 	sub.w	sl, sl, #8
 8010efe:	dc69      	bgt.n	8010fd4 <__kernel_rem_pio2+0x5ec>
 8010f00:	46aa      	mov	sl, r5
 8010f02:	f1ba 0f01 	cmp.w	sl, #1
 8010f06:	f1a4 0408 	sub.w	r4, r4, #8
 8010f0a:	f300 8083 	bgt.w	8011014 <__kernel_rem_pio2+0x62c>
 8010f0e:	9c05      	ldr	r4, [sp, #20]
 8010f10:	ab48      	add	r3, sp, #288	; 0x120
 8010f12:	441c      	add	r4, r3
 8010f14:	2000      	movs	r0, #0
 8010f16:	2100      	movs	r1, #0
 8010f18:	2d01      	cmp	r5, #1
 8010f1a:	f300 809a 	bgt.w	8011052 <__kernel_rem_pio2+0x66a>
 8010f1e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8010f22:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010f26:	f1bb 0f00 	cmp.w	fp, #0
 8010f2a:	f040 8098 	bne.w	801105e <__kernel_rem_pio2+0x676>
 8010f2e:	9b04      	ldr	r3, [sp, #16]
 8010f30:	e9c3 7800 	strd	r7, r8, [r3]
 8010f34:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010f38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010f3c:	e7c6      	b.n	8010ecc <__kernel_rem_pio2+0x4e4>
 8010f3e:	9e05      	ldr	r6, [sp, #20]
 8010f40:	ab48      	add	r3, sp, #288	; 0x120
 8010f42:	441e      	add	r6, r3
 8010f44:	462c      	mov	r4, r5
 8010f46:	2000      	movs	r0, #0
 8010f48:	2100      	movs	r1, #0
 8010f4a:	2c00      	cmp	r4, #0
 8010f4c:	da33      	bge.n	8010fb6 <__kernel_rem_pio2+0x5ce>
 8010f4e:	f1bb 0f00 	cmp.w	fp, #0
 8010f52:	d036      	beq.n	8010fc2 <__kernel_rem_pio2+0x5da>
 8010f54:	4602      	mov	r2, r0
 8010f56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f5a:	9c04      	ldr	r4, [sp, #16]
 8010f5c:	e9c4 2300 	strd	r2, r3, [r4]
 8010f60:	4602      	mov	r2, r0
 8010f62:	460b      	mov	r3, r1
 8010f64:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010f68:	f7ef f98e 	bl	8000288 <__aeabi_dsub>
 8010f6c:	ae4a      	add	r6, sp, #296	; 0x128
 8010f6e:	2401      	movs	r4, #1
 8010f70:	42a5      	cmp	r5, r4
 8010f72:	da29      	bge.n	8010fc8 <__kernel_rem_pio2+0x5e0>
 8010f74:	f1bb 0f00 	cmp.w	fp, #0
 8010f78:	d002      	beq.n	8010f80 <__kernel_rem_pio2+0x598>
 8010f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f7e:	4619      	mov	r1, r3
 8010f80:	9b04      	ldr	r3, [sp, #16]
 8010f82:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010f86:	e7a1      	b.n	8010ecc <__kernel_rem_pio2+0x4e4>
 8010f88:	9c05      	ldr	r4, [sp, #20]
 8010f8a:	ab48      	add	r3, sp, #288	; 0x120
 8010f8c:	441c      	add	r4, r3
 8010f8e:	2000      	movs	r0, #0
 8010f90:	2100      	movs	r1, #0
 8010f92:	2d00      	cmp	r5, #0
 8010f94:	da09      	bge.n	8010faa <__kernel_rem_pio2+0x5c2>
 8010f96:	f1bb 0f00 	cmp.w	fp, #0
 8010f9a:	d002      	beq.n	8010fa2 <__kernel_rem_pio2+0x5ba>
 8010f9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	9b04      	ldr	r3, [sp, #16]
 8010fa4:	e9c3 0100 	strd	r0, r1, [r3]
 8010fa8:	e790      	b.n	8010ecc <__kernel_rem_pio2+0x4e4>
 8010faa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010fae:	f7ef f96d 	bl	800028c <__adddf3>
 8010fb2:	3d01      	subs	r5, #1
 8010fb4:	e7ed      	b.n	8010f92 <__kernel_rem_pio2+0x5aa>
 8010fb6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010fba:	f7ef f967 	bl	800028c <__adddf3>
 8010fbe:	3c01      	subs	r4, #1
 8010fc0:	e7c3      	b.n	8010f4a <__kernel_rem_pio2+0x562>
 8010fc2:	4602      	mov	r2, r0
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	e7c8      	b.n	8010f5a <__kernel_rem_pio2+0x572>
 8010fc8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010fcc:	f7ef f95e 	bl	800028c <__adddf3>
 8010fd0:	3401      	adds	r4, #1
 8010fd2:	e7cd      	b.n	8010f70 <__kernel_rem_pio2+0x588>
 8010fd4:	e9da 8900 	ldrd	r8, r9, [sl]
 8010fd8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010fdc:	9b00      	ldr	r3, [sp, #0]
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	9300      	str	r3, [sp, #0]
 8010fe2:	4632      	mov	r2, r6
 8010fe4:	463b      	mov	r3, r7
 8010fe6:	4640      	mov	r0, r8
 8010fe8:	4649      	mov	r1, r9
 8010fea:	f7ef f94f 	bl	800028c <__adddf3>
 8010fee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010ff2:	4602      	mov	r2, r0
 8010ff4:	460b      	mov	r3, r1
 8010ff6:	4640      	mov	r0, r8
 8010ff8:	4649      	mov	r1, r9
 8010ffa:	f7ef f945 	bl	8000288 <__aeabi_dsub>
 8010ffe:	4632      	mov	r2, r6
 8011000:	463b      	mov	r3, r7
 8011002:	f7ef f943 	bl	800028c <__adddf3>
 8011006:	ed9d 7b06 	vldr	d7, [sp, #24]
 801100a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801100e:	ed8a 7b00 	vstr	d7, [sl]
 8011012:	e770      	b.n	8010ef6 <__kernel_rem_pio2+0x50e>
 8011014:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011018:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801101c:	4640      	mov	r0, r8
 801101e:	4632      	mov	r2, r6
 8011020:	463b      	mov	r3, r7
 8011022:	4649      	mov	r1, r9
 8011024:	f7ef f932 	bl	800028c <__adddf3>
 8011028:	e9cd 0100 	strd	r0, r1, [sp]
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	4640      	mov	r0, r8
 8011032:	4649      	mov	r1, r9
 8011034:	f7ef f928 	bl	8000288 <__aeabi_dsub>
 8011038:	4632      	mov	r2, r6
 801103a:	463b      	mov	r3, r7
 801103c:	f7ef f926 	bl	800028c <__adddf3>
 8011040:	ed9d 7b00 	vldr	d7, [sp]
 8011044:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011048:	ed84 7b00 	vstr	d7, [r4]
 801104c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011050:	e757      	b.n	8010f02 <__kernel_rem_pio2+0x51a>
 8011052:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011056:	f7ef f919 	bl	800028c <__adddf3>
 801105a:	3d01      	subs	r5, #1
 801105c:	e75c      	b.n	8010f18 <__kernel_rem_pio2+0x530>
 801105e:	9b04      	ldr	r3, [sp, #16]
 8011060:	9a04      	ldr	r2, [sp, #16]
 8011062:	601f      	str	r7, [r3, #0]
 8011064:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011068:	605c      	str	r4, [r3, #4]
 801106a:	609d      	str	r5, [r3, #8]
 801106c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011070:	60d3      	str	r3, [r2, #12]
 8011072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011076:	6110      	str	r0, [r2, #16]
 8011078:	6153      	str	r3, [r2, #20]
 801107a:	e727      	b.n	8010ecc <__kernel_rem_pio2+0x4e4>
 801107c:	41700000 	.word	0x41700000
 8011080:	3e700000 	.word	0x3e700000
 8011084:	00000000 	.word	0x00000000

08011088 <floor>:
 8011088:	ec51 0b10 	vmov	r0, r1, d0
 801108c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011094:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011098:	2e13      	cmp	r6, #19
 801109a:	ee10 5a10 	vmov	r5, s0
 801109e:	ee10 8a10 	vmov	r8, s0
 80110a2:	460c      	mov	r4, r1
 80110a4:	dc31      	bgt.n	801110a <floor+0x82>
 80110a6:	2e00      	cmp	r6, #0
 80110a8:	da14      	bge.n	80110d4 <floor+0x4c>
 80110aa:	a333      	add	r3, pc, #204	; (adr r3, 8011178 <floor+0xf0>)
 80110ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b0:	f7ef f8ec 	bl	800028c <__adddf3>
 80110b4:	2200      	movs	r2, #0
 80110b6:	2300      	movs	r3, #0
 80110b8:	f7ef fd2e 	bl	8000b18 <__aeabi_dcmpgt>
 80110bc:	b138      	cbz	r0, 80110ce <floor+0x46>
 80110be:	2c00      	cmp	r4, #0
 80110c0:	da53      	bge.n	801116a <floor+0xe2>
 80110c2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80110c6:	4325      	orrs	r5, r4
 80110c8:	d052      	beq.n	8011170 <floor+0xe8>
 80110ca:	4c2d      	ldr	r4, [pc, #180]	; (8011180 <floor+0xf8>)
 80110cc:	2500      	movs	r5, #0
 80110ce:	4621      	mov	r1, r4
 80110d0:	4628      	mov	r0, r5
 80110d2:	e024      	b.n	801111e <floor+0x96>
 80110d4:	4f2b      	ldr	r7, [pc, #172]	; (8011184 <floor+0xfc>)
 80110d6:	4137      	asrs	r7, r6
 80110d8:	ea01 0307 	and.w	r3, r1, r7
 80110dc:	4303      	orrs	r3, r0
 80110de:	d01e      	beq.n	801111e <floor+0x96>
 80110e0:	a325      	add	r3, pc, #148	; (adr r3, 8011178 <floor+0xf0>)
 80110e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e6:	f7ef f8d1 	bl	800028c <__adddf3>
 80110ea:	2200      	movs	r2, #0
 80110ec:	2300      	movs	r3, #0
 80110ee:	f7ef fd13 	bl	8000b18 <__aeabi_dcmpgt>
 80110f2:	2800      	cmp	r0, #0
 80110f4:	d0eb      	beq.n	80110ce <floor+0x46>
 80110f6:	2c00      	cmp	r4, #0
 80110f8:	bfbe      	ittt	lt
 80110fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80110fe:	4133      	asrlt	r3, r6
 8011100:	18e4      	addlt	r4, r4, r3
 8011102:	ea24 0407 	bic.w	r4, r4, r7
 8011106:	2500      	movs	r5, #0
 8011108:	e7e1      	b.n	80110ce <floor+0x46>
 801110a:	2e33      	cmp	r6, #51	; 0x33
 801110c:	dd0b      	ble.n	8011126 <floor+0x9e>
 801110e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011112:	d104      	bne.n	801111e <floor+0x96>
 8011114:	ee10 2a10 	vmov	r2, s0
 8011118:	460b      	mov	r3, r1
 801111a:	f7ef f8b7 	bl	800028c <__adddf3>
 801111e:	ec41 0b10 	vmov	d0, r0, r1
 8011122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011126:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801112a:	f04f 37ff 	mov.w	r7, #4294967295
 801112e:	40df      	lsrs	r7, r3
 8011130:	4238      	tst	r0, r7
 8011132:	d0f4      	beq.n	801111e <floor+0x96>
 8011134:	a310      	add	r3, pc, #64	; (adr r3, 8011178 <floor+0xf0>)
 8011136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113a:	f7ef f8a7 	bl	800028c <__adddf3>
 801113e:	2200      	movs	r2, #0
 8011140:	2300      	movs	r3, #0
 8011142:	f7ef fce9 	bl	8000b18 <__aeabi_dcmpgt>
 8011146:	2800      	cmp	r0, #0
 8011148:	d0c1      	beq.n	80110ce <floor+0x46>
 801114a:	2c00      	cmp	r4, #0
 801114c:	da0a      	bge.n	8011164 <floor+0xdc>
 801114e:	2e14      	cmp	r6, #20
 8011150:	d101      	bne.n	8011156 <floor+0xce>
 8011152:	3401      	adds	r4, #1
 8011154:	e006      	b.n	8011164 <floor+0xdc>
 8011156:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801115a:	2301      	movs	r3, #1
 801115c:	40b3      	lsls	r3, r6
 801115e:	441d      	add	r5, r3
 8011160:	45a8      	cmp	r8, r5
 8011162:	d8f6      	bhi.n	8011152 <floor+0xca>
 8011164:	ea25 0507 	bic.w	r5, r5, r7
 8011168:	e7b1      	b.n	80110ce <floor+0x46>
 801116a:	2500      	movs	r5, #0
 801116c:	462c      	mov	r4, r5
 801116e:	e7ae      	b.n	80110ce <floor+0x46>
 8011170:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011174:	e7ab      	b.n	80110ce <floor+0x46>
 8011176:	bf00      	nop
 8011178:	8800759c 	.word	0x8800759c
 801117c:	7e37e43c 	.word	0x7e37e43c
 8011180:	bff00000 	.word	0xbff00000
 8011184:	000fffff 	.word	0x000fffff

08011188 <_init>:
 8011188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801118a:	bf00      	nop
 801118c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801118e:	bc08      	pop	{r3}
 8011190:	469e      	mov	lr, r3
 8011192:	4770      	bx	lr

08011194 <_fini>:
 8011194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011196:	bf00      	nop
 8011198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801119a:	bc08      	pop	{r3}
 801119c:	469e      	mov	lr, r3
 801119e:	4770      	bx	lr
