
UnitTest_Accel_F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004998  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b04  08004b04  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004b04  08004b04  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b04  08004b04  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001214  20000060  08004b6c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001274  08004b6c  00021274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f12b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e8  00000000  00000000  0002f1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00031ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae4  00000000  00000000  00032920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019061  00000000  00000000  00033404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105e3  00000000  00000000  0004c465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fbdc  00000000  00000000  0005ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003eec  00000000  00000000  000ec624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f0510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a90 	.word	0x08004a90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004a90 	.word	0x08004a90

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2iz>:
 8000d64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30f      	bcc.n	8000d8e <__aeabi_f2iz+0x2a>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d90d      	bls.n	8000d94 <__aeabi_f2iz+0x30>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d84:	fa23 f002 	lsr.w	r0, r3, r2
 8000d88:	bf18      	it	ne
 8000d8a:	4240      	negne	r0, r0
 8000d8c:	4770      	bx	lr
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	4770      	bx	lr
 8000d94:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d98:	d101      	bne.n	8000d9e <__aeabi_f2iz+0x3a>
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	d105      	bne.n	8000daa <__aeabi_f2iz+0x46>
 8000d9e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da8:	4770      	bx	lr
 8000daa:	f04f 0000 	mov.w	r0, #0
 8000dae:	4770      	bx	lr

08000db0 <Accel_Cal>:
#include "Accel.h"
#include "stdlib.h"
#define deltaT 0.01

void Accel_Cal(Accel_Param *accel, float target_vel, float target_time)
{
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	if(target_vel != accel->target_vel_Pre)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	68b8      	ldr	r0, [r7, #8]
 8000dc4:	f7ff ff9c 	bl	8000d00 <__aeabi_fcmpeq>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d121      	bne.n	8000e12 <Accel_Cal+0x62>
	{
		if(target_vel < accel->target_vel_Pre)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	68b8      	ldr	r0, [r7, #8]
 8000dd6:	f7ff ff9d 	bl	8000d14 <__aeabi_fcmplt>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <Accel_Cal+0x38>
		{
			accel->Flag = 1;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2201      	movs	r2, #1
 8000de4:	741a      	strb	r2, [r3, #16]
 8000de6:	e002      	b.n	8000dee <Accel_Cal+0x3e>
		}
		else
		{
			accel->Flag = 0;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	741a      	strb	r2, [r3, #16]
		}
		accel->accel = (target_vel - accel->vel_controller)/target_time;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4619      	mov	r1, r3
 8000df4:	68b8      	ldr	r0, [r7, #8]
 8000df6:	f7ff fce5 	bl	80007c4 <__aeabi_fsub>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fe9e 	bl	8000b40 <__aeabi_fdiv>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	601a      	str	r2, [r3, #0]
		accel->target_vel_Pre = target_vel;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	60da      	str	r2, [r3, #12]
	}
		accel->vel_controller +=  accel->accel * deltaT;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fc28 	bl	800066c <__aeabi_f2d>
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460d      	mov	r5, r1
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fc21 	bl	800066c <__aeabi_f2d>
 8000e2a:	a31b      	add	r3, pc, #108	; (adr r3, 8000e98 <Accel_Cal+0xe8>)
 8000e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e30:	f7ff f98e 	bl	8000150 <__aeabi_dmul>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4620      	mov	r0, r4
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	f7ff fab8 	bl	80003b0 <__adddf3>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fc68 	bl	800071c <__aeabi_d2f>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	605a      	str	r2, [r3, #4]

			if(accel->Flag)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	7c1b      	ldrb	r3, [r3, #16]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00d      	beq.n	8000e76 <Accel_Cal+0xc6>
			{
				if(accel->vel_controller < target_vel) accel->vel_controller = target_vel;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	68b8      	ldr	r0, [r7, #8]
 8000e62:	f7ff ff75 	bl	8000d50 <__aeabi_fcmpgt>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d100      	bne.n	8000e6e <Accel_Cal+0xbe>
			}
			else
			{
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
			}
}
 8000e6c:	e010      	b.n	8000e90 <Accel_Cal+0xe0>
				if(accel->vel_controller < target_vel) accel->vel_controller = target_vel;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	605a      	str	r2, [r3, #4]
}
 8000e74:	e00c      	b.n	8000e90 <Accel_Cal+0xe0>
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	68b8      	ldr	r0, [r7, #8]
 8000e7e:	f7ff ff49 	bl	8000d14 <__aeabi_fcmplt>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d100      	bne.n	8000e8a <Accel_Cal+0xda>
}
 8000e88:	e002      	b.n	8000e90 <Accel_Cal+0xe0>
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	605a      	str	r2, [r3, #4]
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bdb0      	pop	{r4, r5, r7, pc}
 8000e98:	47ae147b 	.word	0x47ae147b
 8000e9c:	3f847ae1 	.word	0x3f847ae1

08000ea0 <DC_Drive_BTS>:
//		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
//	}
//}

void DC_Drive_BTS(MotorDrive *motor,TIM_HandleTypeDef *htim1,uint16_t Mode,int Input,unsigned int Channel1,unsigned int Channel2)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	4613      	mov	r3, r2
 8000eae:	80fb      	strh	r3, [r7, #6]
	motor->htim1 = htim1;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	601a      	str	r2, [r3, #0]
	motor->Mode = Mode;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	88fa      	ldrh	r2, [r7, #6]
 8000eba:	821a      	strh	r2, [r3, #16]
	motor->Pwm = abs(Input);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bfb8      	it	lt
 8000ec2:	425b      	neglt	r3, r3
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	615a      	str	r2, [r3, #20]
	motor->Channel2 = Channel2;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	619a      	str	r2, [r3, #24]

	if(motor->Mode==0){
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	8a1b      	ldrh	r3, [r3, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 80e9 	bne.w	80010b2 <DC_Drive_BTS+0x212>
		if(Input < 0)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	da4d      	bge.n	8000f82 <DC_Drive_BTS+0xe2>
		{
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <DC_Drive_BTS+0x5c>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	89da      	ldrh	r2, [r3, #14]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8000efa:	e01e      	b.n	8000f3a <DC_Drive_BTS+0x9a>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d107      	bne.n	8000f14 <DC_Drive_BTS+0x74>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	89d9      	ldrh	r1, [r3, #14]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	6393      	str	r3, [r2, #56]	; 0x38
 8000f12:	e012      	b.n	8000f3a <DC_Drive_BTS+0x9a>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d107      	bne.n	8000f2c <DC_Drive_BTS+0x8c>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	89d9      	ldrh	r1, [r3, #14]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	460b      	mov	r3, r1
 8000f28:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f2a:	e006      	b.n	8000f3a <DC_Drive_BTS+0x9a>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	89d9      	ldrh	r1, [r3, #14]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	460b      	mov	r3, r1
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d105      	bne.n	8000f4e <DC_Drive_BTS+0xae>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
		{
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
		}
	}
}
 8000f4c:	e1d6      	b.n	80012fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d105      	bne.n	8000f62 <DC_Drive_BTS+0xc2>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	6393      	str	r3, [r2, #56]	; 0x38
 8000f60:	e1cc      	b.n	80012fc <DC_Drive_BTS+0x45c>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d105      	bne.n	8000f76 <DC_Drive_BTS+0xd6>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f74:	e1c2      	b.n	80012fc <DC_Drive_BTS+0x45c>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f80:	e1bc      	b.n	80012fc <DC_Drive_BTS+0x45c>
		else if(Input > 0)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	dd4d      	ble.n	8001024 <DC_Drive_BTS+0x184>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,0);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d105      	bne.n	8000f9c <DC_Drive_BTS+0xfc>
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2200      	movs	r2, #0
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
 8000f9a:	e018      	b.n	8000fce <DC_Drive_BTS+0x12e>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d105      	bne.n	8000fb0 <DC_Drive_BTS+0x110>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	2300      	movs	r3, #0
 8000fac:	6393      	str	r3, [r2, #56]	; 0x38
 8000fae:	e00e      	b.n	8000fce <DC_Drive_BTS+0x12e>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d105      	bne.n	8000fc4 <DC_Drive_BTS+0x124>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000fc2:	e004      	b.n	8000fce <DC_Drive_BTS+0x12e>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Pwm);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d106      	bne.n	8000fe4 <DC_Drive_BTS+0x144>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	89da      	ldrh	r2, [r3, #14]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fe2:	e18b      	b.n	80012fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Pwm);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d107      	bne.n	8000ffc <DC_Drive_BTS+0x15c>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	89d9      	ldrh	r1, [r3, #14]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	6393      	str	r3, [r2, #56]	; 0x38
 8000ffa:	e17f      	b.n	80012fc <DC_Drive_BTS+0x45c>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2b08      	cmp	r3, #8
 8001002:	d107      	bne.n	8001014 <DC_Drive_BTS+0x174>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	89d9      	ldrh	r1, [r3, #14]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	460b      	mov	r3, r1
 8001010:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001012:	e173      	b.n	80012fc <DC_Drive_BTS+0x45c>
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	89d9      	ldrh	r1, [r3, #14]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	460b      	mov	r3, r1
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001022:	e16b      	b.n	80012fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,0);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d105      	bne.n	8001038 <DC_Drive_BTS+0x198>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	635a      	str	r2, [r3, #52]	; 0x34
 8001036:	e018      	b.n	800106a <DC_Drive_BTS+0x1ca>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	2b04      	cmp	r3, #4
 800103e:	d105      	bne.n	800104c <DC_Drive_BTS+0x1ac>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	6393      	str	r3, [r2, #56]	; 0x38
 800104a:	e00e      	b.n	800106a <DC_Drive_BTS+0x1ca>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	2b08      	cmp	r3, #8
 8001052:	d105      	bne.n	8001060 <DC_Drive_BTS+0x1c0>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800105e:	e004      	b.n	800106a <DC_Drive_BTS+0x1ca>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	2300      	movs	r3, #0
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d105      	bne.n	800107e <DC_Drive_BTS+0x1de>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800107c:	e13e      	b.n	80012fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b04      	cmp	r3, #4
 8001084:	d105      	bne.n	8001092 <DC_Drive_BTS+0x1f2>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2300      	movs	r3, #0
 800108e:	6393      	str	r3, [r2, #56]	; 0x38
 8001090:	e134      	b.n	80012fc <DC_Drive_BTS+0x45c>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	2b08      	cmp	r3, #8
 8001098:	d105      	bne.n	80010a6 <DC_Drive_BTS+0x206>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010a4:	e12a      	b.n	80012fc <DC_Drive_BTS+0x45c>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010b0:	e124      	b.n	80012fc <DC_Drive_BTS+0x45c>
		if(Input < 0)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da64      	bge.n	8001182 <DC_Drive_BTS+0x2e2>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode-motor->Pwm);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10a      	bne.n	80010d6 <DC_Drive_BTS+0x236>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	8a1b      	ldrh	r3, [r3, #16]
 80010c4:	461a      	mov	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	89db      	ldrh	r3, [r3, #14]
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34
 80010d4:	e02a      	b.n	800112c <DC_Drive_BTS+0x28c>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d10b      	bne.n	80010f6 <DC_Drive_BTS+0x256>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8a1b      	ldrh	r3, [r3, #16]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	89db      	ldrh	r3, [r3, #14]
 80010e8:	1ad1      	subs	r1, r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	460b      	mov	r3, r1
 80010f2:	6393      	str	r3, [r2, #56]	; 0x38
 80010f4:	e01a      	b.n	800112c <DC_Drive_BTS+0x28c>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d10b      	bne.n	8001116 <DC_Drive_BTS+0x276>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	8a1b      	ldrh	r3, [r3, #16]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	89db      	ldrh	r3, [r3, #14]
 8001108:	1ad1      	subs	r1, r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	460b      	mov	r3, r1
 8001112:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001114:	e00a      	b.n	800112c <DC_Drive_BTS+0x28c>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8a1b      	ldrh	r3, [r3, #16]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	89db      	ldrh	r3, [r3, #14]
 8001120:	1ad1      	subs	r1, r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	460b      	mov	r3, r1
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d106      	bne.n	8001142 <DC_Drive_BTS+0x2a2>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	8a1a      	ldrh	r2, [r3, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001140:	e0dc      	b.n	80012fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d107      	bne.n	800115a <DC_Drive_BTS+0x2ba>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	8a19      	ldrh	r1, [r3, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	460b      	mov	r3, r1
 8001156:	6393      	str	r3, [r2, #56]	; 0x38
 8001158:	e0d0      	b.n	80012fc <DC_Drive_BTS+0x45c>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	2b08      	cmp	r3, #8
 8001160:	d107      	bne.n	8001172 <DC_Drive_BTS+0x2d2>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	8a19      	ldrh	r1, [r3, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	460b      	mov	r3, r1
 800116e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001170:	e0c4      	b.n	80012fc <DC_Drive_BTS+0x45c>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8a19      	ldrh	r1, [r3, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	460b      	mov	r3, r1
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001180:	e0bc      	b.n	80012fc <DC_Drive_BTS+0x45c>
		else if(Input > 0)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dd64      	ble.n	8001252 <DC_Drive_BTS+0x3b2>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d106      	bne.n	800119e <DC_Drive_BTS+0x2fe>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	8a1a      	ldrh	r2, [r3, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
 800119c:	e01e      	b.n	80011dc <DC_Drive_BTS+0x33c>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d107      	bne.n	80011b6 <DC_Drive_BTS+0x316>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8a19      	ldrh	r1, [r3, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	460b      	mov	r3, r1
 80011b2:	6393      	str	r3, [r2, #56]	; 0x38
 80011b4:	e012      	b.n	80011dc <DC_Drive_BTS+0x33c>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d107      	bne.n	80011ce <DC_Drive_BTS+0x32e>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	8a19      	ldrh	r1, [r3, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	460b      	mov	r3, r1
 80011ca:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011cc:	e006      	b.n	80011dc <DC_Drive_BTS+0x33c>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8a19      	ldrh	r1, [r3, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	460b      	mov	r3, r1
 80011da:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode-motor->Pwm);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10a      	bne.n	80011fa <DC_Drive_BTS+0x35a>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8a1b      	ldrh	r3, [r3, #16]
 80011e8:	461a      	mov	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	89db      	ldrh	r3, [r3, #14]
 80011ee:	1ad2      	subs	r2, r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011f8:	e080      	b.n	80012fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode-motor->Pwm);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d10b      	bne.n	800121a <DC_Drive_BTS+0x37a>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	8a1b      	ldrh	r3, [r3, #16]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	89db      	ldrh	r3, [r3, #14]
 800120c:	1ad1      	subs	r1, r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	460b      	mov	r3, r1
 8001216:	6393      	str	r3, [r2, #56]	; 0x38
 8001218:	e070      	b.n	80012fc <DC_Drive_BTS+0x45c>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	2b08      	cmp	r3, #8
 8001220:	d10b      	bne.n	800123a <DC_Drive_BTS+0x39a>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8a1b      	ldrh	r3, [r3, #16]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	89db      	ldrh	r3, [r3, #14]
 800122c:	1ad1      	subs	r1, r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	460b      	mov	r3, r1
 8001236:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001238:	e060      	b.n	80012fc <DC_Drive_BTS+0x45c>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8a1b      	ldrh	r3, [r3, #16]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	89db      	ldrh	r3, [r3, #14]
 8001244:	1ad1      	subs	r1, r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	460b      	mov	r3, r1
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001250:	e054      	b.n	80012fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <DC_Drive_BTS+0x3c8>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8a1a      	ldrh	r2, [r3, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
 8001266:	e01e      	b.n	80012a6 <DC_Drive_BTS+0x406>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	2b04      	cmp	r3, #4
 800126e:	d107      	bne.n	8001280 <DC_Drive_BTS+0x3e0>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8a19      	ldrh	r1, [r3, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	460b      	mov	r3, r1
 800127c:	6393      	str	r3, [r2, #56]	; 0x38
 800127e:	e012      	b.n	80012a6 <DC_Drive_BTS+0x406>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	2b08      	cmp	r3, #8
 8001286:	d107      	bne.n	8001298 <DC_Drive_BTS+0x3f8>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8a19      	ldrh	r1, [r3, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	460b      	mov	r3, r1
 8001294:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001296:	e006      	b.n	80012a6 <DC_Drive_BTS+0x406>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8a19      	ldrh	r1, [r3, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	460b      	mov	r3, r1
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <DC_Drive_BTS+0x41c>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8a1a      	ldrh	r2, [r3, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012ba:	e01f      	b.n	80012fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d107      	bne.n	80012d4 <DC_Drive_BTS+0x434>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8a19      	ldrh	r1, [r3, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	460b      	mov	r3, r1
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012d2:	e013      	b.n	80012fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d107      	bne.n	80012ec <DC_Drive_BTS+0x44c>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8a19      	ldrh	r1, [r3, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	460b      	mov	r3, r1
 80012e8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012ea:	e007      	b.n	80012fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8a19      	ldrh	r1, [r3, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	460b      	mov	r3, r1
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012fa:	e7ff      	b.n	80012fc <DC_Drive_BTS+0x45c>
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <vApplicationGetIdleTaskMemory+0x28>)
 8001318:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4a05      	ldr	r2, [pc, #20]	; (8001334 <vApplicationGetIdleTaskMemory+0x2c>)
 800131e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	2000007c 	.word	0x2000007c
 8001334:	2000011c 	.word	0x2000011c

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b5b0      	push	{r4, r5, r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133e:	f000 fa9f 	bl	8001880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001342:	f000 f827 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001346:	f000 f8eb 	bl	8001520 <MX_GPIO_Init>
  MX_TIM2_Init();
 800134a:	f000 f869 	bl	8001420 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800134e:	2108      	movs	r1, #8
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <main+0x50>)
 8001352:	f001 fa51 	bl	80027f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001356:	210c      	movs	r1, #12
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <main+0x50>)
 800135a:	f001 fa4d 	bl	80027f8 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of AccelTask */
  osThreadDef(AccelTask, StartAccelTask, osPriorityNormal, 0, 128);
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <main+0x54>)
 8001360:	1d3c      	adds	r4, r7, #4
 8001362:	461d      	mov	r5, r3
 8001364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001368:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800136c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelTaskHandle = osThreadCreate(osThread(AccelTask), NULL);
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f002 f8c9 	bl	800350c <osThreadCreate>
 800137a:	4603      	mov	r3, r0
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <main+0x58>)
 800137e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001380:	f002 f8bd 	bl	80034fe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001384:	e7fe      	b.n	8001384 <main+0x4c>
 8001386:	bf00      	nop
 8001388:	2000031c 	.word	0x2000031c
 800138c:	08004ab4 	.word	0x08004ab4
 8001390:	20000364 	.word	0x20000364

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b090      	sub	sp, #64	; 0x40
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	2228      	movs	r2, #40	; 0x28
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fa9c 	bl	80048e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fce5 	bl	8001dac <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013e8:	f000 f902 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2102      	movs	r1, #2
 8001406:	4618      	mov	r0, r3
 8001408:	f000 ff52 	bl	80022b0 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001412:	f000 f8ed 	bl	80015f0 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3740      	adds	r7, #64	; 0x40
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	; 0x38
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]
 800144e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001450:	4b32      	ldr	r3, [pc, #200]	; (800151c <MX_TIM2_Init+0xfc>)
 8001452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001456:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001458:	4b30      	ldr	r3, [pc, #192]	; (800151c <MX_TIM2_Init+0xfc>)
 800145a:	2247      	movs	r2, #71	; 0x47
 800145c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b2f      	ldr	r3, [pc, #188]	; (800151c <MX_TIM2_Init+0xfc>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <MX_TIM2_Init+0xfc>)
 8001466:	f240 32e7 	movw	r2, #999	; 0x3e7
 800146a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <MX_TIM2_Init+0xfc>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <MX_TIM2_Init+0xfc>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001478:	4828      	ldr	r0, [pc, #160]	; (800151c <MX_TIM2_Init+0xfc>)
 800147a:	f001 f8c3 	bl	8002604 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001484:	f000 f8b4 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800148e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001492:	4619      	mov	r1, r3
 8001494:	4821      	ldr	r0, [pc, #132]	; (800151c <MX_TIM2_Init+0xfc>)
 8001496:	f001 fc1b 	bl	8002cd0 <HAL_TIM_ConfigClockSource>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014a0:	f000 f8a6 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014a4:	481d      	ldr	r0, [pc, #116]	; (800151c <MX_TIM2_Init+0xfc>)
 80014a6:	f001 f94f 	bl	8002748 <HAL_TIM_PWM_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014b0:	f000 f89e 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	4619      	mov	r1, r3
 80014c2:	4816      	ldr	r0, [pc, #88]	; (800151c <MX_TIM2_Init+0xfc>)
 80014c4:	f001 ff94 	bl	80033f0 <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014ce:	f000 f88f 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d2:	2360      	movs	r3, #96	; 0x60
 80014d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2208      	movs	r2, #8
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_TIM2_Init+0xfc>)
 80014ea:	f001 fb2f 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014f4:	f000 f87c 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	220c      	movs	r2, #12
 80014fc:	4619      	mov	r1, r3
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <MX_TIM2_Init+0xfc>)
 8001500:	f001 fb24 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800150a:	f000 f871 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800150e:	4803      	ldr	r0, [pc, #12]	; (800151c <MX_TIM2_Init+0xfc>)
 8001510:	f000 f8c8 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8001514:	bf00      	nop
 8001516:	3738      	adds	r7, #56	; 0x38
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000031c 	.word	0x2000031c

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_GPIO_Init+0x40>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <MX_GPIO_Init+0x40>)
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_GPIO_Init+0x40>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_GPIO_Init+0x40>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4a07      	ldr	r2, [pc, #28]	; (8001560 <MX_GPIO_Init+0x40>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6193      	str	r3, [r2, #24]
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <MX_GPIO_Init+0x40>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000

08001564 <StartAccelTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAccelTask */
void StartAccelTask(void const * argument)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b085      	sub	sp, #20
 8001568:	af02      	add	r7, sp, #8
 800156a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Accel_Cal(&Accel_DC, Target_PWM, Target_Time);
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <StartAccelTask+0x54>)
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f9dc 	bl	8000930 <__aeabi_i2f>
 8001578:	4604      	mov	r4, r0
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <StartAccelTask+0x58>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f9d2 	bl	8000928 <__aeabi_ui2f>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4621      	mov	r1, r4
 800158a:	480d      	ldr	r0, [pc, #52]	; (80015c0 <StartAccelTask+0x5c>)
 800158c:	f7ff fc10 	bl	8000db0 <Accel_Cal>
	DC_Drive_BTS(&DC, &htim2, 1000, Accel_DC.vel_controller, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <StartAccelTask+0x5c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fbe5 	bl	8000d64 <__aeabi_f2iz>
 800159a:	4603      	mov	r3, r0
 800159c:	220c      	movs	r2, #12
 800159e:	9201      	str	r2, [sp, #4]
 80015a0:	2208      	movs	r2, #8
 80015a2:	9200      	str	r2, [sp, #0]
 80015a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a8:	4906      	ldr	r1, [pc, #24]	; (80015c4 <StartAccelTask+0x60>)
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <StartAccelTask+0x64>)
 80015ac:	f7ff fc78 	bl	8000ea0 <DC_Drive_BTS>
	osDelay(10);
 80015b0:	200a      	movs	r0, #10
 80015b2:	f001 fff7 	bl	80035a4 <osDelay>
	Accel_Cal(&Accel_DC, Target_PWM, Target_Time);
 80015b6:	e7d9      	b.n	800156c <StartAccelTask+0x8>
 80015b8:	20000368 	.word	0x20000368
 80015bc:	2000036a 	.word	0x2000036a
 80015c0:	20000388 	.word	0x20000388
 80015c4:	2000031c 	.word	0x2000031c
 80015c8:	2000036c 	.word	0x2000036c

080015cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015de:	f000 f965 	bl	80018ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40012c00 	.word	0x40012c00

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <Error_Handler+0x8>
	...

080015fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_MspInit+0x68>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a17      	ldr	r2, [pc, #92]	; (8001664 <HAL_MspInit+0x68>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_MspInit+0x68>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_MspInit+0x68>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <HAL_MspInit+0x68>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_MspInit+0x68>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	210f      	movs	r1, #15
 8001636:	f06f 0001 	mvn.w	r0, #1
 800163a:	f000 fa08 	bl	8001a4e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x6c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_MspInit+0x6c>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000

0800166c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167c:	d10b      	bne.n	8001696 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_TIM_Base_MspInit+0x34>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_TIM_Base_MspInit+0x34>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_TIM_Base_MspInit+0x34>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c2:	d117      	bne.n	80016f4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_TIM_MspPostInit+0x58>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <HAL_TIM_MspPostInit+0x58>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_TIM_MspPostInit+0x58>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016dc:	230c      	movs	r3, #12
 80016de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <HAL_TIM_MspPostInit+0x5c>)
 80016f0:	f000 f9d8 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010800 	.word	0x40010800

08001704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800171a:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_InitTick+0xd0>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <HAL_InitTick+0xd0>)
 8001720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001724:	6193      	str	r3, [r2, #24]
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_InitTick+0xd0>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001732:	f107 020c 	add.w	r2, r7, #12
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f000 ff13 	bl	8002568 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001742:	f000 fefd 	bl	8002540 <HAL_RCC_GetPCLK2Freq>
 8001746:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_InitTick+0xd4>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	0c9b      	lsrs	r3, r3, #18
 8001752:	3b01      	subs	r3, #1
 8001754:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_InitTick+0xd8>)
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_InitTick+0xdc>)
 800175a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_InitTick+0xd8>)
 800175e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001762:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_InitTick+0xd8>)
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_InitTick+0xd8>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_InitTick+0xd8>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_InitTick+0xd8>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800177c:	4817      	ldr	r0, [pc, #92]	; (80017dc <HAL_InitTick+0xd8>)
 800177e:	f000 ff41 	bl	8002604 <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001788:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800178c:	2b00      	cmp	r3, #0
 800178e:	d11b      	bne.n	80017c8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001790:	4812      	ldr	r0, [pc, #72]	; (80017dc <HAL_InitTick+0xd8>)
 8001792:	f000 ff87 	bl	80026a4 <HAL_TIM_Base_Start_IT>
 8001796:	4603      	mov	r3, r0
 8001798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800179c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d111      	bne.n	80017c8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80017a4:	2019      	movs	r0, #25
 80017a6:	f000 f96e 	bl	8001a86 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d808      	bhi.n	80017c2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	2019      	movs	r0, #25
 80017b6:	f000 f94a 	bl	8001a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_InitTick+0xe0>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e002      	b.n	80017c8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3730      	adds	r7, #48	; 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	431bde83 	.word	0x431bde83
 80017dc:	2000039c 	.word	0x2000039c
 80017e0:	40012c00 	.word	0x40012c00
 80017e4:	20000004 	.word	0x20000004

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
	...

08001814 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <TIM1_UP_IRQHandler+0x10>)
 800181a:	f001 f88f 	bl	800293c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000039c 	.word	0x2000039c

08001828 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001834:	f7ff fff8 	bl	8001828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001838:	480b      	ldr	r0, [pc, #44]	; (8001868 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800183a:	490c      	ldr	r1, [pc, #48]	; (800186c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800183c:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <LoopFillZerobss+0x16>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001850:	4c09      	ldr	r4, [pc, #36]	; (8001878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185e:	f003 f89d 	bl	800499c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001862:	f7ff fd69 	bl	8001338 <main>
  bx lr
 8001866:	4770      	bx	lr
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001870:	08004b0c 	.word	0x08004b0c
  ldr r2, =_sbss
 8001874:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001878:	20001274 	.word	0x20001274

0800187c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC1_2_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_Init+0x28>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_Init+0x28>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 f8d1 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	200f      	movs	r0, #15
 8001898:	f7ff ff34 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff feae 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000

080018ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_IncTick+0x1c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x20>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_IncTick+0x20>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000008 	.word	0x20000008
 80018cc:	200003e4 	.word	0x200003e4

080018d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <HAL_GetTick+0x10>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	200003e4 	.word	0x200003e4

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4906      	ldr	r1, [pc, #24]	; (800197c <__NVIC_EnableIRQ+0x34>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff4f 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff64 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ffb2 	bl	80019d4 <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff81 	bl	8001980 <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff57 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b08b      	sub	sp, #44	; 0x2c
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab6:	e169      	b.n	8001d8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f040 8158 	bne.w	8001d86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4a9a      	ldr	r2, [pc, #616]	; (8001d44 <HAL_GPIO_Init+0x2a0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d05e      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
 8001ae0:	4a98      	ldr	r2, [pc, #608]	; (8001d44 <HAL_GPIO_Init+0x2a0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d875      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001ae6:	4a98      	ldr	r2, [pc, #608]	; (8001d48 <HAL_GPIO_Init+0x2a4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d058      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
 8001aec:	4a96      	ldr	r2, [pc, #600]	; (8001d48 <HAL_GPIO_Init+0x2a4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d86f      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001af2:	4a96      	ldr	r2, [pc, #600]	; (8001d4c <HAL_GPIO_Init+0x2a8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d052      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
 8001af8:	4a94      	ldr	r2, [pc, #592]	; (8001d4c <HAL_GPIO_Init+0x2a8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d869      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001afe:	4a94      	ldr	r2, [pc, #592]	; (8001d50 <HAL_GPIO_Init+0x2ac>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d04c      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
 8001b04:	4a92      	ldr	r2, [pc, #584]	; (8001d50 <HAL_GPIO_Init+0x2ac>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d863      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001b0a:	4a92      	ldr	r2, [pc, #584]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d046      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
 8001b10:	4a90      	ldr	r2, [pc, #576]	; (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d85d      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d82a      	bhi.n	8001b70 <HAL_GPIO_Init+0xcc>
 8001b1a:	2b12      	cmp	r3, #18
 8001b1c:	d859      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001b1e:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <HAL_GPIO_Init+0x80>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b9f 	.word	0x08001b9f
 8001b28:	08001b79 	.word	0x08001b79
 8001b2c:	08001b8b 	.word	0x08001b8b
 8001b30:	08001bcd 	.word	0x08001bcd
 8001b34:	08001bd3 	.word	0x08001bd3
 8001b38:	08001bd3 	.word	0x08001bd3
 8001b3c:	08001bd3 	.word	0x08001bd3
 8001b40:	08001bd3 	.word	0x08001bd3
 8001b44:	08001bd3 	.word	0x08001bd3
 8001b48:	08001bd3 	.word	0x08001bd3
 8001b4c:	08001bd3 	.word	0x08001bd3
 8001b50:	08001bd3 	.word	0x08001bd3
 8001b54:	08001bd3 	.word	0x08001bd3
 8001b58:	08001bd3 	.word	0x08001bd3
 8001b5c:	08001bd3 	.word	0x08001bd3
 8001b60:	08001bd3 	.word	0x08001bd3
 8001b64:	08001bd3 	.word	0x08001bd3
 8001b68:	08001b81 	.word	0x08001b81
 8001b6c:	08001b95 	.word	0x08001b95
 8001b70:	4a79      	ldr	r2, [pc, #484]	; (8001d58 <HAL_GPIO_Init+0x2b4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b76:	e02c      	b.n	8001bd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e029      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	3304      	adds	r3, #4
 8001b86:	623b      	str	r3, [r7, #32]
          break;
 8001b88:	e024      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	3308      	adds	r3, #8
 8001b90:	623b      	str	r3, [r7, #32]
          break;
 8001b92:	e01f      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	330c      	adds	r3, #12
 8001b9a:	623b      	str	r3, [r7, #32]
          break;
 8001b9c:	e01a      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	623b      	str	r3, [r7, #32]
          break;
 8001baa:	e013      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	611a      	str	r2, [r3, #16]
          break;
 8001bbe:	e009      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	615a      	str	r2, [r3, #20]
          break;
 8001bca:	e003      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e000      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          break;
 8001bd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	d801      	bhi.n	8001bde <HAL_GPIO_Init+0x13a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	e001      	b.n	8001be2 <HAL_GPIO_Init+0x13e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2bff      	cmp	r3, #255	; 0xff
 8001be8:	d802      	bhi.n	8001bf0 <HAL_GPIO_Init+0x14c>
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x152>
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	3b08      	subs	r3, #8
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	210f      	movs	r1, #15
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	401a      	ands	r2, r3
 8001c08:	6a39      	ldr	r1, [r7, #32]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	431a      	orrs	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80b1 	beq.w	8001d86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c24:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a4c      	ldr	r2, [pc, #304]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c3c:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_GPIO_Init+0x2bc>)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a40      	ldr	r2, [pc, #256]	; (8001d64 <HAL_GPIO_Init+0x2c0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d013      	beq.n	8001c90 <HAL_GPIO_Init+0x1ec>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a3f      	ldr	r2, [pc, #252]	; (8001d68 <HAL_GPIO_Init+0x2c4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00d      	beq.n	8001c8c <HAL_GPIO_Init+0x1e8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a3e      	ldr	r2, [pc, #248]	; (8001d6c <HAL_GPIO_Init+0x2c8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x1e4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a3d      	ldr	r2, [pc, #244]	; (8001d70 <HAL_GPIO_Init+0x2cc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_GPIO_Init+0x1e0>
 8001c80:	2303      	movs	r3, #3
 8001c82:	e006      	b.n	8001c92 <HAL_GPIO_Init+0x1ee>
 8001c84:	2304      	movs	r3, #4
 8001c86:	e004      	b.n	8001c92 <HAL_GPIO_Init+0x1ee>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x1ee>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_Init+0x1ee>
 8001c90:	2300      	movs	r3, #0
 8001c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ca2:	492f      	ldr	r1, [pc, #188]	; (8001d60 <HAL_GPIO_Init+0x2bc>)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	492c      	ldr	r1, [pc, #176]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	4928      	ldr	r1, [pc, #160]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4922      	ldr	r1, [pc, #136]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	491e      	ldr	r1, [pc, #120]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4918      	ldr	r1, [pc, #96]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	4914      	ldr	r1, [pc, #80]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d021      	beq.n	8001d78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	490e      	ldr	r1, [pc, #56]	; (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e021      	b.n	8001d86 <HAL_GPIO_Init+0x2e2>
 8001d42:	bf00      	nop
 8001d44:	10320000 	.word	0x10320000
 8001d48:	10310000 	.word	0x10310000
 8001d4c:	10220000 	.word	0x10220000
 8001d50:	10210000 	.word	0x10210000
 8001d54:	10120000 	.word	0x10120000
 8001d58:	10110000 	.word	0x10110000
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40010800 	.word	0x40010800
 8001d68:	40010c00 	.word	0x40010c00
 8001d6c:	40011000 	.word	0x40011000
 8001d70:	40011400 	.word	0x40011400
 8001d74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	4909      	ldr	r1, [pc, #36]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	3301      	adds	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f47f ae8e 	bne.w	8001ab8 <HAL_GPIO_Init+0x14>
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	372c      	adds	r7, #44	; 0x2c
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	40010400 	.word	0x40010400

08001dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e272      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8087 	beq.w	8001eda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dcc:	4b92      	ldr	r3, [pc, #584]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d00c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd8:	4b8f      	ldr	r3, [pc, #572]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d112      	bne.n	8001e0a <HAL_RCC_OscConfig+0x5e>
 8001de4:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df0:	d10b      	bne.n	8001e0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df2:	4b89      	ldr	r3, [pc, #548]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d06c      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x12c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d168      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e24c      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x76>
 8001e14:	4b80      	ldr	r3, [pc, #512]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a7f      	ldr	r2, [pc, #508]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e02e      	b.n	8001e80 <HAL_RCC_OscConfig+0xd4>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x98>
 8001e2a:	4b7b      	ldr	r3, [pc, #492]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7a      	ldr	r2, [pc, #488]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b78      	ldr	r3, [pc, #480]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a77      	ldr	r2, [pc, #476]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e01d      	b.n	8001e80 <HAL_RCC_OscConfig+0xd4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0xbc>
 8001e4e:	4b72      	ldr	r3, [pc, #456]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a71      	ldr	r2, [pc, #452]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b6f      	ldr	r3, [pc, #444]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6e      	ldr	r2, [pc, #440]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0xd4>
 8001e68:	4b6b      	ldr	r3, [pc, #428]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a6a      	ldr	r2, [pc, #424]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b68      	ldr	r3, [pc, #416]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a67      	ldr	r2, [pc, #412]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d013      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff fd22 	bl	80018d0 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff fd1e 	bl	80018d0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e200      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b5d      	ldr	r3, [pc, #372]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0xe4>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fd0e 	bl	80018d0 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fd0a 	bl	80018d0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1ec      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x10c>
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d063      	beq.n	8001fae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee6:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ef2:	4b49      	ldr	r3, [pc, #292]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d11c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x18c>
 8001efe:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d116      	bne.n	8001f38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_RCC_OscConfig+0x176>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1c0      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4939      	ldr	r1, [pc, #228]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	e03a      	b.n	8001fae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_RCC_OscConfig+0x270>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7ff fcc3 	bl	80018d0 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4e:	f7ff fcbf 	bl	80018d0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1a1      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4927      	ldr	r1, [pc, #156]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
 8001f80:	e015      	b.n	8001fae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_RCC_OscConfig+0x270>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fca2 	bl	80018d0 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f90:	f7ff fc9e 	bl	80018d0 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e180      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d03a      	beq.n	8002030 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d019      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7ff fc82 	bl	80018d0 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fc7e 	bl	80018d0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e160      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f000 faea 	bl	80025c8 <RCC_Delay>
 8001ff4:	e01c      	b.n	8002030 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fc68 	bl	80018d0 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002002:	e00f      	b.n	8002024 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002004:	f7ff fc64 	bl	80018d0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d908      	bls.n	8002024 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e146      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	42420000 	.word	0x42420000
 8002020:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	4b92      	ldr	r3, [pc, #584]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e9      	bne.n	8002004 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80a6 	beq.w	800218a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002042:	4b8b      	ldr	r3, [pc, #556]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10d      	bne.n	800206a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b88      	ldr	r3, [pc, #544]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a87      	ldr	r2, [pc, #540]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	4b85      	ldr	r3, [pc, #532]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002066:	2301      	movs	r3, #1
 8002068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	4b82      	ldr	r3, [pc, #520]	; (8002274 <HAL_RCC_OscConfig+0x4c8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d118      	bne.n	80020a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002076:	4b7f      	ldr	r3, [pc, #508]	; (8002274 <HAL_RCC_OscConfig+0x4c8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7e      	ldr	r2, [pc, #504]	; (8002274 <HAL_RCC_OscConfig+0x4c8>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002082:	f7ff fc25 	bl	80018d0 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208a:	f7ff fc21 	bl	80018d0 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b64      	cmp	r3, #100	; 0x64
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e103      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209c:	4b75      	ldr	r3, [pc, #468]	; (8002274 <HAL_RCC_OscConfig+0x4c8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x312>
 80020b0:	4b6f      	ldr	r3, [pc, #444]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a6e      	ldr	r2, [pc, #440]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	e02d      	b.n	800211a <HAL_RCC_OscConfig+0x36e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x334>
 80020c6:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a69      	ldr	r2, [pc, #420]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	6213      	str	r3, [r2, #32]
 80020d2:	4b67      	ldr	r3, [pc, #412]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a66      	ldr	r2, [pc, #408]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	f023 0304 	bic.w	r3, r3, #4
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	e01c      	b.n	800211a <HAL_RCC_OscConfig+0x36e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d10c      	bne.n	8002102 <HAL_RCC_OscConfig+0x356>
 80020e8:	4b61      	ldr	r3, [pc, #388]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4a60      	ldr	r2, [pc, #384]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6213      	str	r3, [r2, #32]
 80020f4:	4b5e      	ldr	r3, [pc, #376]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a5d      	ldr	r2, [pc, #372]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	e00b      	b.n	800211a <HAL_RCC_OscConfig+0x36e>
 8002102:	4b5b      	ldr	r3, [pc, #364]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a5a      	ldr	r2, [pc, #360]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	4b58      	ldr	r3, [pc, #352]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a57      	ldr	r2, [pc, #348]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d015      	beq.n	800214e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7ff fbd5 	bl	80018d0 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7ff fbd1 	bl	80018d0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0b1      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	4b4b      	ldr	r3, [pc, #300]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ee      	beq.n	800212a <HAL_RCC_OscConfig+0x37e>
 800214c:	e014      	b.n	8002178 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214e:	f7ff fbbf 	bl	80018d0 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	e00a      	b.n	800216c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7ff fbbb 	bl	80018d0 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e09b      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216c:	4b40      	ldr	r3, [pc, #256]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ee      	bne.n	8002156 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4b3c      	ldr	r3, [pc, #240]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a3b      	ldr	r2, [pc, #236]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8087 	beq.w	80022a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002194:	4b36      	ldr	r3, [pc, #216]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d061      	beq.n	8002264 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d146      	bne.n	8002236 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b33      	ldr	r3, [pc, #204]	; (8002278 <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff fb8f 	bl	80018d0 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b6:	f7ff fb8b 	bl	80018d0 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e06d      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c8:	4b29      	ldr	r3, [pc, #164]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021dc:	d108      	bne.n	80021f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021de:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	4921      	ldr	r1, [pc, #132]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a19      	ldr	r1, [r3, #32]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	430b      	orrs	r3, r1
 8002202:	491b      	ldr	r1, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x4cc>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7ff fb5f 	bl	80018d0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002216:	f7ff fb5b 	bl	80018d0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e03d      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x46a>
 8002234:	e035      	b.n	80022a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff fb48 	bl	80018d0 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff fb44 	bl	80018d0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e026      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x498>
 8002262:	e01e      	b.n	80022a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e019      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
 8002278:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_OscConfig+0x500>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	429a      	cmp	r2, r3
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000

080022b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0d0      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d910      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b67      	ldr	r3, [pc, #412]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4965      	ldr	r1, [pc, #404]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b63      	ldr	r3, [pc, #396]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0b8      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a58      	ldr	r2, [pc, #352]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002316:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002324:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800232e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b50      	ldr	r3, [pc, #320]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	494d      	ldr	r1, [pc, #308]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d040      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d115      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e07f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e073      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e06b      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238e:	4b39      	ldr	r3, [pc, #228]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f023 0203 	bic.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4936      	ldr	r1, [pc, #216]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a0:	f7ff fa96 	bl	80018d0 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	e00a      	b.n	80023be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a8:	f7ff fa92 	bl	80018d0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e053      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 020c 	and.w	r2, r3, #12
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1eb      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d210      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	4922      	ldr	r1, [pc, #136]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e032      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4916      	ldr	r1, [pc, #88]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	490e      	ldr	r1, [pc, #56]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800243e:	f000 f821 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	490a      	ldr	r1, [pc, #40]	; (8002478 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	5ccb      	ldrb	r3, [r1, r3]
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1cc>)
 8002458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1d0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff f950 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40022000 	.word	0x40022000
 8002474:	40021000 	.word	0x40021000
 8002478:	08004ad8 	.word	0x08004ad8
 800247c:	20000000 	.word	0x20000000
 8002480:	20000004 	.word	0x20000004

08002484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <HAL_RCC_GetSysClockFreq+0x94>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d002      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x30>
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d003      	beq.n	80024ba <HAL_RCC_GetSysClockFreq+0x36>
 80024b2:	e027      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_GetSysClockFreq+0x98>)
 80024b6:	613b      	str	r3, [r7, #16]
      break;
 80024b8:	e027      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	0c9b      	lsrs	r3, r3, #18
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	4a17      	ldr	r2, [pc, #92]	; (8002520 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d010      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_RCC_GetSysClockFreq+0x94>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	0c5b      	lsrs	r3, r3, #17
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	4a11      	ldr	r2, [pc, #68]	; (8002524 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	fb03 f202 	mul.w	r2, r3, r2
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e004      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	613b      	str	r3, [r7, #16]
      break;
 8002502:	e002      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetSysClockFreq+0x98>)
 8002506:	613b      	str	r3, [r7, #16]
      break;
 8002508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250a:	693b      	ldr	r3, [r7, #16]
}
 800250c:	4618      	mov	r0, r3
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	007a1200 	.word	0x007a1200
 8002520:	08004af0 	.word	0x08004af0
 8002524:	08004b00 	.word	0x08004b00
 8002528:	003d0900 	.word	0x003d0900

0800252c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002530:	4b02      	ldr	r3, [pc, #8]	; (800253c <HAL_RCC_GetHCLKFreq+0x10>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	20000000 	.word	0x20000000

08002540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002544:	f7ff fff2 	bl	800252c <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	0adb      	lsrs	r3, r3, #11
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4903      	ldr	r1, [pc, #12]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	08004ae8 	.word	0x08004ae8

08002568 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	220f      	movs	r2, #15
 8002576:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_GetClockConfig+0x58>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_RCC_GetClockConfig+0x58>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_GetClockConfig+0x58>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_RCC_GetClockConfig+0x58>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	08db      	lsrs	r3, r3, #3
 80025a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetClockConfig+0x5c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0207 	and.w	r2, r3, #7
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40022000 	.word	0x40022000

080025c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <RCC_Delay+0x34>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <RCC_Delay+0x38>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0a5b      	lsrs	r3, r3, #9
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025e4:	bf00      	nop
  }
  while (Delay --);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1e5a      	subs	r2, r3, #1
 80025ea:	60fa      	str	r2, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f9      	bne.n	80025e4 <RCC_Delay+0x1c>
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	20000000 	.word	0x20000000
 8002600:	10624dd3 	.word	0x10624dd3

08002604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e041      	b.n	800269a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff f81e 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f000 fc30 	bl	8002ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d001      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e03a      	b.n	8002732 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_TIM_Base_Start_IT+0x98>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00e      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x58>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e6:	d009      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x58>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_TIM_Base_Start_IT+0x9c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x58>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a13      	ldr	r2, [pc, #76]	; (8002744 <HAL_TIM_Base_Start_IT+0xa0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b06      	cmp	r3, #6
 800270c:	d010      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271e:	e007      	b.n	8002730 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40000400 	.word	0x40000400
 8002744:	40000800 	.word	0x40000800

08002748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e041      	b.n	80027de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f839 	bl	80027e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	4619      	mov	r1, r3
 8002786:	4610      	mov	r0, r2
 8002788:	f000 fb8e 	bl	8002ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <HAL_TIM_PWM_Start+0x24>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e022      	b.n	8002862 <HAL_TIM_PWM_Start+0x6a>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b04      	cmp	r3, #4
 8002820:	d109      	bne.n	8002836 <HAL_TIM_PWM_Start+0x3e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	bf14      	ite	ne
 800282e:	2301      	movne	r3, #1
 8002830:	2300      	moveq	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	e015      	b.n	8002862 <HAL_TIM_PWM_Start+0x6a>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d109      	bne.n	8002850 <HAL_TIM_PWM_Start+0x58>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	bf14      	ite	ne
 8002848:	2301      	movne	r3, #1
 800284a:	2300      	moveq	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e008      	b.n	8002862 <HAL_TIM_PWM_Start+0x6a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	bf14      	ite	ne
 800285c:	2301      	movne	r3, #1
 800285e:	2300      	moveq	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e05e      	b.n	8002928 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <HAL_TIM_PWM_Start+0x82>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002878:	e013      	b.n	80028a2 <HAL_TIM_PWM_Start+0xaa>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d104      	bne.n	800288a <HAL_TIM_PWM_Start+0x92>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002888:	e00b      	b.n	80028a2 <HAL_TIM_PWM_Start+0xaa>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d104      	bne.n	800289a <HAL_TIM_PWM_Start+0xa2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002898:	e003      	b.n	80028a2 <HAL_TIM_PWM_Start+0xaa>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2201      	movs	r2, #1
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fd7c 	bl	80033a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1e      	ldr	r2, [pc, #120]	; (8002930 <HAL_TIM_PWM_Start+0x138>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d107      	bne.n	80028ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_TIM_PWM_Start+0x138>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_TIM_PWM_Start+0xfa>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d009      	beq.n	80028f2 <HAL_TIM_PWM_Start+0xfa>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a14      	ldr	r2, [pc, #80]	; (8002934 <HAL_TIM_PWM_Start+0x13c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_TIM_PWM_Start+0xfa>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_TIM_PWM_Start+0x140>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d111      	bne.n	8002916 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b06      	cmp	r3, #6
 8002902:	d010      	beq.n	8002926 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002914:	e007      	b.n	8002926 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800

0800293c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b02      	cmp	r3, #2
 8002950:	d122      	bne.n	8002998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b02      	cmp	r3, #2
 800295e:	d11b      	bne.n	8002998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0202 	mvn.w	r2, #2
 8002968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa76 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002984:	e005      	b.n	8002992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa69 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fa78 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d122      	bne.n	80029ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d11b      	bne.n	80029ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0204 	mvn.w	r2, #4
 80029bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa4c 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 80029d8:	e005      	b.n	80029e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fa3f 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fa4e 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d122      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d11b      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0208 	mvn.w	r2, #8
 8002a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2204      	movs	r2, #4
 8002a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fa22 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa15 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fa24 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0210 	mvn.w	r2, #16
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f9f8 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f9eb 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f9fa 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d107      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0201 	mvn.w	r2, #1
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fd86 	bl	80015cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b80      	cmp	r3, #128	; 0x80
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fce9 	bl	80034be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d10e      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d107      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f9be 	bl	8002e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d107      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0220 	mvn.w	r2, #32
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fcb4 	bl	80034ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0ae      	b.n	8002cc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b0c      	cmp	r3, #12
 8002b76:	f200 809f 	bhi.w	8002cb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002bb5 	.word	0x08002bb5
 8002b84:	08002cb9 	.word	0x08002cb9
 8002b88:	08002cb9 	.word	0x08002cb9
 8002b8c:	08002cb9 	.word	0x08002cb9
 8002b90:	08002bf5 	.word	0x08002bf5
 8002b94:	08002cb9 	.word	0x08002cb9
 8002b98:	08002cb9 	.word	0x08002cb9
 8002b9c:	08002cb9 	.word	0x08002cb9
 8002ba0:	08002c37 	.word	0x08002c37
 8002ba4:	08002cb9 	.word	0x08002cb9
 8002ba8:	08002cb9 	.word	0x08002cb9
 8002bac:	08002cb9 	.word	0x08002cb9
 8002bb0:	08002c77 	.word	0x08002c77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f9d6 	bl	8002f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0208 	orr.w	r2, r2, #8
 8002bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0204 	bic.w	r2, r2, #4
 8002bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6999      	ldr	r1, [r3, #24]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	619a      	str	r2, [r3, #24]
      break;
 8002bf2:	e064      	b.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fa1c 	bl	8003038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6999      	ldr	r1, [r3, #24]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	021a      	lsls	r2, r3, #8
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	619a      	str	r2, [r3, #24]
      break;
 8002c34:	e043      	b.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fa65 	bl	800310c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0208 	orr.w	r2, r2, #8
 8002c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0204 	bic.w	r2, r2, #4
 8002c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69d9      	ldr	r1, [r3, #28]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	61da      	str	r2, [r3, #28]
      break;
 8002c74:	e023      	b.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 faaf 	bl	80031e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69d9      	ldr	r1, [r3, #28]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	021a      	lsls	r2, r3, #8
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	61da      	str	r2, [r3, #28]
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	75fb      	strb	r3, [r7, #23]
      break;
 8002cbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_TIM_ConfigClockSource+0x1c>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e0b4      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x186>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d24:	d03e      	beq.n	8002da4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2a:	f200 8087 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d32:	f000 8086 	beq.w	8002e42 <HAL_TIM_ConfigClockSource+0x172>
 8002d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3a:	d87f      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d3c:	2b70      	cmp	r3, #112	; 0x70
 8002d3e:	d01a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0xa6>
 8002d40:	2b70      	cmp	r3, #112	; 0x70
 8002d42:	d87b      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d44:	2b60      	cmp	r3, #96	; 0x60
 8002d46:	d050      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x11a>
 8002d48:	2b60      	cmp	r3, #96	; 0x60
 8002d4a:	d877      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d4c:	2b50      	cmp	r3, #80	; 0x50
 8002d4e:	d03c      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0xfa>
 8002d50:	2b50      	cmp	r3, #80	; 0x50
 8002d52:	d873      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d54:	2b40      	cmp	r3, #64	; 0x40
 8002d56:	d058      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x13a>
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d86f      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d5c:	2b30      	cmp	r3, #48	; 0x30
 8002d5e:	d064      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x15a>
 8002d60:	2b30      	cmp	r3, #48	; 0x30
 8002d62:	d86b      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d060      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x15a>
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d867      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d05c      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x15a>
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d05a      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x15a>
 8002d74:	e062      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d86:	f000 faf0 	bl	800336a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	609a      	str	r2, [r3, #8]
      break;
 8002da2:	e04f      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002db4:	f000 fad9 	bl	800336a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc6:	609a      	str	r2, [r3, #8]
      break;
 8002dc8:	e03c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f000 fa50 	bl	800327c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2150      	movs	r1, #80	; 0x50
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 faa7 	bl	8003336 <TIM_ITRx_SetConfig>
      break;
 8002de8:	e02c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df6:	461a      	mov	r2, r3
 8002df8:	f000 fa6e 	bl	80032d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2160      	movs	r1, #96	; 0x60
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fa97 	bl	8003336 <TIM_ITRx_SetConfig>
      break;
 8002e08:	e01c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 fa30 	bl	800327c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2140      	movs	r1, #64	; 0x40
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fa87 	bl	8003336 <TIM_ITRx_SetConfig>
      break;
 8002e28:	e00c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4610      	mov	r0, r2
 8002e36:	f000 fa7e 	bl	8003336 <TIM_ITRx_SetConfig>
      break;
 8002e3a:	e003      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	e000      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
	...

08002ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <TIM_Base_SetConfig+0xb8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_Base_SetConfig+0x30>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d007      	beq.n	8002ed8 <TIM_Base_SetConfig+0x30>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <TIM_Base_SetConfig+0xbc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0x30>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <TIM_Base_SetConfig+0xc0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <TIM_Base_SetConfig+0xb8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <TIM_Base_SetConfig+0x62>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d007      	beq.n	8002f0a <TIM_Base_SetConfig+0x62>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <TIM_Base_SetConfig+0xbc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d003      	beq.n	8002f0a <TIM_Base_SetConfig+0x62>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <TIM_Base_SetConfig+0xc0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d108      	bne.n	8002f1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <TIM_Base_SetConfig+0xb8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d103      	bne.n	8002f50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	615a      	str	r2, [r3, #20]
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800

08002f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f023 0201 	bic.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f023 0302 	bic.w	r3, r3, #2
 8002fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <TIM_OC1_SetConfig+0xc8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10c      	bne.n	8002fe2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f023 0308 	bic.w	r3, r3, #8
 8002fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <TIM_OC1_SetConfig+0xc8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d111      	bne.n	800300e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	621a      	str	r2, [r3, #32]
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00

08003038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f023 0210 	bic.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f023 0320 	bic.w	r3, r3, #32
 8003082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <TIM_OC2_SetConfig+0xd0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d10d      	bne.n	80030b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800309e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a14      	ldr	r2, [pc, #80]	; (8003108 <TIM_OC2_SetConfig+0xd0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d113      	bne.n	80030e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	621a      	str	r2, [r3, #32]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	40012c00 	.word	0x40012c00

0800310c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <TIM_OC3_SetConfig+0xd0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10d      	bne.n	8003186 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <TIM_OC3_SetConfig+0xd0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d113      	bne.n	80031b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40012c00 	.word	0x40012c00

080031e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800322a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	031b      	lsls	r3, r3, #12
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a0f      	ldr	r2, [pc, #60]	; (8003278 <TIM_OC4_SetConfig+0x98>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d109      	bne.n	8003254 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	40012c00 	.word	0x40012c00

0800327c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0201 	bic.w	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 030a 	bic.w	r3, r3, #10
 80032b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f023 0210 	bic.w	r2, r3, #16
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	031b      	lsls	r3, r3, #12
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003314:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	621a      	str	r2, [r3, #32]
}
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	f043 0307 	orr.w	r3, r3, #7
 8003358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	609a      	str	r2, [r3, #8]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800336a:	b480      	push	{r7}
 800336c:	b087      	sub	sp, #28
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003384:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	021a      	lsls	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	431a      	orrs	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4313      	orrs	r3, r2
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	609a      	str	r2, [r3, #8]
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	401a      	ands	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1a      	ldr	r2, [r3, #32]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003404:	2302      	movs	r3, #2
 8003406:	e046      	b.n	8003496 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d009      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10c      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4313      	orrs	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800

080034ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80034de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e2:	2b84      	cmp	r3, #132	; 0x84
 80034e4:	d005      	beq.n	80034f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80034e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	3303      	adds	r3, #3
 80034f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034f2:	68fb      	ldr	r3, [r7, #12]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003502:	f000 fae7 	bl	8003ad4 <vTaskStartScheduler>
  
  return osOK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}

0800350c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800350c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af04      	add	r7, sp, #16
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d020      	beq.n	8003560 <osThreadCreate+0x54>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01c      	beq.n	8003560 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685c      	ldr	r4, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691e      	ldr	r6, [r3, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ffc9 	bl	80034d0 <makeFreeRtosPriority>
 800353e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003548:	9202      	str	r2, [sp, #8]
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	9100      	str	r1, [sp, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	4632      	mov	r2, r6
 8003552:	4629      	mov	r1, r5
 8003554:	4620      	mov	r0, r4
 8003556:	f000 f8e8 	bl	800372a <xTaskCreateStatic>
 800355a:	4603      	mov	r3, r0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e01c      	b.n	800359a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685c      	ldr	r4, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800356c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ffab 	bl	80034d0 <makeFreeRtosPriority>
 800357a:	4602      	mov	r2, r0
 800357c:	f107 030c 	add.w	r3, r7, #12
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	9200      	str	r2, [sp, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4632      	mov	r2, r6
 8003588:	4629      	mov	r1, r5
 800358a:	4620      	mov	r0, r4
 800358c:	f000 f929 	bl	80037e2 <xTaskCreate>
 8003590:	4603      	mov	r3, r0
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800359a:	68fb      	ldr	r3, [r7, #12]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <osDelay+0x16>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	e000      	b.n	80035bc <osDelay+0x18>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fa55 	bl	8003a6c <vTaskDelay>
  
  return osOK;
 80035c2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f103 0208 	add.w	r2, r3, #8
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f103 0208 	add.w	r2, r3, #8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f103 0208 	add.w	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	601a      	str	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367e:	d103      	bne.n	8003688 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	e00c      	b.n	80036a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3308      	adds	r3, #8
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e002      	b.n	8003696 <vListInsert+0x2e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d2f6      	bcs.n	8003690 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6892      	ldr	r2, [r2, #8]
 80036ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6852      	ldr	r2, [r2, #4]
 80036f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d103      	bne.n	800370c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	1e5a      	subs	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800372a:	b580      	push	{r7, lr}
 800372c:	b08e      	sub	sp, #56	; 0x38
 800372e:	af04      	add	r7, sp, #16
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003750:	bf00      	nop
 8003752:	e7fe      	b.n	8003752 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <xTaskCreateStatic+0x46>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	61fb      	str	r3, [r7, #28]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003770:	23a0      	movs	r3, #160	; 0xa0
 8003772:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2ba0      	cmp	r3, #160	; 0xa0
 8003778:	d00a      	beq.n	8003790 <xTaskCreateStatic+0x66>
	__asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	61bb      	str	r3, [r7, #24]
}
 800378c:	bf00      	nop
 800378e:	e7fe      	b.n	800378e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01e      	beq.n	80037d4 <xTaskCreateStatic+0xaa>
 8003796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037ae:	2300      	movs	r3, #0
 80037b0:	9303      	str	r3, [sp, #12]
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	9302      	str	r3, [sp, #8]
 80037b6:	f107 0314 	add.w	r3, r7, #20
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f850 	bl	800386c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ce:	f000 f8e3 	bl	8003998 <prvAddNewTaskToReadyList>
 80037d2:	e001      	b.n	80037d8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037d8:	697b      	ldr	r3, [r7, #20]
	}
 80037da:	4618      	mov	r0, r3
 80037dc:	3728      	adds	r7, #40	; 0x28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b08c      	sub	sp, #48	; 0x30
 80037e6:	af04      	add	r7, sp, #16
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fe9a 	bl	8004530 <pvPortMalloc>
 80037fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00e      	beq.n	8003822 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003804:	20a0      	movs	r0, #160	; 0xa0
 8003806:	f000 fe93 	bl	8004530 <pvPortMalloc>
 800380a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
 8003818:	e005      	b.n	8003826 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800381a:	6978      	ldr	r0, [r7, #20]
 800381c:	f000 ff4c 	bl	80046b8 <vPortFree>
 8003820:	e001      	b.n	8003826 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d017      	beq.n	800385c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003834:	88fa      	ldrh	r2, [r7, #6]
 8003836:	2300      	movs	r3, #0
 8003838:	9303      	str	r3, [sp, #12]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	9302      	str	r3, [sp, #8]
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f80e 	bl	800386c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003850:	69f8      	ldr	r0, [r7, #28]
 8003852:	f000 f8a1 	bl	8003998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003856:	2301      	movs	r3, #1
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e002      	b.n	8003862 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800385c:	f04f 33ff 	mov.w	r3, #4294967295
 8003860:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003862:	69bb      	ldr	r3, [r7, #24]
	}
 8003864:	4618      	mov	r0, r3
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003884:	3b01      	subs	r3, #1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f023 0307 	bic.w	r3, r3, #7
 8003892:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	617b      	str	r3, [r7, #20]
}
 80038b0:	bf00      	nop
 80038b2:	e7fe      	b.n	80038b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	e012      	b.n	80038e0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	7819      	ldrb	r1, [r3, #0]
 80038c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	4413      	add	r3, r2
 80038c8:	3334      	adds	r3, #52	; 0x34
 80038ca:	460a      	mov	r2, r1
 80038cc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d006      	beq.n	80038e8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3301      	adds	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b0f      	cmp	r3, #15
 80038e4:	d9e9      	bls.n	80038ba <prvInitialiseNewTask+0x4e>
 80038e6:	e000      	b.n	80038ea <prvInitialiseNewTask+0x7e>
		{
			break;
 80038e8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	2b06      	cmp	r3, #6
 80038f6:	d901      	bls.n	80038fc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038f8:	2306      	movs	r3, #6
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	2200      	movs	r2, #0
 800390c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	3304      	adds	r3, #4
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fe79 	bl	800360a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	3318      	adds	r3, #24
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fe74 	bl	800360a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003926:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	f1c3 0207 	rsb	r2, r3, #7
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	2200      	movs	r2, #0
 800393c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	2200      	movs	r2, #0
 8003944:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	334c      	adds	r3, #76	; 0x4c
 800394c:	224c      	movs	r2, #76	; 0x4c
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f000 ffc5 	bl	80048e0 <memset>
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	4a0c      	ldr	r2, [pc, #48]	; (800398c <prvInitialiseNewTask+0x120>)
 800395a:	651a      	str	r2, [r3, #80]	; 0x50
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <prvInitialiseNewTask+0x124>)
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	4a0b      	ldr	r2, [pc, #44]	; (8003994 <prvInitialiseNewTask+0x128>)
 8003966:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	68f9      	ldr	r1, [r7, #12]
 800396c:	69b8      	ldr	r0, [r7, #24]
 800396e:	f000 fc29 	bl	80041c4 <pxPortInitialiseStack>
 8003972:	4602      	mov	r2, r0
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003982:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003984:	bf00      	nop
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20001134 	.word	0x20001134
 8003990:	2000119c 	.word	0x2000119c
 8003994:	20001204 	.word	0x20001204

08003998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039a0:	f000 fd04 	bl	80043ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039a4:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <prvAddNewTaskToReadyList+0xb8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3301      	adds	r3, #1
 80039aa:	4a29      	ldr	r2, [pc, #164]	; (8003a50 <prvAddNewTaskToReadyList+0xb8>)
 80039ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039ae:	4b29      	ldr	r3, [pc, #164]	; (8003a54 <prvAddNewTaskToReadyList+0xbc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039b6:	4a27      	ldr	r2, [pc, #156]	; (8003a54 <prvAddNewTaskToReadyList+0xbc>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <prvAddNewTaskToReadyList+0xb8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d110      	bne.n	80039e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039c4:	f000 fad2 	bl	8003f6c <prvInitialiseTaskLists>
 80039c8:	e00d      	b.n	80039e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <prvAddNewTaskToReadyList+0xc0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039d2:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <prvAddNewTaskToReadyList+0xbc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	429a      	cmp	r2, r3
 80039de:	d802      	bhi.n	80039e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039e0:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <prvAddNewTaskToReadyList+0xbc>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039e6:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <prvAddNewTaskToReadyList+0xc4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <prvAddNewTaskToReadyList+0xc4>)
 80039ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	2201      	movs	r2, #1
 80039f6:	409a      	lsls	r2, r3
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <prvAddNewTaskToReadyList+0xc8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <prvAddNewTaskToReadyList+0xc8>)
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <prvAddNewTaskToReadyList+0xcc>)
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f7ff fe02 	bl	8003622 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a1e:	f000 fcf5 	bl	800440c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <prvAddNewTaskToReadyList+0xc0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00e      	beq.n	8003a48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <prvAddNewTaskToReadyList+0xbc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d207      	bcs.n	8003a48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <prvAddNewTaskToReadyList+0xd0>)
 8003a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200004e8 	.word	0x200004e8
 8003a54:	200003e8 	.word	0x200003e8
 8003a58:	200004f4 	.word	0x200004f4
 8003a5c:	20000504 	.word	0x20000504
 8003a60:	200004f0 	.word	0x200004f0
 8003a64:	200003ec 	.word	0x200003ec
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d017      	beq.n	8003aae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <vTaskDelay+0x60>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <vTaskDelay+0x30>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	60bb      	str	r3, [r7, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a9c:	f000 f884 	bl	8003ba8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fb28 	bl	80040f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003aa8:	f000 f88c 	bl	8003bc4 <xTaskResumeAll>
 8003aac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <vTaskDelay+0x64>)
 8003ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000510 	.word	0x20000510
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ae2:	463a      	mov	r2, r7
 8003ae4:	1d39      	adds	r1, r7, #4
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fc0c 	bl	8001308 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003af0:	6839      	ldr	r1, [r7, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	9202      	str	r2, [sp, #8]
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	2300      	movs	r3, #0
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2300      	movs	r3, #0
 8003b00:	460a      	mov	r2, r1
 8003b02:	4921      	ldr	r1, [pc, #132]	; (8003b88 <vTaskStartScheduler+0xb4>)
 8003b04:	4821      	ldr	r0, [pc, #132]	; (8003b8c <vTaskStartScheduler+0xb8>)
 8003b06:	f7ff fe10 	bl	800372a <xTaskCreateStatic>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <vTaskStartScheduler+0xbc>)
 8003b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <vTaskStartScheduler+0xbc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e001      	b.n	8003b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d11b      	bne.n	8003b60 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	613b      	str	r3, [r7, #16]
}
 8003b3a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b3c:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <vTaskStartScheduler+0xc0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	334c      	adds	r3, #76	; 0x4c
 8003b42:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <vTaskStartScheduler+0xc4>)
 8003b44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <vTaskStartScheduler+0xc8>)
 8003b48:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <vTaskStartScheduler+0xcc>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b54:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <vTaskStartScheduler+0xd0>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b5a:	f000 fbb5 	bl	80042c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b5e:	e00e      	b.n	8003b7e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d10a      	bne.n	8003b7e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	60fb      	str	r3, [r7, #12]
}
 8003b7a:	bf00      	nop
 8003b7c:	e7fe      	b.n	8003b7c <vTaskStartScheduler+0xa8>
}
 8003b7e:	bf00      	nop
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	08004ad0 	.word	0x08004ad0
 8003b8c:	08003f3d 	.word	0x08003f3d
 8003b90:	2000050c 	.word	0x2000050c
 8003b94:	200003e8 	.word	0x200003e8
 8003b98:	2000005c 	.word	0x2000005c
 8003b9c:	20000508 	.word	0x20000508
 8003ba0:	200004f4 	.word	0x200004f4
 8003ba4:	200004ec 	.word	0x200004ec

08003ba8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <vTaskSuspendAll+0x18>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	4a03      	ldr	r2, [pc, #12]	; (8003bc0 <vTaskSuspendAll+0x18>)
 8003bb4:	6013      	str	r3, [r2, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000510 	.word	0x20000510

08003bc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <xTaskResumeAll+0x114>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	603b      	str	r3, [r7, #0]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bf0:	f000 fbdc 	bl	80043ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bf4:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <xTaskResumeAll+0x114>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	4a37      	ldr	r2, [pc, #220]	; (8003cd8 <xTaskResumeAll+0x114>)
 8003bfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bfe:	4b36      	ldr	r3, [pc, #216]	; (8003cd8 <xTaskResumeAll+0x114>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d161      	bne.n	8003cca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c06:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <xTaskResumeAll+0x118>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d05d      	beq.n	8003cca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c0e:	e02e      	b.n	8003c6e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c10:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <xTaskResumeAll+0x11c>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3318      	adds	r3, #24
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fd5b 	bl	80036d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fd56 	bl	80036d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	2201      	movs	r2, #1
 8003c32:	409a      	lsls	r2, r3
 8003c34:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <xTaskResumeAll+0x120>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ce4 <xTaskResumeAll+0x120>)
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <xTaskResumeAll+0x124>)
 8003c4c:	441a      	add	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7ff fce4 	bl	8003622 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	4b23      	ldr	r3, [pc, #140]	; (8003cec <xTaskResumeAll+0x128>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c68:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <xTaskResumeAll+0x12c>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <xTaskResumeAll+0x11c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1cc      	bne.n	8003c10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c7c:	f000 fa18 	bl	80040b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c80:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <xTaskResumeAll+0x130>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d010      	beq.n	8003cae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c8c:	f000 f836 	bl	8003cfc <xTaskIncrementTick>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c96:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <xTaskResumeAll+0x12c>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f1      	bne.n	8003c8c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <xTaskResumeAll+0x130>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <xTaskResumeAll+0x12c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cba:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <xTaskResumeAll+0x134>)
 8003cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cca:	f000 fb9f 	bl	800440c <vPortExitCritical>

	return xAlreadyYielded;
 8003cce:	68bb      	ldr	r3, [r7, #8]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000510 	.word	0x20000510
 8003cdc:	200004e8 	.word	0x200004e8
 8003ce0:	200004a8 	.word	0x200004a8
 8003ce4:	200004f0 	.word	0x200004f0
 8003ce8:	200003ec 	.word	0x200003ec
 8003cec:	200003e8 	.word	0x200003e8
 8003cf0:	200004fc 	.word	0x200004fc
 8003cf4:	200004f8 	.word	0x200004f8
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d06:	4b51      	ldr	r3, [pc, #324]	; (8003e4c <xTaskIncrementTick+0x150>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f040 808d 	bne.w	8003e2a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d10:	4b4f      	ldr	r3, [pc, #316]	; (8003e50 <xTaskIncrementTick+0x154>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d18:	4a4d      	ldr	r2, [pc, #308]	; (8003e50 <xTaskIncrementTick+0x154>)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d120      	bne.n	8003d66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <xTaskIncrementTick+0x158>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	603b      	str	r3, [r7, #0]
}
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <xTaskIncrementTick+0x46>
 8003d44:	4b43      	ldr	r3, [pc, #268]	; (8003e54 <xTaskIncrementTick+0x158>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <xTaskIncrementTick+0x15c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a41      	ldr	r2, [pc, #260]	; (8003e54 <xTaskIncrementTick+0x158>)
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4a41      	ldr	r2, [pc, #260]	; (8003e58 <xTaskIncrementTick+0x15c>)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <xTaskIncrementTick+0x160>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	4a3f      	ldr	r2, [pc, #252]	; (8003e5c <xTaskIncrementTick+0x160>)
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	f000 f9a5 	bl	80040b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d66:	4b3e      	ldr	r3, [pc, #248]	; (8003e60 <xTaskIncrementTick+0x164>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d34d      	bcc.n	8003e0c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d70:	4b38      	ldr	r3, [pc, #224]	; (8003e54 <xTaskIncrementTick+0x158>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <xTaskIncrementTick+0x82>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <xTaskIncrementTick+0x84>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d84:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <xTaskIncrementTick+0x164>)
 8003d86:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8a:	601a      	str	r2, [r3, #0]
					break;
 8003d8c:	e03e      	b.n	8003e0c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d8e:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <xTaskIncrementTick+0x158>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d203      	bcs.n	8003dae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003da6:	4a2e      	ldr	r2, [pc, #184]	; (8003e60 <xTaskIncrementTick+0x164>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6013      	str	r3, [r2, #0]
						break;
 8003dac:	e02e      	b.n	8003e0c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fc90 	bl	80036d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d004      	beq.n	8003dca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fc87 	bl	80036d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	2201      	movs	r2, #1
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <xTaskIncrementTick+0x168>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <xTaskIncrementTick+0x168>)
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4a1f      	ldr	r2, [pc, #124]	; (8003e68 <xTaskIncrementTick+0x16c>)
 8003dea:	441a      	add	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f7ff fc15 	bl	8003622 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <xTaskIncrementTick+0x170>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d3b4      	bcc.n	8003d70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e06:	2301      	movs	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e0a:	e7b1      	b.n	8003d70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e0c:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <xTaskIncrementTick+0x170>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	4915      	ldr	r1, [pc, #84]	; (8003e68 <xTaskIncrementTick+0x16c>)
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d907      	bls.n	8003e34 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e004      	b.n	8003e34 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <xTaskIncrementTick+0x174>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <xTaskIncrementTick+0x174>)
 8003e32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <xTaskIncrementTick+0x178>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e40:	697b      	ldr	r3, [r7, #20]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000510 	.word	0x20000510
 8003e50:	200004ec 	.word	0x200004ec
 8003e54:	200004a0 	.word	0x200004a0
 8003e58:	200004a4 	.word	0x200004a4
 8003e5c:	20000500 	.word	0x20000500
 8003e60:	20000508 	.word	0x20000508
 8003e64:	200004f0 	.word	0x200004f0
 8003e68:	200003ec 	.word	0x200003ec
 8003e6c:	200003e8 	.word	0x200003e8
 8003e70:	200004f8 	.word	0x200004f8
 8003e74:	200004fc 	.word	0x200004fc

08003e78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e7e:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <vTaskSwitchContext+0xac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e86:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <vTaskSwitchContext+0xb0>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e8c:	e044      	b.n	8003f18 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <vTaskSwitchContext+0xb0>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e94:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <vTaskSwitchContext+0xb4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	fab3 f383 	clz	r3, r3
 8003ea0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ea2:	7afb      	ldrb	r3, [r7, #11]
 8003ea4:	f1c3 031f 	rsb	r3, r3, #31
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	4921      	ldr	r1, [pc, #132]	; (8003f30 <vTaskSwitchContext+0xb8>)
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	607b      	str	r3, [r7, #4]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <vTaskSwitchContext+0x5a>
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <vTaskSwitchContext+0xb8>)
 8003ee0:	4413      	add	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d104      	bne.n	8003f04 <vTaskSwitchContext+0x8c>
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <vTaskSwitchContext+0xbc>)
 8003f0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <vTaskSwitchContext+0xbc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	334c      	adds	r3, #76	; 0x4c
 8003f14:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <vTaskSwitchContext+0xc0>)
 8003f16:	6013      	str	r3, [r2, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000510 	.word	0x20000510
 8003f28:	200004fc 	.word	0x200004fc
 8003f2c:	200004f0 	.word	0x200004f0
 8003f30:	200003ec 	.word	0x200003ec
 8003f34:	200003e8 	.word	0x200003e8
 8003f38:	2000005c 	.word	0x2000005c

08003f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f44:	f000 f852 	bl	8003fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <prvIdleTask+0x28>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d9f9      	bls.n	8003f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <prvIdleTask+0x2c>)
 8003f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f60:	e7f0      	b.n	8003f44 <prvIdleTask+0x8>
 8003f62:	bf00      	nop
 8003f64:	200003ec 	.word	0x200003ec
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	e00c      	b.n	8003f92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <prvInitialiseTaskLists+0x60>)
 8003f84:	4413      	add	r3, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fb20 	bl	80035cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b06      	cmp	r3, #6
 8003f96:	d9ef      	bls.n	8003f78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f98:	480d      	ldr	r0, [pc, #52]	; (8003fd0 <prvInitialiseTaskLists+0x64>)
 8003f9a:	f7ff fb17 	bl	80035cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f9e:	480d      	ldr	r0, [pc, #52]	; (8003fd4 <prvInitialiseTaskLists+0x68>)
 8003fa0:	f7ff fb14 	bl	80035cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fa4:	480c      	ldr	r0, [pc, #48]	; (8003fd8 <prvInitialiseTaskLists+0x6c>)
 8003fa6:	f7ff fb11 	bl	80035cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003faa:	480c      	ldr	r0, [pc, #48]	; (8003fdc <prvInitialiseTaskLists+0x70>)
 8003fac:	f7ff fb0e 	bl	80035cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fb0:	480b      	ldr	r0, [pc, #44]	; (8003fe0 <prvInitialiseTaskLists+0x74>)
 8003fb2:	f7ff fb0b 	bl	80035cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <prvInitialiseTaskLists+0x78>)
 8003fb8:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <prvInitialiseTaskLists+0x64>)
 8003fba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <prvInitialiseTaskLists+0x7c>)
 8003fbe:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <prvInitialiseTaskLists+0x68>)
 8003fc0:	601a      	str	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200003ec 	.word	0x200003ec
 8003fd0:	20000478 	.word	0x20000478
 8003fd4:	2000048c 	.word	0x2000048c
 8003fd8:	200004a8 	.word	0x200004a8
 8003fdc:	200004bc 	.word	0x200004bc
 8003fe0:	200004d4 	.word	0x200004d4
 8003fe4:	200004a0 	.word	0x200004a0
 8003fe8:	200004a4 	.word	0x200004a4

08003fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ff2:	e019      	b.n	8004028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ff4:	f000 f9da 	bl	80043ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <prvCheckTasksWaitingTermination+0x50>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fb67 	bl	80036d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <prvCheckTasksWaitingTermination+0x54>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3b01      	subs	r3, #1
 8004010:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <prvCheckTasksWaitingTermination+0x54>)
 8004012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <prvCheckTasksWaitingTermination+0x58>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3b01      	subs	r3, #1
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <prvCheckTasksWaitingTermination+0x58>)
 800401c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800401e:	f000 f9f5 	bl	800440c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f810 	bl	8004048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <prvCheckTasksWaitingTermination+0x58>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e1      	bne.n	8003ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200004bc 	.word	0x200004bc
 8004040:	200004e8 	.word	0x200004e8
 8004044:	200004d0 	.word	0x200004d0

08004048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	334c      	adds	r3, #76	; 0x4c
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fc4b 	bl	80048f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004060:	2b00      	cmp	r3, #0
 8004062:	d108      	bne.n	8004076 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fb25 	bl	80046b8 <vPortFree>
				vPortFree( pxTCB );
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fb22 	bl	80046b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004074:	e018      	b.n	80040a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800407c:	2b01      	cmp	r3, #1
 800407e:	d103      	bne.n	8004088 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fb19 	bl	80046b8 <vPortFree>
	}
 8004086:	e00f      	b.n	80040a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800408e:	2b02      	cmp	r3, #2
 8004090:	d00a      	beq.n	80040a8 <prvDeleteTCB+0x60>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	60fb      	str	r3, [r7, #12]
}
 80040a4:	bf00      	nop
 80040a6:	e7fe      	b.n	80040a6 <prvDeleteTCB+0x5e>
	}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <prvResetNextTaskUnblockTime+0x40>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <prvResetNextTaskUnblockTime+0x14>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <prvResetNextTaskUnblockTime+0x16>
 80040c4:	2300      	movs	r3, #0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <prvResetNextTaskUnblockTime+0x44>)
 80040cc:	f04f 32ff 	mov.w	r2, #4294967295
 80040d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040d2:	e008      	b.n	80040e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <prvResetNextTaskUnblockTime+0x40>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <prvResetNextTaskUnblockTime+0x44>)
 80040e4:	6013      	str	r3, [r2, #0]
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	200004a0 	.word	0x200004a0
 80040f4:	20000508 	.word	0x20000508

080040f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004108:	4b28      	ldr	r3, [pc, #160]	; (80041ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3304      	adds	r3, #4
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fae2 	bl	80036d8 <uxListRemove>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	2201      	movs	r2, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43da      	mvns	r2, r3
 8004128:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4013      	ands	r3, r2
 800412e:	4a20      	ldr	r2, [pc, #128]	; (80041b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004130:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d10a      	bne.n	8004150 <prvAddCurrentTaskToDelayedList+0x58>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004140:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	481a      	ldr	r0, [pc, #104]	; (80041b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800414a:	f7ff fa6a 	bl	8003622 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800414e:	e026      	b.n	800419e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004158:	4b14      	ldr	r3, [pc, #80]	; (80041ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	429a      	cmp	r2, r3
 8004166:	d209      	bcs.n	800417c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004168:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3304      	adds	r3, #4
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f7ff fa77 	bl	8003668 <vListInsert>
}
 800417a:	e010      	b.n	800419e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800417c:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3304      	adds	r3, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f7ff fa6d 	bl	8003668 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	d202      	bcs.n	800419e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004198:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6013      	str	r3, [r2, #0]
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200004ec 	.word	0x200004ec
 80041ac:	200003e8 	.word	0x200003e8
 80041b0:	200004f0 	.word	0x200004f0
 80041b4:	200004d4 	.word	0x200004d4
 80041b8:	200004a4 	.word	0x200004a4
 80041bc:	200004a0 	.word	0x200004a0
 80041c0:	20000508 	.word	0x20000508

080041c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3b04      	subs	r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b04      	subs	r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b04      	subs	r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041f4:	4a08      	ldr	r2, [pc, #32]	; (8004218 <pxPortInitialiseStack+0x54>)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b14      	subs	r3, #20
 80041fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3b20      	subs	r3, #32
 800420a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800420c:	68fb      	ldr	r3, [r7, #12]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr
 8004218:	0800421d 	.word	0x0800421d

0800421c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004222:	2300      	movs	r3, #0
 8004224:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <prvTaskExitError+0x54>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d00a      	beq.n	8004246 <prvTaskExitError+0x2a>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <prvTaskExitError+0x28>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60bb      	str	r3, [r7, #8]
}
 8004258:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800425a:	bf00      	nop
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0fc      	beq.n	800425c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	2000000c 	.word	0x2000000c
	...

08004280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <pxCurrentTCBConst2>)
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	6808      	ldr	r0, [r1, #0]
 8004286:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800428a:	f380 8809 	msr	PSP, r0
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8811 	msr	BASEPRI, r0
 800429a:	f04e 0e0d 	orr.w	lr, lr, #13
 800429e:	4770      	bx	lr

080042a0 <pxCurrentTCBConst2>:
 80042a0:	200003e8 	.word	0x200003e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop

080042a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80042a8:	4806      	ldr	r0, [pc, #24]	; (80042c4 <prvPortStartFirstTask+0x1c>)
 80042aa:	6800      	ldr	r0, [r0, #0]
 80042ac:	6800      	ldr	r0, [r0, #0]
 80042ae:	f380 8808 	msr	MSP, r0
 80042b2:	b662      	cpsie	i
 80042b4:	b661      	cpsie	f
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	df00      	svc	0
 80042c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042c2:	bf00      	nop
 80042c4:	e000ed08 	.word	0xe000ed08

080042c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ce:	4b32      	ldr	r3, [pc, #200]	; (8004398 <xPortStartScheduler+0xd0>)
 80042d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b2a      	ldr	r3, [pc, #168]	; (800439c <xPortStartScheduler+0xd4>)
 80042f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042f6:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <xPortStartScheduler+0xd8>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fc:	e009      	b.n	8004312 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80042fe:	4b28      	ldr	r3, [pc, #160]	; (80043a0 <xPortStartScheduler+0xd8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3b01      	subs	r3, #1
 8004304:	4a26      	ldr	r2, [pc, #152]	; (80043a0 <xPortStartScheduler+0xd8>)
 8004306:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d0ef      	beq.n	80042fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <xPortStartScheduler+0xd8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1c3 0307 	rsb	r3, r3, #7
 8004326:	2b04      	cmp	r3, #4
 8004328:	d00a      	beq.n	8004340 <xPortStartScheduler+0x78>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60bb      	str	r3, [r7, #8]
}
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <xPortStartScheduler+0xd8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <xPortStartScheduler+0xd8>)
 8004348:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <xPortStartScheduler+0xd8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004352:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <xPortStartScheduler+0xd8>)
 8004354:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800435e:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <xPortStartScheduler+0xdc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <xPortStartScheduler+0xdc>)
 8004364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004368:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <xPortStartScheduler+0xdc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a0d      	ldr	r2, [pc, #52]	; (80043a4 <xPortStartScheduler+0xdc>)
 8004370:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004374:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004376:	f000 f8b9 	bl	80044ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <xPortStartScheduler+0xe0>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004380:	f7ff ff92 	bl	80042a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004384:	f7ff fd78 	bl	8003e78 <vTaskSwitchContext>
	prvTaskExitError();
 8004388:	f7ff ff48 	bl	800421c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	e000e400 	.word	0xe000e400
 800439c:	20000514 	.word	0x20000514
 80043a0:	20000518 	.word	0x20000518
 80043a4:	e000ed20 	.word	0xe000ed20
 80043a8:	2000000c 	.word	0x2000000c

080043ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	607b      	str	r3, [r7, #4]
}
 80043c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <vPortEnterCritical+0x58>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3301      	adds	r3, #1
 80043cc:	4a0d      	ldr	r2, [pc, #52]	; (8004404 <vPortEnterCritical+0x58>)
 80043ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <vPortEnterCritical+0x58>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d10f      	bne.n	80043f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <vPortEnterCritical+0x5c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	603b      	str	r3, [r7, #0]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <vPortEnterCritical+0x4a>
	}
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	2000000c 	.word	0x2000000c
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <vPortExitCritical+0x4c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <vPortExitCritical+0x24>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	607b      	str	r3, [r7, #4]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <vPortExitCritical+0x4c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3b01      	subs	r3, #1
 8004436:	4a08      	ldr	r2, [pc, #32]	; (8004458 <vPortExitCritical+0x4c>)
 8004438:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <vPortExitCritical+0x4c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d105      	bne.n	800444e <vPortExitCritical+0x42>
 8004442:	2300      	movs	r3, #0
 8004444:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800444c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	2000000c 	.word	0x2000000c
 800445c:	00000000 	.word	0x00000000

08004460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004460:	f3ef 8009 	mrs	r0, PSP
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <pxCurrentTCBConst>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004470:	6010      	str	r0, [r2, #0]
 8004472:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004476:	f04f 0050 	mov.w	r0, #80	; 0x50
 800447a:	f380 8811 	msr	BASEPRI, r0
 800447e:	f7ff fcfb 	bl	8003e78 <vTaskSwitchContext>
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8811 	msr	BASEPRI, r0
 800448a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	6808      	ldr	r0, [r1, #0]
 8004492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004496:	f380 8809 	msr	PSP, r0
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	4770      	bx	lr

080044a0 <pxCurrentTCBConst>:
 80044a0:	200003e8 	.word	0x200003e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	607b      	str	r3, [r7, #4]
}
 80044c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044c2:	f7ff fc1b 	bl	8003cfc <xTaskIncrementTick>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <SysTick_Handler+0x40>)
 80044ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f383 8811 	msr	BASEPRI, r3
}
 80044de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <vPortSetupTimerInterrupt+0x30>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <vPortSetupTimerInterrupt+0x34>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <vPortSetupTimerInterrupt+0x38>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a09      	ldr	r2, [pc, #36]	; (8004528 <vPortSetupTimerInterrupt+0x3c>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	4a08      	ldr	r2, [pc, #32]	; (800452c <vPortSetupTimerInterrupt+0x40>)
 800450a:	3b01      	subs	r3, #1
 800450c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800450e:	4b03      	ldr	r3, [pc, #12]	; (800451c <vPortSetupTimerInterrupt+0x30>)
 8004510:	2207      	movs	r2, #7
 8004512:	601a      	str	r2, [r3, #0]
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr
 800451c:	e000e010 	.word	0xe000e010
 8004520:	e000e018 	.word	0xe000e018
 8004524:	20000000 	.word	0x20000000
 8004528:	10624dd3 	.word	0x10624dd3
 800452c:	e000e014 	.word	0xe000e014

08004530 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800453c:	f7ff fb34 	bl	8003ba8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004540:	4b58      	ldr	r3, [pc, #352]	; (80046a4 <pvPortMalloc+0x174>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004548:	f000 f910 	bl	800476c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800454c:	4b56      	ldr	r3, [pc, #344]	; (80046a8 <pvPortMalloc+0x178>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	f040 808e 	bne.w	8004676 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01d      	beq.n	800459c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004560:	2208      	movs	r2, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4413      	add	r3, r2
 8004566:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	2b00      	cmp	r3, #0
 8004570:	d014      	beq.n	800459c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f023 0307 	bic.w	r3, r3, #7
 8004578:	3308      	adds	r3, #8
 800457a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <pvPortMalloc+0x6c>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	617b      	str	r3, [r7, #20]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d069      	beq.n	8004676 <pvPortMalloc+0x146>
 80045a2:	4b42      	ldr	r3, [pc, #264]	; (80046ac <pvPortMalloc+0x17c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d864      	bhi.n	8004676 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045ac:	4b40      	ldr	r3, [pc, #256]	; (80046b0 <pvPortMalloc+0x180>)
 80045ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045b0:	4b3f      	ldr	r3, [pc, #252]	; (80046b0 <pvPortMalloc+0x180>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045b6:	e004      	b.n	80045c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d903      	bls.n	80045d4 <pvPortMalloc+0xa4>
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f1      	bne.n	80045b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045d4:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <pvPortMalloc+0x174>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045da:	429a      	cmp	r2, r3
 80045dc:	d04b      	beq.n	8004676 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2208      	movs	r2, #8
 80045e4:	4413      	add	r3, r2
 80045e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	2308      	movs	r3, #8
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d91f      	bls.n	8004640 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <pvPortMalloc+0xf8>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	613b      	str	r3, [r7, #16]
}
 8004624:	bf00      	nop
 8004626:	e7fe      	b.n	8004626 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	1ad2      	subs	r2, r2, r3
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800463a:	69b8      	ldr	r0, [r7, #24]
 800463c:	f000 f8f8 	bl	8004830 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004640:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <pvPortMalloc+0x17c>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	4a18      	ldr	r2, [pc, #96]	; (80046ac <pvPortMalloc+0x17c>)
 800464c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800464e:	4b17      	ldr	r3, [pc, #92]	; (80046ac <pvPortMalloc+0x17c>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <pvPortMalloc+0x184>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d203      	bcs.n	8004662 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800465a:	4b14      	ldr	r3, [pc, #80]	; (80046ac <pvPortMalloc+0x17c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <pvPortMalloc+0x184>)
 8004660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <pvPortMalloc+0x178>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	431a      	orrs	r2, r3
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004676:	f7ff faa5 	bl	8003bc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <pvPortMalloc+0x16a>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60fb      	str	r3, [r7, #12]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <pvPortMalloc+0x168>
	return pvReturn;
 800469a:	69fb      	ldr	r3, [r7, #28]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3728      	adds	r7, #40	; 0x28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20001124 	.word	0x20001124
 80046a8:	20001130 	.word	0x20001130
 80046ac:	20001128 	.word	0x20001128
 80046b0:	2000111c 	.word	0x2000111c
 80046b4:	2000112c 	.word	0x2000112c

080046b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d048      	beq.n	800475c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046ca:	2308      	movs	r3, #8
 80046cc:	425b      	negs	r3, r3
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4413      	add	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	4b21      	ldr	r3, [pc, #132]	; (8004764 <vPortFree+0xac>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <vPortFree+0x44>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60fb      	str	r3, [r7, #12]
}
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <vPortFree+0x62>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	60bb      	str	r3, [r7, #8]
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <vPortFree+0xac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d019      	beq.n	800475c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d115      	bne.n	800475c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <vPortFree+0xac>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	43db      	mvns	r3, r3
 800473a:	401a      	ands	r2, r3
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004740:	f7ff fa32 	bl	8003ba8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	4b07      	ldr	r3, [pc, #28]	; (8004768 <vPortFree+0xb0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4413      	add	r3, r2
 800474e:	4a06      	ldr	r2, [pc, #24]	; (8004768 <vPortFree+0xb0>)
 8004750:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004752:	6938      	ldr	r0, [r7, #16]
 8004754:	f000 f86c 	bl	8004830 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004758:	f7ff fa34 	bl	8003bc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800475c:	bf00      	nop
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20001130 	.word	0x20001130
 8004768:	20001128 	.word	0x20001128

0800476c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004772:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004776:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004778:	4b27      	ldr	r3, [pc, #156]	; (8004818 <prvHeapInit+0xac>)
 800477a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3307      	adds	r3, #7
 800478a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0307 	bic.w	r3, r3, #7
 8004792:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <prvHeapInit+0xac>)
 800479c:	4413      	add	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047a4:	4a1d      	ldr	r2, [pc, #116]	; (800481c <prvHeapInit+0xb0>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047aa:	4b1c      	ldr	r3, [pc, #112]	; (800481c <prvHeapInit+0xb0>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4413      	add	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047b8:	2208      	movs	r2, #8
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0307 	bic.w	r3, r3, #7
 80047c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a15      	ldr	r2, [pc, #84]	; (8004820 <prvHeapInit+0xb4>)
 80047cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <prvHeapInit+0xb4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2200      	movs	r2, #0
 80047d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047d6:	4b12      	ldr	r3, [pc, #72]	; (8004820 <prvHeapInit+0xb4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	1ad2      	subs	r2, r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <prvHeapInit+0xb4>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <prvHeapInit+0xb8>)
 80047fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a09      	ldr	r2, [pc, #36]	; (8004828 <prvHeapInit+0xbc>)
 8004802:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <prvHeapInit+0xc0>)
 8004806:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800480a:	601a      	str	r2, [r3, #0]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	2000051c 	.word	0x2000051c
 800481c:	2000111c 	.word	0x2000111c
 8004820:	20001124 	.word	0x20001124
 8004824:	2000112c 	.word	0x2000112c
 8004828:	20001128 	.word	0x20001128
 800482c:	20001130 	.word	0x20001130

08004830 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004838:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <prvInsertBlockIntoFreeList+0xa8>)
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e002      	b.n	8004844 <prvInsertBlockIntoFreeList+0x14>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d8f7      	bhi.n	800483e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4413      	add	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d108      	bne.n	8004872 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	441a      	add	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	441a      	add	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d118      	bne.n	80048b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b14      	ldr	r3, [pc, #80]	; (80048dc <prvInsertBlockIntoFreeList+0xac>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d00d      	beq.n	80048ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	441a      	add	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e008      	b.n	80048c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <prvInsertBlockIntoFreeList+0xac>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e003      	b.n	80048c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d002      	beq.n	80048ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	2000111c 	.word	0x2000111c
 80048dc:	20001124 	.word	0x20001124

080048e0 <memset>:
 80048e0:	4603      	mov	r3, r0
 80048e2:	4402      	add	r2, r0
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d100      	bne.n	80048ea <memset+0xa>
 80048e8:	4770      	bx	lr
 80048ea:	f803 1b01 	strb.w	r1, [r3], #1
 80048ee:	e7f9      	b.n	80048e4 <memset+0x4>

080048f0 <_reclaim_reent>:
 80048f0:	4b29      	ldr	r3, [pc, #164]	; (8004998 <_reclaim_reent+0xa8>)
 80048f2:	b570      	push	{r4, r5, r6, lr}
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4604      	mov	r4, r0
 80048f8:	4283      	cmp	r3, r0
 80048fa:	d04b      	beq.n	8004994 <_reclaim_reent+0xa4>
 80048fc:	69c3      	ldr	r3, [r0, #28]
 80048fe:	b143      	cbz	r3, 8004912 <_reclaim_reent+0x22>
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d144      	bne.n	8004990 <_reclaim_reent+0xa0>
 8004906:	69e3      	ldr	r3, [r4, #28]
 8004908:	6819      	ldr	r1, [r3, #0]
 800490a:	b111      	cbz	r1, 8004912 <_reclaim_reent+0x22>
 800490c:	4620      	mov	r0, r4
 800490e:	f000 f86b 	bl	80049e8 <_free_r>
 8004912:	6961      	ldr	r1, [r4, #20]
 8004914:	b111      	cbz	r1, 800491c <_reclaim_reent+0x2c>
 8004916:	4620      	mov	r0, r4
 8004918:	f000 f866 	bl	80049e8 <_free_r>
 800491c:	69e1      	ldr	r1, [r4, #28]
 800491e:	b111      	cbz	r1, 8004926 <_reclaim_reent+0x36>
 8004920:	4620      	mov	r0, r4
 8004922:	f000 f861 	bl	80049e8 <_free_r>
 8004926:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004928:	b111      	cbz	r1, 8004930 <_reclaim_reent+0x40>
 800492a:	4620      	mov	r0, r4
 800492c:	f000 f85c 	bl	80049e8 <_free_r>
 8004930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004932:	b111      	cbz	r1, 800493a <_reclaim_reent+0x4a>
 8004934:	4620      	mov	r0, r4
 8004936:	f000 f857 	bl	80049e8 <_free_r>
 800493a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800493c:	b111      	cbz	r1, 8004944 <_reclaim_reent+0x54>
 800493e:	4620      	mov	r0, r4
 8004940:	f000 f852 	bl	80049e8 <_free_r>
 8004944:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004946:	b111      	cbz	r1, 800494e <_reclaim_reent+0x5e>
 8004948:	4620      	mov	r0, r4
 800494a:	f000 f84d 	bl	80049e8 <_free_r>
 800494e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004950:	b111      	cbz	r1, 8004958 <_reclaim_reent+0x68>
 8004952:	4620      	mov	r0, r4
 8004954:	f000 f848 	bl	80049e8 <_free_r>
 8004958:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800495a:	b111      	cbz	r1, 8004962 <_reclaim_reent+0x72>
 800495c:	4620      	mov	r0, r4
 800495e:	f000 f843 	bl	80049e8 <_free_r>
 8004962:	6a23      	ldr	r3, [r4, #32]
 8004964:	b1b3      	cbz	r3, 8004994 <_reclaim_reent+0xa4>
 8004966:	4620      	mov	r0, r4
 8004968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800496c:	4718      	bx	r3
 800496e:	5949      	ldr	r1, [r1, r5]
 8004970:	b941      	cbnz	r1, 8004984 <_reclaim_reent+0x94>
 8004972:	3504      	adds	r5, #4
 8004974:	69e3      	ldr	r3, [r4, #28]
 8004976:	2d80      	cmp	r5, #128	; 0x80
 8004978:	68d9      	ldr	r1, [r3, #12]
 800497a:	d1f8      	bne.n	800496e <_reclaim_reent+0x7e>
 800497c:	4620      	mov	r0, r4
 800497e:	f000 f833 	bl	80049e8 <_free_r>
 8004982:	e7c0      	b.n	8004906 <_reclaim_reent+0x16>
 8004984:	680e      	ldr	r6, [r1, #0]
 8004986:	4620      	mov	r0, r4
 8004988:	f000 f82e 	bl	80049e8 <_free_r>
 800498c:	4631      	mov	r1, r6
 800498e:	e7ef      	b.n	8004970 <_reclaim_reent+0x80>
 8004990:	2500      	movs	r5, #0
 8004992:	e7ef      	b.n	8004974 <_reclaim_reent+0x84>
 8004994:	bd70      	pop	{r4, r5, r6, pc}
 8004996:	bf00      	nop
 8004998:	2000005c 	.word	0x2000005c

0800499c <__libc_init_array>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	2600      	movs	r6, #0
 80049a0:	4d0c      	ldr	r5, [pc, #48]	; (80049d4 <__libc_init_array+0x38>)
 80049a2:	4c0d      	ldr	r4, [pc, #52]	; (80049d8 <__libc_init_array+0x3c>)
 80049a4:	1b64      	subs	r4, r4, r5
 80049a6:	10a4      	asrs	r4, r4, #2
 80049a8:	42a6      	cmp	r6, r4
 80049aa:	d109      	bne.n	80049c0 <__libc_init_array+0x24>
 80049ac:	f000 f870 	bl	8004a90 <_init>
 80049b0:	2600      	movs	r6, #0
 80049b2:	4d0a      	ldr	r5, [pc, #40]	; (80049dc <__libc_init_array+0x40>)
 80049b4:	4c0a      	ldr	r4, [pc, #40]	; (80049e0 <__libc_init_array+0x44>)
 80049b6:	1b64      	subs	r4, r4, r5
 80049b8:	10a4      	asrs	r4, r4, #2
 80049ba:	42a6      	cmp	r6, r4
 80049bc:	d105      	bne.n	80049ca <__libc_init_array+0x2e>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c4:	4798      	blx	r3
 80049c6:	3601      	adds	r6, #1
 80049c8:	e7ee      	b.n	80049a8 <__libc_init_array+0xc>
 80049ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ce:	4798      	blx	r3
 80049d0:	3601      	adds	r6, #1
 80049d2:	e7f2      	b.n	80049ba <__libc_init_array+0x1e>
 80049d4:	08004b04 	.word	0x08004b04
 80049d8:	08004b04 	.word	0x08004b04
 80049dc:	08004b04 	.word	0x08004b04
 80049e0:	08004b08 	.word	0x08004b08

080049e4 <__retarget_lock_acquire_recursive>:
 80049e4:	4770      	bx	lr

080049e6 <__retarget_lock_release_recursive>:
 80049e6:	4770      	bx	lr

080049e8 <_free_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4605      	mov	r5, r0
 80049ec:	2900      	cmp	r1, #0
 80049ee:	d040      	beq.n	8004a72 <_free_r+0x8a>
 80049f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f4:	1f0c      	subs	r4, r1, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	bfb8      	it	lt
 80049fa:	18e4      	addlt	r4, r4, r3
 80049fc:	f000 f83c 	bl	8004a78 <__malloc_lock>
 8004a00:	4a1c      	ldr	r2, [pc, #112]	; (8004a74 <_free_r+0x8c>)
 8004a02:	6813      	ldr	r3, [r2, #0]
 8004a04:	b933      	cbnz	r3, 8004a14 <_free_r+0x2c>
 8004a06:	6063      	str	r3, [r4, #4]
 8004a08:	6014      	str	r4, [r2, #0]
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a10:	f000 b838 	b.w	8004a84 <__malloc_unlock>
 8004a14:	42a3      	cmp	r3, r4
 8004a16:	d908      	bls.n	8004a2a <_free_r+0x42>
 8004a18:	6820      	ldr	r0, [r4, #0]
 8004a1a:	1821      	adds	r1, r4, r0
 8004a1c:	428b      	cmp	r3, r1
 8004a1e:	bf01      	itttt	eq
 8004a20:	6819      	ldreq	r1, [r3, #0]
 8004a22:	685b      	ldreq	r3, [r3, #4]
 8004a24:	1809      	addeq	r1, r1, r0
 8004a26:	6021      	streq	r1, [r4, #0]
 8004a28:	e7ed      	b.n	8004a06 <_free_r+0x1e>
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b10b      	cbz	r3, 8004a34 <_free_r+0x4c>
 8004a30:	42a3      	cmp	r3, r4
 8004a32:	d9fa      	bls.n	8004a2a <_free_r+0x42>
 8004a34:	6811      	ldr	r1, [r2, #0]
 8004a36:	1850      	adds	r0, r2, r1
 8004a38:	42a0      	cmp	r0, r4
 8004a3a:	d10b      	bne.n	8004a54 <_free_r+0x6c>
 8004a3c:	6820      	ldr	r0, [r4, #0]
 8004a3e:	4401      	add	r1, r0
 8004a40:	1850      	adds	r0, r2, r1
 8004a42:	4283      	cmp	r3, r0
 8004a44:	6011      	str	r1, [r2, #0]
 8004a46:	d1e0      	bne.n	8004a0a <_free_r+0x22>
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4408      	add	r0, r1
 8004a4e:	6010      	str	r0, [r2, #0]
 8004a50:	6053      	str	r3, [r2, #4]
 8004a52:	e7da      	b.n	8004a0a <_free_r+0x22>
 8004a54:	d902      	bls.n	8004a5c <_free_r+0x74>
 8004a56:	230c      	movs	r3, #12
 8004a58:	602b      	str	r3, [r5, #0]
 8004a5a:	e7d6      	b.n	8004a0a <_free_r+0x22>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	1821      	adds	r1, r4, r0
 8004a60:	428b      	cmp	r3, r1
 8004a62:	bf01      	itttt	eq
 8004a64:	6819      	ldreq	r1, [r3, #0]
 8004a66:	685b      	ldreq	r3, [r3, #4]
 8004a68:	1809      	addeq	r1, r1, r0
 8004a6a:	6021      	streq	r1, [r4, #0]
 8004a6c:	6063      	str	r3, [r4, #4]
 8004a6e:	6054      	str	r4, [r2, #4]
 8004a70:	e7cb      	b.n	8004a0a <_free_r+0x22>
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20001270 	.word	0x20001270

08004a78 <__malloc_lock>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__malloc_lock+0x8>)
 8004a7a:	f7ff bfb3 	b.w	80049e4 <__retarget_lock_acquire_recursive>
 8004a7e:	bf00      	nop
 8004a80:	2000126c 	.word	0x2000126c

08004a84 <__malloc_unlock>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__malloc_unlock+0x8>)
 8004a86:	f7ff bfae 	b.w	80049e6 <__retarget_lock_release_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	2000126c 	.word	0x2000126c

08004a90 <_init>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr

08004a9c <_fini>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr
