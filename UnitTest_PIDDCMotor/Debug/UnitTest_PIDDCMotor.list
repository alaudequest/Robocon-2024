
UnitTest_PIDDCMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f80  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e4  080040e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080040e4  080040e4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040e4  080040e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080040ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f8  20000010  080040fc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001208  080040fc  00021208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcad  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027bc  00000000  00000000  0002dd29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  000304e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b32  00000000  00000000  00031388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019031  00000000  00000000  00031eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010803  00000000  00000000  0004aeeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fc63  00000000  00000000  0005b6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b84  00000000  00000000  000eb354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  000eeed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004078 	.word	0x08004078

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004078 	.word	0x08004078

08000150 <__aeabi_d2iz>:
 8000150:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000154:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000158:	d215      	bcs.n	8000186 <__aeabi_d2iz+0x36>
 800015a:	d511      	bpl.n	8000180 <__aeabi_d2iz+0x30>
 800015c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000160:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000164:	d912      	bls.n	800018c <__aeabi_d2iz+0x3c>
 8000166:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800016a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800016e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000172:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000176:	fa23 f002 	lsr.w	r0, r3, r2
 800017a:	bf18      	it	ne
 800017c:	4240      	negne	r0, r0
 800017e:	4770      	bx	lr
 8000180:	f04f 0000 	mov.w	r0, #0
 8000184:	4770      	bx	lr
 8000186:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800018a:	d105      	bne.n	8000198 <__aeabi_d2iz+0x48>
 800018c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000190:	bf08      	it	eq
 8000192:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000196:	4770      	bx	lr
 8000198:	f04f 0000 	mov.w	r0, #0
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop

080001a0 <DC_Drive_BTS>:
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
	}
}

void DC_Drive_BTS(MotorDrive *motor,TIM_HandleTypeDef *htim1,uint16_t Mode,int Input,unsigned int Channel1,unsigned int Channel2)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	60f8      	str	r0, [r7, #12]
 80001a8:	60b9      	str	r1, [r7, #8]
 80001aa:	603b      	str	r3, [r7, #0]
 80001ac:	4613      	mov	r3, r2
 80001ae:	80fb      	strh	r3, [r7, #6]
	motor->htim1 = htim1;
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	68ba      	ldr	r2, [r7, #8]
 80001b4:	601a      	str	r2, [r3, #0]
	motor->Mode = Mode;
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	88fa      	ldrh	r2, [r7, #6]
 80001ba:	821a      	strh	r2, [r3, #16]
	motor->Pwm = abs(Input);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	bfb8      	it	lt
 80001c2:	425b      	neglt	r3, r3
 80001c4:	b29a      	uxth	r2, r3
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	69ba      	ldr	r2, [r7, #24]
 80001ce:	615a      	str	r2, [r3, #20]
	motor->Channel2 = Channel2;
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	69fa      	ldr	r2, [r7, #28]
 80001d4:	619a      	str	r2, [r3, #24]

	if(motor->Mode==0){
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	8a1b      	ldrh	r3, [r3, #16]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	f040 80e9 	bne.w	80003b2 <DC_Drive_BTS+0x212>
		if(Input < 0)
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	da4d      	bge.n	8000282 <DC_Drive_BTS+0xe2>
		{
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d106      	bne.n	80001fc <DC_Drive_BTS+0x5c>
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	89da      	ldrh	r2, [r3, #14]
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	635a      	str	r2, [r3, #52]	; 0x34
 80001fa:	e01e      	b.n	800023a <DC_Drive_BTS+0x9a>
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	695b      	ldr	r3, [r3, #20]
 8000200:	2b04      	cmp	r3, #4
 8000202:	d107      	bne.n	8000214 <DC_Drive_BTS+0x74>
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	89d9      	ldrh	r1, [r3, #14]
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	460b      	mov	r3, r1
 8000210:	6393      	str	r3, [r2, #56]	; 0x38
 8000212:	e012      	b.n	800023a <DC_Drive_BTS+0x9a>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	2b08      	cmp	r3, #8
 800021a:	d107      	bne.n	800022c <DC_Drive_BTS+0x8c>
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	89d9      	ldrh	r1, [r3, #14]
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	460b      	mov	r3, r1
 8000228:	63d3      	str	r3, [r2, #60]	; 0x3c
 800022a:	e006      	b.n	800023a <DC_Drive_BTS+0x9a>
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	89d9      	ldrh	r1, [r3, #14]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	460b      	mov	r3, r1
 8000238:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d105      	bne.n	800024e <DC_Drive_BTS+0xae>
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2200      	movs	r2, #0
 800024a:	635a      	str	r2, [r3, #52]	; 0x34
		{
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
		}
	}
}
 800024c:	e1d6      	b.n	80005fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	2b04      	cmp	r3, #4
 8000254:	d105      	bne.n	8000262 <DC_Drive_BTS+0xc2>
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	2300      	movs	r3, #0
 800025e:	6393      	str	r3, [r2, #56]	; 0x38
 8000260:	e1cc      	b.n	80005fc <DC_Drive_BTS+0x45c>
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d105      	bne.n	8000276 <DC_Drive_BTS+0xd6>
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	2300      	movs	r3, #0
 8000272:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000274:	e1c2      	b.n	80005fc <DC_Drive_BTS+0x45c>
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	2300      	movs	r3, #0
 800027e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000280:	e1bc      	b.n	80005fc <DC_Drive_BTS+0x45c>
		else if(Input > 0)
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	dd4d      	ble.n	8000324 <DC_Drive_BTS+0x184>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,0);
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d105      	bne.n	800029c <DC_Drive_BTS+0xfc>
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2200      	movs	r2, #0
 8000298:	635a      	str	r2, [r3, #52]	; 0x34
 800029a:	e018      	b.n	80002ce <DC_Drive_BTS+0x12e>
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	2b04      	cmp	r3, #4
 80002a2:	d105      	bne.n	80002b0 <DC_Drive_BTS+0x110>
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	2300      	movs	r3, #0
 80002ac:	6393      	str	r3, [r2, #56]	; 0x38
 80002ae:	e00e      	b.n	80002ce <DC_Drive_BTS+0x12e>
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	2b08      	cmp	r3, #8
 80002b6:	d105      	bne.n	80002c4 <DC_Drive_BTS+0x124>
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	2300      	movs	r3, #0
 80002c0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80002c2:	e004      	b.n	80002ce <DC_Drive_BTS+0x12e>
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	2300      	movs	r3, #0
 80002cc:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Pwm);
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d106      	bne.n	80002e4 <DC_Drive_BTS+0x144>
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	89da      	ldrh	r2, [r3, #14]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002e2:	e18b      	b.n	80005fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Pwm);
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	2b04      	cmp	r3, #4
 80002ea:	d107      	bne.n	80002fc <DC_Drive_BTS+0x15c>
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	89d9      	ldrh	r1, [r3, #14]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	460b      	mov	r3, r1
 80002f8:	6393      	str	r3, [r2, #56]	; 0x38
 80002fa:	e17f      	b.n	80005fc <DC_Drive_BTS+0x45c>
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	2b08      	cmp	r3, #8
 8000302:	d107      	bne.n	8000314 <DC_Drive_BTS+0x174>
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	89d9      	ldrh	r1, [r3, #14]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	460b      	mov	r3, r1
 8000310:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000312:	e173      	b.n	80005fc <DC_Drive_BTS+0x45c>
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	89d9      	ldrh	r1, [r3, #14]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	460b      	mov	r3, r1
 8000320:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000322:	e16b      	b.n	80005fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,0);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d105      	bne.n	8000338 <DC_Drive_BTS+0x198>
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2200      	movs	r2, #0
 8000334:	635a      	str	r2, [r3, #52]	; 0x34
 8000336:	e018      	b.n	800036a <DC_Drive_BTS+0x1ca>
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	2b04      	cmp	r3, #4
 800033e:	d105      	bne.n	800034c <DC_Drive_BTS+0x1ac>
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	2300      	movs	r3, #0
 8000348:	6393      	str	r3, [r2, #56]	; 0x38
 800034a:	e00e      	b.n	800036a <DC_Drive_BTS+0x1ca>
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	2b08      	cmp	r3, #8
 8000352:	d105      	bne.n	8000360 <DC_Drive_BTS+0x1c0>
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	2300      	movs	r3, #0
 800035c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800035e:	e004      	b.n	800036a <DC_Drive_BTS+0x1ca>
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	2300      	movs	r3, #0
 8000368:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d105      	bne.n	800037e <DC_Drive_BTS+0x1de>
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2200      	movs	r2, #0
 800037a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800037c:	e13e      	b.n	80005fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	2b04      	cmp	r3, #4
 8000384:	d105      	bne.n	8000392 <DC_Drive_BTS+0x1f2>
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	2300      	movs	r3, #0
 800038e:	6393      	str	r3, [r2, #56]	; 0x38
 8000390:	e134      	b.n	80005fc <DC_Drive_BTS+0x45c>
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	2b08      	cmp	r3, #8
 8000398:	d105      	bne.n	80003a6 <DC_Drive_BTS+0x206>
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	2300      	movs	r3, #0
 80003a2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80003a4:	e12a      	b.n	80005fc <DC_Drive_BTS+0x45c>
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	2300      	movs	r3, #0
 80003ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003b0:	e124      	b.n	80005fc <DC_Drive_BTS+0x45c>
		if(Input < 0)
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	da64      	bge.n	8000482 <DC_Drive_BTS+0x2e2>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode-motor->Pwm);
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d10a      	bne.n	80003d6 <DC_Drive_BTS+0x236>
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	8a1b      	ldrh	r3, [r3, #16]
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	89db      	ldrh	r3, [r3, #14]
 80003ca:	1ad2      	subs	r2, r2, r3
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	635a      	str	r2, [r3, #52]	; 0x34
 80003d4:	e02a      	b.n	800042c <DC_Drive_BTS+0x28c>
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	2b04      	cmp	r3, #4
 80003dc:	d10b      	bne.n	80003f6 <DC_Drive_BTS+0x256>
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	8a1b      	ldrh	r3, [r3, #16]
 80003e2:	461a      	mov	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	89db      	ldrh	r3, [r3, #14]
 80003e8:	1ad1      	subs	r1, r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	460b      	mov	r3, r1
 80003f2:	6393      	str	r3, [r2, #56]	; 0x38
 80003f4:	e01a      	b.n	800042c <DC_Drive_BTS+0x28c>
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	2b08      	cmp	r3, #8
 80003fc:	d10b      	bne.n	8000416 <DC_Drive_BTS+0x276>
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	8a1b      	ldrh	r3, [r3, #16]
 8000402:	461a      	mov	r2, r3
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	89db      	ldrh	r3, [r3, #14]
 8000408:	1ad1      	subs	r1, r2, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	460b      	mov	r3, r1
 8000412:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000414:	e00a      	b.n	800042c <DC_Drive_BTS+0x28c>
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	8a1b      	ldrh	r3, [r3, #16]
 800041a:	461a      	mov	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	89db      	ldrh	r3, [r3, #14]
 8000420:	1ad1      	subs	r1, r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	460b      	mov	r3, r1
 800042a:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d106      	bne.n	8000442 <DC_Drive_BTS+0x2a2>
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	8a1a      	ldrh	r2, [r3, #16]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000440:	e0dc      	b.n	80005fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	2b04      	cmp	r3, #4
 8000448:	d107      	bne.n	800045a <DC_Drive_BTS+0x2ba>
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	8a19      	ldrh	r1, [r3, #16]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	460b      	mov	r3, r1
 8000456:	6393      	str	r3, [r2, #56]	; 0x38
 8000458:	e0d0      	b.n	80005fc <DC_Drive_BTS+0x45c>
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	2b08      	cmp	r3, #8
 8000460:	d107      	bne.n	8000472 <DC_Drive_BTS+0x2d2>
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	8a19      	ldrh	r1, [r3, #16]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	460b      	mov	r3, r1
 800046e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000470:	e0c4      	b.n	80005fc <DC_Drive_BTS+0x45c>
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	8a19      	ldrh	r1, [r3, #16]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	460b      	mov	r3, r1
 800047e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000480:	e0bc      	b.n	80005fc <DC_Drive_BTS+0x45c>
		else if(Input > 0)
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	dd64      	ble.n	8000552 <DC_Drive_BTS+0x3b2>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d106      	bne.n	800049e <DC_Drive_BTS+0x2fe>
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	8a1a      	ldrh	r2, [r3, #16]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	635a      	str	r2, [r3, #52]	; 0x34
 800049c:	e01e      	b.n	80004dc <DC_Drive_BTS+0x33c>
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	2b04      	cmp	r3, #4
 80004a4:	d107      	bne.n	80004b6 <DC_Drive_BTS+0x316>
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	8a19      	ldrh	r1, [r3, #16]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	460b      	mov	r3, r1
 80004b2:	6393      	str	r3, [r2, #56]	; 0x38
 80004b4:	e012      	b.n	80004dc <DC_Drive_BTS+0x33c>
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	2b08      	cmp	r3, #8
 80004bc:	d107      	bne.n	80004ce <DC_Drive_BTS+0x32e>
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	8a19      	ldrh	r1, [r3, #16]
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	460b      	mov	r3, r1
 80004ca:	63d3      	str	r3, [r2, #60]	; 0x3c
 80004cc:	e006      	b.n	80004dc <DC_Drive_BTS+0x33c>
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	8a19      	ldrh	r1, [r3, #16]
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	460b      	mov	r3, r1
 80004da:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode-motor->Pwm);
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d10a      	bne.n	80004fa <DC_Drive_BTS+0x35a>
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	8a1b      	ldrh	r3, [r3, #16]
 80004e8:	461a      	mov	r2, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	89db      	ldrh	r3, [r3, #14]
 80004ee:	1ad2      	subs	r2, r2, r3
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004f8:	e080      	b.n	80005fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode-motor->Pwm);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	2b04      	cmp	r3, #4
 8000500:	d10b      	bne.n	800051a <DC_Drive_BTS+0x37a>
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	8a1b      	ldrh	r3, [r3, #16]
 8000506:	461a      	mov	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	89db      	ldrh	r3, [r3, #14]
 800050c:	1ad1      	subs	r1, r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	460b      	mov	r3, r1
 8000516:	6393      	str	r3, [r2, #56]	; 0x38
 8000518:	e070      	b.n	80005fc <DC_Drive_BTS+0x45c>
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	2b08      	cmp	r3, #8
 8000520:	d10b      	bne.n	800053a <DC_Drive_BTS+0x39a>
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	8a1b      	ldrh	r3, [r3, #16]
 8000526:	461a      	mov	r2, r3
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	89db      	ldrh	r3, [r3, #14]
 800052c:	1ad1      	subs	r1, r2, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	460b      	mov	r3, r1
 8000536:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000538:	e060      	b.n	80005fc <DC_Drive_BTS+0x45c>
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	8a1b      	ldrh	r3, [r3, #16]
 800053e:	461a      	mov	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	89db      	ldrh	r3, [r3, #14]
 8000544:	1ad1      	subs	r1, r2, r3
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	460b      	mov	r3, r1
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000550:	e054      	b.n	80005fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d106      	bne.n	8000568 <DC_Drive_BTS+0x3c8>
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	8a1a      	ldrh	r2, [r3, #16]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
 8000566:	e01e      	b.n	80005a6 <DC_Drive_BTS+0x406>
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	2b04      	cmp	r3, #4
 800056e:	d107      	bne.n	8000580 <DC_Drive_BTS+0x3e0>
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	8a19      	ldrh	r1, [r3, #16]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	460b      	mov	r3, r1
 800057c:	6393      	str	r3, [r2, #56]	; 0x38
 800057e:	e012      	b.n	80005a6 <DC_Drive_BTS+0x406>
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	2b08      	cmp	r3, #8
 8000586:	d107      	bne.n	8000598 <DC_Drive_BTS+0x3f8>
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	8a19      	ldrh	r1, [r3, #16]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	460b      	mov	r3, r1
 8000594:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000596:	e006      	b.n	80005a6 <DC_Drive_BTS+0x406>
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	8a19      	ldrh	r1, [r3, #16]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	460b      	mov	r3, r1
 80005a4:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d106      	bne.n	80005bc <DC_Drive_BTS+0x41c>
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	8a1a      	ldrh	r2, [r3, #16]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005ba:	e01f      	b.n	80005fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d107      	bne.n	80005d4 <DC_Drive_BTS+0x434>
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	8a19      	ldrh	r1, [r3, #16]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	460b      	mov	r3, r1
 80005d0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80005d2:	e013      	b.n	80005fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	2b08      	cmp	r3, #8
 80005da:	d107      	bne.n	80005ec <DC_Drive_BTS+0x44c>
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	8a19      	ldrh	r1, [r3, #16]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	460b      	mov	r3, r1
 80005e8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80005ea:	e007      	b.n	80005fc <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	8a19      	ldrh	r1, [r3, #16]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	460b      	mov	r3, r1
 80005f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005fa:	e7ff      	b.n	80005fc <DC_Drive_BTS+0x45c>
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000606:	b480      	push	{r7}
 8000608:	b085      	sub	sp, #20
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
	enc->htim = htim;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 800061e:	68f9      	ldr	r1, [r7, #12]
 8000620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000624:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <Pid_SetParam>:
#include <PID.h>
#include "stdlib.h"

//-----------------------------------------------Begin: Setting Parameter for PID------------------------------------------//
void Pid_SetParam(PID_Param *pid,double kP,double kI,double kD,double alpha,double deltaT,double uI_AboveLimit,double uI_BelowLimit,double u_AboveLimit,double u_BelowLimit)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	e9c7 2300 	strd	r2, r3, [r7]
//----------------------Term-----------------------//
	pid->kP = kP;
 800063e:	68f9      	ldr	r1, [r7, #12]
 8000640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000644:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pid->kI = kI;
 8000648:	68f9      	ldr	r1, [r7, #12]
 800064a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800064e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	pid->kD = kD;
 8000652:	68f9      	ldr	r1, [r7, #12]
 8000654:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000658:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pid->alpha = alpha;
 800065c:	68f9      	ldr	r1, [r7, #12]
 800065e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000662:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
//----------------------Sample Time----------------//
	pid->deltaT = deltaT;
 8000666:	68f9      	ldr	r1, [r7, #12]
 8000668:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800066c:	e9c1 2308 	strd	r2, r3, [r1, #32]
//----------------------Limit----------------------//
	pid->uI_AboveLimit = uI_AboveLimit;
 8000670:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000674:	f7ff fd6c 	bl	8000150 <__aeabi_d2iz>
 8000678:	4602      	mov	r2, r0
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	651a      	str	r2, [r3, #80]	; 0x50
	pid->uI_BelowLimit = uI_BelowLimit;
 800067e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000682:	f7ff fd65 	bl	8000150 <__aeabi_d2iz>
 8000686:	4602      	mov	r2, r0
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	655a      	str	r2, [r3, #84]	; 0x54
	pid->u_AboveLimit = u_AboveLimit;
 800068c:	68f9      	ldr	r1, [r7, #12]
 800068e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000692:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	pid->u_BelowLimit = u_BelowLimit;
 8000696:	68f9      	ldr	r1, [r7, #12]
 8000698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800069c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <vApplicationGetIdleTaskMemory+0x28>)
 80006b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80006be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	2000002c 	.word	0x2000002c
 80006d4:	20000080 	.word	0x20000080

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b098      	sub	sp, #96	; 0x60
 80006dc:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fb53 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f8b1 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f9c9 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 80006ea:	f000 f8f3 	bl	80008d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006ee:	f000 f971 	bl	80009d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80006f2:	2108      	movs	r1, #8
 80006f4:	484c      	ldr	r0, [pc, #304]	; (8000828 <main+0x150>)
 80006f6:	f001 fad9 	bl	8001cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80006fa:	210c      	movs	r1, #12
 80006fc:	484a      	ldr	r0, [pc, #296]	; (8000828 <main+0x150>)
 80006fe:	f001 fad5 	bl	8001cac <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000702:	213c      	movs	r1, #60	; 0x3c
 8000704:	4849      	ldr	r0, [pc, #292]	; (800082c <main+0x154>)
 8000706:	f001 fc15 	bl	8001f34 <HAL_TIM_Encoder_Start_IT>

  EncoderSetting(&ENC_DC, &htim3, DCEncoderPerRound, DCDeltaT);
 800070a:	a345      	add	r3, pc, #276	; (adr r3, 8000820 <main+0x148>)
 800070c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000710:	e9cd 2300 	strd	r2, r3, [sp]
 8000714:	4a46      	ldr	r2, [pc, #280]	; (8000830 <main+0x158>)
 8000716:	4945      	ldr	r1, [pc, #276]	; (800082c <main+0x154>)
 8000718:	4846      	ldr	r0, [pc, #280]	; (8000834 <main+0x15c>)
 800071a:	f7ff ff74 	bl	8000606 <EncoderSetting>
  Pid_SetParam(&PID_DC_SPEED, DCProportion, DCIntegral, DCDerivatite, DCAlpha, DCDeltaT, DCIntegralAboveLimit, DCIntegralBelowLimit, DCSumAboveLimit, DCSumBelowLimit);
 800071e:	f04f 0200 	mov.w	r2, #0
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800072a:	f04f 0200 	mov.w	r2, #0
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000736:	f04f 0200 	mov.w	r2, #0
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000742:	f04f 0200 	mov.w	r2, #0
 8000746:	f04f 0300 	mov.w	r3, #0
 800074a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800074e:	a334      	add	r3, pc, #208	; (adr r3, 8000820 <main+0x148>)
 8000750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000754:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000758:	f04f 0200 	mov.w	r2, #0
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000764:	f04f 0200 	mov.w	r2, #0
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000770:	f04f 0200 	mov.w	r2, #0
 8000774:	f04f 0300 	mov.w	r3, #0
 8000778:	e9cd 2300 	strd	r2, r3, [sp]
 800077c:	f04f 0200 	mov.w	r2, #0
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	482c      	ldr	r0, [pc, #176]	; (8000838 <main+0x160>)
 8000786:	f7ff ff54 	bl	8000632 <Pid_SetParam>
  Pid_SetParam(&PID_DC_POS, DCProportionPOS, DCIntegralPOS, DCDerivatitePOS, DCAlphaPOS, DCDeltaTPOS, DCIntegralAboveLimitPOS, DCIntegralBelowLimitPOS, DCSumAboveLimitPOS, DCSumBelowLimitPOS);
 800078a:	f04f 0200 	mov.w	r2, #0
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	f04f 0300 	mov.w	r3, #0
 80007aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	f04f 0300 	mov.w	r3, #0
 80007b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80007ba:	a319      	add	r3, pc, #100	; (adr r3, 8000820 <main+0x148>)
 80007bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80007c4:	f04f 0200 	mov.w	r2, #0
 80007c8:	f04f 0300 	mov.w	r3, #0
 80007cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80007d0:	f04f 0200 	mov.w	r2, #0
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80007dc:	f04f 0200 	mov.w	r2, #0
 80007e0:	f04f 0300 	mov.w	r3, #0
 80007e4:	e9cd 2300 	strd	r2, r3, [sp]
 80007e8:	f04f 0200 	mov.w	r2, #0
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <main+0x164>)
 80007f2:	f7ff ff1e 	bl	8000632 <Pid_SetParam>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CalPIDDC */
  osThreadDef(CalPIDDC, StartCalPIDDC, osPriorityNormal, 0, 128);
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <main+0x168>)
 80007f8:	1d3c      	adds	r4, r7, #4
 80007fa:	461d      	mov	r5, r3
 80007fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000800:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CalPIDDCHandle = osThreadCreate(osThread(CalPIDDC), NULL);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fa2f 	bl	8002c70 <osThreadCreate>
 8000812:	4603      	mov	r3, r0
 8000814:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <main+0x16c>)
 8000816:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000818:	f002 fa23 	bl	8002c62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081c:	e7fe      	b.n	800081c <main+0x144>
 800081e:	bf00      	nop
 8000820:	d2f1a9fc 	.word	0xd2f1a9fc
 8000824:	3f50624d 	.word	0x3f50624d
 8000828:	20000288 	.word	0x20000288
 800082c:	200002d0 	.word	0x200002d0
 8000830:	000109a0 	.word	0x000109a0
 8000834:	20000320 	.word	0x20000320
 8000838:	20000388 	.word	0x20000388
 800083c:	20000420 	.word	0x20000420
 8000840:	0800409c 	.word	0x0800409c
 8000844:	20000318 	.word	0x20000318

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b090      	sub	sp, #64	; 0x40
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0318 	add.w	r3, r7, #24
 8000852:	2228      	movs	r2, #40	; 0x28
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f003 fbe2 	bl	8004020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000886:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0318 	add.w	r3, r7, #24
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fd85 	bl	80013a0 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800089c:	f000 f94c 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	2302      	movs	r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2102      	movs	r1, #2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fff2 	bl	80018a4 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008c6:	f000 f937 	bl	8000b38 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3740      	adds	r7, #64	; 0x40
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <MX_TIM2_Init+0xfc>)
 8000906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 800090c:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <MX_TIM2_Init+0xfc>)
 800090e:	2206      	movs	r2, #6
 8000910:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <MX_TIM2_Init+0xfc>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MX_TIM2_Init+0xfc>)
 800091a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800091e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <MX_TIM2_Init+0xfc>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_TIM2_Init+0xfc>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092c:	4828      	ldr	r0, [pc, #160]	; (80009d0 <MX_TIM2_Init+0xfc>)
 800092e:	f001 f915 	bl	8001b5c <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000938:	f000 f8fe 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000946:	4619      	mov	r1, r3
 8000948:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_TIM2_Init+0xfc>)
 800094a:	f001 fd6b 	bl	8002424 <HAL_TIM_ConfigClockSource>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000954:	f000 f8f0 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000958:	481d      	ldr	r0, [pc, #116]	; (80009d0 <MX_TIM2_Init+0xfc>)
 800095a:	f001 f94e 	bl	8001bfa <HAL_TIM_PWM_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000964:	f000 f8e8 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	4619      	mov	r1, r3
 8000976:	4816      	ldr	r0, [pc, #88]	; (80009d0 <MX_TIM2_Init+0xfc>)
 8000978:	f002 f8ec 	bl	8002b54 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000982:	f000 f8d9 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000986:	2360      	movs	r3, #96	; 0x60
 8000988:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2208      	movs	r2, #8
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_TIM2_Init+0xfc>)
 800099e:	f001 fc7f 	bl	80022a0 <HAL_TIM_PWM_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80009a8:	f000 f8c6 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	220c      	movs	r2, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <MX_TIM2_Init+0xfc>)
 80009b4:	f001 fc74 	bl	80022a0 <HAL_TIM_PWM_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80009be:	f000 f8bb 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <MX_TIM2_Init+0xfc>)
 80009c4:	f000 f958 	bl	8000c78 <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3738      	adds	r7, #56	; 0x38
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000288 	.word	0x20000288

080009d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2224      	movs	r2, #36	; 0x24
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 fb1c 	bl	8004020 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <MX_TIM3_Init+0xa0>)
 80009f2:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <MX_TIM3_Init+0xa4>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_TIM3_Init+0xa0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_TIM3_Init+0xa0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_TIM3_Init+0xa0>)
 8000a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_TIM3_Init+0xa0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_TIM3_Init+0xa0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a16:	2303      	movs	r3, #3
 8000a18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_TIM3_Init+0xa0>)
 8000a42:	f001 f9d5 	bl	8001df0 <HAL_TIM_Encoder_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a4c:	f000 f874 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_TIM3_Init+0xa0>)
 8000a5e:	f002 f879 	bl	8002b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a68:	f000 f866 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3730      	adds	r7, #48	; 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200002d0 	.word	0x200002d0
 8000a78:	40000400 	.word	0x40000400

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_GPIO_Init+0x74>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <MX_GPIO_Init+0x74>)
 8000a96:	f043 0320 	orr.w	r3, r3, #32
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_GPIO_Init+0x74>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0320 	and.w	r3, r3, #32
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_GPIO_Init+0x74>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <MX_GPIO_Init+0x74>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_GPIO_Init+0x74>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <MX_GPIO_Init+0x78>)
 8000ac6:	f000 fc53 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DirBLDC_Pin */
  GPIO_InitStruct.Pin = DirBLDC_Pin;
 8000aca:	2301      	movs	r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DirBLDC_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_GPIO_Init+0x78>)
 8000ae2:	f000 fac1 	bl	8001068 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010800 	.word	0x40010800

08000af8 <StartCalPIDDC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCalPIDDC */
void StartCalPIDDC(void const * argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	DC_Drive_BTS(&DC, &htim2, motor_Reserve, SpeedTest_DC_Speed, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <StartCalPIDDC+0x34>)
 8000b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f7ff fb21 	bl	8000150 <__aeabi_d2iz>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	220c      	movs	r2, #12
 8000b12:	9201      	str	r2, [sp, #4]
 8000b14:	2208      	movs	r2, #8
 8000b16:	9200      	str	r2, [sp, #0]
 8000b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b1c:	4904      	ldr	r1, [pc, #16]	; (8000b30 <StartCalPIDDC+0x38>)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <StartCalPIDDC+0x3c>)
 8000b20:	f7ff fb3e 	bl	80001a0 <DC_Drive_BTS>
//	PIDDCSPEED();
//	PIDDCPOS();
    osDelay(1);
 8000b24:	2001      	movs	r0, #1
 8000b26:	f002 f8ef 	bl	8002d08 <osDelay>
	DC_Drive_BTS(&DC, &htim2, motor_Reserve, SpeedTest_DC_Speed, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8000b2a:	e7e9      	b.n	8000b00 <StartCalPIDDC+0x8>
 8000b2c:	20000280 	.word	0x20000280
 8000b30:	20000288 	.word	0x20000288
 8000b34:	20000368 	.word	0x20000368

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_MspInit+0x68>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_MspInit+0x68>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6193      	str	r3, [r2, #24]
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_MspInit+0x68>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_MspInit+0x68>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_MspInit+0x68>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	61d3      	str	r3, [r2, #28]
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x68>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	f06f 0001 	mvn.w	r0, #1
 8000b82:	f000 fa3a 	bl	8000ffa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_MspInit+0x6c>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_MspInit+0x6c>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc4:	d10b      	bne.n	8000bde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_TIM_Base_MspInit+0x34>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_TIM_Base_MspInit+0x34>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_TIM_Base_MspInit+0x34>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_TIM_Encoder_MspInit+0x80>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d12b      	bne.n	8000c64 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	61d3      	str	r3, [r2, #28]
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c3c:	23c0      	movs	r3, #192	; 0xc0
 8000c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x88>)
 8000c50:	f000 fa0a 	bl	8001068 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2105      	movs	r1, #5
 8000c58:	201d      	movs	r0, #29
 8000c5a:	f000 f9ce 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c5e:	201d      	movs	r0, #29
 8000c60:	f000 f9e7 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40000400 	.word	0x40000400
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010800 	.word	0x40010800

08000c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c96:	d117      	bne.n	8000cc8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_TIM_MspPostInit+0x58>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <HAL_TIM_MspPostInit+0x58>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_TIM_MspPostInit+0x58>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <HAL_TIM_MspPostInit+0x5c>)
 8000cc4:	f000 f9d0 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010800 	.word	0x40010800

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d06:	f000 f885 	bl	8000e14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d0a:	f002 fd7b 	bl	8003804 <xTaskGetSchedulerState>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d001      	beq.n	8000d18 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d14:	f002 ff68 	bl	8003be8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <TIM3_IRQHandler+0x10>)
 8000d22:	f001 f9b5 	bl	8002090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200002d0 	.word	0x200002d0

08000d30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d3c:	f7ff fff8 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d42:	490c      	ldr	r1, [pc, #48]	; (8000d74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d44:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d58:	4c09      	ldr	r4, [pc, #36]	; (8000d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f003 f963 	bl	8004030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6a:	f7ff fcb5 	bl	80006d8 <main>
  bx lr
 8000d6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d78:	080040ec 	.word	0x080040ec
  ldr r2, =_sbss
 8000d7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d80:	20001208 	.word	0x20001208

08000d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_2_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_Init+0x28>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_Init+0x28>)
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f923 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f000 f808 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff fece 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40022000 	.word	0x40022000

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x54>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x58>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f93b 	bl	800104e <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f903 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_InitTick+0x5c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x1c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x20>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <HAL_IncTick+0x20>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	20000008 	.word	0x20000008
 8000e34:	200004b8 	.word	0x200004b8

08000e38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <HAL_GetTick+0x10>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	200004b8 	.word	0x200004b8

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4906      	ldr	r1, [pc, #24]	; (8000ee4 <__NVIC_EnableIRQ+0x34>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff90 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff2d 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff42 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff90 	bl	8000f3c <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5f 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff35 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b08b      	sub	sp, #44	; 0x2c
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107a:	e169      	b.n	8001350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800107c:	2201      	movs	r2, #1
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8158 	bne.w	800134a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4a9a      	ldr	r2, [pc, #616]	; (8001308 <HAL_GPIO_Init+0x2a0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d05e      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010a4:	4a98      	ldr	r2, [pc, #608]	; (8001308 <HAL_GPIO_Init+0x2a0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d875      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010aa:	4a98      	ldr	r2, [pc, #608]	; (800130c <HAL_GPIO_Init+0x2a4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d058      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010b0:	4a96      	ldr	r2, [pc, #600]	; (800130c <HAL_GPIO_Init+0x2a4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d86f      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010b6:	4a96      	ldr	r2, [pc, #600]	; (8001310 <HAL_GPIO_Init+0x2a8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d052      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010bc:	4a94      	ldr	r2, [pc, #592]	; (8001310 <HAL_GPIO_Init+0x2a8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d869      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010c2:	4a94      	ldr	r2, [pc, #592]	; (8001314 <HAL_GPIO_Init+0x2ac>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d04c      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010c8:	4a92      	ldr	r2, [pc, #584]	; (8001314 <HAL_GPIO_Init+0x2ac>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d863      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010ce:	4a92      	ldr	r2, [pc, #584]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d046      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010d4:	4a90      	ldr	r2, [pc, #576]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d85d      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d82a      	bhi.n	8001134 <HAL_GPIO_Init+0xcc>
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d859      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010e2:	a201      	add	r2, pc, #4	; (adr r2, 80010e8 <HAL_GPIO_Init+0x80>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	08001163 	.word	0x08001163
 80010ec:	0800113d 	.word	0x0800113d
 80010f0:	0800114f 	.word	0x0800114f
 80010f4:	08001191 	.word	0x08001191
 80010f8:	08001197 	.word	0x08001197
 80010fc:	08001197 	.word	0x08001197
 8001100:	08001197 	.word	0x08001197
 8001104:	08001197 	.word	0x08001197
 8001108:	08001197 	.word	0x08001197
 800110c:	08001197 	.word	0x08001197
 8001110:	08001197 	.word	0x08001197
 8001114:	08001197 	.word	0x08001197
 8001118:	08001197 	.word	0x08001197
 800111c:	08001197 	.word	0x08001197
 8001120:	08001197 	.word	0x08001197
 8001124:	08001197 	.word	0x08001197
 8001128:	08001197 	.word	0x08001197
 800112c:	08001145 	.word	0x08001145
 8001130:	08001159 	.word	0x08001159
 8001134:	4a79      	ldr	r2, [pc, #484]	; (800131c <HAL_GPIO_Init+0x2b4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800113a:	e02c      	b.n	8001196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	623b      	str	r3, [r7, #32]
          break;
 8001142:	e029      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	3304      	adds	r3, #4
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	e024      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	3308      	adds	r3, #8
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e01f      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	330c      	adds	r3, #12
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e01a      	b.n	8001198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800116a:	2304      	movs	r3, #4
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e013      	b.n	8001198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001178:	2308      	movs	r3, #8
 800117a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	611a      	str	r2, [r3, #16]
          break;
 8001182:	e009      	b.n	8001198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001184:	2308      	movs	r3, #8
 8001186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	615a      	str	r2, [r3, #20]
          break;
 800118e:	e003      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x130>
          break;
 8001196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2bff      	cmp	r3, #255	; 0xff
 800119c:	d801      	bhi.n	80011a2 <HAL_GPIO_Init+0x13a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_Init+0x13e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3304      	adds	r3, #4
 80011a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2bff      	cmp	r3, #255	; 0xff
 80011ac:	d802      	bhi.n	80011b4 <HAL_GPIO_Init+0x14c>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	e002      	b.n	80011ba <HAL_GPIO_Init+0x152>
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	3b08      	subs	r3, #8
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	210f      	movs	r1, #15
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	6a39      	ldr	r1, [r7, #32]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	431a      	orrs	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80b1 	beq.w	800134a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e8:	4b4d      	ldr	r3, [pc, #308]	; (8001320 <HAL_GPIO_Init+0x2b8>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HAL_GPIO_Init+0x2b8>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b4a      	ldr	r3, [pc, #296]	; (8001320 <HAL_GPIO_Init+0x2b8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001200:	4a48      	ldr	r2, [pc, #288]	; (8001324 <HAL_GPIO_Init+0x2bc>)
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a40      	ldr	r2, [pc, #256]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d013      	beq.n	8001254 <HAL_GPIO_Init+0x1ec>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a3f      	ldr	r2, [pc, #252]	; (800132c <HAL_GPIO_Init+0x2c4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d00d      	beq.n	8001250 <HAL_GPIO_Init+0x1e8>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3e      	ldr	r2, [pc, #248]	; (8001330 <HAL_GPIO_Init+0x2c8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d007      	beq.n	800124c <HAL_GPIO_Init+0x1e4>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3d      	ldr	r2, [pc, #244]	; (8001334 <HAL_GPIO_Init+0x2cc>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d101      	bne.n	8001248 <HAL_GPIO_Init+0x1e0>
 8001244:	2303      	movs	r3, #3
 8001246:	e006      	b.n	8001256 <HAL_GPIO_Init+0x1ee>
 8001248:	2304      	movs	r3, #4
 800124a:	e004      	b.n	8001256 <HAL_GPIO_Init+0x1ee>
 800124c:	2302      	movs	r3, #2
 800124e:	e002      	b.n	8001256 <HAL_GPIO_Init+0x1ee>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <HAL_GPIO_Init+0x1ee>
 8001254:	2300      	movs	r3, #0
 8001256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001258:	f002 0203 	and.w	r2, r2, #3
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	4093      	lsls	r3, r2
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001266:	492f      	ldr	r1, [pc, #188]	; (8001324 <HAL_GPIO_Init+0x2bc>)
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	492c      	ldr	r1, [pc, #176]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	43db      	mvns	r3, r3
 8001296:	4928      	ldr	r1, [pc, #160]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 8001298:	4013      	ands	r3, r2
 800129a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012a8:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	4922      	ldr	r1, [pc, #136]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	60cb      	str	r3, [r1, #12]
 80012b4:	e006      	b.n	80012c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	43db      	mvns	r3, r3
 80012be:	491e      	ldr	r1, [pc, #120]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4918      	ldr	r1, [pc, #96]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	4914      	ldr	r1, [pc, #80]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d021      	beq.n	800133c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	490e      	ldr	r1, [pc, #56]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
 8001304:	e021      	b.n	800134a <HAL_GPIO_Init+0x2e2>
 8001306:	bf00      	nop
 8001308:	10320000 	.word	0x10320000
 800130c:	10310000 	.word	0x10310000
 8001310:	10220000 	.word	0x10220000
 8001314:	10210000 	.word	0x10210000
 8001318:	10120000 	.word	0x10120000
 800131c:	10110000 	.word	0x10110000
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000
 8001328:	40010800 	.word	0x40010800
 800132c:	40010c00 	.word	0x40010c00
 8001330:	40011000 	.word	0x40011000
 8001334:	40011400 	.word	0x40011400
 8001338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_GPIO_Init+0x304>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	43db      	mvns	r3, r3
 8001344:	4909      	ldr	r1, [pc, #36]	; (800136c <HAL_GPIO_Init+0x304>)
 8001346:	4013      	ands	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	3301      	adds	r3, #1
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	fa22 f303 	lsr.w	r3, r2, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	f47f ae8e 	bne.w	800107c <HAL_GPIO_Init+0x14>
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	372c      	adds	r7, #44	; 0x2c
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800138c:	e003      	b.n	8001396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	611a      	str	r2, [r3, #16]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e272      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8087 	beq.w	80014ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013c0:	4b92      	ldr	r3, [pc, #584]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d00c      	beq.n	80013e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013cc:	4b8f      	ldr	r3, [pc, #572]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d112      	bne.n	80013fe <HAL_RCC_OscConfig+0x5e>
 80013d8:	4b8c      	ldr	r3, [pc, #560]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e4:	d10b      	bne.n	80013fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e6:	4b89      	ldr	r3, [pc, #548]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d06c      	beq.n	80014cc <HAL_RCC_OscConfig+0x12c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d168      	bne.n	80014cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e24c      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001406:	d106      	bne.n	8001416 <HAL_RCC_OscConfig+0x76>
 8001408:	4b80      	ldr	r3, [pc, #512]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a7f      	ldr	r2, [pc, #508]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e02e      	b.n	8001474 <HAL_RCC_OscConfig+0xd4>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x98>
 800141e:	4b7b      	ldr	r3, [pc, #492]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a7a      	ldr	r2, [pc, #488]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b78      	ldr	r3, [pc, #480]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a77      	ldr	r2, [pc, #476]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01d      	b.n	8001474 <HAL_RCC_OscConfig+0xd4>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0xbc>
 8001442:	4b72      	ldr	r3, [pc, #456]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a71      	ldr	r2, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b6f      	ldr	r3, [pc, #444]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6e      	ldr	r2, [pc, #440]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0xd4>
 800145c:	4b6b      	ldr	r3, [pc, #428]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a6a      	ldr	r2, [pc, #424]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a67      	ldr	r2, [pc, #412]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001472:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fcdc 	bl	8000e38 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fcd8 	bl	8000e38 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e200      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b5d      	ldr	r3, [pc, #372]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0xe4>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fcc8 	bl	8000e38 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fcc4 	bl	8000e38 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1ec      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x10c>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d063      	beq.n	80015a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014da:	4b4c      	ldr	r3, [pc, #304]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014e6:	4b49      	ldr	r3, [pc, #292]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d11c      	bne.n	800152c <HAL_RCC_OscConfig+0x18c>
 80014f2:	4b46      	ldr	r3, [pc, #280]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	4b43      	ldr	r3, [pc, #268]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x176>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e1c0      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b3d      	ldr	r3, [pc, #244]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4939      	ldr	r1, [pc, #228]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	e03a      	b.n	80015a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d020      	beq.n	8001576 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001534:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_RCC_OscConfig+0x270>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fc7d 	bl	8000e38 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fc79 	bl	8000e38 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1a1      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4927      	ldr	r1, [pc, #156]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_RCC_OscConfig+0x270>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fc5c 	bl	8000e38 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001584:	f7ff fc58 	bl	8000e38 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e180      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d03a      	beq.n	8001624 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d019      	beq.n	80015ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_RCC_OscConfig+0x274>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7ff fc3c 	bl	8000e38 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc38 	bl	8000e38 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e160      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f000 fa9c 	bl	8001b20 <RCC_Delay>
 80015e8:	e01c      	b.n	8001624 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_RCC_OscConfig+0x274>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fc22 	bl	8000e38 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f6:	e00f      	b.n	8001618 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc1e 	bl	8000e38 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d908      	bls.n	8001618 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e146      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	42420000 	.word	0x42420000
 8001614:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	4b92      	ldr	r3, [pc, #584]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1e9      	bne.n	80015f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80a6 	beq.w	800177e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001636:	4b8b      	ldr	r3, [pc, #556]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10d      	bne.n	800165e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a87      	ldr	r2, [pc, #540]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b85      	ldr	r3, [pc, #532]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165a:	2301      	movs	r3, #1
 800165c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165e:	4b82      	ldr	r3, [pc, #520]	; (8001868 <HAL_RCC_OscConfig+0x4c8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d118      	bne.n	800169c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166a:	4b7f      	ldr	r3, [pc, #508]	; (8001868 <HAL_RCC_OscConfig+0x4c8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a7e      	ldr	r2, [pc, #504]	; (8001868 <HAL_RCC_OscConfig+0x4c8>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001676:	f7ff fbdf 	bl	8000e38 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167e:	f7ff fbdb 	bl	8000e38 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b64      	cmp	r3, #100	; 0x64
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e103      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	4b75      	ldr	r3, [pc, #468]	; (8001868 <HAL_RCC_OscConfig+0x4c8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x312>
 80016a4:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	e02d      	b.n	800170e <HAL_RCC_OscConfig+0x36e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x334>
 80016ba:	4b6a      	ldr	r3, [pc, #424]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a69      	ldr	r2, [pc, #420]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	4b67      	ldr	r3, [pc, #412]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a66      	ldr	r2, [pc, #408]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	e01c      	b.n	800170e <HAL_RCC_OscConfig+0x36e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d10c      	bne.n	80016f6 <HAL_RCC_OscConfig+0x356>
 80016dc:	4b61      	ldr	r3, [pc, #388]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a60      	ldr	r2, [pc, #384]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a5d      	ldr	r2, [pc, #372]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	e00b      	b.n	800170e <HAL_RCC_OscConfig+0x36e>
 80016f6:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4a5a      	ldr	r2, [pc, #360]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6213      	str	r3, [r2, #32]
 8001702:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a57      	ldr	r2, [pc, #348]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d015      	beq.n	8001742 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7ff fb8f 	bl	8000e38 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fb8b 	bl	8000e38 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0b1      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ee      	beq.n	800171e <HAL_RCC_OscConfig+0x37e>
 8001740:	e014      	b.n	800176c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fb79 	bl	8000e38 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fb75 	bl	8000e38 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e09b      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001760:	4b40      	ldr	r3, [pc, #256]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ee      	bne.n	800174a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d105      	bne.n	800177e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8087 	beq.w	8001896 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001788:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d061      	beq.n	8001858 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d146      	bne.n	800182a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179c:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_RCC_OscConfig+0x4cc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff fb49 	bl	8000e38 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017aa:	f7ff fb45 	bl	8000e38 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e06d      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f0      	bne.n	80017aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d0:	d108      	bne.n	80017e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	4921      	ldr	r1, [pc, #132]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a19      	ldr	r1, [r3, #32]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	430b      	orrs	r3, r1
 80017f6:	491b      	ldr	r1, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x4cc>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fb19 	bl	8000e38 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fb15 	bl	8000e38 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e03d      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x46a>
 8001828:	e035      	b.n	8001896 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x4cc>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fb02 	bl	8000e38 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fafe 	bl	8000e38 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e026      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x498>
 8001856:	e01e      	b.n	8001896 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d107      	bne.n	8001870 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e019      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
 8001864:	40021000 	.word	0x40021000
 8001868:	40007000 	.word	0x40007000
 800186c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_OscConfig+0x500>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	429a      	cmp	r2, r3
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0d0      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d910      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 0207 	bic.w	r2, r3, #7
 80018ce:	4965      	ldr	r1, [pc, #404]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0b8      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800190a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001922:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	494d      	ldr	r1, [pc, #308]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d040      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d115      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e07f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e073      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e06b      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001982:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f023 0203 	bic.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4936      	ldr	r1, [pc, #216]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7ff fa50 	bl	8000e38 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff fa4c 	bl	8000e38 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e053      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 020c 	and.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1eb      	bne.n	800199c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d210      	bcs.n	80019f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	4922      	ldr	r1, [pc, #136]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4916      	ldr	r1, [pc, #88]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a32:	f000 f821 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	490a      	ldr	r1, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	5ccb      	ldrb	r3, [r1, r3]
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1cc>)
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1d0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f9ae 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40022000 	.word	0x40022000
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	080040c0 	.word	0x080040c0
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x30>
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x36>
 8001aa6:	e027      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aaa:	613b      	str	r3, [r7, #16]
      break;
 8001aac:	e027      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	0c9b      	lsrs	r3, r3, #18
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d010      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	0c5b      	lsrs	r3, r3, #17
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ad2:	5cd3      	ldrb	r3, [r2, r3]
 8001ad4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ada:	fb03 f202 	mul.w	r2, r3, r2
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e004      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	613b      	str	r3, [r7, #16]
      break;
 8001af6:	e002      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001afa:	613b      	str	r3, [r7, #16]
      break;
 8001afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afe:	693b      	ldr	r3, [r7, #16]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	007a1200 	.word	0x007a1200
 8001b14:	080040d0 	.word	0x080040d0
 8001b18:	080040e0 	.word	0x080040e0
 8001b1c:	003d0900 	.word	0x003d0900

08001b20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <RCC_Delay+0x34>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <RCC_Delay+0x38>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0a5b      	lsrs	r3, r3, #9
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	fb02 f303 	mul.w	r3, r2, r3
 8001b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b3c:	bf00      	nop
  }
  while (Delay --);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1e5a      	subs	r2, r3, #1
 8001b42:	60fa      	str	r2, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f9      	bne.n	8001b3c <RCC_Delay+0x1c>
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000000 	.word	0x20000000
 8001b58:	10624dd3 	.word	0x10624dd3

08001b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e041      	b.n	8001bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff f816 	bl	8000bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3304      	adds	r3, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f000 fd36 	bl	800260c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e041      	b.n	8001c90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d106      	bne.n	8001c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f839 	bl	8001c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3304      	adds	r3, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f000 fce7 	bl	800260c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_TIM_PWM_Start+0x24>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e022      	b.n	8001d16 <HAL_TIM_PWM_Start+0x6a>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d109      	bne.n	8001cea <HAL_TIM_PWM_Start+0x3e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	e015      	b.n	8001d16 <HAL_TIM_PWM_Start+0x6a>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d109      	bne.n	8001d04 <HAL_TIM_PWM_Start+0x58>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	e008      	b.n	8001d16 <HAL_TIM_PWM_Start+0x6a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	bf14      	ite	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	2300      	moveq	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e05e      	b.n	8001ddc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d104      	bne.n	8001d2e <HAL_TIM_PWM_Start+0x82>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d2c:	e013      	b.n	8001d56 <HAL_TIM_PWM_Start+0xaa>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d104      	bne.n	8001d3e <HAL_TIM_PWM_Start+0x92>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d3c:	e00b      	b.n	8001d56 <HAL_TIM_PWM_Start+0xaa>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d104      	bne.n	8001d4e <HAL_TIM_PWM_Start+0xa2>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d4c:	e003      	b.n	8001d56 <HAL_TIM_PWM_Start+0xaa>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	6839      	ldr	r1, [r7, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fed4 	bl	8002b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_TIM_PWM_Start+0x138>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d107      	bne.n	8001d7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_TIM_PWM_Start+0x138>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d00e      	beq.n	8001da6 <HAL_TIM_PWM_Start+0xfa>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d90:	d009      	beq.n	8001da6 <HAL_TIM_PWM_Start+0xfa>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_TIM_PWM_Start+0x13c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d004      	beq.n	8001da6 <HAL_TIM_PWM_Start+0xfa>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <HAL_TIM_PWM_Start+0x140>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d111      	bne.n	8001dca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d010      	beq.n	8001dda <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc8:	e007      	b.n	8001dda <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40012c00 	.word	0x40012c00
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40000800 	.word	0x40000800

08001df0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e093      	b.n	8001f2c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d106      	bne.n	8001e1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7fe fee7 	bl	8000bec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e34:	f023 0307 	bic.w	r3, r3, #7
 8001e38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3304      	adds	r3, #4
 8001e42:	4619      	mov	r1, r3
 8001e44:	4610      	mov	r0, r2
 8001e46:	f000 fbe1 	bl	800260c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e72:	f023 0303 	bic.w	r3, r3, #3
 8001e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	4313      	orrs	r3, r2
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e90:	f023 030c 	bic.w	r3, r3, #12
 8001e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	4313      	orrs	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	011a      	lsls	r2, r3, #4
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	031b      	lsls	r3, r3, #12
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ece:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	4313      	orrs	r3, r2
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d110      	bne.n	8001f86 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f6a:	7b7b      	ldrb	r3, [r7, #13]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d001      	beq.n	8001f74 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e089      	b.n	8002088 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f84:	e031      	b.n	8001fea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d110      	bne.n	8001fae <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f8c:	7bbb      	ldrb	r3, [r7, #14]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f92:	7b3b      	ldrb	r3, [r7, #12]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d001      	beq.n	8001f9c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e075      	b.n	8002088 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fac:	e01d      	b.n	8001fea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d108      	bne.n	8001fc6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fba:	7b7b      	ldrb	r3, [r7, #13]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d102      	bne.n	8001fc6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001fc0:	7b3b      	ldrb	r3, [r7, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e05e      	b.n	8002088 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_TIM_Encoder_Start_IT+0xc4>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d010      	beq.n	8002018 <HAL_TIM_Encoder_Start_IT+0xe4>
 8001ff6:	e01f      	b.n	8002038 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fd83 	bl	8002b0c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0202 	orr.w	r2, r2, #2
 8002014:	60da      	str	r2, [r3, #12]
      break;
 8002016:	e02e      	b.n	8002076 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2201      	movs	r2, #1
 800201e:	2104      	movs	r1, #4
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fd73 	bl	8002b0c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0204 	orr.w	r2, r2, #4
 8002034:	60da      	str	r2, [r3, #12]
      break;
 8002036:	e01e      	b.n	8002076 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2201      	movs	r2, #1
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fd63 	bl	8002b0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	2104      	movs	r1, #4
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fd5c 	bl	8002b0c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0202 	orr.w	r2, r2, #2
 8002062:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0204 	orr.w	r2, r2, #4
 8002072:	60da      	str	r2, [r3, #12]
      break;
 8002074:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0201 	orr.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d122      	bne.n	80020ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d11b      	bne.n	80020ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0202 	mvn.w	r2, #2
 80020bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fa7f 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fa72 	bl	80025c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 fa81 	bl	80025e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d122      	bne.n	8002140 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b04      	cmp	r3, #4
 8002106:	d11b      	bne.n	8002140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0204 	mvn.w	r2, #4
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa55 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fa48 	bl	80025c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fa57 	bl	80025e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b08      	cmp	r3, #8
 800214c:	d122      	bne.n	8002194 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b08      	cmp	r3, #8
 800215a:	d11b      	bne.n	8002194 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0208 	mvn.w	r2, #8
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2204      	movs	r2, #4
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fa2b 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fa1e 	bl	80025c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fa2d 	bl	80025e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b10      	cmp	r3, #16
 80021a0:	d122      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d11b      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0210 	mvn.w	r2, #16
 80021b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2208      	movs	r2, #8
 80021be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fa01 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 80021d4:	e005      	b.n	80021e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f9f4 	bl	80025c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fa03 	bl	80025e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d107      	bne.n	8002214 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0201 	mvn.w	r2, #1
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f9cf 	bl	80025b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221e:	2b80      	cmp	r3, #128	; 0x80
 8002220:	d10e      	bne.n	8002240 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	2b80      	cmp	r3, #128	; 0x80
 800222e:	d107      	bne.n	8002240 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fcf1 	bl	8002c22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224a:	2b40      	cmp	r3, #64	; 0x40
 800224c:	d10e      	bne.n	800226c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b40      	cmp	r3, #64	; 0x40
 800225a:	d107      	bne.n	800226c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f9c7 	bl	80025fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b20      	cmp	r3, #32
 8002278:	d10e      	bne.n	8002298 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b20      	cmp	r3, #32
 8002286:	d107      	bne.n	8002298 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0220 	mvn.w	r2, #32
 8002290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fcbc 	bl	8002c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e0ae      	b.n	800241c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b0c      	cmp	r3, #12
 80022ca:	f200 809f 	bhi.w	800240c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022ce:	a201      	add	r2, pc, #4	; (adr r2, 80022d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d4:	08002309 	.word	0x08002309
 80022d8:	0800240d 	.word	0x0800240d
 80022dc:	0800240d 	.word	0x0800240d
 80022e0:	0800240d 	.word	0x0800240d
 80022e4:	08002349 	.word	0x08002349
 80022e8:	0800240d 	.word	0x0800240d
 80022ec:	0800240d 	.word	0x0800240d
 80022f0:	0800240d 	.word	0x0800240d
 80022f4:	0800238b 	.word	0x0800238b
 80022f8:	0800240d 	.word	0x0800240d
 80022fc:	0800240d 	.word	0x0800240d
 8002300:	0800240d 	.word	0x0800240d
 8002304:	080023cb 	.word	0x080023cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f9de 	bl	80026d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0208 	orr.w	r2, r2, #8
 8002322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6999      	ldr	r1, [r3, #24]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	619a      	str	r2, [r3, #24]
      break;
 8002346:	e064      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fa24 	bl	800279c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6999      	ldr	r1, [r3, #24]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	021a      	lsls	r2, r3, #8
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	619a      	str	r2, [r3, #24]
      break;
 8002388:	e043      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fa6d 	bl	8002870 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0208 	orr.w	r2, r2, #8
 80023a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0204 	bic.w	r2, r2, #4
 80023b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69d9      	ldr	r1, [r3, #28]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	61da      	str	r2, [r3, #28]
      break;
 80023c8:	e023      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fab7 	bl	8002944 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69da      	ldr	r2, [r3, #28]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69d9      	ldr	r1, [r3, #28]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	021a      	lsls	r2, r3, #8
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	61da      	str	r2, [r3, #28]
      break;
 800240a:	e002      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	75fb      	strb	r3, [r7, #23]
      break;
 8002410:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800241a:	7dfb      	ldrb	r3, [r7, #23]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_TIM_ConfigClockSource+0x1c>
 800243c:	2302      	movs	r3, #2
 800243e:	e0b4      	b.n	80025aa <HAL_TIM_ConfigClockSource+0x186>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800245e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002478:	d03e      	beq.n	80024f8 <HAL_TIM_ConfigClockSource+0xd4>
 800247a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247e:	f200 8087 	bhi.w	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 8002482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002486:	f000 8086 	beq.w	8002596 <HAL_TIM_ConfigClockSource+0x172>
 800248a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248e:	d87f      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b70      	cmp	r3, #112	; 0x70
 8002492:	d01a      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0xa6>
 8002494:	2b70      	cmp	r3, #112	; 0x70
 8002496:	d87b      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 8002498:	2b60      	cmp	r3, #96	; 0x60
 800249a:	d050      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x11a>
 800249c:	2b60      	cmp	r3, #96	; 0x60
 800249e:	d877      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 80024a0:	2b50      	cmp	r3, #80	; 0x50
 80024a2:	d03c      	beq.n	800251e <HAL_TIM_ConfigClockSource+0xfa>
 80024a4:	2b50      	cmp	r3, #80	; 0x50
 80024a6:	d873      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	d058      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x13a>
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d86f      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 80024b0:	2b30      	cmp	r3, #48	; 0x30
 80024b2:	d064      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x15a>
 80024b4:	2b30      	cmp	r3, #48	; 0x30
 80024b6:	d86b      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d060      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x15a>
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d867      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05c      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x15a>
 80024c4:	2b10      	cmp	r3, #16
 80024c6:	d05a      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	e062      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024da:	f000 faf8 	bl	8002ace <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	609a      	str	r2, [r3, #8]
      break;
 80024f6:	e04f      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002508:	f000 fae1 	bl	8002ace <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800251a:	609a      	str	r2, [r3, #8]
      break;
 800251c:	e03c      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	461a      	mov	r2, r3
 800252c:	f000 fa58 	bl	80029e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2150      	movs	r1, #80	; 0x50
 8002536:	4618      	mov	r0, r3
 8002538:	f000 faaf 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 800253c:	e02c      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800254a:	461a      	mov	r2, r3
 800254c:	f000 fa76 	bl	8002a3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2160      	movs	r1, #96	; 0x60
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fa9f 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 800255c:	e01c      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	461a      	mov	r2, r3
 800256c:	f000 fa38 	bl	80029e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2140      	movs	r1, #64	; 0x40
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fa8f 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 800257c:	e00c      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f000 fa86 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 800258e:	e003      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e000      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <TIM_Base_SetConfig+0xb8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00b      	beq.n	800263c <TIM_Base_SetConfig+0x30>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d007      	beq.n	800263c <TIM_Base_SetConfig+0x30>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <TIM_Base_SetConfig+0xbc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d003      	beq.n	800263c <TIM_Base_SetConfig+0x30>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a25      	ldr	r2, [pc, #148]	; (80026cc <TIM_Base_SetConfig+0xc0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d108      	bne.n	800264e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <TIM_Base_SetConfig+0xb8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_Base_SetConfig+0x62>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265c:	d007      	beq.n	800266e <TIM_Base_SetConfig+0x62>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <TIM_Base_SetConfig+0xbc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_Base_SetConfig+0x62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a18      	ldr	r2, [pc, #96]	; (80026cc <TIM_Base_SetConfig+0xc0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <TIM_Base_SetConfig+0xb8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d103      	bne.n	80026b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	615a      	str	r2, [r3, #20]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800

080026d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f023 0201 	bic.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f023 0302 	bic.w	r3, r3, #2
 8002718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <TIM_OC1_SetConfig+0xc8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d10c      	bne.n	8002746 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f023 0308 	bic.w	r3, r3, #8
 8002732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a13      	ldr	r2, [pc, #76]	; (8002798 <TIM_OC1_SetConfig+0xc8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d111      	bne.n	8002772 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800275c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	621a      	str	r2, [r3, #32]
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40012c00 	.word	0x40012c00

0800279c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f023 0210 	bic.w	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f023 0320 	bic.w	r3, r3, #32
 80027e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <TIM_OC2_SetConfig+0xd0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d10d      	bne.n	8002818 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002816:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <TIM_OC2_SetConfig+0xd0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d113      	bne.n	8002848 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800282e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	621a      	str	r2, [r3, #32]
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	40012c00 	.word	0x40012c00

08002870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0303 	bic.w	r3, r3, #3
 80028a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <TIM_OC3_SetConfig+0xd0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10d      	bne.n	80028ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a14      	ldr	r2, [pc, #80]	; (8002940 <TIM_OC3_SetConfig+0xd0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d113      	bne.n	800291a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	621a      	str	r2, [r3, #32]
}
 8002934:	bf00      	nop
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40012c00 	.word	0x40012c00

08002944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800298e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	031b      	lsls	r3, r3, #12
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <TIM_OC4_SetConfig+0x98>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d109      	bne.n	80029b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	019b      	lsls	r3, r3, #6
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	621a      	str	r2, [r3, #32]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	40012c00 	.word	0x40012c00

080029e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0201 	bic.w	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f023 030a 	bic.w	r3, r3, #10
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	f023 0210 	bic.w	r2, r3, #16
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	031b      	lsls	r3, r3, #12
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	621a      	str	r2, [r3, #32]
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f043 0307 	orr.w	r3, r3, #7
 8002abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	021a      	lsls	r2, r3, #8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	609a      	str	r2, [r3, #8]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2201      	movs	r2, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a1a      	ldr	r2, [r3, #32]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	401a      	ands	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	621a      	str	r2, [r3, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e046      	b.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00e      	beq.n	8002bce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d009      	beq.n	8002bce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d004      	beq.n	8002bce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10c      	bne.n	8002be8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800

08002c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c46:	2b84      	cmp	r3, #132	; 0x84
 8002c48:	d005      	beq.n	8002c56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002c4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4413      	add	r3, r2
 8002c52:	3303      	adds	r3, #3
 8002c54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002c66:	f000 fad1 	bl	800320c <vTaskStartScheduler>
  
  return osOK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af04      	add	r7, sp, #16
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d020      	beq.n	8002cc4 <osThreadCreate+0x54>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01c      	beq.n	8002cc4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685c      	ldr	r4, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691e      	ldr	r6, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ffc9 	bl	8002c34 <makeFreeRtosPriority>
 8002ca2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cac:	9202      	str	r2, [sp, #8]
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	9100      	str	r1, [sp, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	4632      	mov	r2, r6
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f000 f8e8 	bl	8002e8e <xTaskCreateStatic>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e01c      	b.n	8002cfe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685c      	ldr	r4, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cd0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ffab 	bl	8002c34 <makeFreeRtosPriority>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	f107 030c 	add.w	r3, r7, #12
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	9200      	str	r2, [sp, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4632      	mov	r2, r6
 8002cec:	4629      	mov	r1, r5
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f000 f929 	bl	8002f46 <xTaskCreate>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e000      	b.n	8002d00 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <osDelay+0x16>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	e000      	b.n	8002d20 <osDelay+0x18>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fa3f 	bl	80031a4 <vTaskDelay>
  
  return osOK;
 8002d26:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f103 0208 	add.w	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
 8002d48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f103 0208 	add.w	r2, r3, #8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f103 0208 	add.w	r2, r3, #8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	601a      	str	r2, [r3, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d103      	bne.n	8002dec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e00c      	b.n	8002e06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3308      	adds	r3, #8
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e002      	b.n	8002dfa <vListInsert+0x2e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d2f6      	bcs.n	8002df4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6892      	ldr	r2, [r2, #8]
 8002e52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6852      	ldr	r2, [r2, #4]
 8002e5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d103      	bne.n	8002e70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1e5a      	subs	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b08e      	sub	sp, #56	; 0x38
 8002e92:	af04      	add	r7, sp, #16
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002eb4:	bf00      	nop
 8002eb6:	e7fe      	b.n	8002eb6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <xTaskCreateStatic+0x46>
	__asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	61fb      	str	r3, [r7, #28]
}
 8002ed0:	bf00      	nop
 8002ed2:	e7fe      	b.n	8002ed2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ed4:	2354      	movs	r3, #84	; 0x54
 8002ed6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b54      	cmp	r3, #84	; 0x54
 8002edc:	d00a      	beq.n	8002ef4 <xTaskCreateStatic+0x66>
	__asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	61bb      	str	r3, [r7, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01e      	beq.n	8002f38 <xTaskCreateStatic+0xaa>
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01b      	beq.n	8002f38 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f12:	2300      	movs	r3, #0
 8002f14:	9303      	str	r3, [sp, #12]
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	9302      	str	r3, [sp, #8]
 8002f1a:	f107 0314 	add.w	r3, r7, #20
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f850 	bl	8002fd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f32:	f000 f8cd 	bl	80030d0 <prvAddNewTaskToReadyList>
 8002f36:	e001      	b.n	8002f3c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f3c:	697b      	ldr	r3, [r7, #20]
	}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3728      	adds	r7, #40	; 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b08c      	sub	sp, #48	; 0x30
 8002f4a:	af04      	add	r7, sp, #16
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fe88 	bl	8003c70 <pvPortMalloc>
 8002f60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002f68:	2054      	movs	r0, #84	; 0x54
 8002f6a:	f000 fe81 	bl	8003c70 <pvPortMalloc>
 8002f6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f7c:	e005      	b.n	8002f8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f7e:	6978      	ldr	r0, [r7, #20]
 8002f80:	f000 ff3a 	bl	8003df8 <vPortFree>
 8002f84:	e001      	b.n	8002f8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d017      	beq.n	8002fc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9303      	str	r3, [sp, #12]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	9302      	str	r3, [sp, #8]
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f80e 	bl	8002fd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fb4:	69f8      	ldr	r0, [r7, #28]
 8002fb6:	f000 f88b 	bl	80030d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	e002      	b.n	8002fc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
	}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f023 0307 	bic.w	r3, r3, #7
 8002ff6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	617b      	str	r3, [r7, #20]
}
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	e012      	b.n	8003044 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	7819      	ldrb	r1, [r3, #0]
 8003026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	4413      	add	r3, r2
 800302c:	3334      	adds	r3, #52	; 0x34
 800302e:	460a      	mov	r2, r1
 8003030:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d006      	beq.n	800304c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3301      	adds	r3, #1
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b0f      	cmp	r3, #15
 8003048:	d9e9      	bls.n	800301e <prvInitialiseNewTask+0x4e>
 800304a:	e000      	b.n	800304e <prvInitialiseNewTask+0x7e>
		{
			break;
 800304c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	2b06      	cmp	r3, #6
 800305a:	d901      	bls.n	8003060 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800305c:	2306      	movs	r3, #6
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800306a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	2200      	movs	r2, #0
 8003070:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	3304      	adds	r3, #4
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fe79 	bl	8002d6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	3318      	adds	r3, #24
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fe74 	bl	8002d6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	f1c3 0207 	rsb	r2, r3, #7
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	2200      	movs	r2, #0
 80030a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	68f9      	ldr	r1, [r7, #12]
 80030ae:	69b8      	ldr	r0, [r7, #24]
 80030b0:	f000 fc2c 	bl	800390c <pxPortInitialiseStack>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030c6:	bf00      	nop
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80030d8:	f000 fd08 	bl	8003aec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80030dc:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <prvAddNewTaskToReadyList+0xb8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a29      	ldr	r2, [pc, #164]	; (8003188 <prvAddNewTaskToReadyList+0xb8>)
 80030e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030e6:	4b29      	ldr	r3, [pc, #164]	; (800318c <prvAddNewTaskToReadyList+0xbc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030ee:	4a27      	ldr	r2, [pc, #156]	; (800318c <prvAddNewTaskToReadyList+0xbc>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <prvAddNewTaskToReadyList+0xb8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d110      	bne.n	800311e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030fc:	f000 fac0 	bl	8003680 <prvInitialiseTaskLists>
 8003100:	e00d      	b.n	800311e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003102:	4b23      	ldr	r3, [pc, #140]	; (8003190 <prvAddNewTaskToReadyList+0xc0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <prvAddNewTaskToReadyList+0xbc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	429a      	cmp	r2, r3
 8003116:	d802      	bhi.n	800311e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003118:	4a1c      	ldr	r2, [pc, #112]	; (800318c <prvAddNewTaskToReadyList+0xbc>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <prvAddNewTaskToReadyList+0xc4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3301      	adds	r3, #1
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <prvAddNewTaskToReadyList+0xc4>)
 8003126:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	4b19      	ldr	r3, [pc, #100]	; (8003198 <prvAddNewTaskToReadyList+0xc8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4313      	orrs	r3, r2
 8003136:	4a18      	ldr	r2, [pc, #96]	; (8003198 <prvAddNewTaskToReadyList+0xc8>)
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4a15      	ldr	r2, [pc, #84]	; (800319c <prvAddNewTaskToReadyList+0xcc>)
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7ff fe18 	bl	8002d86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003156:	f000 fcf9 	bl	8003b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <prvAddNewTaskToReadyList+0xc0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <prvAddNewTaskToReadyList+0xbc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <prvAddNewTaskToReadyList+0xd0>)
 8003172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	200005bc 	.word	0x200005bc
 800318c:	200004bc 	.word	0x200004bc
 8003190:	200005c8 	.word	0x200005c8
 8003194:	200005d8 	.word	0x200005d8
 8003198:	200005c4 	.word	0x200005c4
 800319c:	200004c0 	.word	0x200004c0
 80031a0:	e000ed04 	.word	0xe000ed04

080031a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <vTaskDelay+0x60>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <vTaskDelay+0x30>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	60bb      	str	r3, [r7, #8]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80031d4:	f000 f87a 	bl	80032cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031d8:	2100      	movs	r1, #0
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fb30 	bl	8003840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031e0:	f000 f882 	bl	80032e8 <xTaskResumeAll>
 80031e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <vTaskDelay+0x64>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	200005e4 	.word	0x200005e4
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800321a:	463a      	mov	r2, r7
 800321c:	1d39      	adds	r1, r7, #4
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fa40 	bl	80006a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	9202      	str	r2, [sp, #8]
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2300      	movs	r3, #0
 8003238:	460a      	mov	r2, r1
 800323a:	491e      	ldr	r1, [pc, #120]	; (80032b4 <vTaskStartScheduler+0xa8>)
 800323c:	481e      	ldr	r0, [pc, #120]	; (80032b8 <vTaskStartScheduler+0xac>)
 800323e:	f7ff fe26 	bl	8002e8e <xTaskCreateStatic>
 8003242:	4603      	mov	r3, r0
 8003244:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <vTaskStartScheduler+0xb0>)
 8003246:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003248:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <vTaskStartScheduler+0xb0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003250:	2301      	movs	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e001      	b.n	800325a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d116      	bne.n	800328e <vTaskStartScheduler+0x82>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	613b      	str	r3, [r7, #16]
}
 8003272:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <vTaskStartScheduler+0xb4>)
 8003276:	f04f 32ff 	mov.w	r2, #4294967295
 800327a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <vTaskStartScheduler+0xb8>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <vTaskStartScheduler+0xbc>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003288:	f000 fbbe 	bl	8003a08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800328c:	e00e      	b.n	80032ac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d10a      	bne.n	80032ac <vTaskStartScheduler+0xa0>
	__asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	60fb      	str	r3, [r7, #12]
}
 80032a8:	bf00      	nop
 80032aa:	e7fe      	b.n	80032aa <vTaskStartScheduler+0x9e>
}
 80032ac:	bf00      	nop
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	080040b8 	.word	0x080040b8
 80032b8:	08003651 	.word	0x08003651
 80032bc:	200005e0 	.word	0x200005e0
 80032c0:	200005dc 	.word	0x200005dc
 80032c4:	200005c8 	.word	0x200005c8
 80032c8:	200005c0 	.word	0x200005c0

080032cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <vTaskSuspendAll+0x18>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	4a03      	ldr	r2, [pc, #12]	; (80032e4 <vTaskSuspendAll+0x18>)
 80032d8:	6013      	str	r3, [r2, #0]
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	200005e4 	.word	0x200005e4

080032e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <xTaskResumeAll+0x114>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <xTaskResumeAll+0x2c>
	__asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	603b      	str	r3, [r7, #0]
}
 8003310:	bf00      	nop
 8003312:	e7fe      	b.n	8003312 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003314:	f000 fbea 	bl	8003aec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003318:	4b38      	ldr	r3, [pc, #224]	; (80033fc <xTaskResumeAll+0x114>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3b01      	subs	r3, #1
 800331e:	4a37      	ldr	r2, [pc, #220]	; (80033fc <xTaskResumeAll+0x114>)
 8003320:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <xTaskResumeAll+0x114>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d161      	bne.n	80033ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800332a:	4b35      	ldr	r3, [pc, #212]	; (8003400 <xTaskResumeAll+0x118>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d05d      	beq.n	80033ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003332:	e02e      	b.n	8003392 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003334:	4b33      	ldr	r3, [pc, #204]	; (8003404 <xTaskResumeAll+0x11c>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3318      	adds	r3, #24
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fd7b 	bl	8002e3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3304      	adds	r3, #4
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fd76 	bl	8002e3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
 8003358:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <xTaskResumeAll+0x120>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4313      	orrs	r3, r2
 800335e:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <xTaskResumeAll+0x120>)
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4a27      	ldr	r2, [pc, #156]	; (800340c <xTaskResumeAll+0x124>)
 8003370:	441a      	add	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3304      	adds	r3, #4
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f7ff fd04 	bl	8002d86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <xTaskResumeAll+0x128>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	429a      	cmp	r2, r3
 800338a:	d302      	bcc.n	8003392 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800338c:	4b21      	ldr	r3, [pc, #132]	; (8003414 <xTaskResumeAll+0x12c>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003392:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <xTaskResumeAll+0x11c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1cc      	bne.n	8003334 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033a0:	f000 fa0c 	bl	80037bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80033a4:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <xTaskResumeAll+0x130>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033b0:	f000 f836 	bl	8003420 <xTaskIncrementTick>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <xTaskResumeAll+0x12c>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f1      	bne.n	80033b0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <xTaskResumeAll+0x130>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033d2:	4b10      	ldr	r3, [pc, #64]	; (8003414 <xTaskResumeAll+0x12c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033da:	2301      	movs	r3, #1
 80033dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <xTaskResumeAll+0x134>)
 80033e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033ee:	f000 fbad 	bl	8003b4c <vPortExitCritical>

	return xAlreadyYielded;
 80033f2:	68bb      	ldr	r3, [r7, #8]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200005e4 	.word	0x200005e4
 8003400:	200005bc 	.word	0x200005bc
 8003404:	2000057c 	.word	0x2000057c
 8003408:	200005c4 	.word	0x200005c4
 800340c:	200004c0 	.word	0x200004c0
 8003410:	200004bc 	.word	0x200004bc
 8003414:	200005d0 	.word	0x200005d0
 8003418:	200005cc 	.word	0x200005cc
 800341c:	e000ed04 	.word	0xe000ed04

08003420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800342a:	4b51      	ldr	r3, [pc, #324]	; (8003570 <xTaskIncrementTick+0x150>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 808d 	bne.w	800354e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <xTaskIncrementTick+0x154>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800343c:	4a4d      	ldr	r2, [pc, #308]	; (8003574 <xTaskIncrementTick+0x154>)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d120      	bne.n	800348a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003448:	4b4b      	ldr	r3, [pc, #300]	; (8003578 <xTaskIncrementTick+0x158>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <xTaskIncrementTick+0x48>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	603b      	str	r3, [r7, #0]
}
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <xTaskIncrementTick+0x46>
 8003468:	4b43      	ldr	r3, [pc, #268]	; (8003578 <xTaskIncrementTick+0x158>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b43      	ldr	r3, [pc, #268]	; (800357c <xTaskIncrementTick+0x15c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a41      	ldr	r2, [pc, #260]	; (8003578 <xTaskIncrementTick+0x158>)
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4a41      	ldr	r2, [pc, #260]	; (800357c <xTaskIncrementTick+0x15c>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b40      	ldr	r3, [pc, #256]	; (8003580 <xTaskIncrementTick+0x160>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	4a3f      	ldr	r2, [pc, #252]	; (8003580 <xTaskIncrementTick+0x160>)
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	f000 f999 	bl	80037bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800348a:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <xTaskIncrementTick+0x164>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d34d      	bcc.n	8003530 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003494:	4b38      	ldr	r3, [pc, #224]	; (8003578 <xTaskIncrementTick+0x158>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <xTaskIncrementTick+0x82>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <xTaskIncrementTick+0x84>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a8:	4b36      	ldr	r3, [pc, #216]	; (8003584 <xTaskIncrementTick+0x164>)
 80034aa:	f04f 32ff 	mov.w	r2, #4294967295
 80034ae:	601a      	str	r2, [r3, #0]
					break;
 80034b0:	e03e      	b.n	8003530 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034b2:	4b31      	ldr	r3, [pc, #196]	; (8003578 <xTaskIncrementTick+0x158>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d203      	bcs.n	80034d2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <xTaskIncrementTick+0x164>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6013      	str	r3, [r2, #0]
						break;
 80034d0:	e02e      	b.n	8003530 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fcb0 	bl	8002e3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3318      	adds	r3, #24
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fca7 	bl	8002e3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	2201      	movs	r2, #1
 80034f4:	409a      	lsls	r2, r3
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <xTaskIncrementTick+0x168>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <xTaskIncrementTick+0x168>)
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4a1f      	ldr	r2, [pc, #124]	; (800358c <xTaskIncrementTick+0x16c>)
 800350e:	441a      	add	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	3304      	adds	r3, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f7ff fc35 	bl	8002d86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <xTaskIncrementTick+0x170>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	429a      	cmp	r2, r3
 8003528:	d3b4      	bcc.n	8003494 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800352a:	2301      	movs	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800352e:	e7b1      	b.n	8003494 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003530:	4b17      	ldr	r3, [pc, #92]	; (8003590 <xTaskIncrementTick+0x170>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003536:	4915      	ldr	r1, [pc, #84]	; (800358c <xTaskIncrementTick+0x16c>)
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d907      	bls.n	8003558 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003548:	2301      	movs	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	e004      	b.n	8003558 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <xTaskIncrementTick+0x174>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	4a0f      	ldr	r2, [pc, #60]	; (8003594 <xTaskIncrementTick+0x174>)
 8003556:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <xTaskIncrementTick+0x178>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003560:	2301      	movs	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003564:	697b      	ldr	r3, [r7, #20]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200005e4 	.word	0x200005e4
 8003574:	200005c0 	.word	0x200005c0
 8003578:	20000574 	.word	0x20000574
 800357c:	20000578 	.word	0x20000578
 8003580:	200005d4 	.word	0x200005d4
 8003584:	200005dc 	.word	0x200005dc
 8003588:	200005c4 	.word	0x200005c4
 800358c:	200004c0 	.word	0x200004c0
 8003590:	200004bc 	.word	0x200004bc
 8003594:	200005cc 	.word	0x200005cc
 8003598:	200005d0 	.word	0x200005d0

0800359c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <vTaskSwitchContext+0xa0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035aa:	4b25      	ldr	r3, [pc, #148]	; (8003640 <vTaskSwitchContext+0xa4>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035b0:	e03f      	b.n	8003632 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80035b2:	4b23      	ldr	r3, [pc, #140]	; (8003640 <vTaskSwitchContext+0xa4>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80035b8:	4b22      	ldr	r3, [pc, #136]	; (8003644 <vTaskSwitchContext+0xa8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f1c3 031f 	rsb	r3, r3, #31
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	491e      	ldr	r1, [pc, #120]	; (8003648 <vTaskSwitchContext+0xac>)
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	607b      	str	r3, [r7, #4]
}
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <vTaskSwitchContext+0x5a>
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a11      	ldr	r2, [pc, #68]	; (8003648 <vTaskSwitchContext+0xac>)
 8003604:	4413      	add	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3308      	adds	r3, #8
 800361a:	429a      	cmp	r2, r3
 800361c:	d104      	bne.n	8003628 <vTaskSwitchContext+0x8c>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	4a07      	ldr	r2, [pc, #28]	; (800364c <vTaskSwitchContext+0xb0>)
 8003630:	6013      	str	r3, [r2, #0]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	200005e4 	.word	0x200005e4
 8003640:	200005d0 	.word	0x200005d0
 8003644:	200005c4 	.word	0x200005c4
 8003648:	200004c0 	.word	0x200004c0
 800364c:	200004bc 	.word	0x200004bc

08003650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003658:	f000 f852 	bl	8003700 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <prvIdleTask+0x28>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d9f9      	bls.n	8003658 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <prvIdleTask+0x2c>)
 8003666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003674:	e7f0      	b.n	8003658 <prvIdleTask+0x8>
 8003676:	bf00      	nop
 8003678:	200004c0 	.word	0x200004c0
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e00c      	b.n	80036a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <prvInitialiseTaskLists+0x60>)
 8003698:	4413      	add	r3, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fb48 	bl	8002d30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d9ef      	bls.n	800368c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036ac:	480d      	ldr	r0, [pc, #52]	; (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ae:	f7ff fb3f 	bl	8002d30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036b2:	480d      	ldr	r0, [pc, #52]	; (80036e8 <prvInitialiseTaskLists+0x68>)
 80036b4:	f7ff fb3c 	bl	8002d30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036b8:	480c      	ldr	r0, [pc, #48]	; (80036ec <prvInitialiseTaskLists+0x6c>)
 80036ba:	f7ff fb39 	bl	8002d30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036be:	480c      	ldr	r0, [pc, #48]	; (80036f0 <prvInitialiseTaskLists+0x70>)
 80036c0:	f7ff fb36 	bl	8002d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <prvInitialiseTaskLists+0x74>)
 80036c6:	f7ff fb33 	bl	8002d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <prvInitialiseTaskLists+0x78>)
 80036cc:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <prvInitialiseTaskLists+0x7c>)
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <prvInitialiseTaskLists+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200004c0 	.word	0x200004c0
 80036e4:	2000054c 	.word	0x2000054c
 80036e8:	20000560 	.word	0x20000560
 80036ec:	2000057c 	.word	0x2000057c
 80036f0:	20000590 	.word	0x20000590
 80036f4:	200005a8 	.word	0x200005a8
 80036f8:	20000574 	.word	0x20000574
 80036fc:	20000578 	.word	0x20000578

08003700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003706:	e019      	b.n	800373c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003708:	f000 f9f0 	bl	8003aec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <prvCheckTasksWaitingTermination+0x50>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fb8f 	bl	8002e3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003726:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3b01      	subs	r3, #1
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 8003730:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003732:	f000 fa0b 	bl	8003b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f810 	bl	800375c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e1      	bne.n	8003708 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000590 	.word	0x20000590
 8003754:	200005bc 	.word	0x200005bc
 8003758:	200005a4 	.word	0x200005a4

0800375c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fb40 	bl	8003df8 <vPortFree>
				vPortFree( pxTCB );
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fb3d 	bl	8003df8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800377e:	e018      	b.n	80037b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003786:	2b01      	cmp	r3, #1
 8003788:	d103      	bne.n	8003792 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fb34 	bl	8003df8 <vPortFree>
	}
 8003790:	e00f      	b.n	80037b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003798:	2b02      	cmp	r3, #2
 800379a:	d00a      	beq.n	80037b2 <prvDeleteTCB+0x56>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	60fb      	str	r3, [r7, #12]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <prvDeleteTCB+0x54>
	}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <prvResetNextTaskUnblockTime+0x40>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <prvResetNextTaskUnblockTime+0x14>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <prvResetNextTaskUnblockTime+0x16>
 80037d0:	2300      	movs	r3, #0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <prvResetNextTaskUnblockTime+0x44>)
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295
 80037dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037de:	e008      	b.n	80037f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <prvResetNextTaskUnblockTime+0x40>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <prvResetNextTaskUnblockTime+0x44>)
 80037f0:	6013      	str	r3, [r2, #0]
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	20000574 	.word	0x20000574
 8003800:	200005dc 	.word	0x200005dc

08003804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <xTaskGetSchedulerState+0x34>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003812:	2301      	movs	r3, #1
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	e008      	b.n	800382a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <xTaskGetSchedulerState+0x38>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003820:	2302      	movs	r3, #2
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	e001      	b.n	800382a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800382a:	687b      	ldr	r3, [r7, #4]
	}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	200005c8 	.word	0x200005c8
 800383c:	200005e4 	.word	0x200005e4

08003840 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800384a:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003850:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3304      	adds	r3, #4
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff faf0 	bl	8002e3c <uxListRemove>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	2201      	movs	r2, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43da      	mvns	r2, r3
 8003870:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4013      	ands	r3, r2
 8003876:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003878:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d10a      	bne.n	8003898 <prvAddCurrentTaskToDelayedList+0x58>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3304      	adds	r3, #4
 800388e:	4619      	mov	r1, r3
 8003890:	481a      	ldr	r0, [pc, #104]	; (80038fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003892:	f7ff fa78 	bl	8002d86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003896:	e026      	b.n	80038e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d209      	bcs.n	80038c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3304      	adds	r3, #4
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f7ff fa85 	bl	8002dcc <vListInsert>
}
 80038c2:	e010      	b.n	80038e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <prvAddCurrentTaskToDelayedList+0xc4>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7ff fa7b 	bl	8002dcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d202      	bcs.n	80038e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80038e0:	4a09      	ldr	r2, [pc, #36]	; (8003908 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	6013      	str	r3, [r2, #0]
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200005c0 	.word	0x200005c0
 80038f4:	200004bc 	.word	0x200004bc
 80038f8:	200005c4 	.word	0x200005c4
 80038fc:	200005a8 	.word	0x200005a8
 8003900:	20000578 	.word	0x20000578
 8003904:	20000574 	.word	0x20000574
 8003908:	200005dc 	.word	0x200005dc

0800390c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3b04      	subs	r3, #4
 800391c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3b04      	subs	r3, #4
 800392a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f023 0201 	bic.w	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3b04      	subs	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800393c:	4a08      	ldr	r2, [pc, #32]	; (8003960 <pxPortInitialiseStack+0x54>)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3b14      	subs	r3, #20
 8003946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b20      	subs	r3, #32
 8003952:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003954:	68fb      	ldr	r3, [r7, #12]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	08003965 	.word	0x08003965

08003964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800396e:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <prvTaskExitError+0x54>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d00a      	beq.n	800398e <prvTaskExitError+0x2a>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	60fb      	str	r3, [r7, #12]
}
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <prvTaskExitError+0x28>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	60bb      	str	r3, [r7, #8]
}
 80039a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039a2:	bf00      	nop
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0fc      	beq.n	80039a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	2000000c 	.word	0x2000000c
 80039bc:	00000000 	.word	0x00000000

080039c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <pxCurrentTCBConst2>)
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	6808      	ldr	r0, [r1, #0]
 80039c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039ca:	f380 8809 	msr	PSP, r0
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f380 8811 	msr	BASEPRI, r0
 80039da:	f04e 0e0d 	orr.w	lr, lr, #13
 80039de:	4770      	bx	lr

080039e0 <pxCurrentTCBConst2>:
 80039e0:	200004bc 	.word	0x200004bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop

080039e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80039e8:	4806      	ldr	r0, [pc, #24]	; (8003a04 <prvPortStartFirstTask+0x1c>)
 80039ea:	6800      	ldr	r0, [r0, #0]
 80039ec:	6800      	ldr	r0, [r0, #0]
 80039ee:	f380 8808 	msr	MSP, r0
 80039f2:	b662      	cpsie	i
 80039f4:	b661      	cpsie	f
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	df00      	svc	0
 8003a00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a02:	bf00      	nop
 8003a04:	e000ed08 	.word	0xe000ed08

08003a08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a0e:	4b32      	ldr	r3, [pc, #200]	; (8003ad8 <xPortStartScheduler+0xd0>)
 8003a10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	22ff      	movs	r2, #255	; 0xff
 8003a1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <xPortStartScheduler+0xd4>)
 8003a34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a36:	4b2a      	ldr	r3, [pc, #168]	; (8003ae0 <xPortStartScheduler+0xd8>)
 8003a38:	2207      	movs	r2, #7
 8003a3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a3c:	e009      	b.n	8003a52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <xPortStartScheduler+0xd8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	4a26      	ldr	r2, [pc, #152]	; (8003ae0 <xPortStartScheduler+0xd8>)
 8003a46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d0ef      	beq.n	8003a3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <xPortStartScheduler+0xd8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f1c3 0307 	rsb	r3, r3, #7
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d00a      	beq.n	8003a80 <xPortStartScheduler+0x78>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	60bb      	str	r3, [r7, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	e7fe      	b.n	8003a7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <xPortStartScheduler+0xd8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	4a16      	ldr	r2, [pc, #88]	; (8003ae0 <xPortStartScheduler+0xd8>)
 8003a88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a8a:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <xPortStartScheduler+0xd8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a92:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <xPortStartScheduler+0xd8>)
 8003a94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <xPortStartScheduler+0xdc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a10      	ldr	r2, [pc, #64]	; (8003ae4 <xPortStartScheduler+0xdc>)
 8003aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <xPortStartScheduler+0xdc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <xPortStartScheduler+0xdc>)
 8003ab0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ab4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ab6:	f000 f8b9 	bl	8003c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <xPortStartScheduler+0xe0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ac0:	f7ff ff92 	bl	80039e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ac4:	f7ff fd6a 	bl	800359c <vTaskSwitchContext>
	prvTaskExitError();
 8003ac8:	f7ff ff4c 	bl	8003964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	e000e400 	.word	0xe000e400
 8003adc:	200005e8 	.word	0x200005e8
 8003ae0:	200005ec 	.word	0x200005ec
 8003ae4:	e000ed20 	.word	0xe000ed20
 8003ae8:	2000000c 	.word	0x2000000c

08003aec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	607b      	str	r3, [r7, #4]
}
 8003b04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <vPortEnterCritical+0x58>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <vPortEnterCritical+0x58>)
 8003b0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <vPortEnterCritical+0x58>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d10f      	bne.n	8003b38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <vPortEnterCritical+0x5c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <vPortEnterCritical+0x4c>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	603b      	str	r3, [r7, #0]
}
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <vPortEnterCritical+0x4a>
	}
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	2000000c 	.word	0x2000000c
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <vPortExitCritical+0x4c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <vPortExitCritical+0x24>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	607b      	str	r3, [r7, #4]
}
 8003b6c:	bf00      	nop
 8003b6e:	e7fe      	b.n	8003b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <vPortExitCritical+0x4c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	4a08      	ldr	r2, [pc, #32]	; (8003b98 <vPortExitCritical+0x4c>)
 8003b78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <vPortExitCritical+0x4c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d105      	bne.n	8003b8e <vPortExitCritical+0x42>
 8003b82:	2300      	movs	r3, #0
 8003b84:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	2000000c 	.word	0x2000000c
 8003b9c:	00000000 	.word	0x00000000

08003ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ba0:	f3ef 8009 	mrs	r0, PSP
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <pxCurrentTCBConst>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bb0:	6010      	str	r0, [r2, #0]
 8003bb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003bb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003bba:	f380 8811 	msr	BASEPRI, r0
 8003bbe:	f7ff fced 	bl	800359c <vTaskSwitchContext>
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f380 8811 	msr	BASEPRI, r0
 8003bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	6808      	ldr	r0, [r1, #0]
 8003bd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bd6:	f380 8809 	msr	PSP, r0
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	4770      	bx	lr

08003be0 <pxCurrentTCBConst>:
 8003be0:	200004bc 	.word	0x200004bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop

08003be8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	607b      	str	r3, [r7, #4]
}
 8003c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c02:	f7ff fc0d 	bl	8003420 <xTaskIncrementTick>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <xPortSysTickHandler+0x40>)
 8003c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	f383 8811 	msr	BASEPRI, r3
}
 8003c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <vPortSetupTimerInterrupt+0x30>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <vPortSetupTimerInterrupt+0x34>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <vPortSetupTimerInterrupt+0x38>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <vPortSetupTimerInterrupt+0x3c>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	4a08      	ldr	r2, [pc, #32]	; (8003c6c <vPortSetupTimerInterrupt+0x40>)
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c4e:	4b03      	ldr	r3, [pc, #12]	; (8003c5c <vPortSetupTimerInterrupt+0x30>)
 8003c50:	2207      	movs	r2, #7
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	e000e010 	.word	0xe000e010
 8003c60:	e000e018 	.word	0xe000e018
 8003c64:	20000000 	.word	0x20000000
 8003c68:	10624dd3 	.word	0x10624dd3
 8003c6c:	e000e014 	.word	0xe000e014

08003c70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c7c:	f7ff fb26 	bl	80032cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c80:	4b58      	ldr	r3, [pc, #352]	; (8003de4 <pvPortMalloc+0x174>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c88:	f000 f910 	bl	8003eac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c8c:	4b56      	ldr	r3, [pc, #344]	; (8003de8 <pvPortMalloc+0x178>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f040 808e 	bne.w	8003db6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01d      	beq.n	8003cdc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d014      	beq.n	8003cdc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f023 0307 	bic.w	r3, r3, #7
 8003cb8:	3308      	adds	r3, #8
 8003cba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <pvPortMalloc+0x6c>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	617b      	str	r3, [r7, #20]
}
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d069      	beq.n	8003db6 <pvPortMalloc+0x146>
 8003ce2:	4b42      	ldr	r3, [pc, #264]	; (8003dec <pvPortMalloc+0x17c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d864      	bhi.n	8003db6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cec:	4b40      	ldr	r3, [pc, #256]	; (8003df0 <pvPortMalloc+0x180>)
 8003cee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cf0:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <pvPortMalloc+0x180>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cf6:	e004      	b.n	8003d02 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d903      	bls.n	8003d14 <pvPortMalloc+0xa4>
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f1      	bne.n	8003cf8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d14:	4b33      	ldr	r3, [pc, #204]	; (8003de4 <pvPortMalloc+0x174>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d04b      	beq.n	8003db6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2208      	movs	r2, #8
 8003d24:	4413      	add	r3, r2
 8003d26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	1ad2      	subs	r2, r2, r3
 8003d38:	2308      	movs	r3, #8
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d91f      	bls.n	8003d80 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <pvPortMalloc+0xf8>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	613b      	str	r3, [r7, #16]
}
 8003d64:	bf00      	nop
 8003d66:	e7fe      	b.n	8003d66 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	1ad2      	subs	r2, r2, r3
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d7a:	69b8      	ldr	r0, [r7, #24]
 8003d7c:	f000 f8f8 	bl	8003f70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d80:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <pvPortMalloc+0x17c>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	4a18      	ldr	r2, [pc, #96]	; (8003dec <pvPortMalloc+0x17c>)
 8003d8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <pvPortMalloc+0x17c>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <pvPortMalloc+0x184>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d203      	bcs.n	8003da2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d9a:	4b14      	ldr	r3, [pc, #80]	; (8003dec <pvPortMalloc+0x17c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <pvPortMalloc+0x184>)
 8003da0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <pvPortMalloc+0x178>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003db6:	f7ff fa97 	bl	80032e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <pvPortMalloc+0x16a>
	__asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	60fb      	str	r3, [r7, #12]
}
 8003dd6:	bf00      	nop
 8003dd8:	e7fe      	b.n	8003dd8 <pvPortMalloc+0x168>
	return pvReturn;
 8003dda:	69fb      	ldr	r3, [r7, #28]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3728      	adds	r7, #40	; 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	200011f8 	.word	0x200011f8
 8003de8:	20001204 	.word	0x20001204
 8003dec:	200011fc 	.word	0x200011fc
 8003df0:	200011f0 	.word	0x200011f0
 8003df4:	20001200 	.word	0x20001200

08003df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d048      	beq.n	8003e9c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	425b      	negs	r3, r3
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4413      	add	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <vPortFree+0xac>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <vPortFree+0x44>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60fb      	str	r3, [r7, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <vPortFree+0x62>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	60bb      	str	r3, [r7, #8]
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <vPortFree+0xac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d019      	beq.n	8003e9c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d115      	bne.n	8003e9c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <vPortFree+0xac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e80:	f7ff fa24 	bl	80032cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <vPortFree+0xb0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4a06      	ldr	r2, [pc, #24]	; (8003ea8 <vPortFree+0xb0>)
 8003e90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e92:	6938      	ldr	r0, [r7, #16]
 8003e94:	f000 f86c 	bl	8003f70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e98:	f7ff fa26 	bl	80032e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e9c:	bf00      	nop
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20001204 	.word	0x20001204
 8003ea8:	200011fc 	.word	0x200011fc

08003eac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003eb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003eb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003eb8:	4b27      	ldr	r3, [pc, #156]	; (8003f58 <prvHeapInit+0xac>)
 8003eba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00c      	beq.n	8003ee0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3307      	adds	r3, #7
 8003eca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	4a1f      	ldr	r2, [pc, #124]	; (8003f58 <prvHeapInit+0xac>)
 8003edc:	4413      	add	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <prvHeapInit+0xb0>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003eea:	4b1c      	ldr	r3, [pc, #112]	; (8003f5c <prvHeapInit+0xb0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ef8:	2208      	movs	r2, #8
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0307 	bic.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <prvHeapInit+0xb4>)
 8003f0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f0e:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <prvHeapInit+0xb4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2200      	movs	r2, #0
 8003f14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <prvHeapInit+0xb4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	1ad2      	subs	r2, r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <prvHeapInit+0xb4>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <prvHeapInit+0xb8>)
 8003f3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <prvHeapInit+0xbc>)
 8003f42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f44:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <prvHeapInit+0xc0>)
 8003f46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f4a:	601a      	str	r2, [r3, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	200005f0 	.word	0x200005f0
 8003f5c:	200011f0 	.word	0x200011f0
 8003f60:	200011f8 	.word	0x200011f8
 8003f64:	20001200 	.word	0x20001200
 8003f68:	200011fc 	.word	0x200011fc
 8003f6c:	20001204 	.word	0x20001204

08003f70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <prvInsertBlockIntoFreeList+0xa8>)
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e002      	b.n	8003f84 <prvInsertBlockIntoFreeList+0x14>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d8f7      	bhi.n	8003f7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	4413      	add	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d108      	bne.n	8003fb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	441a      	add	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d118      	bne.n	8003ff8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <prvInsertBlockIntoFreeList+0xac>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d00d      	beq.n	8003fee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e008      	b.n	8004000 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <prvInsertBlockIntoFreeList+0xac>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	e003      	b.n	8004000 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	d002      	beq.n	800400e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	200011f0 	.word	0x200011f0
 800401c:	200011f8 	.word	0x200011f8

08004020 <memset>:
 8004020:	4603      	mov	r3, r0
 8004022:	4402      	add	r2, r0
 8004024:	4293      	cmp	r3, r2
 8004026:	d100      	bne.n	800402a <memset+0xa>
 8004028:	4770      	bx	lr
 800402a:	f803 1b01 	strb.w	r1, [r3], #1
 800402e:	e7f9      	b.n	8004024 <memset+0x4>

08004030 <__libc_init_array>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	2600      	movs	r6, #0
 8004034:	4d0c      	ldr	r5, [pc, #48]	; (8004068 <__libc_init_array+0x38>)
 8004036:	4c0d      	ldr	r4, [pc, #52]	; (800406c <__libc_init_array+0x3c>)
 8004038:	1b64      	subs	r4, r4, r5
 800403a:	10a4      	asrs	r4, r4, #2
 800403c:	42a6      	cmp	r6, r4
 800403e:	d109      	bne.n	8004054 <__libc_init_array+0x24>
 8004040:	f000 f81a 	bl	8004078 <_init>
 8004044:	2600      	movs	r6, #0
 8004046:	4d0a      	ldr	r5, [pc, #40]	; (8004070 <__libc_init_array+0x40>)
 8004048:	4c0a      	ldr	r4, [pc, #40]	; (8004074 <__libc_init_array+0x44>)
 800404a:	1b64      	subs	r4, r4, r5
 800404c:	10a4      	asrs	r4, r4, #2
 800404e:	42a6      	cmp	r6, r4
 8004050:	d105      	bne.n	800405e <__libc_init_array+0x2e>
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	f855 3b04 	ldr.w	r3, [r5], #4
 8004058:	4798      	blx	r3
 800405a:	3601      	adds	r6, #1
 800405c:	e7ee      	b.n	800403c <__libc_init_array+0xc>
 800405e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004062:	4798      	blx	r3
 8004064:	3601      	adds	r6, #1
 8004066:	e7f2      	b.n	800404e <__libc_init_array+0x1e>
 8004068:	080040e4 	.word	0x080040e4
 800406c:	080040e4 	.word	0x080040e4
 8004070:	080040e4 	.word	0x080040e4
 8004074:	080040e8 	.word	0x080040e8

08004078 <_init>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr

08004084 <_fini>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr
