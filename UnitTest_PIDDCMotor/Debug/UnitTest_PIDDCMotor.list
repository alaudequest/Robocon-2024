
UnitTest_PIDDCMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004150  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042bc  080042bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080042bc  080042bc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042bc  080042bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080042c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001224  20000010  080042d4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001234  080042d4  00021234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dea4  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280e  00000000  00000000  0002df20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00030730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3e  00000000  00000000  000315e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000031cb  00000000  00000000  0003211e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010348  00000000  00000000  000352e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fcb4  00000000  00000000  00045631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c90  00000000  00000000  000d52e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  000d8f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004248 	.word	0x08004248

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004248 	.word	0x08004248

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2iz>:
 80004c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004d0:	d215      	bcs.n	80004fe <__aeabi_d2iz+0x36>
 80004d2:	d511      	bpl.n	80004f8 <__aeabi_d2iz+0x30>
 80004d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004dc:	d912      	bls.n	8000504 <__aeabi_d2iz+0x3c>
 80004de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ee:	fa23 f002 	lsr.w	r0, r3, r2
 80004f2:	bf18      	it	ne
 80004f4:	4240      	negne	r0, r0
 80004f6:	4770      	bx	lr
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	4770      	bx	lr
 80004fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000502:	d105      	bne.n	8000510 <__aeabi_d2iz+0x48>
 8000504:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000508:	bf08      	it	eq
 800050a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800050e:	4770      	bx	lr
 8000510:	f04f 0000 	mov.w	r0, #0
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <__aeabi_d2f>:
 8000518:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800051c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000520:	bf24      	itt	cs
 8000522:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000526:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800052a:	d90d      	bls.n	8000548 <__aeabi_d2f+0x30>
 800052c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000530:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000534:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000538:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800053c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000540:	bf08      	it	eq
 8000542:	f020 0001 	biceq.w	r0, r0, #1
 8000546:	4770      	bx	lr
 8000548:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800054c:	d121      	bne.n	8000592 <__aeabi_d2f+0x7a>
 800054e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000552:	bfbc      	itt	lt
 8000554:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000558:	4770      	bxlt	lr
 800055a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800055e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000562:	f1c2 0218 	rsb	r2, r2, #24
 8000566:	f1c2 0c20 	rsb	ip, r2, #32
 800056a:	fa10 f30c 	lsls.w	r3, r0, ip
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	bf18      	it	ne
 8000574:	f040 0001 	orrne.w	r0, r0, #1
 8000578:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800057c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000580:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000584:	ea40 000c 	orr.w	r0, r0, ip
 8000588:	fa23 f302 	lsr.w	r3, r3, r2
 800058c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000590:	e7cc      	b.n	800052c <__aeabi_d2f+0x14>
 8000592:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000596:	d107      	bne.n	80005a8 <__aeabi_d2f+0x90>
 8000598:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800059c:	bf1e      	ittt	ne
 800059e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bxne	lr
 80005a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	enc->htim = htim;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 80005d0:	68f9      	ldr	r1, [r7, #12]
 80005d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80005d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <CountRead>:
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
	enc->vel_Pre = enc->vel_Real;
	enc->count_Pre = enc->count_X4;
}

double CountRead(EncoderRead *enc,uint8_t count_mode){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	78fa      	ldrb	r2, [r7, #3]
 80005f4:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005fe:	b21a      	sxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800060e:	441a      	add	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7e1b      	ldrb	r3, [r3, #24]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d107      	bne.n	8000636 <CountRead+0x52>
	{
		return enc->count_X4;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fee2 	bl	80003f4 <__aeabi_i2d>
 8000630:	4602      	mov	r2, r0
 8000632:	460b      	mov	r3, r1
 8000634:	e033      	b.n	800069e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7e1b      	ldrb	r3, [r3, #24]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d110      	bne.n	8000660 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	2b00      	cmp	r3, #0
 8000644:	da00      	bge.n	8000648 <CountRead+0x64>
 8000646:	3303      	adds	r3, #3
 8000648:	109b      	asrs	r3, r3, #2
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fecd 	bl	80003f4 <__aeabi_i2d>
 800065a:	4602      	mov	r2, r0
 800065c:	460b      	mov	r3, r1
 800065e:	e01e      	b.n	800069e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7e1b      	ldrb	r3, [r3, #24]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d116      	bne.n	8000696 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000670:	fb03 f202 	mul.w	r2, r3, r2
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	fb92 f3f3 	sdiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff feb8 	bl	80003f4 <__aeabi_i2d>
 8000684:	4602      	mov	r2, r0
 8000686:	460b      	mov	r3, r1
 8000688:	6879      	ldr	r1, [r7, #4]
 800068a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000694:	e003      	b.n	800069e <CountRead+0xba>
	}else {
		return 0;
 8000696:	f04f 0200 	mov.w	r2, #0
 800069a:	f04f 0300 	mov.w	r3, #0
	}
}
 800069e:	4610      	mov	r0, r2
 80006a0:	4619      	mov	r1, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <Pid_SetParam>:
#include <PID.h>
#include "stdlib.h"

//-----------------------------------------------Begin: Setting Parameter for PID------------------------------------------//
void Pid_SetParam(PID_Param *pid,double kP,double kI,double kD,double alpha,double deltaT,double uI_AboveLimit,double uI_BelowLimit,double u_AboveLimit,double u_BelowLimit)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	e9c7 2300 	strd	r2, r3, [r7]
//----------------------Term-----------------------//
	pid->kP = kP;
 80006b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80006b8:	f7ff ff2e 	bl	8000518 <__aeabi_d2f>
 80006bc:	4602      	mov	r2, r0
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
	pid->kI = kI;
 80006c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80006c6:	f7ff ff27 	bl	8000518 <__aeabi_d2f>
 80006ca:	4602      	mov	r2, r0
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38
	pid->kD = kD;
 80006d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80006d4:	f7ff ff20 	bl	8000518 <__aeabi_d2f>
 80006d8:	4602      	mov	r2, r0
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	659a      	str	r2, [r3, #88]	; 0x58
	pid->alpha = alpha;
 80006de:	68f9      	ldr	r1, [r7, #12]
 80006e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80006e4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
//----------------------Sample Time----------------//
	pid->deltaT = deltaT;
 80006e8:	68f9      	ldr	r1, [r7, #12]
 80006ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80006ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
//----------------------Limit----------------------//
	pid->uI_AboveLimit = uI_AboveLimit;
 80006f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80006f6:	f7ff fee7 	bl	80004c8 <__aeabi_d2iz>
 80006fa:	4602      	mov	r2, r0
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	651a      	str	r2, [r3, #80]	; 0x50
	pid->uI_BelowLimit = uI_BelowLimit;
 8000700:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000704:	f7ff fee0 	bl	80004c8 <__aeabi_d2iz>
 8000708:	4602      	mov	r2, r0
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	655a      	str	r2, [r3, #84]	; 0x54
	pid->u_AboveLimit = u_AboveLimit;
 800070e:	68f9      	ldr	r1, [r7, #12]
 8000710:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000714:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	pid->u_BelowLimit = u_BelowLimit;
 8000718:	68f9      	ldr	r1, [r7, #12]
 800071a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800071e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <vApplicationGetIdleTaskMemory+0x28>)
 800073c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	4a05      	ldr	r2, [pc, #20]	; (8000758 <vApplicationGetIdleTaskMemory+0x2c>)
 8000742:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	2000002c 	.word	0x2000002c
 8000758:	20000080 	.word	0x20000080
 800075c:	00000000 	.word	0x00000000

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b098      	sub	sp, #96	; 0x60
 8000764:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fbdd 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f8b1 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 f9c9 	bl	8000b04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000772:	f000 f8f3 	bl	800095c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000776:	f000 f971 	bl	8000a5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800077a:	2108      	movs	r1, #8
 800077c:	484a      	ldr	r0, [pc, #296]	; (80008a8 <main+0x148>)
 800077e:	f001 fba5 	bl	8001ecc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000782:	210c      	movs	r1, #12
 8000784:	4848      	ldr	r0, [pc, #288]	; (80008a8 <main+0x148>)
 8000786:	f001 fba1 	bl	8001ecc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800078a:	213c      	movs	r1, #60	; 0x3c
 800078c:	4847      	ldr	r0, [pc, #284]	; (80008ac <main+0x14c>)
 800078e:	f001 fce1 	bl	8002154 <HAL_TIM_Encoder_Start_IT>

  EncoderSetting(&ENC_DC, &htim3, DCEncoderPerRound*DCGearRatio, DCDeltaT);
 8000792:	a341      	add	r3, pc, #260	; (adr r3, 8000898 <main+0x138>)
 8000794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000798:	e9cd 2300 	strd	r2, r3, [sp]
 800079c:	f640 52cf 	movw	r2, #3535	; 0xdcf
 80007a0:	4942      	ldr	r1, [pc, #264]	; (80008ac <main+0x14c>)
 80007a2:	4843      	ldr	r0, [pc, #268]	; (80008b0 <main+0x150>)
 80007a4:	f7ff ff08 	bl	80005b8 <EncoderSetting>
  Pid_SetParam(&PID_DC_SPEED, DCProportion, DCIntegral, DCDerivatite, DCAlpha, DCDeltaT, DCIntegralAboveLimit, DCIntegralBelowLimit, DCSumAboveLimit, DCSumBelowLimit);
 80007a8:	a33d      	add	r3, pc, #244	; (adr r3, 80008a0 <main+0x140>)
 80007aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ae:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80007b2:	f04f 0200 	mov.w	r2, #0
 80007b6:	4b3f      	ldr	r3, [pc, #252]	; (80008b4 <main+0x154>)
 80007b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80007bc:	a338      	add	r3, pc, #224	; (adr r3, 80008a0 <main+0x140>)
 80007be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80007c6:	f04f 0200 	mov.w	r2, #0
 80007ca:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <main+0x154>)
 80007cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80007d0:	a331      	add	r3, pc, #196	; (adr r3, 8000898 <main+0x138>)
 80007d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80007f2:	f04f 0200 	mov.w	r2, #0
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <main+0x158>)
 80007f8:	e9cd 2300 	strd	r2, r3, [sp]
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <main+0x15c>)
 8000802:	482f      	ldr	r0, [pc, #188]	; (80008c0 <main+0x160>)
 8000804:	f7ff ff50 	bl	80006a8 <Pid_SetParam>
  Pid_SetParam(&PID_DC_POS, DCProportionPOS, DCIntegralPOS, DCDerivatitePOS, DCAlphaPOS, DCDeltaTPOS, DCIntegralAboveLimitPOS, DCIntegralBelowLimitPOS, DCSumAboveLimitPOS, DCSumBelowLimitPOS);
 8000808:	a325      	add	r3, pc, #148	; (adr r3, 80008a0 <main+0x140>)
 800080a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800080e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000812:	f04f 0200 	mov.w	r2, #0
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <main+0x154>)
 8000818:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800081c:	a320      	add	r3, pc, #128	; (adr r3, 80008a0 <main+0x140>)
 800081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000822:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000826:	f04f 0200 	mov.w	r2, #0
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <main+0x154>)
 800082c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000830:	a319      	add	r3, pc, #100	; (adr r3, 8000898 <main+0x138>)
 8000832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000836:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000846:	f04f 0200 	mov.w	r2, #0
 800084a:	f04f 0300 	mov.w	r3, #0
 800084e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000852:	f04f 0200 	mov.w	r2, #0
 8000856:	f04f 0300 	mov.w	r3, #0
 800085a:	e9cd 2300 	strd	r2, r3, [sp]
 800085e:	f04f 0200 	mov.w	r2, #0
 8000862:	f04f 0300 	mov.w	r3, #0
 8000866:	4817      	ldr	r0, [pc, #92]	; (80008c4 <main+0x164>)
 8000868:	f7ff ff1e 	bl	80006a8 <Pid_SetParam>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CalPIDDC */
  osThreadDef(CalPIDDC, StartCalPIDDC, osPriorityNormal, 0, 128);
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <main+0x168>)
 800086e:	1d3c      	adds	r4, r7, #4
 8000870:	461d      	mov	r5, r3
 8000872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000876:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800087a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CalPIDDCHandle = osThreadCreate(osThread(CalPIDDC), NULL);
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fafc 	bl	8002e80 <osThreadCreate>
 8000888:	4603      	mov	r3, r0
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <main+0x16c>)
 800088c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800088e:	f002 faf0 	bl	8002e72 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000892:	e7fe      	b.n	8000892 <main+0x132>
 8000894:	f3af 8000 	nop.w
 8000898:	d2f1a9fc 	.word	0xd2f1a9fc
 800089c:	3f50624d 	.word	0x3f50624d
 80008a0:	00000000 	.word	0x00000000
 80008a4:	c08f4000 	.word	0xc08f4000
 80008a8:	20000288 	.word	0x20000288
 80008ac:	200002d0 	.word	0x200002d0
 80008b0:	20000320 	.word	0x20000320
 80008b4:	408f4000 	.word	0x408f4000
 80008b8:	406f4000 	.word	0x406f4000
 80008bc:	40140000 	.word	0x40140000
 80008c0:	20000368 	.word	0x20000368
 80008c4:	20000400 	.word	0x20000400
 80008c8:	0800426c 	.word	0x0800426c
 80008cc:	20000318 	.word	0x20000318

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b090      	sub	sp, #64	; 0x40
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	2228      	movs	r2, #40	; 0x28
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fc86 	bl	80041f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000904:	2302      	movs	r3, #2
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800090e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fdb1 	bl	8001480 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000924:	f000 f966 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000928:	230f      	movs	r3, #15
 800092a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092c:	2302      	movs	r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2102      	movs	r1, #2
 8000942:	4618      	mov	r0, r3
 8000944:	f001 f81e 	bl	8001984 <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800094e:	f000 f951 	bl	8000bf4 <Error_Handler>
  }
}
 8000952:	bf00      	nop
 8000954:	3740      	adds	r7, #64	; 0x40
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <MX_TIM2_Init+0xfc>)
 800098e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_TIM2_Init+0xfc>)
 8000996:	2206      	movs	r2, #6
 8000998:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <MX_TIM2_Init+0xfc>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_TIM2_Init+0xfc>)
 80009a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_TIM2_Init+0xfc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_TIM2_Init+0xfc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b4:	4828      	ldr	r0, [pc, #160]	; (8000a58 <MX_TIM2_Init+0xfc>)
 80009b6:	f001 f98f 	bl	8001cd8 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009c0:	f000 f918 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4821      	ldr	r0, [pc, #132]	; (8000a58 <MX_TIM2_Init+0xfc>)
 80009d2:	f001 fe37 	bl	8002644 <HAL_TIM_ConfigClockSource>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009dc:	f000 f90a 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e0:	481d      	ldr	r0, [pc, #116]	; (8000a58 <MX_TIM2_Init+0xfc>)
 80009e2:	f001 fa1b 	bl	8001e1c <HAL_TIM_PWM_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009ec:	f000 f902 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4619      	mov	r1, r3
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <MX_TIM2_Init+0xfc>)
 8000a00:	f002 f9b0 	bl	8002d64 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a0a:	f000 f8f3 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0e:	2360      	movs	r3, #96	; 0x60
 8000a10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2208      	movs	r2, #8
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_TIM2_Init+0xfc>)
 8000a26:	f001 fd4b 	bl	80024c0 <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a30:	f000 f8e0 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	220c      	movs	r2, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM2_Init+0xfc>)
 8000a3c:	f001 fd40 	bl	80024c0 <HAL_TIM_PWM_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000a46:	f000 f8d5 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM2_Init+0xfc>)
 8000a4c:	f000 f972 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 8000a50:	bf00      	nop
 8000a52:	3738      	adds	r7, #56	; 0x38
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000288 	.word	0x20000288

08000a5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	2224      	movs	r2, #36	; 0x24
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fbc0 	bl	80041f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <MX_TIM3_Init+0xa0>)
 8000a7a:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <MX_TIM3_Init+0xa4>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_TIM3_Init+0xa0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_TIM3_Init+0xa0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_TIM3_Init+0xa0>)
 8000a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_TIM3_Init+0xa0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_TIM3_Init+0xa0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <MX_TIM3_Init+0xa0>)
 8000aca:	f001 faa1 	bl	8002010 <HAL_TIM_Encoder_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f000 f88e 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_TIM3_Init+0xa0>)
 8000ae6:	f002 f93d 	bl	8002d64 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000af0:	f000 f880 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3730      	adds	r7, #48	; 0x30
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200002d0 	.word	0x200002d0
 8000b00:	40000400 	.word	0x40000400

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_GPIO_Init+0x74>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <MX_GPIO_Init+0x74>)
 8000b1e:	f043 0320 	orr.w	r3, r3, #32
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_GPIO_Init+0x74>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0320 	and.w	r3, r3, #32
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_GPIO_Init+0x74>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <MX_GPIO_Init+0x74>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_GPIO_Init+0x74>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <MX_GPIO_Init+0x78>)
 8000b4e:	f000 fc7f 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DirBLDC_Pin */
  GPIO_InitStruct.Pin = DirBLDC_Pin;
 8000b52:	2301      	movs	r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DirBLDC_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	4619      	mov	r1, r3
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_GPIO_Init+0x78>)
 8000b6a:	f000 faed 	bl	8001148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010800 	.word	0x40010800

08000b80 <StartCalPIDDC>:
  * @retval None
  */
/* USER CODE END Header_StartCalPIDDC */
int countX1;
void StartCalPIDDC(void const * argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	DC_Drive_BTS(&DC, &htim2, motor_Reserve, SpeedTest_DC_Speed, TIM_CHANNEL_3, TIM_CHANNEL_4);
//	SpeedReadNonReset(&ENC_DC);
//	PIDDCSPEED();
	  Degree = CountRead(&ENC_DC, count_ModeDegree);
 8000b88:	2102      	movs	r1, #2
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <StartCalPIDDC+0x44>)
 8000b8c:	f7ff fd2a 	bl	80005e4 <CountRead>
 8000b90:	4602      	mov	r2, r0
 8000b92:	460b      	mov	r3, r1
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <StartCalPIDDC+0x48>)
 8000b96:	e9c1 2300 	strd	r2, r3, [r1]
	  countX1 = CountRead(&ENC_DC, countX1);
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <StartCalPIDDC+0x4c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <StartCalPIDDC+0x44>)
 8000ba4:	f7ff fd1e 	bl	80005e4 <CountRead>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4610      	mov	r0, r2
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f7ff fc8a 	bl	80004c8 <__aeabi_d2iz>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <StartCalPIDDC+0x4c>)
 8000bb8:	6013      	str	r3, [r2, #0]
//	PIDDCPOS();
    osDelay(1);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f002 f9ac 	bl	8002f18 <osDelay>
	  Degree = CountRead(&ENC_DC, count_ModeDegree);
 8000bc0:	e7e2      	b.n	8000b88 <StartCalPIDDC+0x8>
 8000bc2:	bf00      	nop
 8000bc4:	20000320 	.word	0x20000320
 8000bc8:	20000280 	.word	0x20000280
 8000bcc:	20000498 	.word	0x20000498

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f000 f9b5 	bl	8000f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40012c00 	.word	0x40012c00

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_MspInit+0x68>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_MspInit+0x68>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_MspInit+0x68>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_MspInit+0x68>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <HAL_MspInit+0x68>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x68>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	210f      	movs	r1, #15
 8000c3a:	f06f 0001 	mvn.w	r0, #1
 8000c3e:	f000 fa58 	bl	80010f2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_MspInit+0x6c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_MspInit+0x6c>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c80:	d10b      	bne.n	8000c9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_TIM_Base_MspInit+0x34>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_TIM_Base_MspInit+0x34>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_TIM_Base_MspInit+0x34>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_TIM_Encoder_MspInit+0x80>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d12b      	bne.n	8000d20 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	61d3      	str	r3, [r2, #28]
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a11      	ldr	r2, [pc, #68]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cf8:	23c0      	movs	r3, #192	; 0xc0
 8000cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d0c:	f000 fa1c 	bl	8001148 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2105      	movs	r1, #5
 8000d14:	201d      	movs	r0, #29
 8000d16:	f000 f9ec 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d1a:	201d      	movs	r0, #29
 8000d1c:	f000 fa05 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40000400 	.word	0x40000400
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010800 	.word	0x40010800

08000d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d52:	d117      	bne.n	8000d84 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_TIM_MspPostInit+0x58>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <HAL_TIM_MspPostInit+0x58>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_TIM_MspPostInit+0x58>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <HAL_TIM_MspPostInit+0x5c>)
 8000d80:	f000 f9e2 	bl	8001148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010800 	.word	0x40010800

08000d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	; 0x30
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_InitTick+0xd0>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <HAL_InitTick+0xd0>)
 8000db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_InitTick+0xd0>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc2:	f107 020c 	add.w	r2, r7, #12
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 ff35 	bl	8001c3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dd2:	f000 ff1f 	bl	8001c14 <HAL_RCC_GetPCLK2Freq>
 8000dd6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dda:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <HAL_InitTick+0xd4>)
 8000ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8000de0:	0c9b      	lsrs	r3, r3, #18
 8000de2:	3b01      	subs	r3, #1
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_InitTick+0xd8>)
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <HAL_InitTick+0xdc>)
 8000dea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <HAL_InitTick+0xd8>)
 8000dee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <HAL_InitTick+0xd8>)
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <HAL_InitTick+0xd8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <HAL_InitTick+0xd8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_InitTick+0xd8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e0c:	4817      	ldr	r0, [pc, #92]	; (8000e6c <HAL_InitTick+0xd8>)
 8000e0e:	f000 ff63 	bl	8001cd8 <HAL_TIM_Base_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d11b      	bne.n	8000e58 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e20:	4812      	ldr	r0, [pc, #72]	; (8000e6c <HAL_InitTick+0xd8>)
 8000e22:	f000 ffa9 	bl	8001d78 <HAL_TIM_Base_Start_IT>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d111      	bne.n	8000e58 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e34:	2019      	movs	r0, #25
 8000e36:	f000 f978 	bl	800112a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d808      	bhi.n	8000e52 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	2019      	movs	r0, #25
 8000e46:	f000 f954 	bl	80010f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_InitTick+0xe0>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e002      	b.n	8000e58 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3730      	adds	r7, #48	; 0x30
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	431bde83 	.word	0x431bde83
 8000e6c:	2000049c 	.word	0x2000049c
 8000e70:	40012c00 	.word	0x40012c00
 8000e74:	20000004 	.word	0x20000004

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
	...

08000ea4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <TIM1_UP_IRQHandler+0x10>)
 8000eaa:	f001 fa01 	bl	80022b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000049c 	.word	0x2000049c

08000eb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM3_IRQHandler+0x10>)
 8000ebe:	f001 f9f7 	bl	80022b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200002d0 	.word	0x200002d0

08000ecc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed8:	f7ff fff8 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ede:	490c      	ldr	r1, [pc, #48]	; (8000f10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ef4:	4c09      	ldr	r4, [pc, #36]	; (8000f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f003 f97d 	bl	8004200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f06:	f7ff fc2b 	bl	8000760 <main>
  bx lr
 8000f0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f14:	080042c4 	.word	0x080042c4
  ldr r2, =_sbss
 8000f18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f1c:	20001234 	.word	0x20001234

08000f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_2_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x28>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x28>)
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f8d1 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f7ff ff2a 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fe5e 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_IncTick+0x1c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x20>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_IncTick+0x20>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200004e4 	.word	0x200004e4

08000f74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b02      	ldr	r3, [pc, #8]	; (8000f84 <HAL_GetTick+0x10>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	200004e4 	.word	0x200004e4

08000f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	f003 0307 	and.w	r3, r3, #7
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db0b      	blt.n	8001016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 021f 	and.w	r2, r3, #31
 8001004:	4906      	ldr	r1, [pc, #24]	; (8001020 <__NVIC_EnableIRQ+0x34>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff4f 	bl	8000f88 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff64 	bl	8000fd0 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ffb2 	bl	8001078 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff81 	bl	8001024 <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff57 	bl	8000fec <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e169      	b.n	8001430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800115c:	2201      	movs	r2, #1
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8158 	bne.w	800142a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a9a      	ldr	r2, [pc, #616]	; (80013e8 <HAL_GPIO_Init+0x2a0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d05e      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001184:	4a98      	ldr	r2, [pc, #608]	; (80013e8 <HAL_GPIO_Init+0x2a0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d875      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 800118a:	4a98      	ldr	r2, [pc, #608]	; (80013ec <HAL_GPIO_Init+0x2a4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d058      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001190:	4a96      	ldr	r2, [pc, #600]	; (80013ec <HAL_GPIO_Init+0x2a4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d86f      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 8001196:	4a96      	ldr	r2, [pc, #600]	; (80013f0 <HAL_GPIO_Init+0x2a8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d052      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 800119c:	4a94      	ldr	r2, [pc, #592]	; (80013f0 <HAL_GPIO_Init+0x2a8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d869      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011a2:	4a94      	ldr	r2, [pc, #592]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d04c      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011a8:	4a92      	ldr	r2, [pc, #584]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d863      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ae:	4a92      	ldr	r2, [pc, #584]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d046      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011b4:	4a90      	ldr	r2, [pc, #576]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d85d      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d82a      	bhi.n	8001214 <HAL_GPIO_Init+0xcc>
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d859      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011c2:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <HAL_GPIO_Init+0x80>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	08001243 	.word	0x08001243
 80011cc:	0800121d 	.word	0x0800121d
 80011d0:	0800122f 	.word	0x0800122f
 80011d4:	08001271 	.word	0x08001271
 80011d8:	08001277 	.word	0x08001277
 80011dc:	08001277 	.word	0x08001277
 80011e0:	08001277 	.word	0x08001277
 80011e4:	08001277 	.word	0x08001277
 80011e8:	08001277 	.word	0x08001277
 80011ec:	08001277 	.word	0x08001277
 80011f0:	08001277 	.word	0x08001277
 80011f4:	08001277 	.word	0x08001277
 80011f8:	08001277 	.word	0x08001277
 80011fc:	08001277 	.word	0x08001277
 8001200:	08001277 	.word	0x08001277
 8001204:	08001277 	.word	0x08001277
 8001208:	08001277 	.word	0x08001277
 800120c:	08001225 	.word	0x08001225
 8001210:	08001239 	.word	0x08001239
 8001214:	4a79      	ldr	r2, [pc, #484]	; (80013fc <HAL_GPIO_Init+0x2b4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121a:	e02c      	b.n	8001276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e029      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	3304      	adds	r3, #4
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e024      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	3308      	adds	r3, #8
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e01f      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	330c      	adds	r3, #12
 800123e:	623b      	str	r3, [r7, #32]
          break;
 8001240:	e01a      	b.n	8001278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800124a:	2304      	movs	r3, #4
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e013      	b.n	8001278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d105      	bne.n	8001264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001258:	2308      	movs	r3, #8
 800125a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	611a      	str	r2, [r3, #16]
          break;
 8001262:	e009      	b.n	8001278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001264:	2308      	movs	r3, #8
 8001266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	615a      	str	r2, [r3, #20]
          break;
 800126e:	e003      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
          break;
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x130>
          break;
 8001276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	d801      	bhi.n	8001282 <HAL_GPIO_Init+0x13a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	e001      	b.n	8001286 <HAL_GPIO_Init+0x13e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d802      	bhi.n	8001294 <HAL_GPIO_Init+0x14c>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x152>
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3b08      	subs	r3, #8
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	210f      	movs	r1, #15
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	6a39      	ldr	r1, [r7, #32]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80b1 	beq.w	800142a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c8:	4b4d      	ldr	r3, [pc, #308]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a4c      	ldr	r2, [pc, #304]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e0:	4a48      	ldr	r2, [pc, #288]	; (8001404 <HAL_GPIO_Init+0x2bc>)
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a40      	ldr	r2, [pc, #256]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d013      	beq.n	8001334 <HAL_GPIO_Init+0x1ec>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3f      	ldr	r2, [pc, #252]	; (800140c <HAL_GPIO_Init+0x2c4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00d      	beq.n	8001330 <HAL_GPIO_Init+0x1e8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <HAL_GPIO_Init+0x2c8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0x1e4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a3d      	ldr	r2, [pc, #244]	; (8001414 <HAL_GPIO_Init+0x2cc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_Init+0x1e0>
 8001324:	2303      	movs	r3, #3
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001328:	2304      	movs	r3, #4
 800132a:	e004      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 800132c:	2302      	movs	r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001334:	2300      	movs	r3, #0
 8001336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001338:	f002 0203 	and.w	r2, r2, #3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4093      	lsls	r3, r2
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001346:	492f      	ldr	r1, [pc, #188]	; (8001404 <HAL_GPIO_Init+0x2bc>)
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	492c      	ldr	r1, [pc, #176]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4928      	ldr	r1, [pc, #160]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001378:	4013      	ands	r3, r2
 800137a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	4922      	ldr	r1, [pc, #136]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	60cb      	str	r3, [r1, #12]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	491e      	ldr	r1, [pc, #120]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4918      	ldr	r1, [pc, #96]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4914      	ldr	r1, [pc, #80]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d021      	beq.n	800141c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e021      	b.n	800142a <HAL_GPIO_Init+0x2e2>
 80013e6:	bf00      	nop
 80013e8:	10320000 	.word	0x10320000
 80013ec:	10310000 	.word	0x10310000
 80013f0:	10220000 	.word	0x10220000
 80013f4:	10210000 	.word	0x10210000
 80013f8:	10120000 	.word	0x10120000
 80013fc:	10110000 	.word	0x10110000
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000
 8001408:	40010800 	.word	0x40010800
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40011000 	.word	0x40011000
 8001414:	40011400 	.word	0x40011400
 8001418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_GPIO_Init+0x304>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	43db      	mvns	r3, r3
 8001424:	4909      	ldr	r1, [pc, #36]	; (800144c <HAL_GPIO_Init+0x304>)
 8001426:	4013      	ands	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	3301      	adds	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	f47f ae8e 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	372c      	adds	r7, #44	; 0x2c
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800146c:	e003      	b.n	8001476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	611a      	str	r2, [r3, #16]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e272      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8087 	beq.w	80015ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a0:	4b92      	ldr	r3, [pc, #584]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d00c      	beq.n	80014c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ac:	4b8f      	ldr	r3, [pc, #572]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d112      	bne.n	80014de <HAL_RCC_OscConfig+0x5e>
 80014b8:	4b8c      	ldr	r3, [pc, #560]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d10b      	bne.n	80014de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c6:	4b89      	ldr	r3, [pc, #548]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d06c      	beq.n	80015ac <HAL_RCC_OscConfig+0x12c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d168      	bne.n	80015ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e24c      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x76>
 80014e8:	4b80      	ldr	r3, [pc, #512]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a7f      	ldr	r2, [pc, #508]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80014ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e02e      	b.n	8001554 <HAL_RCC_OscConfig+0xd4>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x98>
 80014fe:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a7a      	ldr	r2, [pc, #488]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b78      	ldr	r3, [pc, #480]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a77      	ldr	r2, [pc, #476]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e01d      	b.n	8001554 <HAL_RCC_OscConfig+0xd4>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0xbc>
 8001522:	4b72      	ldr	r3, [pc, #456]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a71      	ldr	r2, [pc, #452]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b6f      	ldr	r3, [pc, #444]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6e      	ldr	r2, [pc, #440]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xd4>
 800153c:	4b6b      	ldr	r3, [pc, #428]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a6a      	ldr	r2, [pc, #424]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b68      	ldr	r3, [pc, #416]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a67      	ldr	r2, [pc, #412]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fd0a 	bl	8000f74 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fd06 	bl	8000f74 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e200      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	4b5d      	ldr	r3, [pc, #372]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0xe4>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fcf6 	bl	8000f74 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fcf2 	bl	8000f74 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1ec      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	4b53      	ldr	r3, [pc, #332]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x10c>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d063      	beq.n	8001682 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ba:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015c6:	4b49      	ldr	r3, [pc, #292]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d11c      	bne.n	800160c <HAL_RCC_OscConfig+0x18c>
 80015d2:	4b46      	ldr	r3, [pc, #280]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d116      	bne.n	800160c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	4b43      	ldr	r3, [pc, #268]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x176>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e1c0      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4939      	ldr	r1, [pc, #228]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	e03a      	b.n	8001682 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d020      	beq.n	8001656 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001614:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fcab 	bl	8000f74 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fca7 	bl	8000f74 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1a1      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4927      	ldr	r1, [pc, #156]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fc8a 	bl	8000f74 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fc86 	bl	8000f74 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e180      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d03a      	beq.n	8001704 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d019      	beq.n	80016ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_RCC_OscConfig+0x274>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169c:	f7ff fc6a 	bl	8000f74 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fc66 	bl	8000f74 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e160      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_RCC_OscConfig+0x26c>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 faea 	bl	8001c9c <RCC_Delay>
 80016c8:	e01c      	b.n	8001704 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_RCC_OscConfig+0x274>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d0:	f7ff fc50 	bl	8000f74 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d6:	e00f      	b.n	80016f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc4c 	bl	8000f74 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d908      	bls.n	80016f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e146      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	42420000 	.word	0x42420000
 80016f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	4b92      	ldr	r3, [pc, #584]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e9      	bne.n	80016d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a6 	beq.w	800185e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001716:	4b8b      	ldr	r3, [pc, #556]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10d      	bne.n	800173e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b88      	ldr	r3, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a87      	ldr	r2, [pc, #540]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b85      	ldr	r3, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173a:	2301      	movs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173e:	4b82      	ldr	r3, [pc, #520]	; (8001948 <HAL_RCC_OscConfig+0x4c8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d118      	bne.n	800177c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174a:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <HAL_RCC_OscConfig+0x4c8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a7e      	ldr	r2, [pc, #504]	; (8001948 <HAL_RCC_OscConfig+0x4c8>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001756:	f7ff fc0d 	bl	8000f74 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175e:	f7ff fc09 	bl	8000f74 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	; 0x64
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e103      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	4b75      	ldr	r3, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x4c8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x312>
 8001784:	4b6f      	ldr	r3, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4a6e      	ldr	r2, [pc, #440]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6213      	str	r3, [r2, #32]
 8001790:	e02d      	b.n	80017ee <HAL_RCC_OscConfig+0x36e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x334>
 800179a:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a69      	ldr	r2, [pc, #420]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6213      	str	r3, [r2, #32]
 80017a6:	4b67      	ldr	r3, [pc, #412]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a66      	ldr	r2, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6213      	str	r3, [r2, #32]
 80017b2:	e01c      	b.n	80017ee <HAL_RCC_OscConfig+0x36e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d10c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x356>
 80017bc:	4b61      	ldr	r3, [pc, #388]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4a60      	ldr	r2, [pc, #384]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6213      	str	r3, [r2, #32]
 80017c8:	4b5e      	ldr	r3, [pc, #376]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4a5d      	ldr	r2, [pc, #372]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6213      	str	r3, [r2, #32]
 80017d4:	e00b      	b.n	80017ee <HAL_RCC_OscConfig+0x36e>
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4a5a      	ldr	r2, [pc, #360]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6213      	str	r3, [r2, #32]
 80017e2:	4b58      	ldr	r3, [pc, #352]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4a57      	ldr	r2, [pc, #348]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d015      	beq.n	8001822 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f6:	f7ff fbbd 	bl	8000f74 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff fbb9 	bl	8000f74 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0b1      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001814:	4b4b      	ldr	r3, [pc, #300]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ee      	beq.n	80017fe <HAL_RCC_OscConfig+0x37e>
 8001820:	e014      	b.n	800184c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff fba7 	bl	8000f74 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fba3 	bl	8000f74 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e09b      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001840:	4b40      	ldr	r3, [pc, #256]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ee      	bne.n	800182a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d105      	bne.n	800185e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a3b      	ldr	r2, [pc, #236]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8087 	beq.w	8001976 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d061      	beq.n	8001938 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d146      	bne.n	800190a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187c:	4b33      	ldr	r3, [pc, #204]	; (800194c <HAL_RCC_OscConfig+0x4cc>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fb77 	bl	8000f74 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fb73 	bl	8000f74 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e06d      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189c:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f0      	bne.n	800188a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	4921      	ldr	r1, [pc, #132]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a19      	ldr	r1, [r3, #32]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	430b      	orrs	r3, r1
 80018d6:	491b      	ldr	r1, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_RCC_OscConfig+0x4cc>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fb47 	bl	8000f74 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff fb43 	bl	8000f74 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e03d      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x46a>
 8001908:	e035      	b.n	8001976 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_RCC_OscConfig+0x4cc>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fb30 	bl	8000f74 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff fb2c 	bl	8000f74 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e026      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x498>
 8001936:	e01e      	b.n	8001976 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d107      	bne.n	8001950 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e019      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
 8001944:	40021000 	.word	0x40021000
 8001948:	40007000 	.word	0x40007000
 800194c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_OscConfig+0x500>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	429a      	cmp	r2, r3
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0d0      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d910      	bls.n	80019c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b67      	ldr	r3, [pc, #412]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 0207 	bic.w	r2, r3, #7
 80019ae:	4965      	ldr	r1, [pc, #404]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0b8      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	494d      	ldr	r1, [pc, #308]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d040      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d115      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e07f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e073      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06b      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4936      	ldr	r1, [pc, #216]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a74:	f7ff fa7e 	bl	8000f74 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7c:	f7ff fa7a 	bl	8000f74 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e053      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 020c 	and.w	r2, r3, #12
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1eb      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d210      	bcs.n	8001ad4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0207 	bic.w	r2, r3, #7
 8001aba:	4922      	ldr	r1, [pc, #136]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e032      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4916      	ldr	r1, [pc, #88]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	490e      	ldr	r1, [pc, #56]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b12:	f000 f821 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	490a      	ldr	r1, [pc, #40]	; (8001b4c <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	5ccb      	ldrb	r3, [r1, r3]
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1cc>)
 8001b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1d0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f92e 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08004290 	.word	0x08004290
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <HAL_RCC_GetSysClockFreq+0x94>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x30>
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x36>
 8001b86:	e027      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b8a:	613b      	str	r3, [r7, #16]
      break;
 8001b8c:	e027      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	0c9b      	lsrs	r3, r3, #18
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
 8001b9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d010      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_RCC_GetSysClockFreq+0x94>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	0c5b      	lsrs	r3, r3, #17
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bba:	fb03 f202 	mul.w	r2, r3, r2
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e004      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	613b      	str	r3, [r7, #16]
      break;
 8001bd6:	e002      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bda:	613b      	str	r3, [r7, #16]
      break;
 8001bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bde:	693b      	ldr	r3, [r7, #16]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	007a1200 	.word	0x007a1200
 8001bf4:	080042a8 	.word	0x080042a8
 8001bf8:	080042b8 	.word	0x080042b8
 8001bfc:	003d0900 	.word	0x003d0900

08001c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000000 	.word	0x20000000

08001c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c18:	f7ff fff2 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	0adb      	lsrs	r3, r3, #11
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	4903      	ldr	r1, [pc, #12]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	080042a0 	.word	0x080042a0

08001c3c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	220f      	movs	r2, #15
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_RCC_GetClockConfig+0x58>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_RCC_GetClockConfig+0x58>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_GetClockConfig+0x58>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_RCC_GetClockConfig+0x58>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	08db      	lsrs	r3, r3, #3
 8001c76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_GetClockConfig+0x5c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0207 	and.w	r2, r3, #7
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40022000 	.word	0x40022000

08001c9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <RCC_Delay+0x34>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <RCC_Delay+0x38>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0a5b      	lsrs	r3, r3, #9
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cb8:	bf00      	nop
  }
  while (Delay --);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1e5a      	subs	r2, r3, #1
 8001cbe:	60fa      	str	r2, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f9      	bne.n	8001cb8 <RCC_Delay+0x1c>
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	10624dd3 	.word	0x10624dd3

08001cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e041      	b.n	8001d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7fe ffb6 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3304      	adds	r3, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4610      	mov	r0, r2
 8001d18:	f000 fd80 	bl	800281c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d001      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e03a      	b.n	8001e06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_TIM_Base_Start_IT+0x98>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00e      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x58>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dba:	d009      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x58>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_TIM_Base_Start_IT+0x9c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x58>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <HAL_TIM_Base_Start_IT+0xa0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d111      	bne.n	8001df4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d010      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df2:	e007      	b.n	8001e04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40000800 	.word	0x40000800

08001e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e041      	b.n	8001eb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f839 	bl	8001eba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 fcde 	bl	800281c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_TIM_PWM_Start+0x24>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e022      	b.n	8001f36 <HAL_TIM_PWM_Start+0x6a>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d109      	bne.n	8001f0a <HAL_TIM_PWM_Start+0x3e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	bf14      	ite	ne
 8001f02:	2301      	movne	r3, #1
 8001f04:	2300      	moveq	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	e015      	b.n	8001f36 <HAL_TIM_PWM_Start+0x6a>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d109      	bne.n	8001f24 <HAL_TIM_PWM_Start+0x58>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	e008      	b.n	8001f36 <HAL_TIM_PWM_Start+0x6a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e05e      	b.n	8001ffc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d104      	bne.n	8001f4e <HAL_TIM_PWM_Start+0x82>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f4c:	e013      	b.n	8001f76 <HAL_TIM_PWM_Start+0xaa>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d104      	bne.n	8001f5e <HAL_TIM_PWM_Start+0x92>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f5c:	e00b      	b.n	8001f76 <HAL_TIM_PWM_Start+0xaa>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d104      	bne.n	8001f6e <HAL_TIM_PWM_Start+0xa2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f6c:	e003      	b.n	8001f76 <HAL_TIM_PWM_Start+0xaa>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fecc 	bl	8002d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <HAL_TIM_PWM_Start+0x138>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d107      	bne.n	8001f9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_TIM_PWM_Start+0x138>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00e      	beq.n	8001fc6 <HAL_TIM_PWM_Start+0xfa>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb0:	d009      	beq.n	8001fc6 <HAL_TIM_PWM_Start+0xfa>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a14      	ldr	r2, [pc, #80]	; (8002008 <HAL_TIM_PWM_Start+0x13c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d004      	beq.n	8001fc6 <HAL_TIM_PWM_Start+0xfa>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <HAL_TIM_PWM_Start+0x140>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d111      	bne.n	8001fea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b06      	cmp	r3, #6
 8001fd6:	d010      	beq.n	8001ffa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe8:	e007      	b.n	8001ffa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800

08002010 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e093      	b.n	800214c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d106      	bne.n	800203e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7fe fe35 	bl	8000ca8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002054:	f023 0307 	bic.w	r3, r3, #7
 8002058:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f000 fbd9 	bl	800281c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	4313      	orrs	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80020b0:	f023 030c 	bic.w	r3, r3, #12
 80020b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	4313      	orrs	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	011a      	lsls	r2, r3, #4
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	031b      	lsls	r3, r3, #12
 80020e0:	4313      	orrs	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	4313      	orrs	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002164:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800216c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002174:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800217c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d110      	bne.n	80021a6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d102      	bne.n	8002190 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d001      	beq.n	8002194 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e089      	b.n	80022a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a4:	e031      	b.n	800220a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d110      	bne.n	80021ce <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80021ac:	7bbb      	ldrb	r3, [r7, #14]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d102      	bne.n	80021b8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80021b2:	7b3b      	ldrb	r3, [r7, #12]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d001      	beq.n	80021bc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e075      	b.n	80022a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021cc:	e01d      	b.n	800220a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d108      	bne.n	80021e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80021d4:	7bbb      	ldrb	r3, [r7, #14]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80021da:	7b7b      	ldrb	r3, [r7, #13]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d102      	bne.n	80021e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80021e0:	7b3b      	ldrb	r3, [r7, #12]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d001      	beq.n	80021ea <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e05e      	b.n	80022a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b04      	cmp	r3, #4
 8002214:	d010      	beq.n	8002238 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002216:	e01f      	b.n	8002258 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2201      	movs	r2, #1
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fd7b 	bl	8002d1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0202 	orr.w	r2, r2, #2
 8002234:	60da      	str	r2, [r3, #12]
      break;
 8002236:	e02e      	b.n	8002296 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2201      	movs	r2, #1
 800223e:	2104      	movs	r1, #4
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fd6b 	bl	8002d1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0204 	orr.w	r2, r2, #4
 8002254:	60da      	str	r2, [r3, #12]
      break;
 8002256:	e01e      	b.n	8002296 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2201      	movs	r2, #1
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fd5b 	bl	8002d1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	2104      	movs	r1, #4
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fd54 	bl	8002d1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0202 	orr.w	r2, r2, #2
 8002282:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0204 	orr.w	r2, r2, #4
 8002292:	60da      	str	r2, [r3, #12]
      break;
 8002294:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d122      	bne.n	800230c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d11b      	bne.n	800230c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0202 	mvn.w	r2, #2
 80022dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fa76 	bl	80027e4 <HAL_TIM_IC_CaptureCallback>
 80022f8:	e005      	b.n	8002306 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fa69 	bl	80027d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fa78 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b04      	cmp	r3, #4
 8002318:	d122      	bne.n	8002360 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b04      	cmp	r3, #4
 8002326:	d11b      	bne.n	8002360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0204 	mvn.w	r2, #4
 8002330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2202      	movs	r2, #2
 8002336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa4c 	bl	80027e4 <HAL_TIM_IC_CaptureCallback>
 800234c:	e005      	b.n	800235a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fa3f 	bl	80027d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fa4e 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b08      	cmp	r3, #8
 800236c:	d122      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b08      	cmp	r3, #8
 800237a:	d11b      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0208 	mvn.w	r2, #8
 8002384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2204      	movs	r2, #4
 800238a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa22 	bl	80027e4 <HAL_TIM_IC_CaptureCallback>
 80023a0:	e005      	b.n	80023ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fa15 	bl	80027d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fa24 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d122      	bne.n	8002408 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d11b      	bne.n	8002408 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0210 	mvn.w	r2, #16
 80023d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2208      	movs	r2, #8
 80023de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f9f8 	bl	80027e4 <HAL_TIM_IC_CaptureCallback>
 80023f4:	e005      	b.n	8002402 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f9eb 	bl	80027d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f9fa 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d10e      	bne.n	8002434 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0201 	mvn.w	r2, #1
 800242c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fbce 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b80      	cmp	r3, #128	; 0x80
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b80      	cmp	r3, #128	; 0x80
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fce9 	bl	8002e32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f9be 	bl	8002808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b20      	cmp	r3, #32
 8002498:	d10e      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d107      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0220 	mvn.w	r2, #32
 80024b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fcb4 	bl	8002e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024da:	2302      	movs	r3, #2
 80024dc:	e0ae      	b.n	800263c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b0c      	cmp	r3, #12
 80024ea:	f200 809f 	bhi.w	800262c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80024ee:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	08002529 	.word	0x08002529
 80024f8:	0800262d 	.word	0x0800262d
 80024fc:	0800262d 	.word	0x0800262d
 8002500:	0800262d 	.word	0x0800262d
 8002504:	08002569 	.word	0x08002569
 8002508:	0800262d 	.word	0x0800262d
 800250c:	0800262d 	.word	0x0800262d
 8002510:	0800262d 	.word	0x0800262d
 8002514:	080025ab 	.word	0x080025ab
 8002518:	0800262d 	.word	0x0800262d
 800251c:	0800262d 	.word	0x0800262d
 8002520:	0800262d 	.word	0x0800262d
 8002524:	080025eb 	.word	0x080025eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f9d6 	bl	80028e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0208 	orr.w	r2, r2, #8
 8002542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0204 	bic.w	r2, r2, #4
 8002552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6999      	ldr	r1, [r3, #24]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	619a      	str	r2, [r3, #24]
      break;
 8002566:	e064      	b.n	8002632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fa1c 	bl	80029ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6999      	ldr	r1, [r3, #24]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	021a      	lsls	r2, r3, #8
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	619a      	str	r2, [r3, #24]
      break;
 80025a8:	e043      	b.n	8002632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fa65 	bl	8002a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0208 	orr.w	r2, r2, #8
 80025c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69da      	ldr	r2, [r3, #28]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0204 	bic.w	r2, r2, #4
 80025d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69d9      	ldr	r1, [r3, #28]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	61da      	str	r2, [r3, #28]
      break;
 80025e8:	e023      	b.n	8002632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 faaf 	bl	8002b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69da      	ldr	r2, [r3, #28]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69d9      	ldr	r1, [r3, #28]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	021a      	lsls	r2, r3, #8
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	61da      	str	r2, [r3, #28]
      break;
 800262a:	e002      	b.n	8002632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
      break;
 8002630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800263a:	7dfb      	ldrb	r3, [r7, #23]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_TIM_ConfigClockSource+0x1c>
 800265c:	2302      	movs	r3, #2
 800265e:	e0b4      	b.n	80027ca <HAL_TIM_ConfigClockSource+0x186>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800267e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002698:	d03e      	beq.n	8002718 <HAL_TIM_ConfigClockSource+0xd4>
 800269a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269e:	f200 8087 	bhi.w	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a6:	f000 8086 	beq.w	80027b6 <HAL_TIM_ConfigClockSource+0x172>
 80026aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ae:	d87f      	bhi.n	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b70      	cmp	r3, #112	; 0x70
 80026b2:	d01a      	beq.n	80026ea <HAL_TIM_ConfigClockSource+0xa6>
 80026b4:	2b70      	cmp	r3, #112	; 0x70
 80026b6:	d87b      	bhi.n	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026b8:	2b60      	cmp	r3, #96	; 0x60
 80026ba:	d050      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x11a>
 80026bc:	2b60      	cmp	r3, #96	; 0x60
 80026be:	d877      	bhi.n	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b50      	cmp	r3, #80	; 0x50
 80026c2:	d03c      	beq.n	800273e <HAL_TIM_ConfigClockSource+0xfa>
 80026c4:	2b50      	cmp	r3, #80	; 0x50
 80026c6:	d873      	bhi.n	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d058      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x13a>
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d86f      	bhi.n	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d0:	2b30      	cmp	r3, #48	; 0x30
 80026d2:	d064      	beq.n	800279e <HAL_TIM_ConfigClockSource+0x15a>
 80026d4:	2b30      	cmp	r3, #48	; 0x30
 80026d6:	d86b      	bhi.n	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d060      	beq.n	800279e <HAL_TIM_ConfigClockSource+0x15a>
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d867      	bhi.n	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d05c      	beq.n	800279e <HAL_TIM_ConfigClockSource+0x15a>
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d05a      	beq.n	800279e <HAL_TIM_ConfigClockSource+0x15a>
 80026e8:	e062      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026fa:	f000 faf0 	bl	8002cde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800270c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	609a      	str	r2, [r3, #8]
      break;
 8002716:	e04f      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002728:	f000 fad9 	bl	8002cde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800273a:	609a      	str	r2, [r3, #8]
      break;
 800273c:	e03c      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274a:	461a      	mov	r2, r3
 800274c:	f000 fa50 	bl	8002bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2150      	movs	r1, #80	; 0x50
 8002756:	4618      	mov	r0, r3
 8002758:	f000 faa7 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 800275c:	e02c      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800276a:	461a      	mov	r2, r3
 800276c:	f000 fa6e 	bl	8002c4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2160      	movs	r1, #96	; 0x60
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fa97 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 800277c:	e01c      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800278a:	461a      	mov	r2, r3
 800278c:	f000 fa30 	bl	8002bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2140      	movs	r1, #64	; 0x40
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fa87 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 800279c:	e00c      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f000 fa7e 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 80027ae:	e003      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      break;
 80027b4:	e000      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
	...

0800281c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <TIM_Base_SetConfig+0xb8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00b      	beq.n	800284c <TIM_Base_SetConfig+0x30>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283a:	d007      	beq.n	800284c <TIM_Base_SetConfig+0x30>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <TIM_Base_SetConfig+0xbc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d003      	beq.n	800284c <TIM_Base_SetConfig+0x30>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a25      	ldr	r2, [pc, #148]	; (80028dc <TIM_Base_SetConfig+0xc0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d108      	bne.n	800285e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <TIM_Base_SetConfig+0xb8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00b      	beq.n	800287e <TIM_Base_SetConfig+0x62>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286c:	d007      	beq.n	800287e <TIM_Base_SetConfig+0x62>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <TIM_Base_SetConfig+0xbc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_Base_SetConfig+0x62>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a18      	ldr	r2, [pc, #96]	; (80028dc <TIM_Base_SetConfig+0xc0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d108      	bne.n	8002890 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <TIM_Base_SetConfig+0xb8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d103      	bne.n	80028c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	615a      	str	r2, [r3, #20]
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40000400 	.word	0x40000400
 80028dc:	40000800 	.word	0x40000800

080028e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f023 0201 	bic.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f023 0302 	bic.w	r3, r3, #2
 8002928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4313      	orrs	r3, r2
 8002932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <TIM_OC1_SetConfig+0xc8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d10c      	bne.n	8002956 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f023 0308 	bic.w	r3, r3, #8
 8002942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <TIM_OC1_SetConfig+0xc8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d111      	bne.n	8002982 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800296c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	621a      	str	r2, [r3, #32]
}
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40012c00 	.word	0x40012c00

080029ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f023 0210 	bic.w	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f023 0320 	bic.w	r3, r3, #32
 80029f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <TIM_OC2_SetConfig+0xd0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d10d      	bne.n	8002a28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <TIM_OC2_SetConfig+0xd0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d113      	bne.n	8002a58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	621a      	str	r2, [r3, #32]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	40012c00 	.word	0x40012c00

08002a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <TIM_OC3_SetConfig+0xd0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10d      	bne.n	8002afa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <TIM_OC3_SetConfig+0xd0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d113      	bne.n	8002b2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	621a      	str	r2, [r3, #32]
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40012c00 	.word	0x40012c00

08002b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	031b      	lsls	r3, r3, #12
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <TIM_OC4_SetConfig+0x98>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d109      	bne.n	8002bc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	019b      	lsls	r3, r3, #6
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	621a      	str	r2, [r3, #32]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00

08002bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f023 0201 	bic.w	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f023 030a 	bic.w	r3, r3, #10
 8002c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	621a      	str	r2, [r3, #32]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 0210 	bic.w	r2, r3, #16
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	031b      	lsls	r3, r3, #12
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	621a      	str	r2, [r3, #32]
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b085      	sub	sp, #20
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f043 0307 	orr.w	r3, r3, #7
 8002ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b087      	sub	sp, #28
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	021a      	lsls	r2, r3, #8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	609a      	str	r2, [r3, #8]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2201      	movs	r2, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1a      	ldr	r2, [r3, #32]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a1a      	ldr	r2, [r3, #32]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e046      	b.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00e      	beq.n	8002dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc8:	d009      	beq.n	8002dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d10c      	bne.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800

08002e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e56:	2b84      	cmp	r3, #132	; 0x84
 8002e58:	d005      	beq.n	8002e66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002e5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	3303      	adds	r3, #3
 8002e64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002e66:	68fb      	ldr	r3, [r7, #12]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002e76:	f000 fad1 	bl	800341c <vTaskStartScheduler>
  
  return osOK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af04      	add	r7, sp, #16
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d020      	beq.n	8002ed4 <osThreadCreate+0x54>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01c      	beq.n	8002ed4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685c      	ldr	r4, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691e      	ldr	r6, [r3, #16]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ffc9 	bl	8002e44 <makeFreeRtosPriority>
 8002eb2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ebc:	9202      	str	r2, [sp, #8]
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	9100      	str	r1, [sp, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	4632      	mov	r2, r6
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 f8e8 	bl	800309e <xTaskCreateStatic>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e01c      	b.n	8002f0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685c      	ldr	r4, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ee0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ffab 	bl	8002e44 <makeFreeRtosPriority>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	9301      	str	r3, [sp, #4]
 8002ef6:	9200      	str	r2, [sp, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4632      	mov	r2, r6
 8002efc:	4629      	mov	r1, r5
 8002efe:	4620      	mov	r0, r4
 8002f00:	f000 f929 	bl	8003156 <xTaskCreate>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d001      	beq.n	8002f0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f18 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <osDelay+0x16>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	e000      	b.n	8002f30 <osDelay+0x18>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fa3f 	bl	80033b4 <vTaskDelay>
  
  return osOK;
 8002f36:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f103 0208 	add.w	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295
 8002f58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f103 0208 	add.w	r2, r3, #8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f103 0208 	add.w	r2, r3, #8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d103      	bne.n	8002ffc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e00c      	b.n	8003016 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3308      	adds	r3, #8
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	e002      	b.n	800300a <vListInsert+0x2e>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	429a      	cmp	r2, r3
 8003014:	d2f6      	bcs.n	8003004 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	601a      	str	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6892      	ldr	r2, [r2, #8]
 8003062:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6852      	ldr	r2, [r2, #4]
 800306c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d103      	bne.n	8003080 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	1e5a      	subs	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b08e      	sub	sp, #56	; 0x38
 80030a2:	af04      	add	r7, sp, #16
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <xTaskCreateStatic+0x46>
	__asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	61fb      	str	r3, [r7, #28]
}
 80030e0:	bf00      	nop
 80030e2:	e7fe      	b.n	80030e2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030e4:	2354      	movs	r3, #84	; 0x54
 80030e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b54      	cmp	r3, #84	; 0x54
 80030ec:	d00a      	beq.n	8003104 <xTaskCreateStatic+0x66>
	__asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	61bb      	str	r3, [r7, #24]
}
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01e      	beq.n	8003148 <xTaskCreateStatic+0xaa>
 800310a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01b      	beq.n	8003148 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003118:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	2202      	movs	r2, #2
 800311e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003122:	2300      	movs	r3, #0
 8003124:	9303      	str	r3, [sp, #12]
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	9302      	str	r3, [sp, #8]
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f850 	bl	80031e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003142:	f000 f8cd 	bl	80032e0 <prvAddNewTaskToReadyList>
 8003146:	e001      	b.n	800314c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800314c:	697b      	ldr	r3, [r7, #20]
	}
 800314e:	4618      	mov	r0, r3
 8003150:	3728      	adds	r7, #40	; 0x28
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003156:	b580      	push	{r7, lr}
 8003158:	b08c      	sub	sp, #48	; 0x30
 800315a:	af04      	add	r7, sp, #16
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fe68 	bl	8003e40 <pvPortMalloc>
 8003170:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003178:	2054      	movs	r0, #84	; 0x54
 800317a:	f000 fe61 	bl	8003e40 <pvPortMalloc>
 800317e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
 800318c:	e005      	b.n	800319a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800318e:	6978      	ldr	r0, [r7, #20]
 8003190:	f000 ff1a 	bl	8003fc8 <vPortFree>
 8003194:	e001      	b.n	800319a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d017      	beq.n	80031d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031a8:	88fa      	ldrh	r2, [r7, #6]
 80031aa:	2300      	movs	r3, #0
 80031ac:	9303      	str	r3, [sp, #12]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	9302      	str	r3, [sp, #8]
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f80e 	bl	80031e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031c4:	69f8      	ldr	r0, [r7, #28]
 80031c6:	f000 f88b 	bl	80032e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	e002      	b.n	80031d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295
 80031d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031d6:	69bb      	ldr	r3, [r7, #24]
	}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031f8:	3b01      	subs	r3, #1
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f023 0307 	bic.w	r3, r3, #7
 8003206:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	617b      	str	r3, [r7, #20]
}
 8003224:	bf00      	nop
 8003226:	e7fe      	b.n	8003226 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	e012      	b.n	8003254 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	7819      	ldrb	r1, [r3, #0]
 8003236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	4413      	add	r3, r2
 800323c:	3334      	adds	r3, #52	; 0x34
 800323e:	460a      	mov	r2, r1
 8003240:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d006      	beq.n	800325c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3301      	adds	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	d9e9      	bls.n	800322e <prvInitialiseNewTask+0x4e>
 800325a:	e000      	b.n	800325e <prvInitialiseNewTask+0x7e>
		{
			break;
 800325c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	2b06      	cmp	r3, #6
 800326a:	d901      	bls.n	8003270 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800326c:	2306      	movs	r3, #6
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800327a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	2200      	movs	r2, #0
 8003280:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	3304      	adds	r3, #4
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fe79 	bl	8002f7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	3318      	adds	r3, #24
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fe74 	bl	8002f7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	f1c3 0207 	rsb	r2, r3, #7
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	2200      	movs	r2, #0
 80032b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	69b8      	ldr	r0, [r7, #24]
 80032c0:	f000 fc0e 	bl	8003ae0 <pxPortInitialiseStack>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032d6:	bf00      	nop
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032e8:	f000 fce8 	bl	8003cbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <prvAddNewTaskToReadyList+0xb8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a29      	ldr	r2, [pc, #164]	; (8003398 <prvAddNewTaskToReadyList+0xb8>)
 80032f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <prvAddNewTaskToReadyList+0xbc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032fe:	4a27      	ldr	r2, [pc, #156]	; (800339c <prvAddNewTaskToReadyList+0xbc>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003304:	4b24      	ldr	r3, [pc, #144]	; (8003398 <prvAddNewTaskToReadyList+0xb8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d110      	bne.n	800332e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800330c:	f000 fac0 	bl	8003890 <prvInitialiseTaskLists>
 8003310:	e00d      	b.n	800332e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003312:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <prvAddNewTaskToReadyList+0xc0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800331a:	4b20      	ldr	r3, [pc, #128]	; (800339c <prvAddNewTaskToReadyList+0xbc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	429a      	cmp	r2, r3
 8003326:	d802      	bhi.n	800332e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003328:	4a1c      	ldr	r2, [pc, #112]	; (800339c <prvAddNewTaskToReadyList+0xbc>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800332e:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <prvAddNewTaskToReadyList+0xc4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <prvAddNewTaskToReadyList+0xc4>)
 8003336:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <prvAddNewTaskToReadyList+0xc8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <prvAddNewTaskToReadyList+0xc8>)
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4a15      	ldr	r2, [pc, #84]	; (80033ac <prvAddNewTaskToReadyList+0xcc>)
 8003358:	441a      	add	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f7ff fe18 	bl	8002f96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003366:	f000 fcd9 	bl	8003d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <prvAddNewTaskToReadyList+0xc0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00e      	beq.n	8003390 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <prvAddNewTaskToReadyList+0xbc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	429a      	cmp	r2, r3
 800337e:	d207      	bcs.n	8003390 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <prvAddNewTaskToReadyList+0xd0>)
 8003382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200005e8 	.word	0x200005e8
 800339c:	200004e8 	.word	0x200004e8
 80033a0:	200005f4 	.word	0x200005f4
 80033a4:	20000604 	.word	0x20000604
 80033a8:	200005f0 	.word	0x200005f0
 80033ac:	200004ec 	.word	0x200004ec
 80033b0:	e000ed04 	.word	0xe000ed04

080033b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d017      	beq.n	80033f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033c6:	4b13      	ldr	r3, [pc, #76]	; (8003414 <vTaskDelay+0x60>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <vTaskDelay+0x30>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	60bb      	str	r3, [r7, #8]
}
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80033e4:	f000 f87a 	bl	80034dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033e8:	2100      	movs	r1, #0
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fb12 	bl	8003a14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033f0:	f000 f882 	bl	80034f8 <xTaskResumeAll>
 80033f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d107      	bne.n	800340c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <vTaskDelay+0x64>)
 80033fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000610 	.word	0x20000610
 8003418:	e000ed04 	.word	0xe000ed04

0800341c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800342a:	463a      	mov	r2, r7
 800342c:	1d39      	adds	r1, r7, #4
 800342e:	f107 0308 	add.w	r3, r7, #8
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd f97a 	bl	800072c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003438:	6839      	ldr	r1, [r7, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	9202      	str	r2, [sp, #8]
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	2300      	movs	r3, #0
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2300      	movs	r3, #0
 8003448:	460a      	mov	r2, r1
 800344a:	491e      	ldr	r1, [pc, #120]	; (80034c4 <vTaskStartScheduler+0xa8>)
 800344c:	481e      	ldr	r0, [pc, #120]	; (80034c8 <vTaskStartScheduler+0xac>)
 800344e:	f7ff fe26 	bl	800309e <xTaskCreateStatic>
 8003452:	4603      	mov	r3, r0
 8003454:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <vTaskStartScheduler+0xb0>)
 8003456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003458:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <vTaskStartScheduler+0xb0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003460:	2301      	movs	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e001      	b.n	800346a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d116      	bne.n	800349e <vTaskStartScheduler+0x82>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	613b      	str	r3, [r7, #16]
}
 8003482:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <vTaskStartScheduler+0xb4>)
 8003486:	f04f 32ff 	mov.w	r2, #4294967295
 800348a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <vTaskStartScheduler+0xb8>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <vTaskStartScheduler+0xbc>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003498:	f000 fb9e 	bl	8003bd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800349c:	e00e      	b.n	80034bc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d10a      	bne.n	80034bc <vTaskStartScheduler+0xa0>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	60fb      	str	r3, [r7, #12]
}
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <vTaskStartScheduler+0x9e>
}
 80034bc:	bf00      	nop
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	08004288 	.word	0x08004288
 80034c8:	08003861 	.word	0x08003861
 80034cc:	2000060c 	.word	0x2000060c
 80034d0:	20000608 	.word	0x20000608
 80034d4:	200005f4 	.word	0x200005f4
 80034d8:	200005ec 	.word	0x200005ec

080034dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <vTaskSuspendAll+0x18>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	4a03      	ldr	r2, [pc, #12]	; (80034f4 <vTaskSuspendAll+0x18>)
 80034e8:	6013      	str	r3, [r2, #0]
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000610 	.word	0x20000610

080034f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003506:	4b41      	ldr	r3, [pc, #260]	; (800360c <xTaskResumeAll+0x114>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <xTaskResumeAll+0x2c>
	__asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	603b      	str	r3, [r7, #0]
}
 8003520:	bf00      	nop
 8003522:	e7fe      	b.n	8003522 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003524:	f000 fbca 	bl	8003cbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <xTaskResumeAll+0x114>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3b01      	subs	r3, #1
 800352e:	4a37      	ldr	r2, [pc, #220]	; (800360c <xTaskResumeAll+0x114>)
 8003530:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <xTaskResumeAll+0x114>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d161      	bne.n	80035fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800353a:	4b35      	ldr	r3, [pc, #212]	; (8003610 <xTaskResumeAll+0x118>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d05d      	beq.n	80035fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003542:	e02e      	b.n	80035a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003544:	4b33      	ldr	r3, [pc, #204]	; (8003614 <xTaskResumeAll+0x11c>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3318      	adds	r3, #24
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fd7b 	bl	800304c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3304      	adds	r3, #4
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fd76 	bl	800304c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	2201      	movs	r2, #1
 8003566:	409a      	lsls	r2, r3
 8003568:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <xTaskResumeAll+0x120>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4313      	orrs	r3, r2
 800356e:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <xTaskResumeAll+0x120>)
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4a27      	ldr	r2, [pc, #156]	; (800361c <xTaskResumeAll+0x124>)
 8003580:	441a      	add	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3304      	adds	r3, #4
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f7ff fd04 	bl	8002f96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003592:	4b23      	ldr	r3, [pc, #140]	; (8003620 <xTaskResumeAll+0x128>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	429a      	cmp	r2, r3
 800359a:	d302      	bcc.n	80035a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <xTaskResumeAll+0x12c>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035a2:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <xTaskResumeAll+0x11c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1cc      	bne.n	8003544 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035b0:	f000 fa0c 	bl	80039cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035b4:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <xTaskResumeAll+0x130>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035c0:	f000 f836 	bl	8003630 <xTaskIncrementTick>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80035ca:	4b16      	ldr	r3, [pc, #88]	; (8003624 <xTaskResumeAll+0x12c>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f1      	bne.n	80035c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <xTaskResumeAll+0x130>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <xTaskResumeAll+0x12c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035ea:	2301      	movs	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035ee:	4b0f      	ldr	r3, [pc, #60]	; (800362c <xTaskResumeAll+0x134>)
 80035f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035fe:	f000 fb8d 	bl	8003d1c <vPortExitCritical>

	return xAlreadyYielded;
 8003602:	68bb      	ldr	r3, [r7, #8]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000610 	.word	0x20000610
 8003610:	200005e8 	.word	0x200005e8
 8003614:	200005a8 	.word	0x200005a8
 8003618:	200005f0 	.word	0x200005f0
 800361c:	200004ec 	.word	0x200004ec
 8003620:	200004e8 	.word	0x200004e8
 8003624:	200005fc 	.word	0x200005fc
 8003628:	200005f8 	.word	0x200005f8
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800363a:	4b51      	ldr	r3, [pc, #324]	; (8003780 <xTaskIncrementTick+0x150>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f040 808d 	bne.w	800375e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003644:	4b4f      	ldr	r3, [pc, #316]	; (8003784 <xTaskIncrementTick+0x154>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800364c:	4a4d      	ldr	r2, [pc, #308]	; (8003784 <xTaskIncrementTick+0x154>)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d120      	bne.n	800369a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003658:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <xTaskIncrementTick+0x158>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <xTaskIncrementTick+0x48>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	603b      	str	r3, [r7, #0]
}
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <xTaskIncrementTick+0x46>
 8003678:	4b43      	ldr	r3, [pc, #268]	; (8003788 <xTaskIncrementTick+0x158>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b43      	ldr	r3, [pc, #268]	; (800378c <xTaskIncrementTick+0x15c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a41      	ldr	r2, [pc, #260]	; (8003788 <xTaskIncrementTick+0x158>)
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4a41      	ldr	r2, [pc, #260]	; (800378c <xTaskIncrementTick+0x15c>)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b40      	ldr	r3, [pc, #256]	; (8003790 <xTaskIncrementTick+0x160>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3301      	adds	r3, #1
 8003692:	4a3f      	ldr	r2, [pc, #252]	; (8003790 <xTaskIncrementTick+0x160>)
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	f000 f999 	bl	80039cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <xTaskIncrementTick+0x164>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d34d      	bcc.n	8003740 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036a4:	4b38      	ldr	r3, [pc, #224]	; (8003788 <xTaskIncrementTick+0x158>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <xTaskIncrementTick+0x82>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <xTaskIncrementTick+0x84>
 80036b2:	2300      	movs	r3, #0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d004      	beq.n	80036c2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b8:	4b36      	ldr	r3, [pc, #216]	; (8003794 <xTaskIncrementTick+0x164>)
 80036ba:	f04f 32ff 	mov.w	r2, #4294967295
 80036be:	601a      	str	r2, [r3, #0]
					break;
 80036c0:	e03e      	b.n	8003740 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <xTaskIncrementTick+0x158>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d203      	bcs.n	80036e2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036da:	4a2e      	ldr	r2, [pc, #184]	; (8003794 <xTaskIncrementTick+0x164>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6013      	str	r3, [r2, #0]
						break;
 80036e0:	e02e      	b.n	8003740 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3304      	adds	r3, #4
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fcb0 	bl	800304c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d004      	beq.n	80036fe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	3318      	adds	r3, #24
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fca7 	bl	800304c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	2201      	movs	r2, #1
 8003704:	409a      	lsls	r2, r3
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <xTaskIncrementTick+0x168>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	4a22      	ldr	r2, [pc, #136]	; (8003798 <xTaskIncrementTick+0x168>)
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4a1f      	ldr	r2, [pc, #124]	; (800379c <xTaskIncrementTick+0x16c>)
 800371e:	441a      	add	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	3304      	adds	r3, #4
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f7ff fc35 	bl	8002f96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <xTaskIncrementTick+0x170>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	429a      	cmp	r2, r3
 8003738:	d3b4      	bcc.n	80036a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800373a:	2301      	movs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800373e:	e7b1      	b.n	80036a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <xTaskIncrementTick+0x170>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003746:	4915      	ldr	r1, [pc, #84]	; (800379c <xTaskIncrementTick+0x16c>)
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d907      	bls.n	8003768 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e004      	b.n	8003768 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <xTaskIncrementTick+0x174>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <xTaskIncrementTick+0x174>)
 8003766:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <xTaskIncrementTick+0x178>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003770:	2301      	movs	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003774:	697b      	ldr	r3, [r7, #20]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000610 	.word	0x20000610
 8003784:	200005ec 	.word	0x200005ec
 8003788:	200005a0 	.word	0x200005a0
 800378c:	200005a4 	.word	0x200005a4
 8003790:	20000600 	.word	0x20000600
 8003794:	20000608 	.word	0x20000608
 8003798:	200005f0 	.word	0x200005f0
 800379c:	200004ec 	.word	0x200004ec
 80037a0:	200004e8 	.word	0x200004e8
 80037a4:	200005f8 	.word	0x200005f8
 80037a8:	200005fc 	.word	0x200005fc

080037ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <vTaskSwitchContext+0xa0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037ba:	4b25      	ldr	r3, [pc, #148]	; (8003850 <vTaskSwitchContext+0xa4>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037c0:	e03f      	b.n	8003842 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80037c2:	4b23      	ldr	r3, [pc, #140]	; (8003850 <vTaskSwitchContext+0xa4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80037c8:	4b22      	ldr	r3, [pc, #136]	; (8003854 <vTaskSwitchContext+0xa8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80037d6:	7afb      	ldrb	r3, [r7, #11]
 80037d8:	f1c3 031f 	rsb	r3, r3, #31
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	491e      	ldr	r1, [pc, #120]	; (8003858 <vTaskSwitchContext+0xac>)
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <vTaskSwitchContext+0x5c>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	607b      	str	r3, [r7, #4]
}
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <vTaskSwitchContext+0x5a>
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4a11      	ldr	r2, [pc, #68]	; (8003858 <vTaskSwitchContext+0xac>)
 8003814:	4413      	add	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	3308      	adds	r3, #8
 800382a:	429a      	cmp	r2, r3
 800382c:	d104      	bne.n	8003838 <vTaskSwitchContext+0x8c>
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4a07      	ldr	r2, [pc, #28]	; (800385c <vTaskSwitchContext+0xb0>)
 8003840:	6013      	str	r3, [r2, #0]
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	20000610 	.word	0x20000610
 8003850:	200005fc 	.word	0x200005fc
 8003854:	200005f0 	.word	0x200005f0
 8003858:	200004ec 	.word	0x200004ec
 800385c:	200004e8 	.word	0x200004e8

08003860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003868:	f000 f852 	bl	8003910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <prvIdleTask+0x28>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d9f9      	bls.n	8003868 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <prvIdleTask+0x2c>)
 8003876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003884:	e7f0      	b.n	8003868 <prvIdleTask+0x8>
 8003886:	bf00      	nop
 8003888:	200004ec 	.word	0x200004ec
 800388c:	e000ed04 	.word	0xe000ed04

08003890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	e00c      	b.n	80038b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <prvInitialiseTaskLists+0x60>)
 80038a8:	4413      	add	r3, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fb48 	bl	8002f40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3301      	adds	r3, #1
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b06      	cmp	r3, #6
 80038ba:	d9ef      	bls.n	800389c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038bc:	480d      	ldr	r0, [pc, #52]	; (80038f4 <prvInitialiseTaskLists+0x64>)
 80038be:	f7ff fb3f 	bl	8002f40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038c2:	480d      	ldr	r0, [pc, #52]	; (80038f8 <prvInitialiseTaskLists+0x68>)
 80038c4:	f7ff fb3c 	bl	8002f40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038c8:	480c      	ldr	r0, [pc, #48]	; (80038fc <prvInitialiseTaskLists+0x6c>)
 80038ca:	f7ff fb39 	bl	8002f40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038ce:	480c      	ldr	r0, [pc, #48]	; (8003900 <prvInitialiseTaskLists+0x70>)
 80038d0:	f7ff fb36 	bl	8002f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038d4:	480b      	ldr	r0, [pc, #44]	; (8003904 <prvInitialiseTaskLists+0x74>)
 80038d6:	f7ff fb33 	bl	8002f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <prvInitialiseTaskLists+0x78>)
 80038dc:	4a05      	ldr	r2, [pc, #20]	; (80038f4 <prvInitialiseTaskLists+0x64>)
 80038de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <prvInitialiseTaskLists+0x7c>)
 80038e2:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <prvInitialiseTaskLists+0x68>)
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200004ec 	.word	0x200004ec
 80038f4:	20000578 	.word	0x20000578
 80038f8:	2000058c 	.word	0x2000058c
 80038fc:	200005a8 	.word	0x200005a8
 8003900:	200005bc 	.word	0x200005bc
 8003904:	200005d4 	.word	0x200005d4
 8003908:	200005a0 	.word	0x200005a0
 800390c:	200005a4 	.word	0x200005a4

08003910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003916:	e019      	b.n	800394c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003918:	f000 f9d0 	bl	8003cbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <prvCheckTasksWaitingTermination+0x50>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3304      	adds	r3, #4
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fb8f 	bl	800304c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <prvCheckTasksWaitingTermination+0x54>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3b01      	subs	r3, #1
 8003934:	4a0b      	ldr	r2, [pc, #44]	; (8003964 <prvCheckTasksWaitingTermination+0x54>)
 8003936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <prvCheckTasksWaitingTermination+0x58>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3b01      	subs	r3, #1
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <prvCheckTasksWaitingTermination+0x58>)
 8003940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003942:	f000 f9eb 	bl	8003d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f810 	bl	800396c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <prvCheckTasksWaitingTermination+0x58>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e1      	bne.n	8003918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200005bc 	.word	0x200005bc
 8003964:	200005e8 	.word	0x200005e8
 8003968:	200005d0 	.word	0x200005d0

0800396c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fb20 	bl	8003fc8 <vPortFree>
				vPortFree( pxTCB );
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fb1d 	bl	8003fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800398e:	e018      	b.n	80039c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003996:	2b01      	cmp	r3, #1
 8003998:	d103      	bne.n	80039a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fb14 	bl	8003fc8 <vPortFree>
	}
 80039a0:	e00f      	b.n	80039c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d00a      	beq.n	80039c2 <prvDeleteTCB+0x56>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	60fb      	str	r3, [r7, #12]
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <prvDeleteTCB+0x54>
	}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <prvResetNextTaskUnblockTime+0x40>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <prvResetNextTaskUnblockTime+0x14>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <prvResetNextTaskUnblockTime+0x16>
 80039e0:	2300      	movs	r3, #0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <prvResetNextTaskUnblockTime+0x44>)
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039ee:	e008      	b.n	8003a02 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <prvResetNextTaskUnblockTime+0x40>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <prvResetNextTaskUnblockTime+0x44>)
 8003a00:	6013      	str	r3, [r2, #0]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr
 8003a0c:	200005a0 	.word	0x200005a0
 8003a10:	20000608 	.word	0x20000608

08003a14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a24:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fb0e 	bl	800304c <uxListRemove>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	4b21      	ldr	r3, [pc, #132]	; (8003acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	4a20      	ldr	r2, [pc, #128]	; (8003acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d10a      	bne.n	8003a6c <prvAddCurrentTaskToDelayedList+0x58>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4619      	mov	r1, r3
 8003a64:	481a      	ldr	r0, [pc, #104]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003a66:	f7ff fa96 	bl	8002f96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a6a:	e026      	b.n	8003aba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a74:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d209      	bcs.n	8003a98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4610      	mov	r0, r2
 8003a92:	f7ff faa3 	bl	8002fdc <vListInsert>
}
 8003a96:	e010      	b.n	8003aba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f7ff fa99 	bl	8002fdc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d202      	bcs.n	8003aba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ab4:	4a09      	ldr	r2, [pc, #36]	; (8003adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	6013      	str	r3, [r2, #0]
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200005ec 	.word	0x200005ec
 8003ac8:	200004e8 	.word	0x200004e8
 8003acc:	200005f0 	.word	0x200005f0
 8003ad0:	200005d4 	.word	0x200005d4
 8003ad4:	200005a4 	.word	0x200005a4
 8003ad8:	200005a0 	.word	0x200005a0
 8003adc:	20000608 	.word	0x20000608

08003ae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3b04      	subs	r3, #4
 8003af0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3b04      	subs	r3, #4
 8003afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f023 0201 	bic.w	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3b04      	subs	r3, #4
 8003b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b10:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <pxPortInitialiseStack+0x54>)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3b14      	subs	r3, #20
 8003b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3b20      	subs	r3, #32
 8003b26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b28:	68fb      	ldr	r3, [r7, #12]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	08003b39 	.word	0x08003b39

08003b38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <prvTaskExitError+0x54>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d00a      	beq.n	8003b62 <prvTaskExitError+0x2a>
	__asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	60fb      	str	r3, [r7, #12]
}
 8003b5e:	bf00      	nop
 8003b60:	e7fe      	b.n	8003b60 <prvTaskExitError+0x28>
	__asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	60bb      	str	r3, [r7, #8]
}
 8003b74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b76:	bf00      	nop
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0fc      	beq.n	8003b78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	2000000c 	.word	0x2000000c

08003b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b90:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <pxCurrentTCBConst2>)
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	6808      	ldr	r0, [r1, #0]
 8003b96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b9a:	f380 8809 	msr	PSP, r0
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f380 8811 	msr	BASEPRI, r0
 8003baa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003bae:	4770      	bx	lr

08003bb0 <pxCurrentTCBConst2>:
 8003bb0:	200004e8 	.word	0x200004e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop

08003bb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003bb8:	4806      	ldr	r0, [pc, #24]	; (8003bd4 <prvPortStartFirstTask+0x1c>)
 8003bba:	6800      	ldr	r0, [r0, #0]
 8003bbc:	6800      	ldr	r0, [r0, #0]
 8003bbe:	f380 8808 	msr	MSP, r0
 8003bc2:	b662      	cpsie	i
 8003bc4:	b661      	cpsie	f
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	df00      	svc	0
 8003bd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003bd2:	bf00      	nop
 8003bd4:	e000ed08 	.word	0xe000ed08

08003bd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bde:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <xPortStartScheduler+0xd0>)
 8003be0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	22ff      	movs	r2, #255	; 0xff
 8003bee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <xPortStartScheduler+0xd4>)
 8003c04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c06:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <xPortStartScheduler+0xd8>)
 8003c08:	2207      	movs	r2, #7
 8003c0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c0c:	e009      	b.n	8003c22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003c0e:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <xPortStartScheduler+0xd8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <xPortStartScheduler+0xd8>)
 8003c16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b80      	cmp	r3, #128	; 0x80
 8003c2c:	d0ef      	beq.n	8003c0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <xPortStartScheduler+0xd8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f1c3 0307 	rsb	r3, r3, #7
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d00a      	beq.n	8003c50 <xPortStartScheduler+0x78>
	__asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	60bb      	str	r3, [r7, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c50:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <xPortStartScheduler+0xd8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <xPortStartScheduler+0xd8>)
 8003c58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <xPortStartScheduler+0xd8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c62:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <xPortStartScheduler+0xd8>)
 8003c64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <xPortStartScheduler+0xdc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <xPortStartScheduler+0xdc>)
 8003c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <xPortStartScheduler+0xdc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a0d      	ldr	r2, [pc, #52]	; (8003cb4 <xPortStartScheduler+0xdc>)
 8003c80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c86:	f000 f8b9 	bl	8003dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <xPortStartScheduler+0xe0>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c90:	f7ff ff92 	bl	8003bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c94:	f7ff fd8a 	bl	80037ac <vTaskSwitchContext>
	prvTaskExitError();
 8003c98:	f7ff ff4e 	bl	8003b38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	e000e400 	.word	0xe000e400
 8003cac:	20000614 	.word	0x20000614
 8003cb0:	20000618 	.word	0x20000618
 8003cb4:	e000ed20 	.word	0xe000ed20
 8003cb8:	2000000c 	.word	0x2000000c

08003cbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	607b      	str	r3, [r7, #4]
}
 8003cd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <vPortEnterCritical+0x58>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	; (8003d14 <vPortEnterCritical+0x58>)
 8003cde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <vPortEnterCritical+0x58>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d10f      	bne.n	8003d08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <vPortEnterCritical+0x5c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <vPortEnterCritical+0x4c>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	603b      	str	r3, [r7, #0]
}
 8003d04:	bf00      	nop
 8003d06:	e7fe      	b.n	8003d06 <vPortEnterCritical+0x4a>
	}
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	2000000c 	.word	0x2000000c
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <vPortExitCritical+0x4c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <vPortExitCritical+0x24>
	__asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	607b      	str	r3, [r7, #4]
}
 8003d3c:	bf00      	nop
 8003d3e:	e7fe      	b.n	8003d3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <vPortExitCritical+0x4c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <vPortExitCritical+0x4c>)
 8003d48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <vPortExitCritical+0x4c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <vPortExitCritical+0x42>
 8003d52:	2300      	movs	r3, #0
 8003d54:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr
 8003d68:	2000000c 	.word	0x2000000c
 8003d6c:	00000000 	.word	0x00000000

08003d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d70:	f3ef 8009 	mrs	r0, PSP
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <pxCurrentTCBConst>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d80:	6010      	str	r0, [r2, #0]
 8003d82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003d86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d8a:	f380 8811 	msr	BASEPRI, r0
 8003d8e:	f7ff fd0d 	bl	80037ac <vTaskSwitchContext>
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f380 8811 	msr	BASEPRI, r0
 8003d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	6808      	ldr	r0, [r1, #0]
 8003da2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003da6:	f380 8809 	msr	PSP, r0
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	4770      	bx	lr

08003db0 <pxCurrentTCBConst>:
 8003db0:	200004e8 	.word	0x200004e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop

08003db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	607b      	str	r3, [r7, #4]
}
 8003dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003dd2:	f7ff fc2d 	bl	8003630 <xTaskIncrementTick>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <SysTick_Handler+0x40>)
 8003dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	2300      	movs	r3, #0
 8003de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f383 8811 	msr	BASEPRI, r3
}
 8003dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <vPortSetupTimerInterrupt+0x30>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e06:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <vPortSetupTimerInterrupt+0x34>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <vPortSetupTimerInterrupt+0x38>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <vPortSetupTimerInterrupt+0x3c>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	4a08      	ldr	r2, [pc, #32]	; (8003e3c <vPortSetupTimerInterrupt+0x40>)
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e1e:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <vPortSetupTimerInterrupt+0x30>)
 8003e20:	2207      	movs	r2, #7
 8003e22:	601a      	str	r2, [r3, #0]
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	e000e010 	.word	0xe000e010
 8003e30:	e000e018 	.word	0xe000e018
 8003e34:	20000000 	.word	0x20000000
 8003e38:	10624dd3 	.word	0x10624dd3
 8003e3c:	e000e014 	.word	0xe000e014

08003e40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e4c:	f7ff fb46 	bl	80034dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e50:	4b58      	ldr	r3, [pc, #352]	; (8003fb4 <pvPortMalloc+0x174>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e58:	f000 f910 	bl	800407c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e5c:	4b56      	ldr	r3, [pc, #344]	; (8003fb8 <pvPortMalloc+0x178>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f040 808e 	bne.w	8003f86 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01d      	beq.n	8003eac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003e70:	2208      	movs	r2, #8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d014      	beq.n	8003eac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f023 0307 	bic.w	r3, r3, #7
 8003e88:	3308      	adds	r3, #8
 8003e8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <pvPortMalloc+0x6c>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	617b      	str	r3, [r7, #20]
}
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d069      	beq.n	8003f86 <pvPortMalloc+0x146>
 8003eb2:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <pvPortMalloc+0x17c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d864      	bhi.n	8003f86 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ebc:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <pvPortMalloc+0x180>)
 8003ebe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ec0:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <pvPortMalloc+0x180>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ec6:	e004      	b.n	8003ed2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d903      	bls.n	8003ee4 <pvPortMalloc+0xa4>
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f1      	bne.n	8003ec8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ee4:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <pvPortMalloc+0x174>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d04b      	beq.n	8003f86 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	4413      	add	r3, r2
 8003ef6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	1ad2      	subs	r2, r2, r3
 8003f08:	2308      	movs	r3, #8
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d91f      	bls.n	8003f50 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <pvPortMalloc+0xf8>
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	613b      	str	r3, [r7, #16]
}
 8003f34:	bf00      	nop
 8003f36:	e7fe      	b.n	8003f36 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f4a:	69b8      	ldr	r0, [r7, #24]
 8003f4c:	f000 f8f8 	bl	8004140 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <pvPortMalloc+0x17c>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <pvPortMalloc+0x17c>)
 8003f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f5e:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <pvPortMalloc+0x17c>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <pvPortMalloc+0x184>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d203      	bcs.n	8003f72 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f6a:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <pvPortMalloc+0x17c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <pvPortMalloc+0x184>)
 8003f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <pvPortMalloc+0x178>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f86:	f7ff fab7 	bl	80034f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <pvPortMalloc+0x16a>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	60fb      	str	r3, [r7, #12]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <pvPortMalloc+0x168>
	return pvReturn;
 8003faa:	69fb      	ldr	r3, [r7, #28]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3728      	adds	r7, #40	; 0x28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20001224 	.word	0x20001224
 8003fb8:	20001230 	.word	0x20001230
 8003fbc:	20001228 	.word	0x20001228
 8003fc0:	2000121c 	.word	0x2000121c
 8003fc4:	2000122c 	.word	0x2000122c

08003fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d048      	beq.n	800406c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fda:	2308      	movs	r3, #8
 8003fdc:	425b      	negs	r3, r3
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	4b21      	ldr	r3, [pc, #132]	; (8004074 <vPortFree+0xac>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <vPortFree+0x44>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	60fb      	str	r3, [r7, #12]
}
 8004008:	bf00      	nop
 800400a:	e7fe      	b.n	800400a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <vPortFree+0x62>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	60bb      	str	r3, [r7, #8]
}
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <vPortFree+0xac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d019      	beq.n	800406c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d115      	bne.n	800406c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <vPortFree+0xac>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	43db      	mvns	r3, r3
 800404a:	401a      	ands	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004050:	f7ff fa44 	bl	80034dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	4b07      	ldr	r3, [pc, #28]	; (8004078 <vPortFree+0xb0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4413      	add	r3, r2
 800405e:	4a06      	ldr	r2, [pc, #24]	; (8004078 <vPortFree+0xb0>)
 8004060:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004062:	6938      	ldr	r0, [r7, #16]
 8004064:	f000 f86c 	bl	8004140 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004068:	f7ff fa46 	bl	80034f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800406c:	bf00      	nop
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20001230 	.word	0x20001230
 8004078:	20001228 	.word	0x20001228

0800407c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004082:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004086:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <prvHeapInit+0xac>)
 800408a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00c      	beq.n	80040b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3307      	adds	r3, #7
 800409a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0307 	bic.w	r3, r3, #7
 80040a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <prvHeapInit+0xac>)
 80040ac:	4413      	add	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040b4:	4a1d      	ldr	r2, [pc, #116]	; (800412c <prvHeapInit+0xb0>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040ba:	4b1c      	ldr	r3, [pc, #112]	; (800412c <prvHeapInit+0xb0>)
 80040bc:	2200      	movs	r2, #0
 80040be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	4413      	add	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040c8:	2208      	movs	r2, #8
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0307 	bic.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a15      	ldr	r2, [pc, #84]	; (8004130 <prvHeapInit+0xb4>)
 80040dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80040de:	4b14      	ldr	r3, [pc, #80]	; (8004130 <prvHeapInit+0xb4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2200      	movs	r2, #0
 80040e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <prvHeapInit+0xb4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	1ad2      	subs	r2, r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <prvHeapInit+0xb4>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <prvHeapInit+0xb8>)
 800410a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a09      	ldr	r2, [pc, #36]	; (8004138 <prvHeapInit+0xbc>)
 8004112:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <prvHeapInit+0xc0>)
 8004116:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800411a:	601a      	str	r2, [r3, #0]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	2000061c 	.word	0x2000061c
 800412c:	2000121c 	.word	0x2000121c
 8004130:	20001224 	.word	0x20001224
 8004134:	2000122c 	.word	0x2000122c
 8004138:	20001228 	.word	0x20001228
 800413c:	20001230 	.word	0x20001230

08004140 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004148:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <prvInsertBlockIntoFreeList+0xa8>)
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e002      	b.n	8004154 <prvInsertBlockIntoFreeList+0x14>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d8f7      	bhi.n	800414e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	4413      	add	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d108      	bne.n	8004182 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	441a      	add	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	441a      	add	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d118      	bne.n	80041c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <prvInsertBlockIntoFreeList+0xac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d00d      	beq.n	80041be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	441a      	add	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e008      	b.n	80041d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <prvInsertBlockIntoFreeList+0xac>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e003      	b.n	80041d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d002      	beq.n	80041de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	2000121c 	.word	0x2000121c
 80041ec:	20001224 	.word	0x20001224

080041f0 <memset>:
 80041f0:	4603      	mov	r3, r0
 80041f2:	4402      	add	r2, r0
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d100      	bne.n	80041fa <memset+0xa>
 80041f8:	4770      	bx	lr
 80041fa:	f803 1b01 	strb.w	r1, [r3], #1
 80041fe:	e7f9      	b.n	80041f4 <memset+0x4>

08004200 <__libc_init_array>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	2600      	movs	r6, #0
 8004204:	4d0c      	ldr	r5, [pc, #48]	; (8004238 <__libc_init_array+0x38>)
 8004206:	4c0d      	ldr	r4, [pc, #52]	; (800423c <__libc_init_array+0x3c>)
 8004208:	1b64      	subs	r4, r4, r5
 800420a:	10a4      	asrs	r4, r4, #2
 800420c:	42a6      	cmp	r6, r4
 800420e:	d109      	bne.n	8004224 <__libc_init_array+0x24>
 8004210:	f000 f81a 	bl	8004248 <_init>
 8004214:	2600      	movs	r6, #0
 8004216:	4d0a      	ldr	r5, [pc, #40]	; (8004240 <__libc_init_array+0x40>)
 8004218:	4c0a      	ldr	r4, [pc, #40]	; (8004244 <__libc_init_array+0x44>)
 800421a:	1b64      	subs	r4, r4, r5
 800421c:	10a4      	asrs	r4, r4, #2
 800421e:	42a6      	cmp	r6, r4
 8004220:	d105      	bne.n	800422e <__libc_init_array+0x2e>
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	f855 3b04 	ldr.w	r3, [r5], #4
 8004228:	4798      	blx	r3
 800422a:	3601      	adds	r6, #1
 800422c:	e7ee      	b.n	800420c <__libc_init_array+0xc>
 800422e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004232:	4798      	blx	r3
 8004234:	3601      	adds	r6, #1
 8004236:	e7f2      	b.n	800421e <__libc_init_array+0x1e>
 8004238:	080042bc 	.word	0x080042bc
 800423c:	080042bc 	.word	0x080042bc
 8004240:	080042bc 	.word	0x080042bc
 8004244:	080042c0 	.word	0x080042c0

08004248 <_init>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr

08004254 <_fini>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr
