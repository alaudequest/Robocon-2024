
Slave_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ee0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080b0  080080b0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080080b0  080080b0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080b0  080080b0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080b4  080080b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080080b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  20000060  08008118  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019ec  08008118  000219ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000176ec  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f4d  00000000  00000000  000377b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f96  00000000  00000000  0003cb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b1e0  00000000  00000000  0003db1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017954  00000000  00000000  00058cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094efe  00000000  00000000  00070652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005938  00000000  00000000  00105550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0010ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08007fd8 	.word	0x08007fd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08007fd8 	.word	0x08007fd8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2iz>:
 8000d64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30f      	bcc.n	8000d8e <__aeabi_f2iz+0x2a>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d90d      	bls.n	8000d94 <__aeabi_f2iz+0x30>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d84:	fa23 f002 	lsr.w	r0, r3, r2
 8000d88:	bf18      	it	ne
 8000d8a:	4240      	negne	r0, r0
 8000d8c:	4770      	bx	lr
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	4770      	bx	lr
 8000d94:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d98:	d101      	bne.n	8000d9e <__aeabi_f2iz+0x3a>
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	d105      	bne.n	8000daa <__aeabi_f2iz+0x46>
 8000d9e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da8:	4770      	bx	lr
 8000daa:	f04f 0000 	mov.w	r0, #0
 8000dae:	4770      	bx	lr

08000db0 <brd_GetAngleDC_Fast>:
extern TIM_HandleTypeDef htim4;



float brd_GetAngleDC_Fast()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	return encoder_GetPulse(&brdParam.encDC, MODE_ANGLE);
 8000db4:	2102      	movs	r1, #2
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <brd_GetAngleDC_Fast+0x14>)
 8000db8:	f000 fda4 	bl	8001904 <encoder_GetPulse>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000d4 	.word	0x200000d4

08000dc8 <brd_Init>:

void brd_Init()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af04      	add	r7, sp, #16
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000dce:	213c      	movs	r1, #60	; 0x3c
 8000dd0:	484f      	ldr	r0, [pc, #316]	; (8000f10 <brd_Init+0x148>)
 8000dd2:	f004 f895 	bl	8004f00 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000dd6:	213c      	movs	r1, #60	; 0x3c
 8000dd8:	484e      	ldr	r0, [pc, #312]	; (8000f14 <brd_Init+0x14c>)
 8000dda:	f004 f891 	bl	8004f00 <HAL_TIM_Encoder_Start_IT>
	encoder_Init(&brdParam.encDC, &htim3, DCEncoderPerRound*DCGearRatio, DCDeltaT);
 8000dde:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <brd_Init+0x150>)
 8000de0:	f640 52cf 	movw	r2, #3535	; 0xdcf
 8000de4:	494a      	ldr	r1, [pc, #296]	; (8000f10 <brd_Init+0x148>)
 8000de6:	484d      	ldr	r0, [pc, #308]	; (8000f1c <brd_Init+0x154>)
 8000de8:	f000 fce8 	bl	80017bc <encoder_Init>
	encoder_Init(&brdParam.encBLDC, &htim4, _BLDCEncoderPerRound*_BLDCGearRatio, _BLDCDeltaT);
 8000dec:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <brd_Init+0x150>)
 8000dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df2:	4948      	ldr	r1, [pc, #288]	; (8000f14 <brd_Init+0x14c>)
 8000df4:	484a      	ldr	r0, [pc, #296]	; (8000f20 <brd_Init+0x158>)
 8000df6:	f000 fce1 	bl	80017bc <encoder_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4849      	ldr	r0, [pc, #292]	; (8000f24 <brd_Init+0x15c>)
 8000dfe:	f003 ff3b 	bl	8004c78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e02:	2108      	movs	r1, #8
 8000e04:	4847      	ldr	r0, [pc, #284]	; (8000f24 <brd_Init+0x15c>)
 8000e06:	f003 ff37 	bl	8004c78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e0a:	210c      	movs	r1, #12
 8000e0c:	4845      	ldr	r0, [pc, #276]	; (8000f24 <brd_Init+0x15c>)
 8000e0e:	f003 ff33 	bl	8004c78 <HAL_TIM_PWM_Start>
	MotorBLDC_Init(&brdParam.mbldc, &htim2, TIM_CHANNEL_2,
 8000e12:	2301      	movs	r3, #1
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	4b44      	ldr	r3, [pc, #272]	; (8000f28 <brd_Init+0x160>)
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <brd_Init+0x160>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	4940      	ldr	r1, [pc, #256]	; (8000f24 <brd_Init+0x15c>)
 8000e24:	4841      	ldr	r0, [pc, #260]	; (8000f2c <brd_Init+0x164>)
 8000e26:	f000 ff56 	bl	8001cd6 <MotorBLDC_Init>
			BLDC_BRAKE_GPIO_Port,
			BLDC_BRAKE_Pin,
			BLDC_DIR_GPIO_Port,
			BLDC_DIR_Pin);
	MotorDC_Init(&brdParam.mdc, &htim2, MOTOR_PWM_INVERSE,
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2308      	movs	r3, #8
 8000e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e34:	493b      	ldr	r1, [pc, #236]	; (8000f24 <brd_Init+0x15c>)
 8000e36:	483e      	ldr	r0, [pc, #248]	; (8000f30 <brd_Init+0x168>)
 8000e38:	f000 fddb 	bl	80019f2 <MotorDC_Init>
			TIM_CHANNEL_3,
			TIM_CHANNEL_4);
	brdParam.pidBLDC_Speed.kP = 0.1;
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <brd_Init+0x16c>)
 8000e3e:	4a3e      	ldr	r2, [pc, #248]	; (8000f38 <brd_Init+0x170>)
 8000e40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	brdParam.pidBLDC_Speed.kI = 10;
 8000e44:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <brd_Init+0x16c>)
 8000e46:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <brd_Init+0x174>)
 8000e48:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	brdParam.pidBLDC_Speed.kD = 0;
 8000e4c:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <brd_Init+0x16c>)
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	brdParam.pidBLDC_Speed.alpha = 0;
 8000e56:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <brd_Init+0x16c>)
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	brdParam.pidBLDC_Speed.deltaT = 0.001;
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <brd_Init+0x16c>)
 8000e62:	4a2d      	ldr	r2, [pc, #180]	; (8000f18 <brd_Init+0x150>)
 8000e64:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	brdParam.pidBLDC_Speed.u_AboveLimit = 1000;
 8000e68:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <brd_Init+0x16c>)
 8000e6a:	4a35      	ldr	r2, [pc, #212]	; (8000f40 <brd_Init+0x178>)
 8000e6c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	brdParam.pidBLDC_Speed.u_BelowLimit = -1000;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <brd_Init+0x16c>)
 8000e72:	4a34      	ldr	r2, [pc, #208]	; (8000f44 <brd_Init+0x17c>)
 8000e74:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	brdParam.pidBLDC_Speed.kB = 1/0.001;
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <brd_Init+0x16c>)
 8000e7a:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <brd_Init+0x178>)
 8000e7c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

	brdParam.pidDC_Angle.kP = 5;
 8000e80:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <brd_Init+0x16c>)
 8000e82:	4a31      	ldr	r2, [pc, #196]	; (8000f48 <brd_Init+0x180>)
 8000e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	brdParam.pidDC_Angle.kI = 0;
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <brd_Init+0x16c>)
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	brdParam.pidDC_Angle.kD = 0.04;
 8000e92:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <brd_Init+0x16c>)
 8000e94:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <brd_Init+0x184>)
 8000e96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	brdParam.pidDC_Angle.alpha = 0.8;
 8000e9a:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <brd_Init+0x16c>)
 8000e9c:	4a2c      	ldr	r2, [pc, #176]	; (8000f50 <brd_Init+0x188>)
 8000e9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	brdParam.pidDC_Angle.deltaT = 0.001;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <brd_Init+0x16c>)
 8000ea4:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <brd_Init+0x150>)
 8000ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	brdParam.pidDC_Angle.u_AboveLimit = DC_SUM_ABOVE_LIMIT;
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <brd_Init+0x16c>)
 8000eac:	4a24      	ldr	r2, [pc, #144]	; (8000f40 <brd_Init+0x178>)
 8000eae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	brdParam.pidDC_Angle.u_BelowLimit = DC_SUM_BELOW_LIMIT;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <brd_Init+0x16c>)
 8000eb4:	4a23      	ldr	r2, [pc, #140]	; (8000f44 <brd_Init+0x17c>)
 8000eb6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	brdParam.pidDC_Angle.kB = 1/0.001;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <brd_Init+0x16c>)
 8000ebc:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <brd_Init+0x178>)
 8000ebe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	brdParam.pidDC_Speed.kP = 1;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <brd_Init+0x16c>)
 8000ec4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ec8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	brdParam.pidDC_Speed.kI = 400;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <brd_Init+0x16c>)
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <brd_Init+0x18c>)
 8000ed0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	brdParam.pidDC_Speed.kD = 0;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <brd_Init+0x16c>)
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	brdParam.pidDC_Speed.alpha = 0;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <brd_Init+0x16c>)
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	brdParam.pidDC_Speed.deltaT = 0.001;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <brd_Init+0x16c>)
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <brd_Init+0x150>)
 8000eec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	brdParam.pidDC_Speed.u_AboveLimit = DC_SUM_ABOVE_LIMIT;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <brd_Init+0x16c>)
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <brd_Init+0x178>)
 8000ef4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	brdParam.pidDC_Speed.u_BelowLimit = DC_SUM_BELOW_LIMIT;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <brd_Init+0x16c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <brd_Init+0x17c>)
 8000efc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	brdParam.pidDC_Speed.kB = 1/0.001;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <brd_Init+0x16c>)
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <brd_Init+0x178>)
 8000f04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000524 	.word	0x20000524
 8000f14:	2000056c 	.word	0x2000056c
 8000f18:	3a83126f 	.word	0x3a83126f
 8000f1c:	200000d4 	.word	0x200000d4
 8000f20:	200000ac 	.word	0x200000ac
 8000f24:	200004dc 	.word	0x200004dc
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	20000098 	.word	0x20000098
 8000f30:	20000088 	.word	0x20000088
 8000f34:	2000007c 	.word	0x2000007c
 8000f38:	3dcccccd 	.word	0x3dcccccd
 8000f3c:	41200000 	.word	0x41200000
 8000f40:	447a0000 	.word	0x447a0000
 8000f44:	c47a0000 	.word	0xc47a0000
 8000f48:	40a00000 	.word	0x40a00000
 8000f4c:	3d23d70a 	.word	0x3d23d70a
 8000f50:	3f4ccccd 	.word	0x3f4ccccd
 8000f54:	43c80000 	.word	0x43c80000

08000f58 <brd_SetPID>:




void brd_SetPID(PID_Param pid,PID_type type)
{
 8000f58:	b084      	sub	sp, #16
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	f107 0c08 	add.w	ip, r7, #8
 8000f62:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch(type){
 8000f66:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d018      	beq.n	8000fa0 <brd_SetPID+0x48>
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	dc20      	bgt.n	8000fb4 <brd_SetPID+0x5c>
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d002      	beq.n	8000f7c <brd_SetPID+0x24>
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d009      	beq.n	8000f8e <brd_SetPID+0x36>
		break;
	case PID_BLDC_SPEED:
		brdParam.pidBLDC_Speed = pid;
		break;
	}
}
 8000f7a:	e01b      	b.n	8000fb4 <brd_SetPID+0x5c>
		brdParam.pidDC_Speed = pid;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <brd_SetPID+0x68>)
 8000f7e:	33c4      	adds	r3, #196	; 0xc4
 8000f80:	f107 0108 	add.w	r1, r7, #8
 8000f84:	2244      	movs	r2, #68	; 0x44
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 ffc4 	bl	8007f14 <memcpy>
		break;
 8000f8c:	e012      	b.n	8000fb4 <brd_SetPID+0x5c>
		brdParam.pidDC_Angle = pid;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <brd_SetPID+0x68>)
 8000f90:	3380      	adds	r3, #128	; 0x80
 8000f92:	f107 0108 	add.w	r1, r7, #8
 8000f96:	2244      	movs	r2, #68	; 0x44
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f006 ffbb 	bl	8007f14 <memcpy>
		break;
 8000f9e:	e009      	b.n	8000fb4 <brd_SetPID+0x5c>
		brdParam.pidBLDC_Speed = pid;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <brd_SetPID+0x68>)
 8000fa2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000fa6:	f107 0108 	add.w	r1, r7, #8
 8000faa:	2244      	movs	r2, #68	; 0x44
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 ffb1 	bl	8007f14 <memcpy>
		break;
 8000fb2:	bf00      	nop
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fbc:	b004      	add	sp, #16
 8000fbe:	4770      	bx	lr
 8000fc0:	2000007c 	.word	0x2000007c

08000fc4 <brd_GetPID>:



PID_Param brd_GetPID(PID_type type)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
	switch(type){
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d018      	beq.n	8001008 <brd_GetPID+0x44>
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	dc20      	bgt.n	800101c <brd_GetPID+0x58>
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d002      	beq.n	8000fe4 <brd_GetPID+0x20>
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d009      	beq.n	8000ff6 <brd_GetPID+0x32>
 8000fe2:	e01b      	b.n	800101c <brd_GetPID+0x58>
	case PID_DC_SPEED:
		return brdParam.pidDC_Speed;
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <brd_GetPID+0x70>)
 8000fe8:	4610      	mov	r0, r2
 8000fea:	33c4      	adds	r3, #196	; 0xc4
 8000fec:	2244      	movs	r2, #68	; 0x44
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f006 ff90 	bl	8007f14 <memcpy>
 8000ff4:	e01a      	b.n	800102c <brd_GetPID+0x68>
		break;
	case PID_DC_ANGLE:
		return brdParam.pidDC_Angle;
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <brd_GetPID+0x70>)
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	3380      	adds	r3, #128	; 0x80
 8000ffe:	2244      	movs	r2, #68	; 0x44
 8001000:	4619      	mov	r1, r3
 8001002:	f006 ff87 	bl	8007f14 <memcpy>
 8001006:	e011      	b.n	800102c <brd_GetPID+0x68>
		break;
	case PID_BLDC_SPEED:
		return brdParam.pidBLDC_Speed;
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <brd_GetPID+0x70>)
 800100c:	4610      	mov	r0, r2
 800100e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001012:	2244      	movs	r2, #68	; 0x44
 8001014:	4619      	mov	r1, r3
 8001016:	f006 ff7d 	bl	8007f14 <memcpy>
 800101a:	e007      	b.n	800102c <brd_GetPID+0x68>
		break;
	}
	return brdParam.pidDC_Speed;
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <brd_GetPID+0x70>)
 8001020:	4610      	mov	r0, r2
 8001022:	33c4      	adds	r3, #196	; 0xc4
 8001024:	2244      	movs	r2, #68	; 0x44
 8001026:	4619      	mov	r1, r3
 8001028:	f006 ff74 	bl	8007f14 <memcpy>
}
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000007c 	.word	0x2000007c

08001038 <brd_ResetState>:

void brd_ResetState()
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	brd_SetTargetAngleDC(0);
 800103c:	f04f 0000 	mov.w	r0, #0
 8001040:	f000 f83c 	bl	80010bc <brd_SetTargetAngleDC>
	brdParam.pidDC_Speed.u_AboveLimit = 0;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <brd_ResetState+0x4c>)
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	brdParam.pidDC_Speed.u_BelowLimit= 0;
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <brd_ResetState+0x4c>)
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	encoder_ResetCount(&brdParam.encDC);
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <brd_ResetState+0x50>)
 800105a:	f000 fcb1 	bl	80019c0 <encoder_ResetCount>
	osDelay(1000);
 800105e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001062:	f004 fdb9 	bl	8005bd8 <osDelay>
	brdParam.pidDC_Speed.uI = 0;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <brd_ResetState+0x4c>)
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
//	brdParam.pidDC_Speed.u_AboveLimit = 100;
//	brdParam.pidDC_Speed.u_BelowLimit= -100;
//	brdParam.pidDC_Speed.uI_AboveLimit = DC_INTERGRAL_ABOVE_LIMIT;
//	brdParam.pidDC_Speed.uI_BelowLimit = DC_INTERGRAL_BELOW_LIMIT;
	brdParam.pidDC_Speed.u_AboveLimit = DC_SUM_ABOVE_LIMIT;
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <brd_ResetState+0x4c>)
 8001072:	4a06      	ldr	r2, [pc, #24]	; (800108c <brd_ResetState+0x54>)
 8001074:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	brdParam.pidDC_Speed.u_BelowLimit= DC_SUM_BELOW_LIMIT;
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <brd_ResetState+0x4c>)
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <brd_ResetState+0x58>)
 800107c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000007c 	.word	0x2000007c
 8001088:	200000d4 	.word	0x200000d4
 800108c:	447a0000 	.word	0x447a0000
 8001090:	c47a0000 	.word	0xc47a0000

08001094 <brd_SetHomeCompleteCallback>:

void brd_SetHomeCompleteCallback()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	encoder_ResetCount(&brdParam.encDC);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <brd_SetHomeCompleteCallback+0x10>)
 800109a:	f000 fc91 	bl	80019c0 <encoder_ResetCount>

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000d4 	.word	0x200000d4

080010a8 <brd_GetTargetAngleDC>:


float brd_GetTargetAngleDC(){return brdParam.targetAngleDC;}
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <brd_GetTargetAngleDC+0x10>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	2000007c 	.word	0x2000007c

080010bc <brd_SetTargetAngleDC>:
void brd_SetTargetAngleDC(float angle){brdParam.targetAngleDC = angle;}
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <brd_SetTargetAngleDC+0x18>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	2000007c 	.word	0x2000007c

080010d8 <brd_GetObjMotorDC>:

MotorDC brd_GetObjMotorDC(){return brdParam.mdc;}
 80010d8:	b490      	push	{r4, r7}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <brd_GetObjMotorDC+0x20>)
 80010e4:	4614      	mov	r4, r2
 80010e6:	330c      	adds	r3, #12
 80010e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc90      	pop	{r4, r7}
 80010f6:	4770      	bx	lr
 80010f8:	2000007c 	.word	0x2000007c

080010fc <brd_GetObjMotorBLDC>:
void brd_SetObjMotorDC(MotorDC mdc){brdParam.mdc = mdc;}

MotorBLDC brd_GetObjMotorBLDC(){return brdParam.mbldc;}
 80010fc:	b4b0      	push	{r4, r5, r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <brd_GetObjMotorBLDC+0x24>)
 8001108:	4615      	mov	r5, r2
 800110a:	f103 041c 	add.w	r4, r3, #28
 800110e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	602b      	str	r3, [r5, #0]
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bcb0      	pop	{r4, r5, r7}
 800111e:	4770      	bx	lr
 8001120:	2000007c 	.word	0x2000007c

08001124 <brd_SetSpeedBLDC>:
void brd_SetObjMotorBLDC(MotorBLDC mbldc){brdParam.mbldc = mbldc;}

void brd_SetSpeedBLDC(float speed){brdParam.targetSpeedBLDC = speed;}
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <brd_SetSpeedBLDC+0x18>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6053      	str	r3, [r2, #4]
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	2000007c 	.word	0x2000007c

08001140 <brd_GetSpeedBLDC>:
float brd_GetSpeedBLDC(){return brdParam.targetSpeedBLDC;}
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <brd_GetSpeedBLDC+0x10>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	2000007c 	.word	0x2000007c

08001154 <brd_SetObjEncDC>:

void brd_SetObjEncDC(Encoder_t encDC){brdParam.encDC = encDC;}
 8001154:	b084      	sub	sp, #16
 8001156:	b4b0      	push	{r4, r5, r7}
 8001158:	af00      	add	r7, sp, #0
 800115a:	f107 040c 	add.w	r4, r7, #12
 800115e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <brd_SetObjEncDC+0x34>)
 8001164:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8001168:	f107 050c 	add.w	r5, r7, #12
 800116c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001174:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001178:	e884 0003 	stmia.w	r4, {r0, r1}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bcb0      	pop	{r4, r5, r7}
 8001182:	b004      	add	sp, #16
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000007c 	.word	0x2000007c

0800118c <brd_GetObjEncDC>:
Encoder_t brd_GetObjEncDC(){return brdParam.encDC;}
 800118c:	b4b0      	push	{r4, r5, r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <brd_GetObjEncDC+0x2c>)
 8001198:	4615      	mov	r5, r2
 800119a:	f103 0458 	add.w	r4, r3, #88	; 0x58
 800119e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bcb0      	pop	{r4, r5, r7}
 80011b6:	4770      	bx	lr
 80011b8:	2000007c 	.word	0x2000007c

080011bc <brd_SetObjEncBLDC>:

void brd_SetObjEncBLDC(Encoder_t encBLDC){brdParam.encBLDC = encBLDC;}
 80011bc:	b084      	sub	sp, #16
 80011be:	b4b0      	push	{r4, r5, r7}
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	f107 040c 	add.w	r4, r7, #12
 80011c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <brd_SetObjEncBLDC+0x34>)
 80011cc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80011d0:	f107 050c 	add.w	r5, r7, #12
 80011d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bcb0      	pop	{r4, r5, r7}
 80011ea:	b004      	add	sp, #16
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	2000007c 	.word	0x2000007c

080011f4 <brd_GetObjEncBLDC>:
Encoder_t brd_GetObjEncBLDC(){return brdParam.encBLDC;}
 80011f4:	b4b0      	push	{r4, r5, r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <brd_GetObjEncBLDC+0x2c>)
 8001200:	4615      	mov	r5, r2
 8001202:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001212:	e885 0003 	stmia.w	r5, {r0, r1}
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bcb0      	pop	{r4, r5, r7}
 800121e:	4770      	bx	lr
 8001220:	2000007c 	.word	0x2000007c

08001224 <brd_SetEncX4BLDC>:

void brd_SetEncX4BLDC(int32_t countX4){brdParam.encBLDC.count_X4 = countX4;}
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <brd_SetEncX4BLDC+0x18>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6353      	str	r3, [r2, #52]	; 0x34
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	2000007c 	.word	0x2000007c

08001240 <canctrl_GetEvent>:
uint32_t canEvent;

void canctrl_SetDLC(uint8_t DLC){txHeader.DLC = DLC;}
uint32_t canctrl_GetDLC(){return txHeader.DLC;}
uint32_t canctrl_GetID(){return txHeader.StdId;}
uint32_t canctrl_GetEvent(){return canEvent;}
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
 8001244:	4b02      	ldr	r3, [pc, #8]	; (8001250 <canctrl_GetEvent+0x10>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	200001ec 	.word	0x200001ec

08001254 <canctrl_SetEvent>:
void canctrl_SetEvent(uint32_t e)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	canEvent = e;
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <canctrl_SetEvent+0x18>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	200001ec 	.word	0x200001ec

08001270 <canctrl_GetRxHeader>:
void canctrl_SetTargetDevice(CAN_DEVICE_ID dev){ canctrl_SetID(dev << CAN_DEVICE_POS);}
CAN_RxHeaderTypeDef canctrl_GetRxHeader(){return rxHeader;}
 8001270:	b4b0      	push	{r4, r5, r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <canctrl_GetRxHeader+0x28>)
 800127c:	461c      	mov	r4, r3
 800127e:	4615      	mov	r5, r2
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bcb0      	pop	{r4, r5, r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200001c8 	.word	0x200001c8

0800129c <canctrl_SetFlag>:
void canctrl_RTR_SetToData(){txHeader.RTR = CAN_RTR_DATA;}
void canctrl_RTR_SetToRemote(){txHeader.RTR = CAN_RTR_REMOTE;}

#define TARGET_FLAG_GROUP canEvent
void canctrl_SetFlag(CAN_MODE_ID e){SETFLAG(TARGET_FLAG_GROUP,e);}
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2201      	movs	r2, #1
 80012aa:	409a      	lsls	r2, r3
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <canctrl_SetFlag+0x24>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <canctrl_SetFlag+0x24>)
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	200001ec 	.word	0x200001ec

080012c4 <canctrl_CheckFlag>:
bool canctrl_CheckFlag(CAN_MODE_ID e){return CHECKFLAG(TARGET_FLAG_GROUP,e);}
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2201      	movs	r2, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <canctrl_CheckFlag+0x34>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	401a      	ands	r2, r3
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2101      	movs	r1, #1
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	429a      	cmp	r2, r3
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200001ec 	.word	0x200001ec

080012fc <canctrl_ClearFlag>:
void canctrl_ClearFlag(CAN_MODE_ID e){CLEARFLAG(TARGET_FLAG_GROUP,e);}
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2201      	movs	r2, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <canctrl_ClearFlag+0x28>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4013      	ands	r3, r2
 8001316:	4a03      	ldr	r2, [pc, #12]	; (8001324 <canctrl_ClearFlag+0x28>)
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	200001ec 	.word	0x200001ec

08001328 <canctrl_GetMessage>:
	if(dataSize <= 8) txHeader.DLC = dataSize;
	memcpy(txData,data,sizeof(txData));
	return HAL_OK;
}

HAL_StatusTypeDef canctrl_GetMessage(void *data, size_t sizeOfDataType){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	if(rxHeader.DLC != sizeOfDataType) return HAL_ERROR;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <canctrl_GetMessage+0x2c>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d001      	beq.n	8001340 <canctrl_GetMessage+0x18>
 800133c:	2301      	movs	r3, #1
 800133e:	e005      	b.n	800134c <canctrl_GetMessage+0x24>
	memcpy(data,rxData,sizeOfDataType);
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	4905      	ldr	r1, [pc, #20]	; (8001358 <canctrl_GetMessage+0x30>)
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f006 fde5 	bl	8007f14 <memcpy>
	return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200001c8 	.word	0x200001c8
 8001358:	200001e4 	.word	0x200001e4

0800135c <canctrl_GetMultipleMessages>:
	}
	return HAL_BUSY;
}

HAL_StatusTypeDef canctrl_GetMultipleMessages(void *data, size_t sizeOfDataType)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
	static uint16_t tempRxDataLen = 0;
	static uint32_t stdID_PreMesg = 0;

	uint32_t canMaskMode = rxHeader.StdId & 0x0f;
 8001366:	4b33      	ldr	r3, [pc, #204]	; (8001434 <canctrl_GetMultipleMessages+0xd8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	60fb      	str	r3, [r7, #12]
	//If this is a new message (which is tempRxDataLen = 0), set stdID_PreMesg to received ID of rxHeader
	if(((canMaskMode) != stdID_PreMesg) && !tempRxDataLen){
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <canctrl_GetMultipleMessages+0xdc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	429a      	cmp	r2, r3
 8001378:	d01e      	beq.n	80013b8 <canctrl_GetMultipleMessages+0x5c>
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <canctrl_GetMultipleMessages+0xe0>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d11a      	bne.n	80013b8 <canctrl_GetMultipleMessages+0x5c>
		stdID_PreMesg = canMaskMode;
 8001382:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <canctrl_GetMultipleMessages+0xdc>)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6013      	str	r3, [r2, #0]
		// copy first data to output data, increase length received data
		memcpy(data+tempRxDataLen,rxData,rxHeader.DLC);
 8001388:	4b2c      	ldr	r3, [pc, #176]	; (800143c <canctrl_GetMultipleMessages+0xe0>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a28      	ldr	r2, [pc, #160]	; (8001434 <canctrl_GetMultipleMessages+0xd8>)
 8001394:	6912      	ldr	r2, [r2, #16]
 8001396:	492a      	ldr	r1, [pc, #168]	; (8001440 <canctrl_GetMultipleMessages+0xe4>)
 8001398:	4618      	mov	r0, r3
 800139a:	f006 fdbb 	bl	8007f14 <memcpy>
		tempRxDataLen += rxHeader.DLC;
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <canctrl_GetMultipleMessages+0xd8>)
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <canctrl_GetMultipleMessages+0xe0>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <canctrl_GetMultipleMessages+0xe0>)
 80013ae:	801a      	strh	r2, [r3, #0]
		canEvent = 0;
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <canctrl_GetMultipleMessages+0xe8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e029      	b.n	800140c <canctrl_GetMultipleMessages+0xb0>
	}
	//If data already exist but the previous message ID is not match with current received ID, return ERROR
	else if(((canMaskMode) != stdID_PreMesg) && tempRxDataLen){
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <canctrl_GetMultipleMessages+0xdc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d008      	beq.n	80013d4 <canctrl_GetMultipleMessages+0x78>
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <canctrl_GetMultipleMessages+0xe0>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <canctrl_GetMultipleMessages+0x78>
		canEvent = 0;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <canctrl_GetMultipleMessages+0xe8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
		return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e02a      	b.n	800142a <canctrl_GetMultipleMessages+0xce>
	}
	//If the received ID is match with the previous message
	else if((canMaskMode) == stdID_PreMesg){
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <canctrl_GetMultipleMessages+0xdc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d116      	bne.n	800140c <canctrl_GetMultipleMessages+0xb0>
		memcpy(data+tempRxDataLen,rxData,rxHeader.DLC);
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <canctrl_GetMultipleMessages+0xe0>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <canctrl_GetMultipleMessages+0xd8>)
 80013ea:	6912      	ldr	r2, [r2, #16]
 80013ec:	4914      	ldr	r1, [pc, #80]	; (8001440 <canctrl_GetMultipleMessages+0xe4>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f006 fd90 	bl	8007f14 <memcpy>
		tempRxDataLen += rxHeader.DLC;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <canctrl_GetMultipleMessages+0xd8>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <canctrl_GetMultipleMessages+0xe0>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <canctrl_GetMultipleMessages+0xe0>)
 8001404:	801a      	strh	r2, [r3, #0]
		canEvent = 0;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <canctrl_GetMultipleMessages+0xe8>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	}
	if(tempRxDataLen == sizeOfDataType){
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <canctrl_GetMultipleMessages+0xe0>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	4293      	cmp	r3, r2
 8001416:	d107      	bne.n	8001428 <canctrl_GetMultipleMessages+0xcc>
		tempRxDataLen = 0;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <canctrl_GetMultipleMessages+0xe0>)
 800141a:	2200      	movs	r2, #0
 800141c:	801a      	strh	r2, [r3, #0]
		stdID_PreMesg = 0;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <canctrl_GetMultipleMessages+0xdc>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	e000      	b.n	800142a <canctrl_GetMultipleMessages+0xce>
	} else return HAL_BUSY;
 8001428:	2302      	movs	r3, #2
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001c8 	.word	0x200001c8
 8001438:	200001f0 	.word	0x200001f0
 800143c:	200001f4 	.word	0x200001f4
 8001440:	200001e4 	.word	0x200001e4
 8001444:	200001ec 	.word	0x200001ec

08001448 <checkEventFromRxHeader>:
	txHeader.StdId = 0;
	memset(txData,0,sizeof(txData));
	return err;
}

void checkEventFromRxHeader(){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	for(uint8_t i = CANCTRL_MODE_START + 1; i < CANCTRL_MODE_END;i++){
 800144e:	2301      	movs	r3, #1
 8001450:	71fb      	strb	r3, [r7, #7]
 8001452:	e00e      	b.n	8001472 <checkEventFromRxHeader+0x2a>
		// masking out CAN_DEVICE_ID, only mode and reverse bit remain
		if((rxHeader.StdId & 0x0f) ==  i)	{
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <checkEventFromRxHeader+0x3c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 020f 	and.w	r2, r3, #15
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	429a      	cmp	r2, r3
 8001460:	d104      	bne.n	800146c <checkEventFromRxHeader+0x24>
			canctrl_SetFlag(i);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff19 	bl	800129c <canctrl_SetFlag>
			break;
 800146a:	e006      	b.n	800147a <checkEventFromRxHeader+0x32>
	for(uint8_t i = CANCTRL_MODE_START + 1; i < CANCTRL_MODE_END;i++){
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	3301      	adds	r3, #1
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b0b      	cmp	r3, #11
 8001476:	d9ed      	bls.n	8001454 <checkEventFromRxHeader+0xc>
		}
	}
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200001c8 	.word	0x200001c8

08001488 <canctrl_Receive>:


HAL_StatusTypeDef canctrl_Receive(CAN_HandleTypeDef *can, uint32_t FIFO)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	//Note: bắt buộc phải gọi hàm này để xử lý, nếu comment hàm này thì ngắt CAN sẽ liên tục gọi tới HAL_CAN_RxFifo0MsgPendingCallback vì
	// message đang chờ không xử lý và không cho phép chạy chương trình chính (liên tục nhảy vào chương trình ngắt)
	HAL_CAN_GetRxMessage(can, FIFO, &rxHeader, rxData);
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <canctrl_Receive+0x24>)
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <canctrl_Receive+0x28>)
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f002 f8a7 	bl	80035ec <HAL_CAN_GetRxMessage>
	checkEventFromRxHeader();
 800149e:	f7ff ffd3 	bl	8001448 <checkEventFromRxHeader>
	return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200001e4 	.word	0x200001e4
 80014b0:	200001c8 	.word	0x200001c8

080014b4 <canctrl_GetRxData>:

void canctrl_GetRxData(uint8_t *outData)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	memcpy(outData,rxData,rxHeader.DLC);
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <canctrl_GetRxData+0x20>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4905      	ldr	r1, [pc, #20]	; (80014d8 <canctrl_GetRxData+0x24>)
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f006 fd25 	bl	8007f14 <memcpy>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200001c8 	.word	0x200001c8
 80014d8:	200001e4 	.word	0x200001e4

080014dc <canctrl_Filter_List16>:
												uint16_t ID2,
												uint16_t ID3,
												uint16_t ID4,
												uint32_t filBank,
												uint32_t FIFO)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	; 0x38
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	4608      	mov	r0, r1
 80014e6:	4611      	mov	r1, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4603      	mov	r3, r0
 80014ec:	817b      	strh	r3, [r7, #10]
 80014ee:	460b      	mov	r3, r1
 80014f0:	813b      	strh	r3, [r7, #8]
 80014f2:	4613      	mov	r3, r2
 80014f4:	80fb      	strh	r3, [r7, #6]
	CAN_FilterTypeDef canFilCfg;
	canFilCfg.FilterActivation = CAN_FILTER_ENABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
	canFilCfg.FilterBank = filBank;
 80014fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
	canFilCfg.FilterFIFOAssignment = FIFO;
 80014fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001500:	623b      	str	r3, [r7, #32]
	canFilCfg.FilterIdLow = 		ID1 << 5; // 0010000000100000
 8001502:	897b      	ldrh	r3, [r7, #10]
 8001504:	015b      	lsls	r3, r3, #5
 8001506:	617b      	str	r3, [r7, #20]
	canFilCfg.FilterIdHigh = 		ID2 << 5; // 0010000001000000
 8001508:	893b      	ldrh	r3, [r7, #8]
 800150a:	015b      	lsls	r3, r3, #5
 800150c:	613b      	str	r3, [r7, #16]
	canFilCfg.FilterMaskIdLow = 	ID3 << 5; // 0010000001100000
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	015b      	lsls	r3, r3, #5
 8001512:	61fb      	str	r3, [r7, #28]
	canFilCfg.FilterMaskIdHigh = 	ID4 << 5; // 0010000010000000
 8001514:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001518:	015b      	lsls	r3, r3, #5
 800151a:	61bb      	str	r3, [r7, #24]
	canFilCfg.FilterMode = CAN_FILTERMODE_IDLIST;
 800151c:	2301      	movs	r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilCfg.FilterScale = CAN_FILTERSCALE_16BIT;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
	canFilCfg.SlaveStartFilterBank = 13;
 8001524:	230d      	movs	r3, #13
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
	return HAL_CAN_ConfigFilter(can, &canFilCfg);
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	4619      	mov	r1, r3
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f001 ff4f 	bl	80033d2 <HAL_CAN_ConfigFilter>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3738      	adds	r7, #56	; 0x38
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <canctrl_Filter_Mask16>:
										uint16_t lowID,
										uint16_t maskHigh,
										uint16_t maskLow,
										uint32_t filBank,
										uint32_t FIFO)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b08e      	sub	sp, #56	; 0x38
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	4608      	mov	r0, r1
 8001548:	4611      	mov	r1, r2
 800154a:	461a      	mov	r2, r3
 800154c:	4603      	mov	r3, r0
 800154e:	817b      	strh	r3, [r7, #10]
 8001550:	460b      	mov	r3, r1
 8001552:	813b      	strh	r3, [r7, #8]
 8001554:	4613      	mov	r3, r2
 8001556:	80fb      	strh	r3, [r7, #6]
	CAN_FilterTypeDef canFilCfg;
	canFilCfg.FilterActivation = CAN_FILTER_ENABLE;
 8001558:	2301      	movs	r3, #1
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
	canFilCfg.FilterBank = filBank;
 800155c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
	canFilCfg.FilterFIFOAssignment = FIFO;
 8001560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001562:	623b      	str	r3, [r7, #32]
	canFilCfg.FilterIdLow = 		lowID;
 8001564:	893b      	ldrh	r3, [r7, #8]
 8001566:	617b      	str	r3, [r7, #20]
	canFilCfg.FilterIdHigh = 		highID;
 8001568:	897b      	ldrh	r3, [r7, #10]
 800156a:	613b      	str	r3, [r7, #16]
	canFilCfg.FilterMaskIdLow = 	maskLow;
 800156c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001570:	61fb      	str	r3, [r7, #28]
	canFilCfg.FilterMaskIdHigh = 	maskHigh;
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	61bb      	str	r3, [r7, #24]
	canFilCfg.FilterMode = CAN_FILTERMODE_IDMASK;
 8001576:	2300      	movs	r3, #0
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilCfg.FilterScale = CAN_FILTERSCALE_16BIT;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
	canFilCfg.SlaveStartFilterBank = 13;
 800157e:	230d      	movs	r3, #13
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
	return HAL_CAN_ConfigFilter(can, &canFilCfg);
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4619      	mov	r1, r3
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f001 ff22 	bl	80033d2 <HAL_CAN_ConfigFilter>
 800158e:	4603      	mov	r3, r0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3738      	adds	r7, #56	; 0x38
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <canfunc_HandleRxEvent>:
#include "PID.h"
#include <string.h>
#include <stdbool.h>

void canfunc_HandleRxEvent(void(*pCallback)(CAN_MODE_ID ID))
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	uint32_t ce = canctrl_GetEvent();
 80015a0:	f7ff fe4e 	bl	8001240 <canctrl_GetEvent>
 80015a4:	60b8      	str	r0, [r7, #8]
	if(!ce) return;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d019      	beq.n	80015e0 <canfunc_HandleRxEvent+0x48>
	for(uint8_t i = CANCTRL_MODE_START + 1; i < CANCTRL_MODE_END; i++){
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e012      	b.n	80015d8 <canfunc_HandleRxEvent+0x40>
		if(canctrl_CheckFlag(i)) {
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe85 	bl	80012c4 <canctrl_CheckFlag>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <canfunc_HandleRxEvent+0x3a>
			pCallback(i);
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4610      	mov	r0, r2
 80015c6:	4798      	blx	r3
			canctrl_ClearFlag(i);
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fe96 	bl	80012fc <canctrl_ClearFlag>
			break;
 80015d0:	e007      	b.n	80015e2 <canfunc_HandleRxEvent+0x4a>
	for(uint8_t i = CANCTRL_MODE_START + 1; i < CANCTRL_MODE_END; i++){
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	3301      	adds	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	2b0b      	cmp	r3, #11
 80015dc:	d9e9      	bls.n	80015b2 <canfunc_HandleRxEvent+0x1a>
 80015de:	e000      	b.n	80015e2 <canfunc_HandleRxEvent+0x4a>
	if(!ce) return;
 80015e0:	bf00      	nop
		}
	}
}
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <canfunc_GetTestMode>:

uint8_t canfunc_GetTestMode()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
	uint8_t rxData[8] = {0};
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
	canctrl_GetRxData(rxData);
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff5a 	bl	80014b4 <canctrl_GetRxData>
	uint8_t testMode;
	canctrl_GetMessage(&testMode, sizeof(uint8_t));
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	2101      	movs	r1, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fe8f 	bl	8001328 <canctrl_GetMessage>
	return --testMode;
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	3b01      	subs	r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	79fb      	ldrb	r3, [r7, #7]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <canfunc_MotorGetBrake>:
	brake++;
	canctrl_PutMessage((void*)&brake, 1);
}

uint8_t canfunc_MotorGetBrake()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
	uint8_t rxData[8] = {0};
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
	canctrl_GetRxData(rxData);
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff40 	bl	80014b4 <canctrl_GetRxData>
	uint8_t brake;
	canctrl_GetMessage(&brake, sizeof(uint8_t));
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	2101      	movs	r1, #1
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fe75 	bl	8001328 <canctrl_GetMessage>
	return --brake;
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3b01      	subs	r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	79fb      	ldrb	r3, [r7, #7]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <canfunc_MotorGetBreakProtectionBLDC>:
	Break++;
	canctrl_PutMessage((void*)&Break, 1);
}

uint8_t  canfunc_MotorGetBreakProtectionBLDC()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
	uint8_t rxData[8] = {0};
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
	canctrl_GetRxData(rxData);
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff26 	bl	80014b4 <canctrl_GetRxData>
	uint8_t Break;
	canctrl_GetMessage(&Break, sizeof(uint8_t));
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	2101      	movs	r1, #1
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fe5b 	bl	8001328 <canctrl_GetMessage>
	return --Break;
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	3b01      	subs	r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	79fb      	ldrb	r3, [r7, #7]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <canfunc_GetHomeValue>:
	canctrl_SetID(CANCTRL_MODE_SET_HOME);
	canctrl_PutMessage((void*)&temp, 1);
}

bool  canfunc_GetHomeValue()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
	uint8_t rxData[8] = {0};
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
	canctrl_GetRxData(rxData);
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff0d 	bl	80014b4 <canctrl_GetRxData>
	uint8_t temp;
	canctrl_GetMessage(&temp, sizeof(uint8_t));
 800169a:	1cfb      	adds	r3, r7, #3
 800169c:	2101      	movs	r1, #1
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fe42 	bl	8001328 <canctrl_GetMessage>
	bool setHomeValue = temp - 1;
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf14      	ite	ne
 80016ac:	2301      	movne	r3, #1
 80016ae:	2300      	moveq	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
	return setHomeValue;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <canfunc_MotorGetEncoderPulseBLDC>:
	canctrl_SetID(CANCTRL_MODE_ENCODER);
	canctrl_PutMessage((void*)&encBLDC, sizeof(encBLDC));
}

uint32_t canfunc_MotorGetEncoderPulseBLDC()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	uint32_t encBLDC = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
	canctrl_GetMessage(&encBLDC,sizeof(encBLDC));
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2104      	movs	r1, #4
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe2c 	bl	8001328 <canctrl_GetMessage>
	return encBLDC;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <canfunc_MotorGetSpeedAndAngle>:
	canctrl_SetID(CANCTRL_MODE_MOTOR_SPEED_ANGLE);
	canctrl_PutMessage((void*)&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC));
}

CAN_SpeedBLDC_AngleDC canfunc_MotorGetSpeedAndAngle()
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	CAN_SpeedBLDC_AngleDC speedAngle;
	uint8_t rxData[8] = {0};
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
	canctrl_GetRxData(rxData);
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fee0 	bl	80014b4 <canctrl_GetRxData>
	if(canctrl_GetMessage(&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC)) != HAL_OK) while(1);
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	2108      	movs	r1, #8
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fe14 	bl	8001328 <canctrl_GetMessage>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d000      	beq.n	8001708 <canfunc_MotorGetSpeedAndAngle+0x2e>
 8001706:	e7fe      	b.n	8001706 <canfunc_MotorGetSpeedAndAngle+0x2c>
	return speedAngle;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	461a      	mov	r2, r3
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001714:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <canfunc_Convert_CAN_PID_to_PID_Param>:
	canPID.deltaT = pid.deltaT;
	return canctrl_SendMultipleMessages(can, targetID, (void*)&canPID, sizeof(CAN_PID));
}

void canfunc_Convert_CAN_PID_to_PID_Param(CAN_PID canPID, PID_Param *pid)
{
 8001720:	b084      	sub	sp, #16
 8001722:	b490      	push	{r4, r7}
 8001724:	af00      	add	r7, sp, #0
 8001726:	f107 0408 	add.w	r4, r7, #8
 800172a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pid->kP = canPID.kp;
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	60da      	str	r2, [r3, #12]
	pid->kI = canPID.ki;
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	615a      	str	r2, [r3, #20]
	pid->kD = canPID.kd;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	621a      	str	r2, [r3, #32]
	pid->alpha = canPID.alpha;
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	631a      	str	r2, [r3, #48]	; 0x30
	pid->deltaT = canPID.deltaT;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	609a      	str	r2, [r3, #8]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc90      	pop	{r4, r7}
 8001752:	b004      	add	sp, #16
 8001754:	4770      	bx	lr

08001756 <canfunc_GetTypePID>:

PID_type canfunc_GetTypePID(){
 8001756:	b580      	push	{r7, lr}
 8001758:	b088      	sub	sp, #32
 800175a:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef rxHeader = canctrl_GetRxHeader();
 800175c:	463b      	mov	r3, r7
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fd86 	bl	8001270 <canctrl_GetRxHeader>
	uint32_t temp = (rxHeader.StdId & 0x0f)-6;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b06      	subs	r3, #6
 800176c:	61fb      	str	r3, [r7, #28]
	return temp;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	b2db      	uxtb	r3, r3
}
 8001772:	4618      	mov	r0, r3
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <canfunc_GetPID>:
CAN_PID canPID1;
void canfunc_GetPID(void (*pCallback)(CAN_PID canPID,PID_type type))
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	af02      	add	r7, sp, #8
 8001782:	6078      	str	r0, [r7, #4]
	static CAN_PID canPID;
	if(!pCallback) return;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d012      	beq.n	80017b0 <canfunc_GetPID+0x34>
	if(canctrl_GetMultipleMessages((void*)&canPID1, sizeof(canPID)) == HAL_OK){
 800178a:	2114      	movs	r1, #20
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <canfunc_GetPID+0x3c>)
 800178e:	f7ff fde5 	bl	800135c <canctrl_GetMultipleMessages>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10c      	bne.n	80017b2 <canfunc_GetPID+0x36>
		pCallback(canPID1,canfunc_GetTypePID());
 8001798:	f7ff ffdd 	bl	8001756 <canfunc_GetTypePID>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <canfunc_GetPID+0x3c>)
 80017a2:	9201      	str	r2, [sp, #4]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	9200      	str	r2, [sp, #0]
 80017a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017aa:	687c      	ldr	r4, [r7, #4]
 80017ac:	47a0      	blx	r4
 80017ae:	e000      	b.n	80017b2 <canfunc_GetPID+0x36>
	if(!pCallback) return;
 80017b0:	bf00      	nop
	}

}
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	200001f8 	.word	0x200001f8

080017bc <encoder_Init>:
#include "Encoder.h"
#include "stdbool.h"


void encoder_Init(Encoder_t *enc,TIM_HandleTypeDef *htim, uint16_t pulPerRev, float deltaT)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	80fb      	strh	r3, [r7, #6]
	enc->htim = htim;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = pulPerRev;
 80017d2:	88fa      	ldrh	r2, [r7, #6]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	611a      	str	r2, [r3, #16]
	enc->deltaT = deltaT;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <encoder_GetSpeed>:



float encoder_GetSpeed(Encoder_t *enc)
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	enc->count_X4 += (int16_t)__HAL_TIM_GET_COUNTER(enc->htim);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	441a      	add	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	605a      	str	r2, [r3, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4 - enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f889 	bl	8000930 <__aeabi_i2f>
 800181e:	4602      	mov	r2, r0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f7ff f98a 	bl	8000b40 <__aeabi_fdiv>
 800182c:	4603      	mov	r3, r0
 800182e:	461c      	mov	r4, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f876 	bl	8000928 <__aeabi_ui2f>
 800183c:	4603      	mov	r3, r0
 800183e:	4619      	mov	r1, r3
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff f97d 	bl	8000b40 <__aeabi_fdiv>
 8001846:	4603      	mov	r3, r0
 8001848:	492d      	ldr	r1, [pc, #180]	; (8001900 <encoder_GetSpeed+0x118>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f8c4 	bl	80009d8 <__aeabi_fmul>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	615a      	str	r2, [r3, #20]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe ff05 	bl	800066c <__aeabi_f2d>
 8001862:	a323      	add	r3, pc, #140	; (adr r3, 80018f0 <encoder_GetSpeed+0x108>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fc72 	bl	8000150 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4614      	mov	r4, r2
 8001872:	461d      	mov	r5, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fef7 	bl	800066c <__aeabi_f2d>
 800187e:	a31e      	add	r3, pc, #120	; (adr r3, 80018f8 <encoder_GetSpeed+0x110>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fc64 	bl	8000150 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fd8e 	bl	80003b0 <__adddf3>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4614      	mov	r4, r2
 800189a:	461d      	mov	r5, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fee3 	bl	800066c <__aeabi_f2d>
 80018a6:	a314      	add	r3, pc, #80	; (adr r3, 80018f8 <encoder_GetSpeed+0x110>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fc50 	bl	8000150 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fd7a 	bl	80003b0 <__adddf3>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7fe ff2a 	bl	800071c <__aeabi_d2f>
 80018c8:	4602      	mov	r2, r0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	61da      	str	r2, [r3, #28]
	enc->vel_Pre = enc->vel_Real;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	619a      	str	r2, [r3, #24]
	enc->count_Pre = enc->count_X4;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60da      	str	r2, [r3, #12]
	return enc->vel_Real;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	f3af 8000 	nop.w
 80018f0:	ced91687 	.word	0xced91687
 80018f4:	3feb53f7 	.word	0x3feb53f7
 80018f8:	532617c2 	.word	0x532617c2
 80018fc:	3fb2a305 	.word	0x3fb2a305
 8001900:	42700000 	.word	0x42700000

08001904 <encoder_GetPulse>:

float encoder_GetPulse(Encoder_t *enc, EncoderCountMode count_Mode)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
	enc->count_X4 += (int16_t)__HAL_TIM_GET_COUNTER(enc->htim);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	b21a      	sxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	441a      	add	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	605a      	str	r2, [r3, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
	if (count_Mode == MODE_X4) return enc->count_X4;
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d106      	bne.n	8001942 <encoder_GetPulse+0x3e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fff9 	bl	8000930 <__aeabi_i2f>
 800193e:	4603      	mov	r3, r0
 8001940:	e037      	b.n	80019b2 <encoder_GetPulse+0xae>
	else if (count_Mode == MODE_X1) return (float)enc->count_X4/4;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10c      	bne.n	8001962 <encoder_GetPulse+0x5e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe ffef 	bl	8000930 <__aeabi_i2f>
 8001952:	4603      	mov	r3, r0
 8001954:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f8f1 	bl	8000b40 <__aeabi_fdiv>
 800195e:	4603      	mov	r3, r0
 8001960:	e027      	b.n	80019b2 <encoder_GetPulse+0xae>
	else if (count_Mode == MODE_ANGLE) {
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d122      	bne.n	80019ae <encoder_GetPulse+0xaa>
		enc->Degree = (float)((float)enc->count_X4*(float)360/((float)enc->count_PerRevol*(float)4));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe ffdf 	bl	8000930 <__aeabi_i2f>
 8001972:	4603      	mov	r3, r0
 8001974:	4911      	ldr	r1, [pc, #68]	; (80019bc <encoder_GetPulse+0xb8>)
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f82e 	bl	80009d8 <__aeabi_fmul>
 800197c:	4603      	mov	r3, r0
 800197e:	461c      	mov	r4, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe ffcf 	bl	8000928 <__aeabi_ui2f>
 800198a:	4603      	mov	r3, r0
 800198c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f821 	bl	80009d8 <__aeabi_fmul>
 8001996:	4603      	mov	r3, r0
 8001998:	4619      	mov	r1, r3
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff f8d0 	bl	8000b40 <__aeabi_fdiv>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	621a      	str	r2, [r3, #32]
		return enc->Degree;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	e001      	b.n	80019b2 <encoder_GetPulse+0xae>
	}
	return 0;
 80019ae:	f04f 0300 	mov.w	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	bf00      	nop
 80019bc:	43b40000 	.word	0x43b40000

080019c0 <encoder_ResetCount>:
void encoder_ResetCount(Encoder_t *enc)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
	enc->count_X4 = 0;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
	enc->vel_Pre = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
	enc->vel_Real = 0;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <MotorDC_Init>:
 * @param pwmMode
 * @param channel1
 * @param channel2
 */
void MotorDC_Init(MotorDC *dcMotor,TIM_HandleTypeDef *htim, PWM_Mode pwmMode, uint32_t channel1, uint32_t channel2)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	80fb      	strh	r3, [r7, #6]
	dcMotor->Channel1 = channel1;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	609a      	str	r2, [r3, #8]
	dcMotor->Channel2 = channel2;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	60da      	str	r2, [r3, #12]
 	dcMotor->invPWM = pwmMode;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	809a      	strh	r2, [r3, #4]
 	dcMotor->timDC = htim;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	601a      	str	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <MotorDC_Drive>:
void MotorDC_Drive(MotorDC *dcMotor, int32_t speedInput)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	uint16_t invPWM = dcMotor->invPWM;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	889b      	ldrh	r3, [r3, #4]
 8001a32:	81fb      	strh	r3, [r7, #14]
	uint32_t pwm = abs(speedInput);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	bfb8      	it	lt
 8001a3a:	425b      	neglt	r3, r3
 8001a3c:	60bb      	str	r3, [r7, #8]
	switch(dcMotor->invPWM){
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	889b      	ldrh	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d004      	beq.n	8001a50 <MotorDC_Drive+0x2c>
 8001a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a4a:	f000 8097 	beq.w	8001b7c <MotorDC_Drive+0x158>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel1,invPWM);
			if(speedInput < 0)__HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel1,invPWM - pwm);
			else if(speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,invPWM - pwm);
		break;
	}
}
 8001a4e:	e13d      	b.n	8001ccc <MotorDC_Drive+0x2a8>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,0);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <MotorDC_Drive+0x40>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34
 8001a62:	e018      	b.n	8001a96 <MotorDC_Drive+0x72>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d105      	bne.n	8001a78 <MotorDC_Drive+0x54>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2300      	movs	r3, #0
 8001a74:	6393      	str	r3, [r2, #56]	; 0x38
 8001a76:	e00e      	b.n	8001a96 <MotorDC_Drive+0x72>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d105      	bne.n	8001a8c <MotorDC_Drive+0x68>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2300      	movs	r3, #0
 8001a88:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001a8a:	e004      	b.n	8001a96 <MotorDC_Drive+0x72>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	2300      	movs	r3, #0
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel1,0);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d105      	bne.n	8001aaa <MotorDC_Drive+0x86>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa8:	e018      	b.n	8001adc <MotorDC_Drive+0xb8>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d105      	bne.n	8001abe <MotorDC_Drive+0x9a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6393      	str	r3, [r2, #56]	; 0x38
 8001abc:	e00e      	b.n	8001adc <MotorDC_Drive+0xb8>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d105      	bne.n	8001ad2 <MotorDC_Drive+0xae>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2300      	movs	r3, #0
 8001ace:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ad0:	e004      	b.n	8001adc <MotorDC_Drive+0xb8>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6413      	str	r3, [r2, #64]	; 0x40
			if(speedInput < 0)__HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel1,pwm);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	da23      	bge.n	8001b2a <MotorDC_Drive+0x106>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d105      	bne.n	8001af6 <MotorDC_Drive+0xd2>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001af4:	e0e7      	b.n	8001cc6 <MotorDC_Drive+0x2a2>
			if(speedInput < 0)__HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel1,pwm);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d105      	bne.n	8001b0a <MotorDC_Drive+0xe6>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	6393      	str	r3, [r2, #56]	; 0x38
 8001b08:	e037      	b.n	8001b7a <MotorDC_Drive+0x156>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d105      	bne.n	8001b1e <MotorDC_Drive+0xfa>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001b1c:	e02d      	b.n	8001b7a <MotorDC_Drive+0x156>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001b28:	e0cd      	b.n	8001cc6 <MotorDC_Drive+0x2a2>
			else if(speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,pwm);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f340 80ca 	ble.w	8001cc6 <MotorDC_Drive+0x2a2>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <MotorDC_Drive+0x122>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001b44:	e0bf      	b.n	8001cc6 <MotorDC_Drive+0x2a2>
			else if(speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,pwm);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d105      	bne.n	8001b5a <MotorDC_Drive+0x136>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001b58:	e0b5      	b.n	8001cc6 <MotorDC_Drive+0x2a2>
			else if(speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,pwm);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d105      	bne.n	8001b6e <MotorDC_Drive+0x14a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001b6c:	e0ab      	b.n	8001cc6 <MotorDC_Drive+0x2a2>
			else if(speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,pwm);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001b78:	e0a5      	b.n	8001cc6 <MotorDC_Drive+0x2a2>
 8001b7a:	e0a4      	b.n	8001cc6 <MotorDC_Drive+0x2a2>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,invPWM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <MotorDC_Drive+0x16c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	89fa      	ldrh	r2, [r7, #14]
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8e:	e018      	b.n	8001bc2 <MotorDC_Drive+0x19e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d105      	bne.n	8001ba4 <MotorDC_Drive+0x180>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	89fb      	ldrh	r3, [r7, #14]
 8001ba0:	6393      	str	r3, [r2, #56]	; 0x38
 8001ba2:	e00e      	b.n	8001bc2 <MotorDC_Drive+0x19e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d105      	bne.n	8001bb8 <MotorDC_Drive+0x194>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	89fb      	ldrh	r3, [r7, #14]
 8001bb4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001bb6:	e004      	b.n	8001bc2 <MotorDC_Drive+0x19e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel1,invPWM);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d105      	bne.n	8001bd6 <MotorDC_Drive+0x1b2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	89fa      	ldrh	r2, [r7, #14]
 8001bd2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd4:	e018      	b.n	8001c08 <MotorDC_Drive+0x1e4>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d105      	bne.n	8001bea <MotorDC_Drive+0x1c6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	6393      	str	r3, [r2, #56]	; 0x38
 8001be8:	e00e      	b.n	8001c08 <MotorDC_Drive+0x1e4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d105      	bne.n	8001bfe <MotorDC_Drive+0x1da>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	89fb      	ldrh	r3, [r7, #14]
 8001bfa:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001bfc:	e004      	b.n	8001c08 <MotorDC_Drive+0x1e4>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	89fb      	ldrh	r3, [r7, #14]
 8001c06:	6413      	str	r3, [r2, #64]	; 0x40
			if(speedInput < 0)__HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel1,invPWM - pwm);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da2b      	bge.n	8001c66 <MotorDC_Drive+0x242>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d107      	bne.n	8001c26 <MotorDC_Drive+0x202>
 8001c16:	89f9      	ldrh	r1, [r7, #14]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	1a8a      	subs	r2, r1, r2
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001c24:	e051      	b.n	8001cca <MotorDC_Drive+0x2a6>
			if(speedInput < 0)__HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel1,invPWM - pwm);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d107      	bne.n	8001c3e <MotorDC_Drive+0x21a>
 8001c2e:	89f9      	ldrh	r1, [r7, #14]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1acb      	subs	r3, r1, r3
 8001c3a:	6393      	str	r3, [r2, #56]	; 0x38
 8001c3c:	e042      	b.n	8001cc4 <MotorDC_Drive+0x2a0>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d107      	bne.n	8001c56 <MotorDC_Drive+0x232>
 8001c46:	89f9      	ldrh	r1, [r7, #14]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1acb      	subs	r3, r1, r3
 8001c52:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c54:	e036      	b.n	8001cc4 <MotorDC_Drive+0x2a0>
 8001c56:	89f9      	ldrh	r1, [r7, #14]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1acb      	subs	r3, r1, r3
 8001c62:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001c64:	e031      	b.n	8001cca <MotorDC_Drive+0x2a6>
			else if(speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,invPWM - pwm);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	dd2e      	ble.n	8001cca <MotorDC_Drive+0x2a6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <MotorDC_Drive+0x260>
 8001c74:	89f9      	ldrh	r1, [r7, #14]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	1a8a      	subs	r2, r1, r2
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001c82:	e022      	b.n	8001cca <MotorDC_Drive+0x2a6>
			else if(speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,invPWM - pwm);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d107      	bne.n	8001c9c <MotorDC_Drive+0x278>
 8001c8c:	89f9      	ldrh	r1, [r7, #14]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1acb      	subs	r3, r1, r3
 8001c98:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001c9a:	e016      	b.n	8001cca <MotorDC_Drive+0x2a6>
			else if(speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,invPWM - pwm);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d107      	bne.n	8001cb4 <MotorDC_Drive+0x290>
 8001ca4:	89f9      	ldrh	r1, [r7, #14]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1acb      	subs	r3, r1, r3
 8001cb0:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001cb2:	e00a      	b.n	8001cca <MotorDC_Drive+0x2a6>
			else if(speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC,dcMotor->Channel2,invPWM - pwm);
 8001cb4:	89f9      	ldrh	r1, [r7, #14]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1acb      	subs	r3, r1, r3
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001cc2:	e002      	b.n	8001cca <MotorDC_Drive+0x2a6>
 8001cc4:	e001      	b.n	8001cca <MotorDC_Drive+0x2a6>
		break;
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <MotorDC_Drive+0x2a8>
		break;
 8001cca:	bf00      	nop
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <MotorBLDC_Init>:
void MotorBLDC_Init(MotorBLDC *bldcMotor,TIM_HandleTypeDef *htim, uint32_t channel,
					GPIO_TypeDef *brakePort, uint16_t brakePin,
					GPIO_TypeDef *dirPort, uint16_t dirPin)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]
	bldcMotor->Channel = channel;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
	bldcMotor->timBLDC = htim;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	611a      	str	r2, [r3, #16]
	bldcMotor->brakePin = brakePin;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8b3a      	ldrh	r2, [r7, #24]
 8001cf4:	809a      	strh	r2, [r3, #4]
	bldcMotor->brakePort = brakePort;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	609a      	str	r2, [r3, #8]
	bldcMotor->dirPort = dirPort;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	60da      	str	r2, [r3, #12]
	bldcMotor->dirPin = dirPin;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8c3a      	ldrh	r2, [r7, #32]
 8001d06:	80da      	strh	r2, [r3, #6]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <MotorBLDC_Brake>:
 *
 * @param bldcMotor
 * @param brake
 */
void MotorBLDC_Brake(MotorBLDC *bldcMotor,bool brake)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(bldcMotor->brakePort, bldcMotor->brakePin, brake);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6898      	ldr	r0, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	889b      	ldrh	r3, [r3, #4]
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f002 fa4e 	bl	80041ca <HAL_GPIO_WritePin>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <MotorBLDC_Drive>:

void MotorBLDC_Drive(MotorBLDC *bldcMotor, int32_t speedInput)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(bldcMotor->timBLDC,bldcMotor->Channel, 0);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <MotorBLDC_Drive+0x1e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
 8001d52:	e018      	b.n	8001d86 <MotorBLDC_Drive+0x50>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d105      	bne.n	8001d68 <MotorBLDC_Drive+0x32>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2300      	movs	r3, #0
 8001d64:	6393      	str	r3, [r2, #56]	; 0x38
 8001d66:	e00e      	b.n	8001d86 <MotorBLDC_Drive+0x50>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d105      	bne.n	8001d7c <MotorBLDC_Drive+0x46>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2300      	movs	r3, #0
 8001d78:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d7a:	e004      	b.n	8001d86 <MotorBLDC_Drive+0x50>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2300      	movs	r3, #0
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
	if(!speedInput) return;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d03f      	beq.n	8001e0c <MotorBLDC_Drive+0xd6>
	uint32_t pwm = abs(speedInput);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bfb8      	it	lt
 8001d92:	425b      	neglt	r3, r3
 8001d94:	60fb      	str	r3, [r7, #12]
	if(speedInput < 0) 			HAL_GPIO_WritePin(bldcMotor->dirPort, bldcMotor->dirPin, DIR_REVERSE);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da08      	bge.n	8001dae <MotorBLDC_Drive+0x78>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68d8      	ldr	r0, [r3, #12]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	88db      	ldrh	r3, [r3, #6]
 8001da4:	2201      	movs	r2, #1
 8001da6:	4619      	mov	r1, r3
 8001da8:	f002 fa0f 	bl	80041ca <HAL_GPIO_WritePin>
 8001dac:	e00a      	b.n	8001dc4 <MotorBLDC_Drive+0x8e>
	else if(speedInput > 0) 	HAL_GPIO_WritePin(bldcMotor->dirPort, bldcMotor->dirPin, DIR_FORWARD);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	dd07      	ble.n	8001dc4 <MotorBLDC_Drive+0x8e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68d8      	ldr	r0, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	88db      	ldrh	r3, [r3, #6]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f002 fa03 	bl	80041ca <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(bldcMotor->timBLDC,bldcMotor->Channel, pwm);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <MotorBLDC_Drive+0xa2>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001dd6:	e01a      	b.n	8001e0e <MotorBLDC_Drive+0xd8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d105      	bne.n	8001dec <MotorBLDC_Drive+0xb6>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6393      	str	r3, [r2, #56]	; 0x38
 8001dea:	e010      	b.n	8001e0e <MotorBLDC_Drive+0xd8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d105      	bne.n	8001e00 <MotorBLDC_Drive+0xca>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001dfe:	e006      	b.n	8001e0e <MotorBLDC_Drive+0xd8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	e000      	b.n	8001e0e <MotorBLDC_Drive+0xd8>
	if(!speedInput) return;
 8001e0c:	bf00      	nop
}
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <PID_DC_CalSpeed>:

#include "PID_SwerveModule.h"
bool bldcEnablePID = false;

void PID_DC_CalSpeed(float Target_set)
{
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b0b0      	sub	sp, #192	; 0xc0
 8001e18:	af0e      	add	r7, sp, #56	; 0x38
 8001e1a:	6078      	str	r0, [r7, #4]
	MotorDC mdc = brd_GetObjMotorDC();
 8001e1c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f959 	bl	80010d8 <brd_GetObjMotorDC>
	Encoder_t encDC = brd_GetObjEncDC();
 8001e26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f9ae 	bl	800118c <brd_GetObjEncDC>
	PID_Param pid = brd_GetPID(PID_DC_SPEED);
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	2101      	movs	r1, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f8c4 	bl	8000fc4 <brd_GetPID>
	float result = PID_Cal(&pid, Target_set, encoder_GetSpeed(&encDC));
 8001e3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fcd1 	bl	80017e8 <encoder_GetSpeed>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fd70 	bl	8005934 <PID_Cal>
 8001e54:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	brd_SetPID(pid, PID_DC_SPEED);
 8001e58:	2301      	movs	r3, #1
 8001e5a:	930d      	str	r3, [sp, #52]	; 0x34
 8001e5c:	466d      	mov	r5, sp
 8001e5e:	f107 0418 	add.w	r4, r7, #24
 8001e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	602b      	str	r3, [r5, #0]
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e78:	f7ff f86e 	bl	8000f58 <brd_SetPID>
	brd_SetObjEncDC(encDC);
 8001e7c:	466d      	mov	r5, sp
 8001e7e:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e94:	f7ff f95e 	bl	8001154 <brd_SetObjEncDC>
	MotorDC_Drive(&mdc, (int32_t)result);
 8001e98:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001e9c:	f7fe ff62 	bl	8000d64 <__aeabi_f2iz>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fdbb 	bl	8001a24 <MotorDC_Drive>
}
 8001eae:	bf00      	nop
 8001eb0:	3788      	adds	r7, #136	; 0x88
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bdb0      	pop	{r4, r5, r7, pc}

08001eb6 <PID_DC_CalPos>:

void PID_DC_CalPos(float Target_set)
{
 8001eb6:	b5b0      	push	{r4, r5, r7, lr}
 8001eb8:	b0ac      	sub	sp, #176	; 0xb0
 8001eba:	af0e      	add	r7, sp, #56	; 0x38
 8001ebc:	6078      	str	r0, [r7, #4]
	Encoder_t encDC = brd_GetObjEncDC();
 8001ebe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f962 	bl	800118c <brd_GetObjEncDC>
	PID_Param pid = brd_GetPID(PID_DC_ANGLE);
 8001ec8:	f107 0308 	add.w	r3, r7, #8
 8001ecc:	2102      	movs	r1, #2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f878 	bl	8000fc4 <brd_GetPID>
	float result = PID_Cal(&pid, Target_set, encoder_GetPulse(&encDC, MODE_ANGLE));
 8001ed4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fd12 	bl	8001904 <encoder_GetPulse>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fd23 	bl	8005934 <PID_Cal>
 8001eee:	6778      	str	r0, [r7, #116]	; 0x74
	brd_SetPID(pid, PID_DC_ANGLE);
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8001ef4:	466d      	mov	r5, sp
 8001ef6:	f107 0418 	add.w	r4, r7, #24
 8001efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	602b      	str	r3, [r5, #0]
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f10:	f7ff f822 	bl	8000f58 <brd_SetPID>
	brd_SetObjEncDC(encDC);
 8001f14:	466d      	mov	r5, sp
 8001f16:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f22:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f2c:	f7ff f912 	bl	8001154 <brd_SetObjEncDC>
	PID_DC_CalSpeed(result);
 8001f30:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001f32:	f7ff ff6f 	bl	8001e14 <PID_DC_CalSpeed>
}
 8001f36:	bf00      	nop
 8001f38:	3778      	adds	r7, #120	; 0x78
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001f40 <PID_BLDC_CalSpeed>:

void PID_BLDC_CalSpeed(float Target_set)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b0b2      	sub	sp, #200	; 0xc8
 8001f44:	af0e      	add	r7, sp, #56	; 0x38
 8001f46:	6078      	str	r0, [r7, #4]
	MotorBLDC mbldc = brd_GetObjMotorBLDC();
 8001f48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff f8d5 	bl	80010fc <brd_GetObjMotorBLDC>
	Encoder_t encBLDC = brd_GetObjEncBLDC();
 8001f52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f94c 	bl	80011f4 <brd_GetObjEncBLDC>
	PID_Param pid = brd_GetPID(PID_BLDC_SPEED);
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2103      	movs	r1, #3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f82e 	bl	8000fc4 <brd_GetPID>
	if(!bldcEnablePID){
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <PID_BLDC_CalSpeed+0xc0>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f083 0301 	eor.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <PID_BLDC_CalSpeed+0x44>
		MotorBLDC_Drive(&mbldc, 0);
 8001f76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff feda 	bl	8001d36 <MotorBLDC_Drive>
		float result = PID_Cal(&pid, Target_set, encoder_GetSpeed(&encBLDC));
		MotorBLDC_Drive(&mbldc, (int32_t)result);
		brd_SetObjEncBLDC(encBLDC);
		brd_SetPID(pid, PID_BLDC_SPEED);
	}
}
 8001f82:	e038      	b.n	8001ff6 <PID_BLDC_CalSpeed+0xb6>
		float result = PID_Cal(&pid, Target_set, encoder_GetSpeed(&encBLDC));
 8001f84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fc2d 	bl	80017e8 <encoder_GetSpeed>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fccc 	bl	8005934 <PID_Cal>
 8001f9c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		MotorBLDC_Drive(&mbldc, (int32_t)result);
 8001fa0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001fa4:	f7fe fede 	bl	8000d64 <__aeabi_f2iz>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fec0 	bl	8001d36 <MotorBLDC_Drive>
		brd_SetObjEncBLDC(encBLDC);
 8001fb6:	466d      	mov	r5, sp
 8001fb8:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fce:	f7ff f8f5 	bl	80011bc <brd_SetObjEncBLDC>
		brd_SetPID(pid, PID_BLDC_SPEED);
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	930d      	str	r3, [sp, #52]	; 0x34
 8001fd6:	466d      	mov	r5, sp
 8001fd8:	f107 041c 	add.w	r4, r7, #28
 8001fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	602b      	str	r3, [r5, #0]
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff2:	f7fe ffb1 	bl	8000f58 <brd_SetPID>
}
 8001ff6:	bf00      	nop
 8001ff8:	3790      	adds	r7, #144	; 0x90
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000020c 	.word	0x2000020c

08002004 <PID_BLDC_BreakProtection>:

void PID_BLDC_BreakProtection(bool Mode)
{
 8002004:	b5b0      	push	{r4, r5, r7, lr}
 8002006:	b0a6      	sub	sp, #152	; 0x98
 8002008:	af0e      	add	r7, sp, #56	; 0x38
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
	if(Mode) {
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d029      	beq.n	8002068 <PID_BLDC_BreakProtection+0x64>
		bldcEnablePID = false;
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <PID_BLDC_BreakProtection+0x70>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
		MotorBLDC mbldc = brd_GetObjMotorBLDC();
 800201a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f86c 	bl	80010fc <brd_GetObjMotorBLDC>
		PID_Param pid = brd_GetPID(PID_BLDC_SPEED);
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	2103      	movs	r1, #3
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe ffca 	bl	8000fc4 <brd_GetPID>
		pid.uI = 0;
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
		brd_SetPID(pid, PID_BLDC_SPEED);
 8002036:	2303      	movs	r3, #3
 8002038:	930d      	str	r3, [sp, #52]	; 0x34
 800203a:	466d      	mov	r5, sp
 800203c:	f107 0418 	add.w	r4, r7, #24
 8002040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	602b      	str	r3, [r5, #0]
 8002050:	f107 0308 	add.w	r3, r7, #8
 8002054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002056:	f7fe ff7f 	bl	8000f58 <brd_SetPID>
		MotorBLDC_Drive(&mbldc, 0);
 800205a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fe68 	bl	8001d36 <MotorBLDC_Drive>
 8002066:	e002      	b.n	800206e <PID_BLDC_BreakProtection+0x6a>
		return;
	}else bldcEnablePID = true;
 8002068:	4b02      	ldr	r3, [pc, #8]	; (8002074 <PID_BLDC_BreakProtection+0x70>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
}
 800206e:	3760      	adds	r7, #96	; 0x60
 8002070:	46bd      	mov	sp, r7
 8002072:	bdb0      	pop	{r4, r5, r7, pc}
 8002074:	2000020c 	.word	0x2000020c

08002078 <sethome_Begin>:
#include "cmsis_os.h"
SetHomeEvent homeEvent = 0;
float speed = 0;

void sethome_Begin()
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	homeEvent = SET_HOME_BEGIN;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <sethome_Begin+0x14>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	2000020d 	.word	0x2000020d

08002090 <homeBeginHandle>:

void homeBeginHandle(){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)){
 8002094:	2120      	movs	r1, #32
 8002096:	480e      	ldr	r0, [pc, #56]	; (80020d0 <homeBeginHandle+0x40>)
 8002098:	f002 f880 	bl	800419c <HAL_GPIO_ReadPin>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10d      	bne.n	80020be <homeBeginHandle+0x2e>
		HAL_Delay(1);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f001 f876 	bl	8003194 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)){
 80020a8:	2120      	movs	r1, #32
 80020aa:	4809      	ldr	r0, [pc, #36]	; (80020d0 <homeBeginHandle+0x40>)
 80020ac:	f002 f876 	bl	800419c <HAL_GPIO_ReadPin>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <homeBeginHandle+0x3a>
			homeEvent = SET_HOME_COMPLETE;
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <homeBeginHandle+0x44>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	701a      	strb	r2, [r3, #0]
		}
	} else {
		speed = TUNE_COARSE_SPEED;
		homeEvent = SET_HOME_TUNE_COARSE;
	}
}
 80020bc:	e005      	b.n	80020ca <homeBeginHandle+0x3a>
		speed = TUNE_COARSE_SPEED;
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <homeBeginHandle+0x48>)
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <homeBeginHandle+0x4c>)
 80020c2:	601a      	str	r2, [r3, #0]
		homeEvent = SET_HOME_TUNE_COARSE;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <homeBeginHandle+0x44>)
 80020c6:	2202      	movs	r2, #2
 80020c8:	701a      	strb	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40010800 	.word	0x40010800
 80020d4:	2000020d 	.word	0x2000020d
 80020d8:	20000210 	.word	0x20000210
 80020dc:	41a00000 	.word	0x41a00000

080020e0 <tuneCoarseHandle>:

void tuneCoarseHandle(){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	if(brd_GetAngleDC_Fast() > TUNE_COARSE_ABOVE_DEGREE && speed > 0){
 80020e4:	f7fe fe64 	bl	8000db0 <brd_GetAngleDC_Fast>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4925      	ldr	r1, [pc, #148]	; (8002180 <tuneCoarseHandle+0xa0>)
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fe2f 	bl	8000d50 <__aeabi_fcmpgt>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <tuneCoarseHandle+0x3a>
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <tuneCoarseHandle+0xa4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f04f 0100 	mov.w	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fe25 	bl	8000d50 <__aeabi_fcmpgt>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <tuneCoarseHandle+0x3a>
		speed *= -1;
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <tuneCoarseHandle+0xa4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002114:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <tuneCoarseHandle+0xa4>)
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	e019      	b.n	800214e <tuneCoarseHandle+0x6e>
	} else if (brd_GetAngleDC_Fast() < TUNE_COARSE_BELOW_DEGREE && speed < 0){
 800211a:	f7fe fe49 	bl	8000db0 <brd_GetAngleDC_Fast>
 800211e:	4603      	mov	r3, r0
 8002120:	4919      	ldr	r1, [pc, #100]	; (8002188 <tuneCoarseHandle+0xa8>)
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fdf6 	bl	8000d14 <__aeabi_fcmplt>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00f      	beq.n	800214e <tuneCoarseHandle+0x6e>
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <tuneCoarseHandle+0xa4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fdec 	bl	8000d14 <__aeabi_fcmplt>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <tuneCoarseHandle+0x6e>
		speed *= -1;
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <tuneCoarseHandle+0xa4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800214a:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <tuneCoarseHandle+0xa4>)
 800214c:	6013      	str	r3, [r2, #0]
	}
	if(!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)){
 800214e:	2120      	movs	r1, #32
 8002150:	480e      	ldr	r0, [pc, #56]	; (800218c <tuneCoarseHandle+0xac>)
 8002152:	f002 f823 	bl	800419c <HAL_GPIO_ReadPin>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10f      	bne.n	800217c <tuneCoarseHandle+0x9c>
		osDelay(1);
 800215c:	2001      	movs	r0, #1
 800215e:	f003 fd3b 	bl	8005bd8 <osDelay>
		if(!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)){
 8002162:	2120      	movs	r1, #32
 8002164:	4809      	ldr	r0, [pc, #36]	; (800218c <tuneCoarseHandle+0xac>)
 8002166:	f002 f819 	bl	800419c <HAL_GPIO_ReadPin>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <tuneCoarseHandle+0x9c>
			speed = TUNE_FINE_SPEED;
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <tuneCoarseHandle+0xa4>)
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <tuneCoarseHandle+0xb0>)
 8002174:	601a      	str	r2, [r3, #0]
			homeEvent = SET_HOME_TUNE_COARSE_SENSOR_DETECT;
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <tuneCoarseHandle+0xb4>)
 8002178:	2203      	movs	r2, #3
 800217a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	43340000 	.word	0x43340000
 8002184:	20000210 	.word	0x20000210
 8002188:	c3340000 	.word	0xc3340000
 800218c:	40010800 	.word	0x40010800
 8002190:	40a00000 	.word	0x40a00000
 8002194:	2000020d 	.word	0x2000020d

08002198 <tuneFineHandle>:
void tuneFineHandle(){
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
	if(brd_GetAngleDC_Fast() > TUNE_FINE_ABOVE_DEGREE && speed > 0){
 800219c:	f7fe fe08 	bl	8000db0 <brd_GetAngleDC_Fast>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fdd2 	bl	8000d50 <__aeabi_fcmpgt>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d010      	beq.n	80021d4 <tuneFineHandle+0x3c>
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <tuneFineHandle+0xa4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fdc8 	bl	8000d50 <__aeabi_fcmpgt>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <tuneFineHandle+0x3c>
		speed *= -1;
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <tuneFineHandle+0xa4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021ce:	4a1b      	ldr	r2, [pc, #108]	; (800223c <tuneFineHandle+0xa4>)
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e019      	b.n	8002208 <tuneFineHandle+0x70>
	} else if (brd_GetAngleDC_Fast() < TUNE_FINE_BELOW_DEGREE && speed < 0){
 80021d4:	f7fe fdec 	bl	8000db0 <brd_GetAngleDC_Fast>
 80021d8:	4603      	mov	r3, r0
 80021da:	4919      	ldr	r1, [pc, #100]	; (8002240 <tuneFineHandle+0xa8>)
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fd99 	bl	8000d14 <__aeabi_fcmplt>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00f      	beq.n	8002208 <tuneFineHandle+0x70>
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <tuneFineHandle+0xa4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fd8f 	bl	8000d14 <__aeabi_fcmplt>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <tuneFineHandle+0x70>
		speed *= -1;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <tuneFineHandle+0xa4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <tuneFineHandle+0xa4>)
 8002206:	6013      	str	r3, [r2, #0]
	}
	if(!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)){
 8002208:	2120      	movs	r1, #32
 800220a:	480e      	ldr	r0, [pc, #56]	; (8002244 <tuneFineHandle+0xac>)
 800220c:	f001 ffc6 	bl	800419c <HAL_GPIO_ReadPin>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d110      	bne.n	8002238 <tuneFineHandle+0xa0>
		HAL_Delay(10);
 8002216:	200a      	movs	r0, #10
 8002218:	f000 ffbc 	bl	8003194 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)){
 800221c:	2120      	movs	r1, #32
 800221e:	4809      	ldr	r0, [pc, #36]	; (8002244 <tuneFineHandle+0xac>)
 8002220:	f001 ffbc 	bl	800419c <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <tuneFineHandle+0xa0>
			speed = 0;
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <tuneFineHandle+0xa4>)
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
			homeEvent = SET_HOME_TUNE_FINE_SENSOR_DETECT;
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <tuneFineHandle+0xb0>)
 8002234:	2205      	movs	r2, #5
 8002236:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000210 	.word	0x20000210
 8002240:	bf800000 	.word	0xbf800000
 8002244:	40010800 	.word	0x40010800
 8002248:	2000020d 	.word	0x2000020d

0800224c <sethome_IsComplete>:



bool sethome_IsComplete()
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
	if(homeEvent == SET_HOME_COMPLETE) return 1;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <sethome_IsComplete+0x1c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b07      	cmp	r3, #7
 8002256:	d101      	bne.n	800225c <sethome_IsComplete+0x10>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <sethome_IsComplete+0x12>
	return 0;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	2000020d 	.word	0x2000020d

0800226c <sethome_Procedure>:

void sethome_Procedure()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	switch(homeEvent){
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <sethome_Procedure+0x68>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	3b01      	subs	r3, #1
 8002276:	2b06      	cmp	r3, #6
 8002278:	d82a      	bhi.n	80022d0 <sethome_Procedure+0x64>
 800227a:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <sethome_Procedure+0x14>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	0800229d 	.word	0x0800229d
 8002284:	080022a3 	.word	0x080022a3
 8002288:	080022a9 	.word	0x080022a9
 800228c:	080022b5 	.word	0x080022b5
 8002290:	080022bb 	.word	0x080022bb
 8002294:	080022c7 	.word	0x080022c7
 8002298:	080022cf 	.word	0x080022cf
	case SET_HOME_BEGIN:
		homeBeginHandle();
 800229c:	f7ff fef8 	bl	8002090 <homeBeginHandle>
		break;
 80022a0:	e016      	b.n	80022d0 <sethome_Procedure+0x64>
	case SET_HOME_TUNE_COARSE:
		tuneCoarseHandle();
 80022a2:	f7ff ff1d 	bl	80020e0 <tuneCoarseHandle>
		break;
 80022a6:	e013      	b.n	80022d0 <sethome_Procedure+0x64>
	case SET_HOME_TUNE_COARSE_SENSOR_DETECT:
		brd_ResetState();
 80022a8:	f7fe fec6 	bl	8001038 <brd_ResetState>
		homeEvent = SET_HOME_TUNE_FINE;
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <sethome_Procedure+0x68>)
 80022ae:	2204      	movs	r2, #4
 80022b0:	701a      	strb	r2, [r3, #0]
		break;
 80022b2:	e00d      	b.n	80022d0 <sethome_Procedure+0x64>
	case SET_HOME_TUNE_FINE:
		tuneFineHandle();
 80022b4:	f7ff ff70 	bl	8002198 <tuneFineHandle>
		break;
 80022b8:	e00a      	b.n	80022d0 <sethome_Procedure+0x64>
	case SET_HOME_TUNE_FINE_SENSOR_DETECT:
		brd_ResetState();
 80022ba:	f7fe febd 	bl	8001038 <brd_ResetState>
		homeEvent = SET_HOME_STEADY;
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <sethome_Procedure+0x68>)
 80022c0:	2206      	movs	r2, #6
 80022c2:	701a      	strb	r2, [r3, #0]
		break;
 80022c4:	e004      	b.n	80022d0 <sethome_Procedure+0x64>
	case SET_HOME_STEADY:
		homeEvent = SET_HOME_COMPLETE;
 80022c6:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <sethome_Procedure+0x68>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	701a      	strb	r2, [r3, #0]
		break;
 80022cc:	e000      	b.n	80022d0 <sethome_Procedure+0x64>
	case SET_HOME_COMPLETE:

		break;
 80022ce:	bf00      	nop
	}

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	2000020d 	.word	0x2000020d

080022d8 <sethome_GetSpeed>:

float sethome_GetSpeed(){return speed;}
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <sethome_GetSpeed+0x10>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000210 	.word	0x20000210

080022ec <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a06      	ldr	r2, [pc, #24]	; (8002328 <vApplicationGetIdleTaskMemory+0x28>)
 8002310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4a05      	ldr	r2, [pc, #20]	; (800232c <vApplicationGetIdleTaskMemory+0x2c>)
 8002316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	20000214 	.word	0x20000214
 800232c:	200002b4 	.word	0x200002b4

08002330 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	6078      	str	r0, [r7, #4]
	 HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002338:	2102      	movs	r1, #2
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f001 fa9c 	bl	8003878 <HAL_CAN_DeactivateNotification>
	 canctrl_Receive(hcan, CAN_RX_FIFO0);
 8002340:	2100      	movs	r1, #0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff f8a0 	bl	8001488 <canctrl_Receive>
	 uint32_t canEvent = canctrl_GetEvent();
 8002348:	f7fe ff7a 	bl	8001240 <canctrl_GetEvent>
 800234c:	60f8      	str	r0, [r7, #12]
	 BaseType_t HigherPriorityTaskWoken = pdFALSE;
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
	 xTaskNotifyFromISR(TaskHandleCANHandle,canEvent,eSetValueWithOverwrite,&HigherPriorityTaskWoken);
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2300      	movs	r3, #0
 800235e:	2203      	movs	r2, #3
 8002360:	68f9      	ldr	r1, [r7, #12]
 8002362:	f005 f855 	bl	8007410 <xTaskGenericNotifyFromISR>
	 HAL_GPIO_TogglePin(UserLED_GPIO_Port, UserLED_Pin);
 8002366:	2108      	movs	r1, #8
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800236a:	f001 ff46 	bl	80041fa <HAL_GPIO_TogglePin>
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000085c 	.word	0x2000085c
 800237c:	40010c00 	.word	0x40010c00

08002380 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af02      	add	r7, sp, #8
 8002386:	6078      	str	r0, [r7, #4]
	canctrl_Receive(hcan, CAN_RX_FIFO1);
 8002388:	2101      	movs	r1, #1
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff f87c 	bl	8001488 <canctrl_Receive>
	uint32_t canEvent = canctrl_GetEvent();
 8002390:	f7fe ff56 	bl	8001240 <canctrl_GetEvent>
 8002394:	60f8      	str	r0, [r7, #12]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskHandleCANHandle,canEvent,eSetValueWithOverwrite,&HigherPriorityTaskWoken);
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	f107 0308 	add.w	r3, r7, #8
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2300      	movs	r3, #0
 80023a6:	2203      	movs	r2, #3
 80023a8:	68f9      	ldr	r1, [r7, #12]
 80023aa:	f005 f831 	bl	8007410 <xTaskGenericNotifyFromISR>
	HAL_GPIO_TogglePin(UserLED_GPIO_Port, UserLED_Pin);
 80023ae:	2108      	movs	r1, #8
 80023b0:	4804      	ldr	r0, [pc, #16]	; (80023c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80023b2:	f001 ff22 	bl	80041fa <HAL_GPIO_TogglePin>
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000085c 	.word	0x2000085c
 80023c4:	40010c00 	.word	0x40010c00

080023c8 <CAN_Init>:

void CAN_Init(){
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af04      	add	r7, sp, #16
	HAL_CAN_Start(&hcan);
 80023ce:	4832      	ldr	r0, [pc, #200]	; (8002498 <CAN_Init+0xd0>)
 80023d0:	f001 f8c8 	bl	8003564 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_RX_FIFO0_FULL);
 80023d4:	2116      	movs	r1, #22
 80023d6:	4830      	ldr	r0, [pc, #192]	; (8002498 <CAN_Init+0xd0>)
 80023d8:	f001 fa29 	bl	800382e <HAL_CAN_ActivateNotification>
	uint16_t deviceID = *(__IO uint32_t*)FLASH_ADDR_TARGET << CAN_DEVICE_POS;
 80023dc:	4b2f      	ldr	r3, [pc, #188]	; (800249c <CAN_Init+0xd4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	80fb      	strh	r3, [r7, #6]
/* CAN1(address) = *(__IO uint32_t*)(0x40000000UL 			 +  0x00006400			+ 0x01C				)
   CAN1(address) = *(__IO uint32_t*)(PERIPHERAL_BASE_ADDRESS + APB1_BASE_ADDRESS 	+ CAN_BASE_ADDRESS  )*/
	canctrl_Filter_List16(&hcan,
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	f043 0303 	orr.w	r3, r3, #3
 80023ec:	b299      	uxth	r1, r3
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	f043 0305 	orr.w	r3, r3, #5
 80023fc:	b298      	uxth	r0, r3
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	b29b      	uxth	r3, r3
 8002406:	2400      	movs	r4, #0
 8002408:	9402      	str	r4, [sp, #8]
 800240a:	2400      	movs	r4, #0
 800240c:	9401      	str	r4, [sp, #4]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4603      	mov	r3, r0
 8002412:	4821      	ldr	r0, [pc, #132]	; (8002498 <CAN_Init+0xd0>)
 8002414:	f7ff f862 	bl	80014dc <canctrl_Filter_List16>
			deviceID | CANCTRL_MODE_ENCODER,
			deviceID | CANCTRL_MODE_LED_BLUE,
			deviceID | CANCTRL_MODE_MOTOR_SPEED_ANGLE,
			deviceID | CANCTRL_MODE_SET_HOME,
			0, CAN_RX_FIFO0);
	canctrl_Filter_List16(&hcan,
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	f043 0309 	orr.w	r3, r3, #9
 800241e:	b299      	uxth	r1, r3
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	f043 0308 	orr.w	r3, r3, #8
 8002426:	b29a      	uxth	r2, r3
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	f043 0307 	orr.w	r3, r3, #7
 800242e:	b298      	uxth	r0, r3
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	f043 030a 	orr.w	r3, r3, #10
 8002436:	b29b      	uxth	r3, r3
 8002438:	2400      	movs	r4, #0
 800243a:	9402      	str	r4, [sp, #8]
 800243c:	2401      	movs	r4, #1
 800243e:	9401      	str	r4, [sp, #4]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	4603      	mov	r3, r0
 8002444:	4814      	ldr	r0, [pc, #80]	; (8002498 <CAN_Init+0xd0>)
 8002446:	f7ff f849 	bl	80014dc <canctrl_Filter_List16>
			deviceID | CANCTRL_MODE_PID_BLDC_SPEED,
			deviceID | CANCTRL_MODE_PID_DC_ANGLE,
			deviceID | CANCTRL_MODE_PID_DC_SPEED,
			deviceID | CANCTRL_MODE_PID_BLDC_BREAKPROTECTION,
			1, CAN_RX_FIFO0);
	canctrl_Filter_List16(&hcan,
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	f043 030b 	orr.w	r3, r3, #11
 8002450:	b299      	uxth	r1, r3
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	f043 0306 	orr.w	r3, r3, #6
 8002458:	b29a      	uxth	r2, r3
 800245a:	2300      	movs	r3, #0
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	2302      	movs	r3, #2
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	2300      	movs	r3, #0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2300      	movs	r3, #0
 8002468:	480b      	ldr	r0, [pc, #44]	; (8002498 <CAN_Init+0xd0>)
 800246a:	f7ff f837 	bl	80014dc <canctrl_Filter_List16>
			0,
			0,
			2, CAN_RX_FIFO0);
//Access bxCAN register:
	// method 1:
	if(hcan.Init.Mode == CAN_MODE_LOOPBACK) canctrl_Filter_Mask16(&hcan, 0, 0, 0, 0, 6, CAN_RX_FIFO0);
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <CAN_Init+0xd0>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002476:	d10b      	bne.n	8002490 <CAN_Init+0xc8>
 8002478:	2300      	movs	r3, #0
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	2306      	movs	r3, #6
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2300      	movs	r3, #0
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	4803      	ldr	r0, [pc, #12]	; (8002498 <CAN_Init+0xd0>)
 800248c:	f7ff f857 	bl	800153e <canctrl_Filter_Mask16>
	// method 2:
//	if(hcan.Instance->BTR & (CAN_BTR_LBKM)) canctrl_Filter_Mask16(...);
	// method 3:
//	(CAN1->BTR & (CAN_BTR_LBKM)) canctrl_Filter_Mask16(...);
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bd90      	pop	{r4, r7, pc}
 8002498:	200004b4 	.word	0x200004b4
 800249c:	08010000 	.word	0x08010000

080024a0 <can_GetPID_CompleteCallback>:

uint8_t Break;

void can_GetPID_CompleteCallback(CAN_PID canPID, PID_type type){
 80024a0:	b084      	sub	sp, #16
 80024a2:	b5b0      	push	{r4, r5, r7, lr}
 80024a4:	b0a0      	sub	sp, #128	; 0x80
 80024a6:	af0e      	add	r7, sp, #56	; 0x38
 80024a8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80024ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	PID_Param pid = brd_GetPID(type);
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fd83 	bl	8000fc4 <brd_GetPID>
	canfunc_Convert_CAN_PID_to_PID_Param(canPID, &pid);
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024cc:	f7ff f928 	bl	8001720 <canfunc_Convert_CAN_PID_to_PID_Param>
	brd_SetPID(pid, type);
 80024d0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80024d4:	930d      	str	r3, [sp, #52]	; 0x34
 80024d6:	466d      	mov	r5, sp
 80024d8:	f107 0414 	add.w	r4, r7, #20
 80024dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	602b      	str	r3, [r5, #0]
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f0:	f7fe fd32 	bl	8000f58 <brd_SetPID>
}
 80024f4:	bf00      	nop
 80024f6:	3748      	adds	r7, #72	; 0x48
 80024f8:	46bd      	mov	sp, r7
 80024fa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80024fe:	b004      	add	sp, #16
 8002500:	4770      	bx	lr
	...

08002504 <handleFunc>:

void handleFunc(CAN_MODE_ID mode){
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	; 0x30
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d874      	bhi.n	80025fe <handleFunc+0xfa>
 8002514:	a201      	add	r2, pc, #4	; (adr r2, 800251c <handleFunc+0x18>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	080025ff 	.word	0x080025ff
 8002520:	080025ff 	.word	0x080025ff
 8002524:	080025ff 	.word	0x080025ff
 8002528:	08002551 	.word	0x08002551
 800252c:	08002561 	.word	0x08002561
 8002530:	0800257d 	.word	0x0800257d
 8002534:	08002599 	.word	0x08002599
 8002538:	080025c9 	.word	0x080025c9
 800253c:	080025c9 	.word	0x080025c9
 8002540:	080025c9 	.word	0x080025c9
 8002544:	080025d1 	.word	0x080025d1
 8002548:	080025f1 	.word	0x080025f1
 800254c:	080025ff 	.word	0x080025ff
	case CANCTRL_MODE_LED_BLUE:
		break;
	case CANCTRL_MODE_ENCODER:
		int32_t count_X4 = (int32_t)canfunc_MotorGetEncoderPulseBLDC();
 8002550:	f7ff f8b4 	bl	80016bc <canfunc_MotorGetEncoderPulseBLDC>
 8002554:	4603      	mov	r3, r0
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
		brd_SetEncX4BLDC(count_X4);
 8002558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800255a:	f7fe fe63 	bl	8001224 <brd_SetEncX4BLDC>
		break;
 800255e:	e04e      	b.n	80025fe <handleFunc+0xfa>
	case CANCTRL_MODE_SHOOT:
		break;
	case CANCTRL_MODE_SET_HOME:
		bool setHomeValue = canfunc_GetHomeValue();
 8002560:	f7ff f890 	bl	8001684 <canfunc_GetHomeValue>
 8002564:	4603      	mov	r3, r0
 8002566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		xQueueSend(qHome,(void *)&setHomeValue,1/portTICK_PERIOD_MS);
 800256a:	4b29      	ldr	r3, [pc, #164]	; (8002610 <handleFunc+0x10c>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002572:	2300      	movs	r3, #0
 8002574:	2201      	movs	r2, #1
 8002576:	f003 fd57 	bl	8006028 <xQueueGenericSend>
		break;
 800257a:	e040      	b.n	80025fe <handleFunc+0xfa>
	case CANCTRL_MODE_MOTOR_SPEED_ANGLE:
		CAN_SpeedBLDC_AngleDC speedAngle;
		speedAngle = canfunc_MotorGetSpeedAndAngle();
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff f8aa 	bl	80016da <canfunc_MotorGetSpeedAndAngle>
		brd_SetTargetAngleDC(speedAngle.dcAngle);
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fd97 	bl	80010bc <brd_SetTargetAngleDC>
		brd_SetSpeedBLDC(speedAngle.bldcSpeed);
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fdc7 	bl	8001124 <brd_SetSpeedBLDC>
		break;
 8002596:	e032      	b.n	80025fe <handleFunc+0xfa>
	case CANCTRL_MODE_MOTOR_BLDC_BRAKE:
		uint8_t brake = canfunc_MotorGetBrake();
 8002598:	f7ff f840 	bl	800161c <canfunc_MotorGetBrake>
 800259c:	4603      	mov	r3, r0
 800259e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		MotorBLDC mbldc = brd_GetObjMotorBLDC();
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fda8 	bl	80010fc <brd_GetObjMotorBLDC>
		MotorBLDC_Brake(&mbldc, brake);
 80025ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fba6 	bl	8001d12 <MotorBLDC_Brake>
		break;
 80025c6:	e01a      	b.n	80025fe <handleFunc+0xfa>
	case CANCTRL_MODE_PID_DC_SPEED:
	case CANCTRL_MODE_PID_DC_ANGLE:
	case CANCTRL_MODE_PID_BLDC_SPEED:
		canfunc_GetPID(&can_GetPID_CompleteCallback);
 80025c8:	4812      	ldr	r0, [pc, #72]	; (8002614 <handleFunc+0x110>)
 80025ca:	f7ff f8d7 	bl	800177c <canfunc_GetPID>
		break;
 80025ce:	e016      	b.n	80025fe <handleFunc+0xfa>
	case CANCTRL_MODE_PID_BLDC_BREAKPROTECTION:
		Break = canfunc_MotorGetBreakProtectionBLDC();
 80025d0:	f7ff f83e 	bl	8001650 <canfunc_MotorGetBreakProtectionBLDC>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <handleFunc+0x114>)
 80025da:	701a      	strb	r2, [r3, #0]
		PID_BLDC_BreakProtection(Break);
 80025dc:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <handleFunc+0x114>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fd0a 	bl	8002004 <PID_BLDC_BreakProtection>
	case CANCTRL_MODE_TEST:
		TestMode = canfunc_GetTestMode();
 80025f0:	f7fe fffa 	bl	80015e8 <canfunc_GetTestMode>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <handleFunc+0x118>)
 80025fa:	701a      	strb	r2, [r3, #0]
		break;
 80025fc:	bf00      	nop
	case CANCTRL_MODE_START:
	case CANCTRL_MODE_END:
		break;
	}
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80025fe:	2102      	movs	r1, #2
 8002600:	4807      	ldr	r0, [pc, #28]	; (8002620 <handleFunc+0x11c>)
 8002602:	f001 f914 	bl	800382e <HAL_CAN_ActivateNotification>
}
 8002606:	bf00      	nop
 8002608:	3730      	adds	r7, #48	; 0x30
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000b0c 	.word	0x20000b0c
 8002614:	080024a1 	.word	0x080024a1
 8002618:	20000b11 	.word	0x20000b11
 800261c:	20000b04 	.word	0x20000b04
 8002620:	200004b4 	.word	0x200004b4

08002624 <HAL_CAN_ErrorCallback>:
	PID_DC_CalPos(dcAngleSet);
	Encoder_t enDC = brd_GetObjEncDC();
	dcAngleResult = encoder_GetPulse(&enDC, MODE_ANGLE);
}

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	while(1);
 800262c:	e7fe      	b.n	800262c <HAL_CAN_ErrorCallback+0x8>

0800262e <HAL_CAN_RxFifo0FullCallback>:
}

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
	__NOP();
 8002636:	bf00      	nop
//	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
	...

08002644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002644:	b5b0      	push	{r4, r5, r7, lr}
 8002646:	b09a      	sub	sp, #104	; 0x68
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800264a:	f000 fd71 	bl	8003130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800264e:	f000 f881 	bl	8002754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002652:	f000 fa11 	bl	8002a78 <MX_GPIO_Init>
  MX_CAN_Init();
 8002656:	f000 f8c3 	bl	80027e0 <MX_CAN_Init>
  MX_TIM3_Init();
 800265a:	f000 f965 	bl	8002928 <MX_TIM3_Init>
  MX_TIM4_Init();
 800265e:	f000 f9b7 	bl	80029d0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002662:	f000 f8f3 	bl	800284c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_DBGMCU_FREEZE_TIM2();
 8002666:	4b30      	ldr	r3, [pc, #192]	; (8002728 <main+0xe4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a2f      	ldr	r2, [pc, #188]	; (8002728 <main+0xe4>)
 800266c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002670:	6053      	str	r3, [r2, #4]
  brd_Init();
 8002672:	f7fe fba9 	bl	8000dc8 <brd_Init>
  qPID = xQueueCreate(2,sizeof(float));
 8002676:	2200      	movs	r2, #0
 8002678:	2104      	movs	r1, #4
 800267a:	2002      	movs	r0, #2
 800267c:	f003 fc77 	bl	8005f6e <xQueueGenericCreate>
 8002680:	4603      	mov	r3, r0
 8002682:	4a2a      	ldr	r2, [pc, #168]	; (800272c <main+0xe8>)
 8002684:	6013      	str	r3, [r2, #0]
  qHome = xQueueCreate(1,sizeof(bool));
 8002686:	2200      	movs	r2, #0
 8002688:	2101      	movs	r1, #1
 800268a:	2001      	movs	r0, #1
 800268c:	f003 fc6f 	bl	8005f6e <xQueueGenericCreate>
 8002690:	4603      	mov	r3, r0
 8002692:	4a27      	ldr	r2, [pc, #156]	; (8002730 <main+0xec>)
 8002694:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of qCAN */
  osMessageQDef(qCAN, 5, uint16_t);
 8002696:	4b27      	ldr	r3, [pc, #156]	; (8002734 <main+0xf0>)
 8002698:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800269c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800269e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  qCANHandle = osMessageCreate(osMessageQ(qCAN), NULL);
 80026a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 faa9 	bl	8005c00 <osMessageCreate>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4a21      	ldr	r2, [pc, #132]	; (8002738 <main+0xf4>)
 80026b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <main+0xf8>)
 80026b6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80026ba:	461d      	mov	r5, r3
 80026bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 fa36 	bl	8005b40 <osThreadCreate>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <main+0xfc>)
 80026d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCalcPID */
  osThreadStaticDef(TaskCalcPID, StartTaskPID, osPriorityNormal, 0, 128, TaskCalcPIDBuffer, &TaskCalcPIDControlBlock);
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <main+0x100>)
 80026dc:	f107 0420 	add.w	r4, r7, #32
 80026e0:	461d      	mov	r5, r3
 80026e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCalcPIDHandle = osThreadCreate(osThread(TaskCalcPID), NULL);
 80026ee:	f107 0320 	add.w	r3, r7, #32
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fa23 	bl	8005b40 <osThreadCreate>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a12      	ldr	r2, [pc, #72]	; (8002748 <main+0x104>)
 80026fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskHandleCAN */
  osThreadStaticDef(TaskHandleCAN, StartCANbus, osPriorityAboveNormal, 0, 128, TaskHandleCANBuffer, &TaskHandleCANControlBlock);
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <main+0x108>)
 8002702:	1d3c      	adds	r4, r7, #4
 8002704:	461d      	mov	r5, r3
 8002706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800270a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800270e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskHandleCANHandle = osThreadCreate(osThread(TaskHandleCAN), NULL);
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fa12 	bl	8005b40 <osThreadCreate>
 800271c:	4603      	mov	r3, r0
 800271e:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <main+0x10c>)
 8002720:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002722:	f003 fa06 	bl	8005b32 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002726:	e7fe      	b.n	8002726 <main+0xe2>
 8002728:	e0042000 	.word	0xe0042000
 800272c:	20000b08 	.word	0x20000b08
 8002730:	20000b0c 	.word	0x20000b0c
 8002734:	08007ff0 	.word	0x08007ff0
 8002738:	20000b00 	.word	0x20000b00
 800273c:	0800800c 	.word	0x0800800c
 8002740:	200005b4 	.word	0x200005b4
 8002744:	08008034 	.word	0x08008034
 8002748:	200005b8 	.word	0x200005b8
 800274c:	08008060 	.word	0x08008060
 8002750:	2000085c 	.word	0x2000085c

08002754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b090      	sub	sp, #64	; 0x40
 8002758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275a:	f107 0318 	add.w	r3, r7, #24
 800275e:	2228      	movs	r2, #40	; 0x28
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f005 fb52 	bl	8007e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002776:	2301      	movs	r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800277a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800277e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002780:	2300      	movs	r3, #0
 8002782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002784:	2301      	movs	r3, #1
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002788:	2302      	movs	r3, #2
 800278a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800278c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002790:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002792:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002796:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f001 fd45 	bl	800422c <HAL_RCC_OscConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80027a8:	f000 fa8c 	bl	8002cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ac:	230f      	movs	r3, #15
 80027ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b0:	2302      	movs	r3, #2
 80027b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2102      	movs	r1, #2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 ffb2 	bl	8004730 <HAL_RCC_ClockConfig>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80027d2:	f000 fa77 	bl	8002cc4 <Error_Handler>
  }
}
 80027d6:	bf00      	nop
 80027d8:	3740      	adds	r7, #64	; 0x40
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <MX_CAN_Init+0x64>)
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <MX_CAN_Init+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <MX_CAN_Init+0x64>)
 80027ec:	2212      	movs	r2, #18
 80027ee:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_CAN_Init+0x64>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <MX_CAN_Init+0x64>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_CAN_Init+0x64>)
 80027fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002802:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <MX_CAN_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_CAN_Init+0x64>)
 800280c:	2200      	movs	r2, #0
 800280e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_CAN_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <MX_CAN_Init+0x64>)
 8002818:	2200      	movs	r2, #0
 800281a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_CAN_Init+0x64>)
 800281e:	2200      	movs	r2, #0
 8002820:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <MX_CAN_Init+0x64>)
 8002824:	2200      	movs	r2, #0
 8002826:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_CAN_Init+0x64>)
 800282a:	2200      	movs	r2, #0
 800282c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_CAN_Init+0x64>)
 8002830:	f000 fcd4 	bl	80031dc <HAL_CAN_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800283a:	f000 fa43 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200004b4 	.word	0x200004b4
 8002848:	40006400 	.word	0x40006400

0800284c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002852:	f107 0320 	add.w	r3, r7, #32
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	60da      	str	r2, [r3, #12]
 8002868:	611a      	str	r2, [r3, #16]
 800286a:	615a      	str	r2, [r3, #20]
 800286c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800286e:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <MX_TIM2_Init+0xd8>)
 8002870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002874:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <MX_TIM2_Init+0xd8>)
 8002878:	2206      	movs	r2, #6
 800287a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287c:	4b29      	ldr	r3, [pc, #164]	; (8002924 <MX_TIM2_Init+0xd8>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002882:	4b28      	ldr	r3, [pc, #160]	; (8002924 <MX_TIM2_Init+0xd8>)
 8002884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002888:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288a:	4b26      	ldr	r3, [pc, #152]	; (8002924 <MX_TIM2_Init+0xd8>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <MX_TIM2_Init+0xd8>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002896:	4823      	ldr	r0, [pc, #140]	; (8002924 <MX_TIM2_Init+0xd8>)
 8002898:	f002 f99e 	bl	8004bd8 <HAL_TIM_PWM_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80028a2:	f000 fa0f 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ae:	f107 0320 	add.w	r3, r7, #32
 80028b2:	4619      	mov	r1, r3
 80028b4:	481b      	ldr	r0, [pc, #108]	; (8002924 <MX_TIM2_Init+0xd8>)
 80028b6:	f002 ffcd 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80028c0:	f000 fa00 	bl	8002cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c4:	2360      	movs	r3, #96	; 0x60
 80028c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	2204      	movs	r2, #4
 80028d8:	4619      	mov	r1, r3
 80028da:	4812      	ldr	r0, [pc, #72]	; (8002924 <MX_TIM2_Init+0xd8>)
 80028dc:	f002 fcc6 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80028e6:	f000 f9ed 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2208      	movs	r2, #8
 80028ee:	4619      	mov	r1, r3
 80028f0:	480c      	ldr	r0, [pc, #48]	; (8002924 <MX_TIM2_Init+0xd8>)
 80028f2:	f002 fcbb 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80028fc:	f000 f9e2 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	220c      	movs	r2, #12
 8002904:	4619      	mov	r1, r3
 8002906:	4807      	ldr	r0, [pc, #28]	; (8002924 <MX_TIM2_Init+0xd8>)
 8002908:	f002 fcb0 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8002912:	f000 f9d7 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <MX_TIM2_Init+0xd8>)
 8002918:	f000 fafe 	bl	8002f18 <HAL_TIM_MspPostInit>

}
 800291c:	bf00      	nop
 800291e:	3728      	adds	r7, #40	; 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200004dc 	.word	0x200004dc

08002928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800292e:	f107 030c 	add.w	r3, r7, #12
 8002932:	2224      	movs	r2, #36	; 0x24
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f005 fa68 	bl	8007e0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002944:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <MX_TIM3_Init+0xa0>)
 8002946:	4a21      	ldr	r2, [pc, #132]	; (80029cc <MX_TIM3_Init+0xa4>)
 8002948:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_TIM3_Init+0xa0>)
 800294c:	2200      	movs	r2, #0
 800294e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_TIM3_Init+0xa0>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <MX_TIM3_Init+0xa0>)
 8002958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800295c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_TIM3_Init+0xa0>)
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002964:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_TIM3_Init+0xa0>)
 8002966:	2200      	movs	r2, #0
 8002968:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800296a:	2303      	movs	r3, #3
 800296c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002972:	2301      	movs	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002982:	2301      	movs	r3, #1
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002986:	2300      	movs	r3, #0
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	4619      	mov	r1, r3
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <MX_TIM3_Init+0xa0>)
 8002996:	f002 fa11 	bl	8004dbc <HAL_TIM_Encoder_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80029a0:	f000 f990 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a4:	2300      	movs	r3, #0
 80029a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <MX_TIM3_Init+0xa0>)
 80029b2:	f002 ff4f 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80029bc:	f000 f982 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	3730      	adds	r7, #48	; 0x30
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000524 	.word	0x20000524
 80029cc:	40000400 	.word	0x40000400

080029d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f005 fa14 	bl	8007e0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029ec:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <MX_TIM4_Init+0xa0>)
 80029ee:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <MX_TIM4_Init+0xa4>)
 80029f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029f2:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <MX_TIM4_Init+0xa0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <MX_TIM4_Init+0xa0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80029fe:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <MX_TIM4_Init+0xa0>)
 8002a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <MX_TIM4_Init+0xa0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <MX_TIM4_Init+0xa0>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a12:	2303      	movs	r3, #3
 8002a14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a36:	f107 030c 	add.w	r3, r7, #12
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	480c      	ldr	r0, [pc, #48]	; (8002a70 <MX_TIM4_Init+0xa0>)
 8002a3e:	f002 f9bd 	bl	8004dbc <HAL_TIM_Encoder_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002a48:	f000 f93c 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	4619      	mov	r1, r3
 8002a58:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_TIM4_Init+0xa0>)
 8002a5a:	f002 fefb 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002a64:	f000 f92e 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a68:	bf00      	nop
 8002a6a:	3730      	adds	r7, #48	; 0x30
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	2000056c 	.word	0x2000056c
 8002a74:	40000800 	.word	0x40000800

08002a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7e:	f107 0310 	add.w	r3, r7, #16
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a8c:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <MX_GPIO_Init+0xc8>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4a2b      	ldr	r2, [pc, #172]	; (8002b40 <MX_GPIO_Init+0xc8>)
 8002a92:	f043 0320 	orr.w	r3, r3, #32
 8002a96:	6193      	str	r3, [r2, #24]
 8002a98:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <MX_GPIO_Init+0xc8>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa4:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <MX_GPIO_Init+0xc8>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <MX_GPIO_Init+0xc8>)
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6193      	str	r3, [r2, #24]
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <MX_GPIO_Init+0xc8>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <MX_GPIO_Init+0xc8>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <MX_GPIO_Init+0xc8>)
 8002ac2:	f043 0308 	orr.w	r3, r3, #8
 8002ac6:	6193      	str	r3, [r2, #24]
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <MX_GPIO_Init+0xc8>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLDC_DIR_Pin|BLDC_BRAKE_Pin, GPIO_PIN_RESET);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2111      	movs	r1, #17
 8002ad8:	481a      	ldr	r0, [pc, #104]	; (8002b44 <MX_GPIO_Init+0xcc>)
 8002ada:	f001 fb76 	bl	80041ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserLED_GPIO_Port, UserLED_Pin, GPIO_PIN_RESET);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	4819      	ldr	r0, [pc, #100]	; (8002b48 <MX_GPIO_Init+0xd0>)
 8002ae4:	f001 fb71 	bl	80041ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLDC_DIR_Pin BLDC_BRAKE_Pin */
  GPIO_InitStruct.Pin = BLDC_DIR_Pin|BLDC_BRAKE_Pin;
 8002ae8:	2311      	movs	r3, #17
 8002aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aec:	2301      	movs	r3, #1
 8002aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af4:	2302      	movs	r3, #2
 8002af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	4619      	mov	r1, r3
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <MX_GPIO_Init+0xcc>)
 8002b00:	f001 f9c8 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Home_Pin */
  GPIO_InitStruct.Pin = Sensor_Home_Pin;
 8002b04:	2320      	movs	r3, #32
 8002b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Sensor_Home_GPIO_Port, &GPIO_InitStruct);
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	4619      	mov	r1, r3
 8002b16:	480b      	ldr	r0, [pc, #44]	; (8002b44 <MX_GPIO_Init+0xcc>)
 8002b18:	f001 f9bc 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : UserLED_Pin */
  GPIO_InitStruct.Pin = UserLED_Pin;
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b20:	2301      	movs	r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserLED_GPIO_Port, &GPIO_InitStruct);
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	4619      	mov	r1, r3
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <MX_GPIO_Init+0xd0>)
 8002b34:	f001 f9ae 	bl	8003e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b38:	bf00      	nop
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40010800 	.word	0x40010800
 8002b48:	40010c00 	.word	0x40010c00

08002b4c <SethomeHandle>:
//	uint32_t canEvent = canctrl_GetEvent();
//	if(canEvent) return;
//	canfunc_PutAndSendParamPID(&hcan,targetID,pid,type);
//}

void SethomeHandle(){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
	if(xQueueReceive(qHome, (void*)&IsSetHome, 1/portTICK_PERIOD_MS) == pdTRUE){
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <SethomeHandle+0x20>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	4906      	ldr	r1, [pc, #24]	; (8002b70 <SethomeHandle+0x24>)
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fb63 	bl	8006224 <xQueueReceive>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d100      	bne.n	8002b66 <SethomeHandle+0x1a>
		__NOP();
 8002b64:	bf00      	nop
	}
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000b0c 	.word	0x20000b0c
 8002b70:	20000b10 	.word	0x20000b10

08002b74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	SET_HOME_DEFAULT_TASK:
	sethome_Begin();
 8002b7c:	f7ff fa7c 	bl	8002078 <sethome_Begin>
	while(!sethome_IsComplete()){
 8002b80:	e010      	b.n	8002ba4 <StartDefaultTask+0x30>
	  sethome_Procedure();
 8002b82:	f7ff fb73 	bl	800226c <sethome_Procedure>
	  float speed = sethome_GetSpeed();
 8002b86:	f7ff fba7 	bl	80022d8 <sethome_GetSpeed>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	60fb      	str	r3, [r7, #12]
	  xQueueSend(qPID,(const void*)&speed,10/portTICK_PERIOD_MS);
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <StartDefaultTask+0x68>)
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	f107 010c 	add.w	r1, r7, #12
 8002b96:	2300      	movs	r3, #0
 8002b98:	220a      	movs	r2, #10
 8002b9a:	f003 fa45 	bl	8006028 <xQueueGenericSend>
	  osDelay(1);
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f003 f81a 	bl	8005bd8 <osDelay>
	while(!sethome_IsComplete()){
 8002ba4:	f7ff fb52 	bl	800224c <sethome_IsComplete>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e6      	bne.n	8002b82 <StartDefaultTask+0xe>
	}
	brd_SetHomeCompleteCallback();
 8002bb4:	f7fe fa6e 	bl	8001094 <brd_SetHomeCompleteCallback>
	 IsSetHome = 0;
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <StartDefaultTask+0x6c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]

  for(;;)
  {
//	canTestBreakProtection(1);
//	canTestSetHome(1);
	SethomeHandle();
 8002bbe:	f7ff ffc5 	bl	8002b4c <SethomeHandle>

	if(IsSetHome){
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <StartDefaultTask+0x6c>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <StartDefaultTask+0x5e>
		osDelay(1);
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f003 f804 	bl	8005bd8 <osDelay>
		goto SET_HOME_DEFAULT_TASK;
 8002bd0:	e7d4      	b.n	8002b7c <StartDefaultTask+0x8>
	}
    osDelay(1);
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f003 f800 	bl	8005bd8 <osDelay>
	SethomeHandle();
 8002bd8:	e7f1      	b.n	8002bbe <StartDefaultTask+0x4a>
 8002bda:	bf00      	nop
 8002bdc:	20000b08 	.word	0x20000b08
 8002be0:	20000b10 	.word	0x20000b10

08002be4 <StartTaskPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPID */
void StartTaskPID(void const * argument)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPID */
	SET_HOME_PID_TASK:
	float TargetValue = 0;
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
    while(!sethome_IsComplete()){
 8002bf2:	e00e      	b.n	8002c12 <StartTaskPID+0x2e>
    	xQueueReceive(qPID, &TargetValue,0);
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <StartTaskPID+0x7c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f107 010c 	add.w	r1, r7, #12
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 fb10 	bl	8006224 <xQueueReceive>
    	PID_DC_CalSpeed((float)TargetValue);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f904 	bl	8001e14 <PID_DC_CalSpeed>
    	osDelay(1);
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f002 ffe3 	bl	8005bd8 <osDelay>
    while(!sethome_IsComplete()){
 8002c12:	f7ff fb1b 	bl	800224c <sethome_IsComplete>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e8      	bne.n	8002bf4 <StartTaskPID+0x10>
    }
  /* Infinite loop */
  for(;;)
  {
	  if(IsSetHome) {
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <StartTaskPID+0x80>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <StartTaskPID+0x5c>
		  PID_BLDC_BreakProtection(1);
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f7ff f9ea 	bl	8002004 <PID_BLDC_BreakProtection>
		  osDelay(1000);
 8002c30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c34:	f002 ffd0 	bl	8005bd8 <osDelay>
		  PID_BLDC_BreakProtection(0);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7ff f9e3 	bl	8002004 <PID_BLDC_BreakProtection>

		  goto SET_HOME_PID_TASK;
 8002c3e:	e7d5      	b.n	8002bec <StartTaskPID+0x8>
	  }

	  PID_DC_CalPos(brd_GetTargetAngleDC());
 8002c40:	f7fe fa32 	bl	80010a8 <brd_GetTargetAngleDC>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff f935 	bl	8001eb6 <PID_DC_CalPos>
	  PID_BLDC_CalSpeed(brd_GetSpeedBLDC());
 8002c4c:	f7fe fa78 	bl	8001140 <brd_GetSpeedBLDC>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f974 	bl	8001f40 <PID_BLDC_CalSpeed>
//	  PID_BLDC_CalSpeed(targetSpeed);
//	  brd_SetDeltaT(testDeltaT);
//	  osDelay(brd_GetDeltaT()*1000);
	  osDelay(1);
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f002 ffbd 	bl	8005bd8 <osDelay>
	  if(IsSetHome) {
 8002c5e:	e7e0      	b.n	8002c22 <StartTaskPID+0x3e>
 8002c60:	20000b08 	.word	0x20000b08
 8002c64:	20000b10 	.word	0x20000b10

08002c68 <StartCANbus>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANbus */
void StartCANbus(void const * argument)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANbus */
	CAN_Init();
 8002c70:	f7ff fbaa 	bl	80023c8 <CAN_Init>
	uint32_t canEvent;
  /* Infinite loop */
  for(;;)
  {
	  if(xTaskNotifyWait(pdFALSE, pdFALSE, &canEvent, portMAX_DELAY)){
 8002c74:	f107 020c 	add.w	r2, r7, #12
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f004 fb66 	bl	8007350 <xTaskNotifyWait>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f4      	beq.n	8002c74 <StartCANbus+0xc>
		  canctrl_SetEvent(canEvent);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fae1 	bl	8001254 <canctrl_SetEvent>
		  canfunc_HandleRxEvent(&handleFunc);
 8002c92:	4802      	ldr	r0, [pc, #8]	; (8002c9c <StartCANbus+0x34>)
 8002c94:	f7fe fc80 	bl	8001598 <canfunc_HandleRxEvent>
	  if(xTaskNotifyWait(pdFALSE, pdFALSE, &canEvent, portMAX_DELAY)){
 8002c98:	e7ec      	b.n	8002c74 <StartCANbus+0xc>
 8002c9a:	bf00      	nop
 8002c9c:	08002505 	.word	0x08002505

08002ca0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cb2:	f000 fa53 	bl	800315c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40012c00 	.word	0x40012c00

08002cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc8:	b672      	cpsid	i
}
 8002cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <Error_Handler+0x8>
	...

08002cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_MspInit+0x68>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <HAL_MspInit+0x68>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6193      	str	r3, [r2, #24]
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_MspInit+0x68>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_MspInit+0x68>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <HAL_MspInit+0x68>)
 8002cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	61d3      	str	r3, [r2, #28]
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_MspInit+0x68>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	210f      	movs	r1, #15
 8002d0a:	f06f 0001 	mvn.w	r0, #1
 8002d0e:	f001 f896 	bl	8003e3e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_MspInit+0x6c>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <HAL_MspInit+0x6c>)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40010000 	.word	0x40010000

08002d40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0310 	add.w	r3, r7, #16
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <HAL_CAN_MspInit+0xbc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d149      	bne.n	8002df4 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_CAN_MspInit+0xc0>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_CAN_MspInit+0xc0>)
 8002d66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	61d3      	str	r3, [r2, #28]
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_CAN_MspInit+0xc0>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_CAN_MspInit+0xc0>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <HAL_CAN_MspInit+0xc0>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	6193      	str	r3, [r2, #24]
 8002d84:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_CAN_MspInit+0xc0>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	f107 0310 	add.w	r3, r7, #16
 8002da2:	4619      	mov	r1, r3
 8002da4:	4817      	ldr	r0, [pc, #92]	; (8002e04 <HAL_CAN_MspInit+0xc4>)
 8002da6:	f001 f875 	bl	8003e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db0:	2302      	movs	r3, #2
 8002db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4811      	ldr	r0, [pc, #68]	; (8002e04 <HAL_CAN_MspInit+0xc4>)
 8002dc0:	f001 f868 	bl	8003e94 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2105      	movs	r1, #5
 8002dc8:	2013      	movs	r0, #19
 8002dca:	f001 f838 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8002dce:	2013      	movs	r0, #19
 8002dd0:	f001 f851 	bl	8003e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2105      	movs	r1, #5
 8002dd8:	2014      	movs	r0, #20
 8002dda:	f001 f830 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002dde:	2014      	movs	r0, #20
 8002de0:	f001 f849 	bl	8003e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2105      	movs	r1, #5
 8002de8:	2015      	movs	r0, #21
 8002dea:	f001 f828 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002dee:	2015      	movs	r0, #21
 8002df0:	f001 f841 	bl	8003e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002df4:	bf00      	nop
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40006400 	.word	0x40006400
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40010800 	.word	0x40010800

08002e08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d10b      	bne.n	8002e32 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_TIM_PWM_MspInit+0x34>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <HAL_TIM_PWM_MspInit+0x34>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_TIM_PWM_MspInit+0x34>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40021000 	.word	0x40021000

08002e40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 0318 	add.w	r3, r7, #24
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d124      	bne.n	8002eaa <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	61d3      	str	r3, [r2, #28]
 8002e6c:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e78:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	6193      	str	r3, [r2, #24]
 8002e84:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e90:	23c0      	movs	r3, #192	; 0xc0
 8002e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9c:	f107 0318 	add.w	r3, r7, #24
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	481a      	ldr	r0, [pc, #104]	; (8002f0c <HAL_TIM_Encoder_MspInit+0xcc>)
 8002ea4:	f000 fff6 	bl	8003e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ea8:	e028      	b.n	8002efc <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d123      	bne.n	8002efc <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	61d3      	str	r3, [r2, #28]
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002ed2:	f043 0308 	orr.w	r3, r3, #8
 8002ed6:	6193      	str	r3, [r2, #24]
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ee4:	23c0      	movs	r3, #192	; 0xc0
 8002ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 0318 	add.w	r3, r7, #24
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4807      	ldr	r0, [pc, #28]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ef8:	f000 ffcc 	bl	8003e94 <HAL_GPIO_Init>
}
 8002efc:	bf00      	nop
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40010800 	.word	0x40010800
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40010c00 	.word	0x40010c00

08002f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 0310 	add.w	r3, r7, #16
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f36:	d117      	bne.n	8002f68 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <HAL_TIM_MspPostInit+0x58>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <HAL_TIM_MspPostInit+0x58>)
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	6193      	str	r3, [r2, #24]
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_TIM_MspPostInit+0x58>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002f50:	230e      	movs	r3, #14
 8002f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f54:	2302      	movs	r3, #2
 8002f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5c:	f107 0310 	add.w	r3, r7, #16
 8002f60:	4619      	mov	r1, r3
 8002f62:	4804      	ldr	r0, [pc, #16]	; (8002f74 <HAL_TIM_MspPostInit+0x5c>)
 8002f64:	f000 ff96 	bl	8003e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f68:	bf00      	nop
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40010800 	.word	0x40010800

08002f78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08c      	sub	sp, #48	; 0x30
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002f8e:	4b2e      	ldr	r3, [pc, #184]	; (8003048 <HAL_InitTick+0xd0>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <HAL_InitTick+0xd0>)
 8002f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f98:	6193      	str	r3, [r2, #24]
 8002f9a:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <HAL_InitTick+0xd0>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fa6:	f107 020c 	add.w	r2, r7, #12
 8002faa:	f107 0310 	add.w	r3, r7, #16
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 fd19 	bl	80049e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002fb6:	f001 fd03 	bl	80049c0 <HAL_RCC_GetPCLK2Freq>
 8002fba:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	4a23      	ldr	r2, [pc, #140]	; (800304c <HAL_InitTick+0xd4>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	0c9b      	lsrs	r3, r3, #18
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002fca:	4b21      	ldr	r3, [pc, #132]	; (8003050 <HAL_InitTick+0xd8>)
 8002fcc:	4a21      	ldr	r2, [pc, #132]	; (8003054 <HAL_InitTick+0xdc>)
 8002fce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <HAL_InitTick+0xd8>)
 8002fd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fd6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_InitTick+0xd8>)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_InitTick+0xd8>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <HAL_InitTick+0xd8>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_InitTick+0xd8>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002ff0:	4817      	ldr	r0, [pc, #92]	; (8003050 <HAL_InitTick+0xd8>)
 8002ff2:	f001 fd47 	bl	8004a84 <HAL_TIM_Base_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003000:	2b00      	cmp	r3, #0
 8003002:	d11b      	bne.n	800303c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003004:	4812      	ldr	r0, [pc, #72]	; (8003050 <HAL_InitTick+0xd8>)
 8003006:	f001 fd95 	bl	8004b34 <HAL_TIM_Base_Start_IT>
 800300a:	4603      	mov	r3, r0
 800300c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003014:	2b00      	cmp	r3, #0
 8003016:	d111      	bne.n	800303c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003018:	2019      	movs	r0, #25
 800301a:	f000 ff2c 	bl	8003e76 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d808      	bhi.n	8003036 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	2019      	movs	r0, #25
 800302a:	f000 ff08 	bl	8003e3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_InitTick+0xe0>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	e002      	b.n	800303c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800303c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003040:	4618      	mov	r0, r3
 8003042:	3730      	adds	r7, #48	; 0x30
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	431bde83 	.word	0x431bde83
 8003050:	20000b14 	.word	0x20000b14
 8003054:	40012c00 	.word	0x40012c00
 8003058:	20000004 	.word	0x20000004

0800305c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003060:	e7fe      	b.n	8003060 <NMI_Handler+0x4>

08003062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003062:	b480      	push	{r7}
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003066:	e7fe      	b.n	8003066 <HardFault_Handler+0x4>

08003068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800306c:	e7fe      	b.n	800306c <MemManage_Handler+0x4>

0800306e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003072:	e7fe      	b.n	8003072 <BusFault_Handler+0x4>

08003074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <UsageFault_Handler+0x4>

0800307a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
	...

08003088 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800308c:	4802      	ldr	r0, [pc, #8]	; (8003098 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800308e:	f000 fc19 	bl	80038c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200004b4 	.word	0x200004b4

0800309c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80030a0:	4802      	ldr	r0, [pc, #8]	; (80030ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80030a2:	f000 fc0f 	bl	80038c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200004b4 	.word	0x200004b4

080030b0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80030b4:	4802      	ldr	r0, [pc, #8]	; (80030c0 <CAN1_RX1_IRQHandler+0x10>)
 80030b6:	f000 fc05 	bl	80038c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200004b4 	.word	0x200004b4

080030c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030c8:	4802      	ldr	r0, [pc, #8]	; (80030d4 <TIM1_UP_IRQHandler+0x10>)
 80030ca:	f001 ffc7 	bl	800505c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000b14 	.word	0x20000b14

080030d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030e4:	f7ff fff8 	bl	80030d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030e8:	480b      	ldr	r0, [pc, #44]	; (8003118 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80030ea:	490c      	ldr	r1, [pc, #48]	; (800311c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80030ec:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <LoopFillZerobss+0x16>)
  movs r3, #0
 80030ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030f0:	e002      	b.n	80030f8 <LoopCopyDataInit>

080030f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030f6:	3304      	adds	r3, #4

080030f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030fc:	d3f9      	bcc.n	80030f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003100:	4c09      	ldr	r4, [pc, #36]	; (8003128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003104:	e001      	b.n	800310a <LoopFillZerobss>

08003106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003108:	3204      	adds	r2, #4

0800310a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800310a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800310c:	d3fb      	bcc.n	8003106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800310e:	f004 fedb 	bl	8007ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003112:	f7ff fa97 	bl	8002644 <main>
  bx lr
 8003116:	4770      	bx	lr
  ldr r0, =_sdata
 8003118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800311c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003120:	080080b8 	.word	0x080080b8
  ldr r2, =_sbss
 8003124:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003128:	200019ec 	.word	0x200019ec

0800312c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800312c:	e7fe      	b.n	800312c <ADC1_2_IRQHandler>
	...

08003130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_Init+0x28>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a07      	ldr	r2, [pc, #28]	; (8003158 <HAL_Init+0x28>)
 800313a:	f043 0310 	orr.w	r3, r3, #16
 800313e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003140:	2003      	movs	r0, #3
 8003142:	f000 fe71 	bl	8003e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003146:	200f      	movs	r0, #15
 8003148:	f7ff ff16 	bl	8002f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800314c:	f7ff fdc0 	bl	8002cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40022000 	.word	0x40022000

0800315c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_IncTick+0x1c>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_IncTick+0x20>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4413      	add	r3, r2
 800316c:	4a03      	ldr	r2, [pc, #12]	; (800317c <HAL_IncTick+0x20>)
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	20000008 	.word	0x20000008
 800317c:	20000b5c 	.word	0x20000b5c

08003180 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return uwTick;
 8003184:	4b02      	ldr	r3, [pc, #8]	; (8003190 <HAL_GetTick+0x10>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	20000b5c 	.word	0x20000b5c

08003194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff fff0 	bl	8003180 <HAL_GetTick>
 80031a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d005      	beq.n	80031ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_Delay+0x44>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ba:	bf00      	nop
 80031bc:	f7ff ffe0 	bl	8003180 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d8f7      	bhi.n	80031bc <HAL_Delay+0x28>
  {
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000008 	.word	0x20000008

080031dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0ed      	b.n	80033ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fda0 	bl	8002d40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003210:	f7ff ffb6 	bl	8003180 <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003216:	e012      	b.n	800323e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003218:	f7ff ffb2 	bl	8003180 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b0a      	cmp	r3, #10
 8003224:	d90b      	bls.n	800323e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2205      	movs	r2, #5
 8003236:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e0c5      	b.n	80033ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0e5      	beq.n	8003218 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0202 	bic.w	r2, r2, #2
 800325a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800325c:	f7ff ff90 	bl	8003180 <HAL_GetTick>
 8003260:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003262:	e012      	b.n	800328a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003264:	f7ff ff8c 	bl	8003180 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b0a      	cmp	r3, #10
 8003270:	d90b      	bls.n	800328a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2205      	movs	r2, #5
 8003282:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e09f      	b.n	80033ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e5      	bne.n	8003264 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7e1b      	ldrb	r3, [r3, #24]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d108      	bne.n	80032b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e007      	b.n	80032c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7e5b      	ldrb	r3, [r3, #25]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e007      	b.n	80032ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7e9b      	ldrb	r3, [r3, #26]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d108      	bne.n	8003306 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0220 	orr.w	r2, r2, #32
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e007      	b.n	8003316 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0220 	bic.w	r2, r2, #32
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	7edb      	ldrb	r3, [r3, #27]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d108      	bne.n	8003330 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0210 	bic.w	r2, r2, #16
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e007      	b.n	8003340 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0210 	orr.w	r2, r2, #16
 800333e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	7f1b      	ldrb	r3, [r3, #28]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d108      	bne.n	800335a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0208 	orr.w	r2, r2, #8
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	e007      	b.n	800336a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0208 	bic.w	r2, r2, #8
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7f5b      	ldrb	r3, [r3, #29]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d108      	bne.n	8003384 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0204 	orr.w	r2, r2, #4
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e007      	b.n	8003394 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0204 	bic.w	r2, r2, #4
 8003392:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	ea42 0103 	orr.w	r1, r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b087      	sub	sp, #28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d003      	beq.n	80033f8 <HAL_CAN_ConfigFilter+0x26>
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	f040 80aa 	bne.w	800354c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033fe:	f043 0201 	orr.w	r2, r3, #1
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2201      	movs	r2, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	43db      	mvns	r3, r3
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d123      	bne.n	800347a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43db      	mvns	r3, r3
 800343c:	401a      	ands	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003454:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3248      	adds	r2, #72	; 0x48
 800345a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800346e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003470:	6979      	ldr	r1, [r7, #20]
 8003472:	3348      	adds	r3, #72	; 0x48
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d122      	bne.n	80034c8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	431a      	orrs	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3248      	adds	r2, #72	; 0x48
 80034a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034be:	6979      	ldr	r1, [r7, #20]
 80034c0:	3348      	adds	r3, #72	; 0x48
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	401a      	ands	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034e2:	e007      	b.n	80034f4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	43db      	mvns	r3, r3
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800350e:	e007      	b.n	8003520 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	431a      	orrs	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	431a      	orrs	r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800353e:	f023 0201 	bic.w	r2, r3, #1
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e006      	b.n	800355a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d12e      	bne.n	80035d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003590:	f7ff fdf6 	bl	8003180 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003596:	e012      	b.n	80035be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003598:	f7ff fdf2 	bl	8003180 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b0a      	cmp	r3, #10
 80035a4:	d90b      	bls.n	80035be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2205      	movs	r2, #5
 80035b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e012      	b.n	80035e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e5      	bne.n	8003598 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e006      	b.n	80035e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003600:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003602:	7dfb      	ldrb	r3, [r7, #23]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d003      	beq.n	8003610 <HAL_CAN_GetRxMessage+0x24>
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	2b02      	cmp	r3, #2
 800360c:	f040 8103 	bne.w	8003816 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10e      	bne.n	8003634 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0f7      	b.n	8003824 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0e8      	b.n	8003824 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	331b      	adds	r3, #27
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	4413      	add	r3, r2
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0204 	and.w	r2, r3, #4
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10c      	bne.n	800368a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	331b      	adds	r3, #27
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	4413      	add	r3, r2
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0d5b      	lsrs	r3, r3, #21
 8003680:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e00b      	b.n	80036a2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	331b      	adds	r3, #27
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4413      	add	r3, r2
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	08db      	lsrs	r3, r3, #3
 800369a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	331b      	adds	r3, #27
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	4413      	add	r3, r2
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0202 	and.w	r2, r3, #2
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	331b      	adds	r3, #27
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	4413      	add	r3, r2
 80036c4:	3304      	adds	r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2208      	movs	r2, #8
 80036d4:	611a      	str	r2, [r3, #16]
 80036d6:	e00b      	b.n	80036f0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	331b      	adds	r3, #27
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	4413      	add	r3, r2
 80036e4:	3304      	adds	r3, #4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	331b      	adds	r3, #27
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	b2da      	uxtb	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	331b      	adds	r3, #27
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	4413      	add	r3, r2
 8003714:	3304      	adds	r3, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b29a      	uxth	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	4413      	add	r3, r2
 800372a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	4413      	add	r3, r2
 8003740:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0a1a      	lsrs	r2, r3, #8
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	4413      	add	r3, r2
 800375a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	0c1a      	lsrs	r2, r3, #16
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	3302      	adds	r3, #2
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	4413      	add	r3, r2
 8003774:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0e1a      	lsrs	r2, r3, #24
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	3303      	adds	r3, #3
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	4413      	add	r3, r2
 800378e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	3304      	adds	r3, #4
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0a1a      	lsrs	r2, r3, #8
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	3305      	adds	r3, #5
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4413      	add	r3, r2
 80037c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	0c1a      	lsrs	r2, r3, #16
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	3306      	adds	r3, #6
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	4413      	add	r3, r2
 80037da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e1a      	lsrs	r2, r3, #24
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	3307      	adds	r3, #7
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d108      	bne.n	8003802 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	e007      	b.n	8003812 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e006      	b.n	8003824 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800383e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d002      	beq.n	800384c <HAL_CAN_ActivateNotification+0x1e>
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d109      	bne.n	8003860 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6959      	ldr	r1, [r3, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e006      	b.n	800386e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003888:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d002      	beq.n	8003896 <HAL_CAN_DeactivateNotification+0x1e>
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d10a      	bne.n	80038ac <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6959      	ldr	r1, [r3, #20]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	43da      	mvns	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	400a      	ands	r2, r1
 80038a6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e006      	b.n	80038ba <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d07c      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d023      	beq.n	800395c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f983 	bl	8003c32 <HAL_CAN_TxMailbox0CompleteCallback>
 800392c:	e016      	b.n	800395c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d004      	beq.n	8003942 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
 8003940:	e00c      	b.n	800395c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d004      	beq.n	8003956 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
 8003954:	e002      	b.n	800395c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f986 	bl	8003c68 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d024      	beq.n	80039b0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800396e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f962 	bl	8003c44 <HAL_CAN_TxMailbox1CompleteCallback>
 8003980:	e016      	b.n	80039b0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
 8003994:	e00c      	b.n	80039b0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	e002      	b.n	80039b0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f965 	bl	8003c7a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d024      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f941 	bl	8003c56 <HAL_CAN_TxMailbox2CompleteCallback>
 80039d4:	e016      	b.n	8003a04 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	e00c      	b.n	8003a04 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
 80039fc:	e002      	b.n	8003a04 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f944 	bl	8003c8c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00c      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2210      	movs	r2, #16
 8003a26:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2208      	movs	r2, #8
 8003a42:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fe fdf2 	bl	800262e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fe fc64 	bl	8002330 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2210      	movs	r2, #16
 8003a8a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d006      	beq.n	8003aae <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f8f8 	bl	8003c9e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d009      	beq.n	8003acc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fe fc5a 	bl	8002380 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d006      	beq.n	8003aee <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f8e1 	bl	8003cb0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d006      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2208      	movs	r2, #8
 8003b08:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8d9 	bl	8003cc2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d07b      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d072      	beq.n	8003c0a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	f043 0302 	orr.w	r3, r3, #2
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d043      	beq.n	8003c0a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d03e      	beq.n	8003c0a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b92:	2b60      	cmp	r3, #96	; 0x60
 8003b94:	d02b      	beq.n	8003bee <HAL_CAN_IRQHandler+0x32a>
 8003b96:	2b60      	cmp	r3, #96	; 0x60
 8003b98:	d82e      	bhi.n	8003bf8 <HAL_CAN_IRQHandler+0x334>
 8003b9a:	2b50      	cmp	r3, #80	; 0x50
 8003b9c:	d022      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x320>
 8003b9e:	2b50      	cmp	r3, #80	; 0x50
 8003ba0:	d82a      	bhi.n	8003bf8 <HAL_CAN_IRQHandler+0x334>
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d019      	beq.n	8003bda <HAL_CAN_IRQHandler+0x316>
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d826      	bhi.n	8003bf8 <HAL_CAN_IRQHandler+0x334>
 8003baa:	2b30      	cmp	r3, #48	; 0x30
 8003bac:	d010      	beq.n	8003bd0 <HAL_CAN_IRQHandler+0x30c>
 8003bae:	2b30      	cmp	r3, #48	; 0x30
 8003bb0:	d822      	bhi.n	8003bf8 <HAL_CAN_IRQHandler+0x334>
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d002      	beq.n	8003bbc <HAL_CAN_IRQHandler+0x2f8>
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d005      	beq.n	8003bc6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003bba:	e01d      	b.n	8003bf8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	f043 0308 	orr.w	r3, r3, #8
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bc4:	e019      	b.n	8003bfa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	f043 0310 	orr.w	r3, r3, #16
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bce:	e014      	b.n	8003bfa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	f043 0320 	orr.w	r3, r3, #32
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bd8:	e00f      	b.n	8003bfa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003be2:	e00a      	b.n	8003bfa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bec:	e005      	b.n	8003bfa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bf6:	e000      	b.n	8003bfa <HAL_CAN_IRQHandler+0x336>
            break;
 8003bf8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c08:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2204      	movs	r2, #4
 8003c10:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fe fcfd 	bl	8002624 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3728      	adds	r7, #40	; 0x28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d06:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	60d3      	str	r3, [r2, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <__NVIC_GetPriorityGrouping+0x18>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	f003 0307 	and.w	r3, r3, #7
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	db0b      	blt.n	8003d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	f003 021f 	and.w	r2, r3, #31
 8003d50:	4906      	ldr	r1, [pc, #24]	; (8003d6c <__NVIC_EnableIRQ+0x34>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2001      	movs	r0, #1
 8003d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	e000e100 	.word	0xe000e100

08003d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	6039      	str	r1, [r7, #0]
 8003d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	db0a      	blt.n	8003d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	490c      	ldr	r1, [pc, #48]	; (8003dbc <__NVIC_SetPriority+0x4c>)
 8003d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8e:	0112      	lsls	r2, r2, #4
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	440b      	add	r3, r1
 8003d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d98:	e00a      	b.n	8003db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	4908      	ldr	r1, [pc, #32]	; (8003dc0 <__NVIC_SetPriority+0x50>)
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	3b04      	subs	r3, #4
 8003da8:	0112      	lsls	r2, r2, #4
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	440b      	add	r3, r1
 8003dae:	761a      	strb	r2, [r3, #24]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	e000e100 	.word	0xe000e100
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b089      	sub	sp, #36	; 0x24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f1c3 0307 	rsb	r3, r3, #7
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	bf28      	it	cs
 8003de2:	2304      	movcs	r3, #4
 8003de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3304      	adds	r3, #4
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	d902      	bls.n	8003df4 <NVIC_EncodePriority+0x30>
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3b03      	subs	r3, #3
 8003df2:	e000      	b.n	8003df6 <NVIC_EncodePriority+0x32>
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	401a      	ands	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	fa01 f303 	lsl.w	r3, r1, r3
 8003e16:	43d9      	mvns	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	4313      	orrs	r3, r2
         );
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3724      	adds	r7, #36	; 0x24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff4f 	bl	8003cd4 <__NVIC_SetPriorityGrouping>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e50:	f7ff ff64 	bl	8003d1c <__NVIC_GetPriorityGrouping>
 8003e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	6978      	ldr	r0, [r7, #20]
 8003e5c:	f7ff ffb2 	bl	8003dc4 <NVIC_EncodePriority>
 8003e60:	4602      	mov	r2, r0
 8003e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff81 	bl	8003d70 <__NVIC_SetPriority>
}
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff57 	bl	8003d38 <__NVIC_EnableIRQ>
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b08b      	sub	sp, #44	; 0x2c
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea6:	e169      	b.n	800417c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	f040 8158 	bne.w	8004176 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4a9a      	ldr	r2, [pc, #616]	; (8004134 <HAL_GPIO_Init+0x2a0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d05e      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
 8003ed0:	4a98      	ldr	r2, [pc, #608]	; (8004134 <HAL_GPIO_Init+0x2a0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d875      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003ed6:	4a98      	ldr	r2, [pc, #608]	; (8004138 <HAL_GPIO_Init+0x2a4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d058      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
 8003edc:	4a96      	ldr	r2, [pc, #600]	; (8004138 <HAL_GPIO_Init+0x2a4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d86f      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003ee2:	4a96      	ldr	r2, [pc, #600]	; (800413c <HAL_GPIO_Init+0x2a8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d052      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
 8003ee8:	4a94      	ldr	r2, [pc, #592]	; (800413c <HAL_GPIO_Init+0x2a8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d869      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003eee:	4a94      	ldr	r2, [pc, #592]	; (8004140 <HAL_GPIO_Init+0x2ac>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d04c      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
 8003ef4:	4a92      	ldr	r2, [pc, #584]	; (8004140 <HAL_GPIO_Init+0x2ac>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d863      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003efa:	4a92      	ldr	r2, [pc, #584]	; (8004144 <HAL_GPIO_Init+0x2b0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d046      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
 8003f00:	4a90      	ldr	r2, [pc, #576]	; (8004144 <HAL_GPIO_Init+0x2b0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d85d      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003f06:	2b12      	cmp	r3, #18
 8003f08:	d82a      	bhi.n	8003f60 <HAL_GPIO_Init+0xcc>
 8003f0a:	2b12      	cmp	r3, #18
 8003f0c:	d859      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003f0e:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <HAL_GPIO_Init+0x80>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f8f 	.word	0x08003f8f
 8003f18:	08003f69 	.word	0x08003f69
 8003f1c:	08003f7b 	.word	0x08003f7b
 8003f20:	08003fbd 	.word	0x08003fbd
 8003f24:	08003fc3 	.word	0x08003fc3
 8003f28:	08003fc3 	.word	0x08003fc3
 8003f2c:	08003fc3 	.word	0x08003fc3
 8003f30:	08003fc3 	.word	0x08003fc3
 8003f34:	08003fc3 	.word	0x08003fc3
 8003f38:	08003fc3 	.word	0x08003fc3
 8003f3c:	08003fc3 	.word	0x08003fc3
 8003f40:	08003fc3 	.word	0x08003fc3
 8003f44:	08003fc3 	.word	0x08003fc3
 8003f48:	08003fc3 	.word	0x08003fc3
 8003f4c:	08003fc3 	.word	0x08003fc3
 8003f50:	08003fc3 	.word	0x08003fc3
 8003f54:	08003fc3 	.word	0x08003fc3
 8003f58:	08003f71 	.word	0x08003f71
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	4a79      	ldr	r2, [pc, #484]	; (8004148 <HAL_GPIO_Init+0x2b4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f66:	e02c      	b.n	8003fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	623b      	str	r3, [r7, #32]
          break;
 8003f6e:	e029      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	3304      	adds	r3, #4
 8003f76:	623b      	str	r3, [r7, #32]
          break;
 8003f78:	e024      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	623b      	str	r3, [r7, #32]
          break;
 8003f82:	e01f      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	623b      	str	r3, [r7, #32]
          break;
 8003f8c:	e01a      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f96:	2304      	movs	r3, #4
 8003f98:	623b      	str	r3, [r7, #32]
          break;
 8003f9a:	e013      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d105      	bne.n	8003fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fa4:	2308      	movs	r3, #8
 8003fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	611a      	str	r2, [r3, #16]
          break;
 8003fae:	e009      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	615a      	str	r2, [r3, #20]
          break;
 8003fba:	e003      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	623b      	str	r3, [r7, #32]
          break;
 8003fc0:	e000      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          break;
 8003fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2bff      	cmp	r3, #255	; 0xff
 8003fc8:	d801      	bhi.n	8003fce <HAL_GPIO_Init+0x13a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	e001      	b.n	8003fd2 <HAL_GPIO_Init+0x13e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2bff      	cmp	r3, #255	; 0xff
 8003fd8:	d802      	bhi.n	8003fe0 <HAL_GPIO_Init+0x14c>
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	e002      	b.n	8003fe6 <HAL_GPIO_Init+0x152>
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	3b08      	subs	r3, #8
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	210f      	movs	r1, #15
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	6a39      	ldr	r1, [r7, #32]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	431a      	orrs	r2, r3
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80b1 	beq.w	8004176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004014:	4b4d      	ldr	r3, [pc, #308]	; (800414c <HAL_GPIO_Init+0x2b8>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	4a4c      	ldr	r2, [pc, #304]	; (800414c <HAL_GPIO_Init+0x2b8>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6193      	str	r3, [r2, #24]
 8004020:	4b4a      	ldr	r3, [pc, #296]	; (800414c <HAL_GPIO_Init+0x2b8>)
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800402c:	4a48      	ldr	r2, [pc, #288]	; (8004150 <HAL_GPIO_Init+0x2bc>)
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	220f      	movs	r2, #15
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a40      	ldr	r2, [pc, #256]	; (8004154 <HAL_GPIO_Init+0x2c0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d013      	beq.n	8004080 <HAL_GPIO_Init+0x1ec>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3f      	ldr	r2, [pc, #252]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00d      	beq.n	800407c <HAL_GPIO_Init+0x1e8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a3e      	ldr	r2, [pc, #248]	; (800415c <HAL_GPIO_Init+0x2c8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d007      	beq.n	8004078 <HAL_GPIO_Init+0x1e4>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3d      	ldr	r2, [pc, #244]	; (8004160 <HAL_GPIO_Init+0x2cc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d101      	bne.n	8004074 <HAL_GPIO_Init+0x1e0>
 8004070:	2303      	movs	r3, #3
 8004072:	e006      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004074:	2304      	movs	r3, #4
 8004076:	e004      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004078:	2302      	movs	r3, #2
 800407a:	e002      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004080:	2300      	movs	r3, #0
 8004082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004084:	f002 0203 	and.w	r2, r2, #3
 8004088:	0092      	lsls	r2, r2, #2
 800408a:	4093      	lsls	r3, r2
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004092:	492f      	ldr	r1, [pc, #188]	; (8004150 <HAL_GPIO_Init+0x2bc>)
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3302      	adds	r3, #2
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040ac:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	492c      	ldr	r1, [pc, #176]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]
 80040b8:	e006      	b.n	80040c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040ba:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	4928      	ldr	r1, [pc, #160]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040d4:	4b23      	ldr	r3, [pc, #140]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	4922      	ldr	r1, [pc, #136]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60cb      	str	r3, [r1, #12]
 80040e0:	e006      	b.n	80040f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	491e      	ldr	r1, [pc, #120]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d006      	beq.n	800410a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040fc:	4b19      	ldr	r3, [pc, #100]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	4918      	ldr	r1, [pc, #96]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
 8004108:	e006      	b.n	8004118 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800410a:	4b16      	ldr	r3, [pc, #88]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	43db      	mvns	r3, r3
 8004112:	4914      	ldr	r1, [pc, #80]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 8004114:	4013      	ands	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d021      	beq.n	8004168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	490e      	ldr	r1, [pc, #56]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
 8004130:	e021      	b.n	8004176 <HAL_GPIO_Init+0x2e2>
 8004132:	bf00      	nop
 8004134:	10320000 	.word	0x10320000
 8004138:	10310000 	.word	0x10310000
 800413c:	10220000 	.word	0x10220000
 8004140:	10210000 	.word	0x10210000
 8004144:	10120000 	.word	0x10120000
 8004148:	10110000 	.word	0x10110000
 800414c:	40021000 	.word	0x40021000
 8004150:	40010000 	.word	0x40010000
 8004154:	40010800 	.word	0x40010800
 8004158:	40010c00 	.word	0x40010c00
 800415c:	40011000 	.word	0x40011000
 8004160:	40011400 	.word	0x40011400
 8004164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_GPIO_Init+0x304>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	43db      	mvns	r3, r3
 8004170:	4909      	ldr	r1, [pc, #36]	; (8004198 <HAL_GPIO_Init+0x304>)
 8004172:	4013      	ands	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	3301      	adds	r3, #1
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	f47f ae8e 	bne.w	8003ea8 <HAL_GPIO_Init+0x14>
  }
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	372c      	adds	r7, #44	; 0x2c
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	40010400 	.word	0x40010400

0800419c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e001      	b.n	80041be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	807b      	strh	r3, [r7, #2]
 80041d6:	4613      	mov	r3, r2
 80041d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041da:	787b      	ldrb	r3, [r7, #1]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041e0:	887a      	ldrh	r2, [r7, #2]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041e6:	e003      	b.n	80041f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041e8:	887b      	ldrh	r3, [r7, #2]
 80041ea:	041a      	lsls	r2, r3, #16
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	611a      	str	r2, [r3, #16]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800420c:	887a      	ldrh	r2, [r7, #2]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4013      	ands	r3, r2
 8004212:	041a      	lsls	r2, r3, #16
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	43d9      	mvns	r1, r3
 8004218:	887b      	ldrh	r3, [r7, #2]
 800421a:	400b      	ands	r3, r1
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]
}
 8004222:	bf00      	nop
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e272      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8087 	beq.w	800435a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800424c:	4b92      	ldr	r3, [pc, #584]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b04      	cmp	r3, #4
 8004256:	d00c      	beq.n	8004272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004258:	4b8f      	ldr	r3, [pc, #572]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d112      	bne.n	800428a <HAL_RCC_OscConfig+0x5e>
 8004264:	4b8c      	ldr	r3, [pc, #560]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d10b      	bne.n	800428a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004272:	4b89      	ldr	r3, [pc, #548]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d06c      	beq.n	8004358 <HAL_RCC_OscConfig+0x12c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d168      	bne.n	8004358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e24c      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x76>
 8004294:	4b80      	ldr	r3, [pc, #512]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a7f      	ldr	r2, [pc, #508]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e02e      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x98>
 80042aa:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7a      	ldr	r2, [pc, #488]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b78      	ldr	r3, [pc, #480]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a77      	ldr	r2, [pc, #476]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e01d      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0xbc>
 80042ce:	4b72      	ldr	r3, [pc, #456]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a71      	ldr	r2, [pc, #452]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6e      	ldr	r2, [pc, #440]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042e8:	4b6b      	ldr	r3, [pc, #428]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6a      	ldr	r2, [pc, #424]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b68      	ldr	r3, [pc, #416]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a67      	ldr	r2, [pc, #412]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fe ff3a 	bl	8003180 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fe ff36 	bl	8003180 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e200      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b5d      	ldr	r3, [pc, #372]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0xe4>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fe ff26 	bl	8003180 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004338:	f7fe ff22 	bl	8003180 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1ec      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	4b53      	ldr	r3, [pc, #332]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x10c>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d063      	beq.n	800442e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004366:	4b4c      	ldr	r3, [pc, #304]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004372:	4b49      	ldr	r3, [pc, #292]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x18c>
 800437e:	4b46      	ldr	r3, [pc, #280]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b43      	ldr	r3, [pc, #268]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1c0      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b3d      	ldr	r3, [pc, #244]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4939      	ldr	r1, [pc, #228]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fe fedb 	bl	8003180 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fe fed7 	bl	8003180 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e1a1      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4927      	ldr	r1, [pc, #156]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fe feba 	bl	8003180 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004410:	f7fe feb6 	bl	8003180 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e180      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d03a      	beq.n	80044b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d019      	beq.n	8004476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fe fe9a 	bl	8003180 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004450:	f7fe fe96 	bl	8003180 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e160      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800446e:	2001      	movs	r0, #1
 8004470:	f000 faea 	bl	8004a48 <RCC_Delay>
 8004474:	e01c      	b.n	80044b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447c:	f7fe fe80 	bl	8003180 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004482:	e00f      	b.n	80044a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004484:	f7fe fe7c 	bl	8003180 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d908      	bls.n	80044a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e146      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	42420000 	.word	0x42420000
 80044a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	4b92      	ldr	r3, [pc, #584]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e9      	bne.n	8004484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a6 	beq.w	800460a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c2:	4b8b      	ldr	r3, [pc, #556]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10d      	bne.n	80044ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b88      	ldr	r3, [pc, #544]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4a87      	ldr	r2, [pc, #540]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	61d3      	str	r3, [r2, #28]
 80044da:	4b85      	ldr	r3, [pc, #532]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	4b82      	ldr	r3, [pc, #520]	; (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f6:	4b7f      	ldr	r3, [pc, #508]	; (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a7e      	ldr	r2, [pc, #504]	; (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fe fe3d 	bl	8003180 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fe fe39 	bl	8003180 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	; 0x64
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e103      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4b75      	ldr	r3, [pc, #468]	; (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x312>
 8004530:	4b6f      	ldr	r3, [pc, #444]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	4a6e      	ldr	r2, [pc, #440]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6213      	str	r3, [r2, #32]
 800453c:	e02d      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x334>
 8004546:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a69      	ldr	r2, [pc, #420]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	6213      	str	r3, [r2, #32]
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	4a66      	ldr	r2, [pc, #408]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	6213      	str	r3, [r2, #32]
 800455e:	e01c      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d10c      	bne.n	8004582 <HAL_RCC_OscConfig+0x356>
 8004568:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a60      	ldr	r2, [pc, #384]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	f043 0304 	orr.w	r3, r3, #4
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	4b5e      	ldr	r3, [pc, #376]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a5d      	ldr	r2, [pc, #372]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6213      	str	r3, [r2, #32]
 8004580:	e00b      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 8004582:	4b5b      	ldr	r3, [pc, #364]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a5a      	ldr	r2, [pc, #360]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6213      	str	r3, [r2, #32]
 800458e:	4b58      	ldr	r3, [pc, #352]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a57      	ldr	r2, [pc, #348]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d015      	beq.n	80045ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a2:	f7fe fded 	bl	8003180 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fe fde9 	bl	8003180 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0b1      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	4b4b      	ldr	r3, [pc, #300]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ee      	beq.n	80045aa <HAL_RCC_OscConfig+0x37e>
 80045cc:	e014      	b.n	80045f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fe fdd7 	bl	8003180 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fe fdd3 	bl	8003180 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e09b      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	4b40      	ldr	r3, [pc, #256]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ee      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b3c      	ldr	r3, [pc, #240]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	4a3b      	ldr	r2, [pc, #236]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8087 	beq.w	8004722 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d061      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d146      	bne.n	80046b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b33      	ldr	r3, [pc, #204]	; (80046f8 <HAL_RCC_OscConfig+0x4cc>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fe fda7 	bl	8003180 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004636:	f7fe fda3 	bl	8003180 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e06d      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004648:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d108      	bne.n	8004670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	4921      	ldr	r1, [pc, #132]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004670:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a19      	ldr	r1, [r3, #32]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	430b      	orrs	r3, r1
 8004682:	491b      	ldr	r1, [pc, #108]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <HAL_RCC_OscConfig+0x4cc>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468e:	f7fe fd77 	bl	8003180 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fe fd73 	bl	8003180 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e03d      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a8:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x46a>
 80046b4:	e035      	b.n	8004722 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <HAL_RCC_OscConfig+0x4cc>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7fe fd60 	bl	8003180 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fe fd5c 	bl	8003180 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e026      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x498>
 80046e2:	e01e      	b.n	8004722 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e019      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
 80046f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_OscConfig+0x500>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	429a      	cmp	r2, r3
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40021000 	.word	0x40021000

08004730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0d0      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b6a      	ldr	r3, [pc, #424]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d910      	bls.n	8004774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b67      	ldr	r3, [pc, #412]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 0207 	bic.w	r2, r3, #7
 800475a:	4965      	ldr	r1, [pc, #404]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b63      	ldr	r3, [pc, #396]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0b8      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800478c:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a58      	ldr	r2, [pc, #352]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a4:	4b53      	ldr	r3, [pc, #332]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a52      	ldr	r2, [pc, #328]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b0:	4b50      	ldr	r3, [pc, #320]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	494d      	ldr	r1, [pc, #308]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d040      	beq.n	8004850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	4b47      	ldr	r3, [pc, #284]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d115      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e07f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e073      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fe:	4b3d      	ldr	r3, [pc, #244]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e06b      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480e:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f023 0203 	bic.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	4936      	ldr	r1, [pc, #216]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004820:	f7fe fcae 	bl	8003180 <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	e00a      	b.n	800483e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004828:	f7fe fcaa 	bl	8003180 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e053      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 020c 	and.w	r2, r3, #12
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	429a      	cmp	r2, r3
 800484e:	d1eb      	bne.n	8004828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004850:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d210      	bcs.n	8004880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0207 	bic.w	r2, r3, #7
 8004866:	4922      	ldr	r1, [pc, #136]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e032      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800488c:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4916      	ldr	r1, [pc, #88]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	4313      	orrs	r3, r2
 800489c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	490e      	ldr	r1, [pc, #56]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048be:	f000 f821 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	490a      	ldr	r1, [pc, #40]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80048d0:	5ccb      	ldrb	r3, [r1, r3]
 80048d2:	fa22 f303 	lsr.w	r3, r2, r3
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <HAL_RCC_ClockConfig+0x1cc>)
 80048d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_RCC_ClockConfig+0x1d0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe fb4a 	bl	8002f78 <HAL_InitTick>

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40022000 	.word	0x40022000
 80048f4:	40021000 	.word	0x40021000
 80048f8:	08008084 	.word	0x08008084
 80048fc:	20000000 	.word	0x20000000
 8004900:	20000004 	.word	0x20000004

08004904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <HAL_RCC_GetSysClockFreq+0x94>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b04      	cmp	r3, #4
 800492c:	d002      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x30>
 800492e:	2b08      	cmp	r3, #8
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x36>
 8004932:	e027      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004934:	4b19      	ldr	r3, [pc, #100]	; (800499c <HAL_RCC_GetSysClockFreq+0x98>)
 8004936:	613b      	str	r3, [r7, #16]
      break;
 8004938:	e027      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	0c9b      	lsrs	r3, r3, #18
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004944:	5cd3      	ldrb	r3, [r2, r3]
 8004946:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <HAL_RCC_GetSysClockFreq+0x94>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	0c5b      	lsrs	r3, r3, #17
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800495e:	5cd3      	ldrb	r3, [r2, r3]
 8004960:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a0d      	ldr	r2, [pc, #52]	; (800499c <HAL_RCC_GetSysClockFreq+0x98>)
 8004966:	fb03 f202 	mul.w	r2, r3, r2
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	e004      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0c      	ldr	r2, [pc, #48]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	613b      	str	r3, [r7, #16]
      break;
 8004982:	e002      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_GetSysClockFreq+0x98>)
 8004986:	613b      	str	r3, [r7, #16]
      break;
 8004988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800498a:	693b      	ldr	r3, [r7, #16]
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	007a1200 	.word	0x007a1200
 80049a0:	0800809c 	.word	0x0800809c
 80049a4:	080080ac 	.word	0x080080ac
 80049a8:	003d0900 	.word	0x003d0900

080049ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b02      	ldr	r3, [pc, #8]	; (80049bc <HAL_RCC_GetHCLKFreq+0x10>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	20000000 	.word	0x20000000

080049c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049c4:	f7ff fff2 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049c8:	4602      	mov	r2, r0
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	0adb      	lsrs	r3, r3, #11
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	4903      	ldr	r1, [pc, #12]	; (80049e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d6:	5ccb      	ldrb	r3, [r1, r3]
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	08008094 	.word	0x08008094

080049e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	220f      	movs	r2, #15
 80049f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <HAL_RCC_GetClockConfig+0x58>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 0203 	and.w	r2, r3, #3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <HAL_RCC_GetClockConfig+0x58>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_GetClockConfig+0x58>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a1c:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <HAL_RCC_GetClockConfig+0x58>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	08db      	lsrs	r3, r3, #3
 8004a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_RCC_GetClockConfig+0x5c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0207 	and.w	r2, r3, #7
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40022000 	.word	0x40022000

08004a48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <RCC_Delay+0x34>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <RCC_Delay+0x38>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0a5b      	lsrs	r3, r3, #9
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	fb02 f303 	mul.w	r3, r2, r3
 8004a62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a64:	bf00      	nop
  }
  while (Delay --);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1e5a      	subs	r2, r3, #1
 8004a6a:	60fa      	str	r2, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f9      	bne.n	8004a64 <RCC_Delay+0x1c>
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	20000000 	.word	0x20000000
 8004a80:	10624dd3 	.word	0x10624dd3

08004a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e041      	b.n	8004b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f839 	bl	8004b22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 fcb8 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d001      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e03a      	b.n	8004bc2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <HAL_TIM_Base_Start_IT+0x98>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00e      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x58>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d009      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x58>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a14      	ldr	r2, [pc, #80]	; (8004bd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x58>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a13      	ldr	r2, [pc, #76]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d111      	bne.n	8004bb0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b06      	cmp	r3, #6
 8004b9c:	d010      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bae:	e007      	b.n	8004bc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800

08004bd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e041      	b.n	8004c6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fe f902 	bl	8002e08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f000 fc0e 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <HAL_TIM_PWM_Start+0x24>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	e022      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x6a>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d109      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0x3e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	bf14      	ite	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	2300      	moveq	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	e015      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x6a>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d109      	bne.n	8004cd0 <HAL_TIM_PWM_Start+0x58>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	e008      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x6a>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	bf14      	ite	ne
 8004cdc:	2301      	movne	r3, #1
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e05e      	b.n	8004da8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d104      	bne.n	8004cfa <HAL_TIM_PWM_Start+0x82>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf8:	e013      	b.n	8004d22 <HAL_TIM_PWM_Start+0xaa>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d104      	bne.n	8004d0a <HAL_TIM_PWM_Start+0x92>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d08:	e00b      	b.n	8004d22 <HAL_TIM_PWM_Start+0xaa>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d104      	bne.n	8004d1a <HAL_TIM_PWM_Start+0xa2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d18:	e003      	b.n	8004d22 <HAL_TIM_PWM_Start+0xaa>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2201      	movs	r2, #1
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fd6e 	bl	800580c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1e      	ldr	r2, [pc, #120]	; (8004db0 <HAL_TIM_PWM_Start+0x138>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d107      	bne.n	8004d4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_TIM_PWM_Start+0x138>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <HAL_TIM_PWM_Start+0xfa>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5c:	d009      	beq.n	8004d72 <HAL_TIM_PWM_Start+0xfa>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a14      	ldr	r2, [pc, #80]	; (8004db4 <HAL_TIM_PWM_Start+0x13c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <HAL_TIM_PWM_Start+0xfa>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a12      	ldr	r2, [pc, #72]	; (8004db8 <HAL_TIM_PWM_Start+0x140>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d111      	bne.n	8004d96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b06      	cmp	r3, #6
 8004d82:	d010      	beq.n	8004da6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d94:	e007      	b.n	8004da6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0201 	orr.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800

08004dbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e093      	b.n	8004ef8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fe f82b 	bl	8002e40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e00:	f023 0307 	bic.w	r3, r3, #7
 8004e04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f000 fb11 	bl	8005438 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e5c:	f023 030c 	bic.w	r3, r3, #12
 8004e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	011a      	lsls	r2, r3, #4
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	031b      	lsls	r3, r3, #12
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d110      	bne.n	8004f52 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d102      	bne.n	8004f3c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f36:	7b7b      	ldrb	r3, [r7, #13]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d001      	beq.n	8004f40 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e089      	b.n	8005054 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f50:	e031      	b.n	8004fb6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d110      	bne.n	8004f7a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f58:	7bbb      	ldrb	r3, [r7, #14]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d102      	bne.n	8004f64 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f5e:	7b3b      	ldrb	r3, [r7, #12]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d001      	beq.n	8004f68 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e075      	b.n	8005054 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f78:	e01d      	b.n	8004fb6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d108      	bne.n	8004f92 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f80:	7bbb      	ldrb	r3, [r7, #14]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d105      	bne.n	8004f92 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f86:	7b7b      	ldrb	r3, [r7, #13]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f8c:	7b3b      	ldrb	r3, [r7, #12]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d001      	beq.n	8004f96 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e05e      	b.n	8005054 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d010      	beq.n	8004fe4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004fc2:	e01f      	b.n	8005004 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fc1d 	bl	800580c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0202 	orr.w	r2, r2, #2
 8004fe0:	60da      	str	r2, [r3, #12]
      break;
 8004fe2:	e02e      	b.n	8005042 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	2104      	movs	r1, #4
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fc0d 	bl	800580c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0204 	orr.w	r2, r2, #4
 8005000:	60da      	str	r2, [r3, #12]
      break;
 8005002:	e01e      	b.n	8005042 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2201      	movs	r2, #1
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fbfd 	bl	800580c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2201      	movs	r2, #1
 8005018:	2104      	movs	r1, #4
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fbf6 	bl	800580c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0202 	orr.w	r2, r2, #2
 800502e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0204 	orr.w	r2, r2, #4
 800503e:	60da      	str	r2, [r3, #12]
      break;
 8005040:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b02      	cmp	r3, #2
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0202 	mvn.w	r2, #2
 8005088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f9af 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f9a2 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f9b1 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d122      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d11b      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0204 	mvn.w	r2, #4
 80050dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f985 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f978 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f987 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b08      	cmp	r3, #8
 8005118:	d122      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d11b      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0208 	mvn.w	r2, #8
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f95b 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f94e 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f95d 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d122      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	d11b      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0210 	mvn.w	r2, #16
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2208      	movs	r2, #8
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f931 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f924 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f933 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0201 	mvn.w	r2, #1
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fd fd60 	bl	8002ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f8:	2b80      	cmp	r3, #128	; 0x80
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fb8b 	bl	8005922 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d10e      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d107      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8f7 	bl	8005426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b20      	cmp	r3, #32
 8005244:	d10e      	bne.n	8005264 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b20      	cmp	r3, #32
 8005252:	d107      	bne.n	8005264 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0220 	mvn.w	r2, #32
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb56 	bl	8005910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005286:	2302      	movs	r3, #2
 8005288:	e0ae      	b.n	80053e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b0c      	cmp	r3, #12
 8005296:	f200 809f 	bhi.w	80053d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052d5 	.word	0x080052d5
 80052a4:	080053d9 	.word	0x080053d9
 80052a8:	080053d9 	.word	0x080053d9
 80052ac:	080053d9 	.word	0x080053d9
 80052b0:	08005315 	.word	0x08005315
 80052b4:	080053d9 	.word	0x080053d9
 80052b8:	080053d9 	.word	0x080053d9
 80052bc:	080053d9 	.word	0x080053d9
 80052c0:	08005357 	.word	0x08005357
 80052c4:	080053d9 	.word	0x080053d9
 80052c8:	080053d9 	.word	0x080053d9
 80052cc:	080053d9 	.word	0x080053d9
 80052d0:	08005397 	.word	0x08005397
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f90e 	bl	80054fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0208 	orr.w	r2, r2, #8
 80052ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0204 	bic.w	r2, r2, #4
 80052fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6999      	ldr	r1, [r3, #24]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	619a      	str	r2, [r3, #24]
      break;
 8005312:	e064      	b.n	80053de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f954 	bl	80055c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800532e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6999      	ldr	r1, [r3, #24]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	021a      	lsls	r2, r3, #8
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	619a      	str	r2, [r3, #24]
      break;
 8005354:	e043      	b.n	80053de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f99d 	bl	800569c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0208 	orr.w	r2, r2, #8
 8005370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0204 	bic.w	r2, r2, #4
 8005380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69d9      	ldr	r1, [r3, #28]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	61da      	str	r2, [r3, #28]
      break;
 8005394:	e023      	b.n	80053de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	4618      	mov	r0, r3
 800539e:	f000 f9e7 	bl	8005770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69da      	ldr	r2, [r3, #28]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69d9      	ldr	r1, [r3, #28]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	021a      	lsls	r2, r3, #8
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	61da      	str	r2, [r3, #28]
      break;
 80053d6:	e002      	b.n	80053de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	75fb      	strb	r3, [r7, #23]
      break;
 80053dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr

08005414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a29      	ldr	r2, [pc, #164]	; (80054f0 <TIM_Base_SetConfig+0xb8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00b      	beq.n	8005468 <TIM_Base_SetConfig+0x30>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d007      	beq.n	8005468 <TIM_Base_SetConfig+0x30>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a26      	ldr	r2, [pc, #152]	; (80054f4 <TIM_Base_SetConfig+0xbc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_Base_SetConfig+0x30>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a25      	ldr	r2, [pc, #148]	; (80054f8 <TIM_Base_SetConfig+0xc0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d108      	bne.n	800547a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <TIM_Base_SetConfig+0xb8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00b      	beq.n	800549a <TIM_Base_SetConfig+0x62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005488:	d007      	beq.n	800549a <TIM_Base_SetConfig+0x62>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a19      	ldr	r2, [pc, #100]	; (80054f4 <TIM_Base_SetConfig+0xbc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d003      	beq.n	800549a <TIM_Base_SetConfig+0x62>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <TIM_Base_SetConfig+0xc0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d108      	bne.n	80054ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a07      	ldr	r2, [pc, #28]	; (80054f0 <TIM_Base_SetConfig+0xb8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d103      	bne.n	80054e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	615a      	str	r2, [r3, #20]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800

080054fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	f023 0201 	bic.w	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 0302 	bic.w	r3, r3, #2
 8005544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a1c      	ldr	r2, [pc, #112]	; (80055c4 <TIM_OC1_SetConfig+0xc8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d10c      	bne.n	8005572 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0308 	bic.w	r3, r3, #8
 800555e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f023 0304 	bic.w	r3, r3, #4
 8005570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <TIM_OC1_SetConfig+0xc8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d111      	bne.n	800559e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	621a      	str	r2, [r3, #32]
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40012c00 	.word	0x40012c00

080055c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f023 0210 	bic.w	r2, r3, #16
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 0320 	bic.w	r3, r3, #32
 8005612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a1d      	ldr	r2, [pc, #116]	; (8005698 <TIM_OC2_SetConfig+0xd0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d10d      	bne.n	8005644 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a14      	ldr	r2, [pc, #80]	; (8005698 <TIM_OC2_SetConfig+0xd0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d113      	bne.n	8005674 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800565a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr
 8005698:	40012c00 	.word	0x40012c00

0800569c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0303 	bic.w	r3, r3, #3
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1d      	ldr	r2, [pc, #116]	; (800576c <TIM_OC3_SetConfig+0xd0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d10d      	bne.n	8005716 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a14      	ldr	r2, [pc, #80]	; (800576c <TIM_OC3_SetConfig+0xd0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d113      	bne.n	8005746 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40012c00 	.word	0x40012c00

08005770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a0f      	ldr	r2, [pc, #60]	; (8005808 <TIM_OC4_SetConfig+0x98>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d109      	bne.n	80057e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	019b      	lsls	r3, r3, #6
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr
 8005808:	40012c00 	.word	0x40012c00

0800580c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	2201      	movs	r2, #1
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1a      	ldr	r2, [r3, #32]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	43db      	mvns	r3, r3
 800582e:	401a      	ands	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a1a      	ldr	r2, [r3, #32]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	fa01 f303 	lsl.w	r3, r1, r3
 8005844:	431a      	orrs	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005868:	2302      	movs	r3, #2
 800586a:	e046      	b.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a16      	ldr	r2, [pc, #88]	; (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d009      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a12      	ldr	r2, [pc, #72]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a10      	ldr	r2, [pc, #64]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d10c      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800

08005910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr

08005934 <PID_Cal>:
 * @param CurrVal_set giá trị feedback của hệ thống
 * @return
 */

float PID_Cal(PID_Param *pid,float Target_set,float CurrVal_set)
{
 8005934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
//-----------------------Input-------------------------//
	e = Target_set - CurrVal_set;
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	68b8      	ldr	r0, [r7, #8]
 8005944:	f7fa ff3e 	bl	80007c4 <__aeabi_fsub>
 8005948:	4603      	mov	r3, r0
 800594a:	461a      	mov	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	601a      	str	r2, [r3, #0]
	if(!kI) kB = 0;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f04f 0100 	mov.w	r1, #0
 8005958:	4618      	mov	r0, r3
 800595a:	f7fb f9d1 	bl	8000d00 <__aeabi_fcmpeq>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d004      	beq.n	800596e <PID_Cal+0x3a>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	61da      	str	r2, [r3, #28]
 800596c:	e00a      	b.n	8005984 <PID_Cal+0x50>
	else kB = 1/deltaT;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4619      	mov	r1, r3
 8005974:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005978:	f7fb f8e2 	bl	8000b40 <__aeabi_fdiv>
 800597c:	4603      	mov	r3, r0
 800597e:	461a      	mov	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	61da      	str	r2, [r3, #28]

//-----------------------Propotion Term----------------//
	uP = kP*e;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fb f822 	bl	80009d8 <__aeabi_fmul>
 8005994:	4603      	mov	r3, r0
 8005996:	461a      	mov	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	611a      	str	r2, [r3, #16]

//-----------------------Integral Term-----------------//
	uI +=(kI*e + kB*(-u + uHat))*deltaT;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	699c      	ldr	r4, [r3, #24]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f7fb f814 	bl	80009d8 <__aeabi_fmul>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461e      	mov	r6, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	69dd      	ldr	r5, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f7fa fefe 	bl	80007c4 <__aeabi_fsub>
 80059c8:	4603      	mov	r3, r0
 80059ca:	4619      	mov	r1, r3
 80059cc:	4628      	mov	r0, r5
 80059ce:	f7fb f803 	bl	80009d8 <__aeabi_fmul>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4619      	mov	r1, r3
 80059d6:	4630      	mov	r0, r6
 80059d8:	f7fa fef6 	bl	80007c8 <__addsf3>
 80059dc:	4603      	mov	r3, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f7fa fff6 	bl	80009d8 <__aeabi_fmul>
 80059ec:	4603      	mov	r3, r0
 80059ee:	4619      	mov	r1, r3
 80059f0:	4620      	mov	r0, r4
 80059f2:	f7fa fee9 	bl	80007c8 <__addsf3>
 80059f6:	4603      	mov	r3, r0
 80059f8:	461a      	mov	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	619a      	str	r2, [r3, #24]

//-----------------------Derivative Term---------------//
	uD = kD*(e - e_Pre)/deltaT;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1c      	ldr	r4, [r3, #32]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f7fa fed9 	bl	80007c4 <__aeabi_fsub>
 8005a12:	4603      	mov	r3, r0
 8005a14:	4619      	mov	r1, r3
 8005a16:	4620      	mov	r0, r4
 8005a18:	f7fa ffde 	bl	80009d8 <__aeabi_fmul>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f7fb f88a 	bl	8000b40 <__aeabi_fdiv>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	625a      	str	r2, [r3, #36]	; 0x24
	uD_Fil = (1-alpha)*uD_FilPre+alpha*uD;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a3e:	f7fa fec1 	bl	80007c4 <__aeabi_fsub>
 8005a42:	4603      	mov	r3, r0
 8005a44:	461a      	mov	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	f7fa ffc3 	bl	80009d8 <__aeabi_fmul>
 8005a52:	4603      	mov	r3, r0
 8005a54:	461c      	mov	r4, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7fa ffb9 	bl	80009d8 <__aeabi_fmul>
 8005a66:	4603      	mov	r3, r0
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7fa feac 	bl	80007c8 <__addsf3>
 8005a70:	4603      	mov	r3, r0
 8005a72:	461a      	mov	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28

//-----------------------Previous Value----------------//
	e_Pre = e;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	605a      	str	r2, [r3, #4]
	uD_FilPre = uD_Fil;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c

//-----------------------Sum---------------------------//
	u = uP + uI + uD;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	4619      	mov	r1, r3
 8005a92:	4610      	mov	r0, r2
 8005a94:	f7fa fe98 	bl	80007c8 <__addsf3>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7fa fe90 	bl	80007c8 <__addsf3>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	635a      	str	r2, [r3, #52]	; 0x34
	if(u >= u_AboveLimit) uHat = u_AboveLimit;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f7fb f93e 	bl	8000d3c <__aeabi_fcmpge>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d004      	beq.n	8005ad0 <PID_Cal+0x19c>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
 8005ace:	e013      	b.n	8005af8 <PID_Cal+0x1c4>
	else if(u <= u_BelowLimit) uHat = u_BelowLimit;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7fb f924 	bl	8000d28 <__aeabi_fcmple>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <PID_Cal+0x1bc>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
 8005aee:	e003      	b.n	8005af8 <PID_Cal+0x1c4>
	else uHat = u;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
	return uHat;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b16:	2b84      	cmp	r3, #132	; 0x84
 8005b18:	d005      	beq.n	8005b26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005b1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	3303      	adds	r3, #3
 8005b24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005b26:	68fb      	ldr	r3, [r7, #12]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b36:	f000 ff3b 	bl	80069b0 <vTaskStartScheduler>
  
  return osOK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b42:	b089      	sub	sp, #36	; 0x24
 8005b44:	af04      	add	r7, sp, #16
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d020      	beq.n	8005b94 <osThreadCreate+0x54>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d01c      	beq.n	8005b94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685c      	ldr	r4, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691e      	ldr	r6, [r3, #16]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff ffc9 	bl	8005b04 <makeFreeRtosPriority>
 8005b72:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b7c:	9202      	str	r2, [sp, #8]
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	9100      	str	r1, [sp, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	4632      	mov	r2, r6
 8005b86:	4629      	mov	r1, r5
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 fd3b 	bl	8006604 <xTaskCreateStatic>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	e01c      	b.n	8005bce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685c      	ldr	r4, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ba0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff ffab 	bl	8005b04 <makeFreeRtosPriority>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	f107 030c 	add.w	r3, r7, #12
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	9200      	str	r2, [sp, #0]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	4632      	mov	r2, r6
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 fd7c 	bl	80066bc <xTaskCreate>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d001      	beq.n	8005bce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e000      	b.n	8005bd0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005bce:	68fb      	ldr	r3, [r7, #12]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bd8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <osDelay+0x16>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	e000      	b.n	8005bf0 <osDelay+0x18>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fea9 	bl	8006948 <vTaskDelay>
  
  return osOK;
 8005bf6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d011      	beq.n	8005c36 <osMessageCreate+0x36>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6859      	ldr	r1, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	2400      	movs	r4, #0
 8005c2c:	9400      	str	r4, [sp, #0]
 8005c2e:	f000 f927 	bl	8005e80 <xQueueGenericCreateStatic>
 8005c32:	4603      	mov	r3, r0
 8005c34:	e008      	b.n	8005c48 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4619      	mov	r1, r3
 8005c42:	f000 f994 	bl	8005f6e <xQueueGenericCreate>
 8005c46:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd90      	pop	{r4, r7, pc}

08005c50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f103 0208 	add.w	r2, r3, #8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f103 0208 	add.w	r2, r3, #8
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f103 0208 	add.w	r2, r3, #8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr

08005ca6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	601a      	str	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d103      	bne.n	8005d0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e00c      	b.n	8005d26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e002      	b.n	8005d1a <vListInsert+0x2e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d2f6      	bcs.n	8005d14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	601a      	str	r2, [r3, #0]
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6892      	ldr	r2, [r2, #8]
 8005d72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6852      	ldr	r2, [r2, #4]
 8005d7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d103      	bne.n	8005d90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	1e5a      	subs	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr
	...

08005db0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dda:	f001 fd3f 	bl	800785c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	68f9      	ldr	r1, [r7, #12]
 8005de8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dea:	fb01 f303 	mul.w	r3, r1, r3
 8005dee:	441a      	add	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
 8005e14:	441a      	add	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	22ff      	movs	r2, #255	; 0xff
 8005e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d114      	bne.n	8005e5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01a      	beq.n	8005e6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3310      	adds	r3, #16
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 f81f 	bl	8006e80 <xTaskRemoveFromEventList>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d012      	beq.n	8005e6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <xQueueGenericReset+0xcc>)
 8005e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	e009      	b.n	8005e6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3310      	adds	r3, #16
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fef6 	bl	8005c50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3324      	adds	r3, #36	; 0x24
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fef1 	bl	8005c50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e6e:	f001 fd25 	bl	80078bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e72:	2301      	movs	r3, #1
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08e      	sub	sp, #56	; 0x38
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <xQueueGenericCreateStatic+0x52>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <xQueueGenericCreateStatic+0x56>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericCreateStatic+0x58>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <xQueueGenericCreateStatic+0x7e>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <xQueueGenericCreateStatic+0x82>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <xQueueGenericCreateStatic+0x84>
 8005f02:	2300      	movs	r3, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	61fb      	str	r3, [r7, #28]
}
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f1e:	2348      	movs	r3, #72	; 0x48
 8005f20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b48      	cmp	r3, #72	; 0x48
 8005f26:	d00a      	beq.n	8005f3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	61bb      	str	r3, [r7, #24]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00d      	beq.n	8005f64 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f843 	bl	8005fea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3730      	adds	r7, #48	; 0x30
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b08a      	sub	sp, #40	; 0x28
 8005f72:	af02      	add	r7, sp, #8
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	613b      	str	r3, [r7, #16]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
 8005fa2:	e004      	b.n	8005fae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3348      	adds	r3, #72	; 0x48
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 fd52 	bl	8007a5c <pvPortMalloc>
 8005fb8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00f      	beq.n	8005fe0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	3348      	adds	r3, #72	; 0x48
 8005fc4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fce:	79fa      	ldrb	r2, [r7, #7]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f805 	bl	8005fea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
	}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e002      	b.n	800600c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006018:	2101      	movs	r1, #1
 800601a:	69b8      	ldr	r0, [r7, #24]
 800601c:	f7ff fec8 	bl	8005db0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08e      	sub	sp, #56	; 0x38
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006036:	2300      	movs	r3, #0
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <xQueueGenericSend+0x32>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <xQueueGenericSend+0x40>
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <xQueueGenericSend+0x44>
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <xQueueGenericSend+0x46>
 800606c:	2300      	movs	r3, #0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <xQueueGenericSend+0x60>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d103      	bne.n	8006096 <xQueueGenericSend+0x6e>
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <xQueueGenericSend+0x72>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <xQueueGenericSend+0x74>
 800609a:	2300      	movs	r3, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	623b      	str	r3, [r7, #32]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060b6:	f001 f8a7 	bl	8007208 <xTaskGetSchedulerState>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d102      	bne.n	80060c6 <xQueueGenericSend+0x9e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <xQueueGenericSend+0xa2>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <xQueueGenericSend+0xa4>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	61fb      	str	r3, [r7, #28]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060e6:	f001 fbb9 	bl	800785c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d302      	bcc.n	80060fc <xQueueGenericSend+0xd4>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d129      	bne.n	8006150 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006102:	f000 f96f 	bl	80063e4 <prvCopyDataToQueue>
 8006106:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d010      	beq.n	8006132 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	3324      	adds	r3, #36	; 0x24
 8006114:	4618      	mov	r0, r3
 8006116:	f000 feb3 	bl	8006e80 <xTaskRemoveFromEventList>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d013      	beq.n	8006148 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006120:	4b3f      	ldr	r3, [pc, #252]	; (8006220 <xQueueGenericSend+0x1f8>)
 8006122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	e00a      	b.n	8006148 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006138:	4b39      	ldr	r3, [pc, #228]	; (8006220 <xQueueGenericSend+0x1f8>)
 800613a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006148:	f001 fbb8 	bl	80078bc <vPortExitCritical>
				return pdPASS;
 800614c:	2301      	movs	r3, #1
 800614e:	e063      	b.n	8006218 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d103      	bne.n	800615e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006156:	f001 fbb1 	bl	80078bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800615a:	2300      	movs	r3, #0
 800615c:	e05c      	b.n	8006218 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006164:	f107 0314 	add.w	r3, r7, #20
 8006168:	4618      	mov	r0, r3
 800616a:	f000 feeb 	bl	8006f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800616e:	2301      	movs	r3, #1
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006172:	f001 fba3 	bl	80078bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006176:	f000 fc85 	bl	8006a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800617a:	f001 fb6f 	bl	800785c <vPortEnterCritical>
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006184:	b25b      	sxtb	r3, r3
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d103      	bne.n	8006194 <xQueueGenericSend+0x16c>
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800619a:	b25b      	sxtb	r3, r3
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d103      	bne.n	80061aa <xQueueGenericSend+0x182>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061aa:	f001 fb87 	bl	80078bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ae:	1d3a      	adds	r2, r7, #4
 80061b0:	f107 0314 	add.w	r3, r7, #20
 80061b4:	4611      	mov	r1, r2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 feda 	bl	8006f70 <xTaskCheckForTimeOut>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d124      	bne.n	800620c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061c4:	f000 fa06 	bl	80065d4 <prvIsQueueFull>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d018      	beq.n	8006200 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	3310      	adds	r3, #16
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fe2e 	bl	8006e38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061de:	f000 f991 	bl	8006504 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061e2:	f000 fc5d 	bl	8006aa0 <xTaskResumeAll>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f47f af7c 	bne.w	80060e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80061ee:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <xQueueGenericSend+0x1f8>)
 80061f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	e772      	b.n	80060e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006202:	f000 f97f 	bl	8006504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006206:	f000 fc4b 	bl	8006aa0 <xTaskResumeAll>
 800620a:	e76c      	b.n	80060e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800620c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800620e:	f000 f979 	bl	8006504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006212:	f000 fc45 	bl	8006aa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006216:	2300      	movs	r3, #0
		}
	}
}
 8006218:	4618      	mov	r0, r3
 800621a:	3738      	adds	r7, #56	; 0x38
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08c      	sub	sp, #48	; 0x30
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006230:	2300      	movs	r3, #0
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <xQueueReceive+0x30>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	623b      	str	r3, [r7, #32]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d103      	bne.n	8006262 <xQueueReceive+0x3e>
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <xQueueReceive+0x42>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <xQueueReceive+0x44>
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xQueueReceive+0x5e>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61fb      	str	r3, [r7, #28]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006282:	f000 ffc1 	bl	8007208 <xTaskGetSchedulerState>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <xQueueReceive+0x6e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <xQueueReceive+0x72>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <xQueueReceive+0x74>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <xQueueReceive+0x8e>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	61bb      	str	r3, [r7, #24]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80062b2:	f001 fad3 	bl	800785c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01f      	beq.n	8006302 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062c2:	68b9      	ldr	r1, [r7, #8]
 80062c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c6:	f000 f8f7 	bl	80064b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	1e5a      	subs	r2, r3, #1
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00f      	beq.n	80062fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	3310      	adds	r3, #16
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fdce 	bl	8006e80 <xTaskRemoveFromEventList>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062ea:	4b3d      	ldr	r3, [pc, #244]	; (80063e0 <xQueueReceive+0x1bc>)
 80062ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062fa:	f001 fadf 	bl	80078bc <vPortExitCritical>
				return pdPASS;
 80062fe:	2301      	movs	r3, #1
 8006300:	e069      	b.n	80063d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d103      	bne.n	8006310 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006308:	f001 fad8 	bl	80078bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800630c:	2300      	movs	r3, #0
 800630e:	e062      	b.n	80063d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006316:	f107 0310 	add.w	r3, r7, #16
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fe12 	bl	8006f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006324:	f001 faca 	bl	80078bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006328:	f000 fbac 	bl	8006a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800632c:	f001 fa96 	bl	800785c <vPortEnterCritical>
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006336:	b25b      	sxtb	r3, r3
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d103      	bne.n	8006346 <xQueueReceive+0x122>
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800634c:	b25b      	sxtb	r3, r3
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	d103      	bne.n	800635c <xQueueReceive+0x138>
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800635c:	f001 faae 	bl	80078bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006360:	1d3a      	adds	r2, r7, #4
 8006362:	f107 0310 	add.w	r3, r7, #16
 8006366:	4611      	mov	r1, r2
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fe01 	bl	8006f70 <xTaskCheckForTimeOut>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d123      	bne.n	80063bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006376:	f000 f917 	bl	80065a8 <prvIsQueueEmpty>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d017      	beq.n	80063b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	3324      	adds	r3, #36	; 0x24
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4611      	mov	r1, r2
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fd55 	bl	8006e38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800638e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006390:	f000 f8b8 	bl	8006504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006394:	f000 fb84 	bl	8006aa0 <xTaskResumeAll>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d189      	bne.n	80062b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800639e:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <xQueueReceive+0x1bc>)
 80063a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	e780      	b.n	80062b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b2:	f000 f8a7 	bl	8006504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063b6:	f000 fb73 	bl	8006aa0 <xTaskResumeAll>
 80063ba:	e77a      	b.n	80062b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063be:	f000 f8a1 	bl	8006504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063c2:	f000 fb6d 	bl	8006aa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063c8:	f000 f8ee 	bl	80065a8 <prvIsQueueEmpty>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f43f af6f 	beq.w	80062b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3730      	adds	r7, #48	; 0x30
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	e000ed04 	.word	0xe000ed04

080063e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10d      	bne.n	800641e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d14d      	bne.n	80064a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 ff18 	bl	8007244 <xTaskPriorityDisinherit>
 8006414:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	605a      	str	r2, [r3, #4]
 800641c:	e043      	b.n	80064a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d119      	bne.n	8006458 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6898      	ldr	r0, [r3, #8]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	461a      	mov	r2, r3
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	f001 fd70 	bl	8007f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	441a      	add	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	429a      	cmp	r2, r3
 800644c:	d32b      	bcc.n	80064a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	609a      	str	r2, [r3, #8]
 8006456:	e026      	b.n	80064a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	68d8      	ldr	r0, [r3, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	461a      	mov	r2, r3
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	f001 fd56 	bl	8007f14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	425b      	negs	r3, r3
 8006472:	441a      	add	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d207      	bcs.n	8006494 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	425b      	negs	r3, r3
 800648e:	441a      	add	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d105      	bne.n	80064a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064ae:	697b      	ldr	r3, [r7, #20]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d018      	beq.n	80064fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	441a      	add	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d303      	bcc.n	80064ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68d9      	ldr	r1, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	461a      	mov	r2, r3
 80064f6:	6838      	ldr	r0, [r7, #0]
 80064f8:	f001 fd0c 	bl	8007f14 <memcpy>
	}
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800650c:	f001 f9a6 	bl	800785c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006516:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006518:	e011      	b.n	800653e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	d012      	beq.n	8006548 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3324      	adds	r3, #36	; 0x24
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fcaa 	bl	8006e80 <xTaskRemoveFromEventList>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006532:	f000 fd7f 	bl	8007034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	3b01      	subs	r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800653e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006542:	2b00      	cmp	r3, #0
 8006544:	dce9      	bgt.n	800651a <prvUnlockQueue+0x16>
 8006546:	e000      	b.n	800654a <prvUnlockQueue+0x46>
					break;
 8006548:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	22ff      	movs	r2, #255	; 0xff
 800654e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006552:	f001 f9b3 	bl	80078bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006556:	f001 f981 	bl	800785c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006560:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006562:	e011      	b.n	8006588 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d012      	beq.n	8006592 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3310      	adds	r3, #16
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fc85 	bl	8006e80 <xTaskRemoveFromEventList>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800657c:	f000 fd5a 	bl	8007034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006580:	7bbb      	ldrb	r3, [r7, #14]
 8006582:	3b01      	subs	r3, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800658c:	2b00      	cmp	r3, #0
 800658e:	dce9      	bgt.n	8006564 <prvUnlockQueue+0x60>
 8006590:	e000      	b.n	8006594 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006592:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	22ff      	movs	r2, #255	; 0xff
 8006598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800659c:	f001 f98e 	bl	80078bc <vPortExitCritical>
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065b0:	f001 f954 	bl	800785c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065bc:	2301      	movs	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	e001      	b.n	80065c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065c6:	f001 f979 	bl	80078bc <vPortExitCritical>

	return xReturn;
 80065ca:	68fb      	ldr	r3, [r7, #12]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065dc:	f001 f93e 	bl	800785c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d102      	bne.n	80065f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065ec:	2301      	movs	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	e001      	b.n	80065f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065f6:	f001 f961 	bl	80078bc <vPortExitCritical>

	return xReturn;
 80065fa:	68fb      	ldr	r3, [r7, #12]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08e      	sub	sp, #56	; 0x38
 8006608:	af04      	add	r7, sp, #16
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	623b      	str	r3, [r7, #32]
}
 800662a:	bf00      	nop
 800662c:	e7fe      	b.n	800662c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800662e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <xTaskCreateStatic+0x46>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	61fb      	str	r3, [r7, #28]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800664a:	23a0      	movs	r3, #160	; 0xa0
 800664c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2ba0      	cmp	r3, #160	; 0xa0
 8006652:	d00a      	beq.n	800666a <xTaskCreateStatic+0x66>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	61bb      	str	r3, [r7, #24]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01e      	beq.n	80066ae <xTaskCreateStatic+0xaa>
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01b      	beq.n	80066ae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800667e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	2202      	movs	r2, #2
 8006684:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006688:	2300      	movs	r3, #0
 800668a:	9303      	str	r3, [sp, #12]
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	9302      	str	r3, [sp, #8]
 8006690:	f107 0314 	add.w	r3, r7, #20
 8006694:	9301      	str	r3, [sp, #4]
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f851 	bl	8006748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066a8:	f000 f8e4 	bl	8006874 <prvAddNewTaskToReadyList>
 80066ac:	e001      	b.n	80066b2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066b2:	697b      	ldr	r3, [r7, #20]
	}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3728      	adds	r7, #40	; 0x28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08c      	sub	sp, #48	; 0x30
 80066c0:	af04      	add	r7, sp, #16
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	4613      	mov	r3, r2
 80066ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066cc:	88fb      	ldrh	r3, [r7, #6]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f001 f9c3 	bl	8007a5c <pvPortMalloc>
 80066d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00e      	beq.n	80066fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80066de:	20a0      	movs	r0, #160	; 0xa0
 80066e0:	f001 f9bc 	bl	8007a5c <pvPortMalloc>
 80066e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30
 80066f2:	e005      	b.n	8006700 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066f4:	6978      	ldr	r0, [r7, #20]
 80066f6:	f001 fa75 	bl	8007be4 <vPortFree>
 80066fa:	e001      	b.n	8006700 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d017      	beq.n	8006736 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800670e:	88fa      	ldrh	r2, [r7, #6]
 8006710:	2300      	movs	r3, #0
 8006712:	9303      	str	r3, [sp, #12]
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	9302      	str	r3, [sp, #8]
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	9301      	str	r3, [sp, #4]
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f80f 	bl	8006748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800672a:	69f8      	ldr	r0, [r7, #28]
 800672c:	f000 f8a2 	bl	8006874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006730:	2301      	movs	r3, #1
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	e002      	b.n	800673c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006736:	f04f 33ff 	mov.w	r3, #4294967295
 800673a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800673c:	69bb      	ldr	r3, [r7, #24]
	}
 800673e:	4618      	mov	r0, r3
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006760:	3b01      	subs	r3, #1
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f023 0307 	bic.w	r3, r3, #7
 800676e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <prvInitialiseNewTask+0x48>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	617b      	str	r3, [r7, #20]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	e012      	b.n	80067bc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	7819      	ldrb	r1, [r3, #0]
 800679e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	4413      	add	r3, r2
 80067a4:	3334      	adds	r3, #52	; 0x34
 80067a6:	460a      	mov	r2, r1
 80067a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d006      	beq.n	80067c4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	3301      	adds	r3, #1
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	2b0f      	cmp	r3, #15
 80067c0:	d9e9      	bls.n	8006796 <prvInitialiseNewTask+0x4e>
 80067c2:	e000      	b.n	80067c6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80067c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	2b06      	cmp	r3, #6
 80067d2:	d901      	bls.n	80067d8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067d4:	2306      	movs	r3, #6
 80067d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	2200      	movs	r2, #0
 80067e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	3304      	adds	r3, #4
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fa4d 	bl	8005c8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	3318      	adds	r3, #24
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fa48 	bl	8005c8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006802:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	f1c3 0207 	rsb	r2, r3, #7
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006812:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2200      	movs	r2, #0
 8006820:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	334c      	adds	r3, #76	; 0x4c
 8006828:	224c      	movs	r2, #76	; 0x4c
 800682a:	2100      	movs	r1, #0
 800682c:	4618      	mov	r0, r3
 800682e:	f001 faed 	bl	8007e0c <memset>
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	4a0c      	ldr	r2, [pc, #48]	; (8006868 <prvInitialiseNewTask+0x120>)
 8006836:	651a      	str	r2, [r3, #80]	; 0x50
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	4a0c      	ldr	r2, [pc, #48]	; (800686c <prvInitialiseNewTask+0x124>)
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	4a0b      	ldr	r2, [pc, #44]	; (8006870 <prvInitialiseNewTask+0x128>)
 8006842:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	68f9      	ldr	r1, [r7, #12]
 8006848:	69b8      	ldr	r0, [r7, #24]
 800684a:	f000 ff17 	bl	800767c <pxPortInitialiseStack>
 800684e:	4602      	mov	r2, r0
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006860:	bf00      	nop
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	200018ac 	.word	0x200018ac
 800686c:	20001914 	.word	0x20001914
 8006870:	2000197c 	.word	0x2000197c

08006874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800687c:	f000 ffee 	bl	800785c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006880:	4b2a      	ldr	r3, [pc, #168]	; (800692c <prvAddNewTaskToReadyList+0xb8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a29      	ldr	r2, [pc, #164]	; (800692c <prvAddNewTaskToReadyList+0xb8>)
 8006888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800688a:	4b29      	ldr	r3, [pc, #164]	; (8006930 <prvAddNewTaskToReadyList+0xbc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006892:	4a27      	ldr	r2, [pc, #156]	; (8006930 <prvAddNewTaskToReadyList+0xbc>)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006898:	4b24      	ldr	r3, [pc, #144]	; (800692c <prvAddNewTaskToReadyList+0xb8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d110      	bne.n	80068c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068a0:	f000 fbec 	bl	800707c <prvInitialiseTaskLists>
 80068a4:	e00d      	b.n	80068c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068a6:	4b23      	ldr	r3, [pc, #140]	; (8006934 <prvAddNewTaskToReadyList+0xc0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068ae:	4b20      	ldr	r3, [pc, #128]	; (8006930 <prvAddNewTaskToReadyList+0xbc>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d802      	bhi.n	80068c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068bc:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <prvAddNewTaskToReadyList+0xbc>)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068c2:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <prvAddNewTaskToReadyList+0xc4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	4a1b      	ldr	r2, [pc, #108]	; (8006938 <prvAddNewTaskToReadyList+0xc4>)
 80068ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	2201      	movs	r2, #1
 80068d2:	409a      	lsls	r2, r3
 80068d4:	4b19      	ldr	r3, [pc, #100]	; (800693c <prvAddNewTaskToReadyList+0xc8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4313      	orrs	r3, r2
 80068da:	4a18      	ldr	r2, [pc, #96]	; (800693c <prvAddNewTaskToReadyList+0xc8>)
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <prvAddNewTaskToReadyList+0xcc>)
 80068ec:	441a      	add	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3304      	adds	r3, #4
 80068f2:	4619      	mov	r1, r3
 80068f4:	4610      	mov	r0, r2
 80068f6:	f7ff f9d6 	bl	8005ca6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068fa:	f000 ffdf 	bl	80078bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068fe:	4b0d      	ldr	r3, [pc, #52]	; (8006934 <prvAddNewTaskToReadyList+0xc0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00e      	beq.n	8006924 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006906:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <prvAddNewTaskToReadyList+0xbc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	429a      	cmp	r2, r3
 8006912:	d207      	bcs.n	8006924 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <prvAddNewTaskToReadyList+0xd0>)
 8006916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000c60 	.word	0x20000c60
 8006930:	20000b60 	.word	0x20000b60
 8006934:	20000c6c 	.word	0x20000c6c
 8006938:	20000c7c 	.word	0x20000c7c
 800693c:	20000c68 	.word	0x20000c68
 8006940:	20000b64 	.word	0x20000b64
 8006944:	e000ed04 	.word	0xe000ed04

08006948 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d017      	beq.n	800698a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800695a:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <vTaskDelay+0x60>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <vTaskDelay+0x30>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	60bb      	str	r3, [r7, #8]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006978:	f000 f884 	bl	8006a84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800697c:	2100      	movs	r1, #0
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fe16 	bl	80075b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006984:	f000 f88c 	bl	8006aa0 <xTaskResumeAll>
 8006988:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d107      	bne.n	80069a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006990:	4b06      	ldr	r3, [pc, #24]	; (80069ac <vTaskDelay+0x64>)
 8006992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069a0:	bf00      	nop
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000c88 	.word	0x20000c88
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08a      	sub	sp, #40	; 0x28
 80069b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069be:	463a      	mov	r2, r7
 80069c0:	1d39      	adds	r1, r7, #4
 80069c2:	f107 0308 	add.w	r3, r7, #8
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fb fc9a 	bl	8002300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	9202      	str	r2, [sp, #8]
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	2300      	movs	r3, #0
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	2300      	movs	r3, #0
 80069dc:	460a      	mov	r2, r1
 80069de:	4921      	ldr	r1, [pc, #132]	; (8006a64 <vTaskStartScheduler+0xb4>)
 80069e0:	4821      	ldr	r0, [pc, #132]	; (8006a68 <vTaskStartScheduler+0xb8>)
 80069e2:	f7ff fe0f 	bl	8006604 <xTaskCreateStatic>
 80069e6:	4603      	mov	r3, r0
 80069e8:	4a20      	ldr	r2, [pc, #128]	; (8006a6c <vTaskStartScheduler+0xbc>)
 80069ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069ec:	4b1f      	ldr	r3, [pc, #124]	; (8006a6c <vTaskStartScheduler+0xbc>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069f4:	2301      	movs	r3, #1
 80069f6:	617b      	str	r3, [r7, #20]
 80069f8:	e001      	b.n	80069fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d11b      	bne.n	8006a3c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	613b      	str	r3, [r7, #16]
}
 8006a16:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a18:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <vTaskStartScheduler+0xc0>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	334c      	adds	r3, #76	; 0x4c
 8006a1e:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <vTaskStartScheduler+0xc4>)
 8006a20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <vTaskStartScheduler+0xc8>)
 8006a24:	f04f 32ff 	mov.w	r2, #4294967295
 8006a28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a2a:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <vTaskStartScheduler+0xcc>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a30:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <vTaskStartScheduler+0xd0>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a36:	f000 fe9f 	bl	8007778 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a3a:	e00e      	b.n	8006a5a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a42:	d10a      	bne.n	8006a5a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	60fb      	str	r3, [r7, #12]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <vTaskStartScheduler+0xa8>
}
 8006a5a:	bf00      	nop
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	0800807c 	.word	0x0800807c
 8006a68:	0800704d 	.word	0x0800704d
 8006a6c:	20000c84 	.word	0x20000c84
 8006a70:	20000b60 	.word	0x20000b60
 8006a74:	2000005c 	.word	0x2000005c
 8006a78:	20000c80 	.word	0x20000c80
 8006a7c:	20000c6c 	.word	0x20000c6c
 8006a80:	20000c64 	.word	0x20000c64

08006a84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <vTaskSuspendAll+0x18>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	4a03      	ldr	r2, [pc, #12]	; (8006a9c <vTaskSuspendAll+0x18>)
 8006a90:	6013      	str	r3, [r2, #0]
}
 8006a92:	bf00      	nop
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000c88 	.word	0x20000c88

08006aa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006aae:	4b41      	ldr	r3, [pc, #260]	; (8006bb4 <xTaskResumeAll+0x114>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <xTaskResumeAll+0x2c>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	603b      	str	r3, [r7, #0]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006acc:	f000 fec6 	bl	800785c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ad0:	4b38      	ldr	r3, [pc, #224]	; (8006bb4 <xTaskResumeAll+0x114>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	4a37      	ldr	r2, [pc, #220]	; (8006bb4 <xTaskResumeAll+0x114>)
 8006ad8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ada:	4b36      	ldr	r3, [pc, #216]	; (8006bb4 <xTaskResumeAll+0x114>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d161      	bne.n	8006ba6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ae2:	4b35      	ldr	r3, [pc, #212]	; (8006bb8 <xTaskResumeAll+0x118>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d05d      	beq.n	8006ba6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aea:	e02e      	b.n	8006b4a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006aec:	4b33      	ldr	r3, [pc, #204]	; (8006bbc <xTaskResumeAll+0x11c>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3318      	adds	r3, #24
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff f92f 	bl	8005d5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff f92a 	bl	8005d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	409a      	lsls	r2, r3
 8006b10:	4b2b      	ldr	r3, [pc, #172]	; (8006bc0 <xTaskResumeAll+0x120>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	4a2a      	ldr	r2, [pc, #168]	; (8006bc0 <xTaskResumeAll+0x120>)
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4a27      	ldr	r2, [pc, #156]	; (8006bc4 <xTaskResumeAll+0x124>)
 8006b28:	441a      	add	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7ff f8b8 	bl	8005ca6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	4b23      	ldr	r3, [pc, #140]	; (8006bc8 <xTaskResumeAll+0x128>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d302      	bcc.n	8006b4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006b44:	4b21      	ldr	r3, [pc, #132]	; (8006bcc <xTaskResumeAll+0x12c>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b4a:	4b1c      	ldr	r3, [pc, #112]	; (8006bbc <xTaskResumeAll+0x11c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1cc      	bne.n	8006aec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b58:	f000 fb32 	bl	80071c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b5c:	4b1c      	ldr	r3, [pc, #112]	; (8006bd0 <xTaskResumeAll+0x130>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d010      	beq.n	8006b8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b68:	f000 f836 	bl	8006bd8 <xTaskIncrementTick>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006b72:	4b16      	ldr	r3, [pc, #88]	; (8006bcc <xTaskResumeAll+0x12c>)
 8006b74:	2201      	movs	r2, #1
 8006b76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f1      	bne.n	8006b68 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006b84:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <xTaskResumeAll+0x130>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b8a:	4b10      	ldr	r3, [pc, #64]	; (8006bcc <xTaskResumeAll+0x12c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d009      	beq.n	8006ba6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b92:	2301      	movs	r3, #1
 8006b94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b96:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <xTaskResumeAll+0x134>)
 8006b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ba6:	f000 fe89 	bl	80078bc <vPortExitCritical>

	return xAlreadyYielded;
 8006baa:	68bb      	ldr	r3, [r7, #8]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20000c88 	.word	0x20000c88
 8006bb8:	20000c60 	.word	0x20000c60
 8006bbc:	20000c20 	.word	0x20000c20
 8006bc0:	20000c68 	.word	0x20000c68
 8006bc4:	20000b64 	.word	0x20000b64
 8006bc8:	20000b60 	.word	0x20000b60
 8006bcc:	20000c74 	.word	0x20000c74
 8006bd0:	20000c70 	.word	0x20000c70
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006be2:	4b51      	ldr	r3, [pc, #324]	; (8006d28 <xTaskIncrementTick+0x150>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f040 808d 	bne.w	8006d06 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bec:	4b4f      	ldr	r3, [pc, #316]	; (8006d2c <xTaskIncrementTick+0x154>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bf4:	4a4d      	ldr	r2, [pc, #308]	; (8006d2c <xTaskIncrementTick+0x154>)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d120      	bne.n	8006c42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c00:	4b4b      	ldr	r3, [pc, #300]	; (8006d30 <xTaskIncrementTick+0x158>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	603b      	str	r3, [r7, #0]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <xTaskIncrementTick+0x46>
 8006c20:	4b43      	ldr	r3, [pc, #268]	; (8006d30 <xTaskIncrementTick+0x158>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	4b43      	ldr	r3, [pc, #268]	; (8006d34 <xTaskIncrementTick+0x15c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a41      	ldr	r2, [pc, #260]	; (8006d30 <xTaskIncrementTick+0x158>)
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	4a41      	ldr	r2, [pc, #260]	; (8006d34 <xTaskIncrementTick+0x15c>)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	4b40      	ldr	r3, [pc, #256]	; (8006d38 <xTaskIncrementTick+0x160>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	4a3f      	ldr	r2, [pc, #252]	; (8006d38 <xTaskIncrementTick+0x160>)
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	f000 fabf 	bl	80071c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c42:	4b3e      	ldr	r3, [pc, #248]	; (8006d3c <xTaskIncrementTick+0x164>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d34d      	bcc.n	8006ce8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c4c:	4b38      	ldr	r3, [pc, #224]	; (8006d30 <xTaskIncrementTick+0x158>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <xTaskIncrementTick+0x82>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <xTaskIncrementTick+0x84>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d004      	beq.n	8006c6a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c60:	4b36      	ldr	r3, [pc, #216]	; (8006d3c <xTaskIncrementTick+0x164>)
 8006c62:	f04f 32ff 	mov.w	r2, #4294967295
 8006c66:	601a      	str	r2, [r3, #0]
					break;
 8006c68:	e03e      	b.n	8006ce8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c6a:	4b31      	ldr	r3, [pc, #196]	; (8006d30 <xTaskIncrementTick+0x158>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d203      	bcs.n	8006c8a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c82:	4a2e      	ldr	r2, [pc, #184]	; (8006d3c <xTaskIncrementTick+0x164>)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6013      	str	r3, [r2, #0]
						break;
 8006c88:	e02e      	b.n	8006ce8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff f864 	bl	8005d5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	3318      	adds	r3, #24
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff f85b 	bl	8005d5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	2201      	movs	r2, #1
 8006cac:	409a      	lsls	r2, r3
 8006cae:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <xTaskIncrementTick+0x168>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	4a22      	ldr	r2, [pc, #136]	; (8006d40 <xTaskIncrementTick+0x168>)
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4a1f      	ldr	r2, [pc, #124]	; (8006d44 <xTaskIncrementTick+0x16c>)
 8006cc6:	441a      	add	r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	f7fe ffe9 	bl	8005ca6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd8:	4b1b      	ldr	r3, [pc, #108]	; (8006d48 <xTaskIncrementTick+0x170>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d3b4      	bcc.n	8006c4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ce6:	e7b1      	b.n	8006c4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ce8:	4b17      	ldr	r3, [pc, #92]	; (8006d48 <xTaskIncrementTick+0x170>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cee:	4915      	ldr	r1, [pc, #84]	; (8006d44 <xTaskIncrementTick+0x16c>)
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d907      	bls.n	8006d10 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	e004      	b.n	8006d10 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d06:	4b11      	ldr	r3, [pc, #68]	; (8006d4c <xTaskIncrementTick+0x174>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	4a0f      	ldr	r2, [pc, #60]	; (8006d4c <xTaskIncrementTick+0x174>)
 8006d0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d10:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <xTaskIncrementTick+0x178>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d1c:	697b      	ldr	r3, [r7, #20]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000c88 	.word	0x20000c88
 8006d2c:	20000c64 	.word	0x20000c64
 8006d30:	20000c18 	.word	0x20000c18
 8006d34:	20000c1c 	.word	0x20000c1c
 8006d38:	20000c78 	.word	0x20000c78
 8006d3c:	20000c80 	.word	0x20000c80
 8006d40:	20000c68 	.word	0x20000c68
 8006d44:	20000b64 	.word	0x20000b64
 8006d48:	20000b60 	.word	0x20000b60
 8006d4c:	20000c70 	.word	0x20000c70
 8006d50:	20000c74 	.word	0x20000c74

08006d54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d5a:	4b31      	ldr	r3, [pc, #196]	; (8006e20 <vTaskSwitchContext+0xcc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d62:	4b30      	ldr	r3, [pc, #192]	; (8006e24 <vTaskSwitchContext+0xd0>)
 8006d64:	2201      	movs	r2, #1
 8006d66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d68:	e055      	b.n	8006e16 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 8006d6a:	4b2e      	ldr	r3, [pc, #184]	; (8006e24 <vTaskSwitchContext+0xd0>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006d70:	4b2d      	ldr	r3, [pc, #180]	; (8006e28 <vTaskSwitchContext+0xd4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b2c      	ldr	r3, [pc, #176]	; (8006e28 <vTaskSwitchContext+0xd4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d808      	bhi.n	8006d92 <vTaskSwitchContext+0x3e>
 8006d80:	4b29      	ldr	r3, [pc, #164]	; (8006e28 <vTaskSwitchContext+0xd4>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	4b28      	ldr	r3, [pc, #160]	; (8006e28 <vTaskSwitchContext+0xd4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3334      	adds	r3, #52	; 0x34
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f7fb faad 	bl	80022ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006d92:	4b26      	ldr	r3, [pc, #152]	; (8006e2c <vTaskSwitchContext+0xd8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	fab3 f383 	clz	r3, r3
 8006d9e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006da0:	7afb      	ldrb	r3, [r7, #11]
 8006da2:	f1c3 031f 	rsb	r3, r3, #31
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	4921      	ldr	r1, [pc, #132]	; (8006e30 <vTaskSwitchContext+0xdc>)
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <vTaskSwitchContext+0x7e>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	607b      	str	r3, [r7, #4]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <vTaskSwitchContext+0x7c>
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <vTaskSwitchContext+0xdc>)
 8006dde:	4413      	add	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	605a      	str	r2, [r3, #4]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	3308      	adds	r3, #8
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d104      	bne.n	8006e02 <vTaskSwitchContext+0xae>
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	4a07      	ldr	r2, [pc, #28]	; (8006e28 <vTaskSwitchContext+0xd4>)
 8006e0a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <vTaskSwitchContext+0xd4>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	334c      	adds	r3, #76	; 0x4c
 8006e12:	4a08      	ldr	r2, [pc, #32]	; (8006e34 <vTaskSwitchContext+0xe0>)
 8006e14:	6013      	str	r3, [r2, #0]
}
 8006e16:	bf00      	nop
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000c88 	.word	0x20000c88
 8006e24:	20000c74 	.word	0x20000c74
 8006e28:	20000b60 	.word	0x20000b60
 8006e2c:	20000c68 	.word	0x20000c68
 8006e30:	20000b64 	.word	0x20000b64
 8006e34:	2000005c 	.word	0x2000005c

08006e38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60fb      	str	r3, [r7, #12]
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e5e:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <vTaskPlaceOnEventList+0x44>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3318      	adds	r3, #24
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7fe ff40 	bl	8005cec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	6838      	ldr	r0, [r7, #0]
 8006e70:	f000 fb9e 	bl	80075b0 <prvAddCurrentTaskToDelayedList>
}
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20000b60 	.word	0x20000b60

08006e80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	60fb      	str	r3, [r7, #12]
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	3318      	adds	r3, #24
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe ff53 	bl	8005d5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb6:	4b1d      	ldr	r3, [pc, #116]	; (8006f2c <xTaskRemoveFromEventList+0xac>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d11c      	bne.n	8006ef8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe ff4a 	bl	8005d5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	2201      	movs	r2, #1
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	4b17      	ldr	r3, [pc, #92]	; (8006f30 <xTaskRemoveFromEventList+0xb0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	4a16      	ldr	r2, [pc, #88]	; (8006f30 <xTaskRemoveFromEventList+0xb0>)
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4a13      	ldr	r2, [pc, #76]	; (8006f34 <xTaskRemoveFromEventList+0xb4>)
 8006ee8:	441a      	add	r2, r3
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7fe fed8 	bl	8005ca6 <vListInsertEnd>
 8006ef6:	e005      	b.n	8006f04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	3318      	adds	r3, #24
 8006efc:	4619      	mov	r1, r3
 8006efe:	480e      	ldr	r0, [pc, #56]	; (8006f38 <xTaskRemoveFromEventList+0xb8>)
 8006f00:	f7fe fed1 	bl	8005ca6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <xTaskRemoveFromEventList+0xbc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d905      	bls.n	8006f1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f12:	2301      	movs	r3, #1
 8006f14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f16:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <xTaskRemoveFromEventList+0xc0>)
 8006f18:	2201      	movs	r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	e001      	b.n	8006f22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006f22:	697b      	ldr	r3, [r7, #20]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20000c88 	.word	0x20000c88
 8006f30:	20000c68 	.word	0x20000c68
 8006f34:	20000b64 	.word	0x20000b64
 8006f38:	20000c20 	.word	0x20000c20
 8006f3c:	20000b60 	.word	0x20000b60
 8006f40:	20000c74 	.word	0x20000c74

08006f44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <vTaskInternalSetTimeOutState+0x24>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <vTaskInternalSetTimeOutState+0x28>)
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	605a      	str	r2, [r3, #4]
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000c78 	.word	0x20000c78
 8006f6c:	20000c64 	.word	0x20000c64

08006f70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	613b      	str	r3, [r7, #16]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60fb      	str	r3, [r7, #12]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006fb2:	f000 fc53 	bl	800785c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	; (800702c <xTaskCheckForTimeOut+0xbc>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fce:	d102      	bne.n	8006fd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	e023      	b.n	800701e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b15      	ldr	r3, [pc, #84]	; (8007030 <xTaskCheckForTimeOut+0xc0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d007      	beq.n	8006ff2 <xTaskCheckForTimeOut+0x82>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d302      	bcc.n	8006ff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fec:	2301      	movs	r3, #1
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	e015      	b.n	800701e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d20b      	bcs.n	8007014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff ff9b 	bl	8006f44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	e004      	b.n	800701e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800701a:	2301      	movs	r3, #1
 800701c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800701e:	f000 fc4d 	bl	80078bc <vPortExitCritical>

	return xReturn;
 8007022:	69fb      	ldr	r3, [r7, #28]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3720      	adds	r7, #32
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000c64 	.word	0x20000c64
 8007030:	20000c78 	.word	0x20000c78

08007034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007038:	4b03      	ldr	r3, [pc, #12]	; (8007048 <vTaskMissedYield+0x14>)
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]
}
 800703e:	bf00      	nop
 8007040:	46bd      	mov	sp, r7
 8007042:	bc80      	pop	{r7}
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20000c74 	.word	0x20000c74

0800704c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007054:	f000 f852 	bl	80070fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007058:	4b06      	ldr	r3, [pc, #24]	; (8007074 <prvIdleTask+0x28>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d9f9      	bls.n	8007054 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007060:	4b05      	ldr	r3, [pc, #20]	; (8007078 <prvIdleTask+0x2c>)
 8007062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007070:	e7f0      	b.n	8007054 <prvIdleTask+0x8>
 8007072:	bf00      	nop
 8007074:	20000b64 	.word	0x20000b64
 8007078:	e000ed04 	.word	0xe000ed04

0800707c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007082:	2300      	movs	r3, #0
 8007084:	607b      	str	r3, [r7, #4]
 8007086:	e00c      	b.n	80070a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4a12      	ldr	r2, [pc, #72]	; (80070dc <prvInitialiseTaskLists+0x60>)
 8007094:	4413      	add	r3, r2
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe fdda 	bl	8005c50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3301      	adds	r3, #1
 80070a0:	607b      	str	r3, [r7, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	d9ef      	bls.n	8007088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070a8:	480d      	ldr	r0, [pc, #52]	; (80070e0 <prvInitialiseTaskLists+0x64>)
 80070aa:	f7fe fdd1 	bl	8005c50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070ae:	480d      	ldr	r0, [pc, #52]	; (80070e4 <prvInitialiseTaskLists+0x68>)
 80070b0:	f7fe fdce 	bl	8005c50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070b4:	480c      	ldr	r0, [pc, #48]	; (80070e8 <prvInitialiseTaskLists+0x6c>)
 80070b6:	f7fe fdcb 	bl	8005c50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070ba:	480c      	ldr	r0, [pc, #48]	; (80070ec <prvInitialiseTaskLists+0x70>)
 80070bc:	f7fe fdc8 	bl	8005c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070c0:	480b      	ldr	r0, [pc, #44]	; (80070f0 <prvInitialiseTaskLists+0x74>)
 80070c2:	f7fe fdc5 	bl	8005c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070c6:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <prvInitialiseTaskLists+0x78>)
 80070c8:	4a05      	ldr	r2, [pc, #20]	; (80070e0 <prvInitialiseTaskLists+0x64>)
 80070ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070cc:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <prvInitialiseTaskLists+0x7c>)
 80070ce:	4a05      	ldr	r2, [pc, #20]	; (80070e4 <prvInitialiseTaskLists+0x68>)
 80070d0:	601a      	str	r2, [r3, #0]
}
 80070d2:	bf00      	nop
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000b64 	.word	0x20000b64
 80070e0:	20000bf0 	.word	0x20000bf0
 80070e4:	20000c04 	.word	0x20000c04
 80070e8:	20000c20 	.word	0x20000c20
 80070ec:	20000c34 	.word	0x20000c34
 80070f0:	20000c4c 	.word	0x20000c4c
 80070f4:	20000c18 	.word	0x20000c18
 80070f8:	20000c1c 	.word	0x20000c1c

080070fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007102:	e019      	b.n	8007138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007104:	f000 fbaa 	bl	800785c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007108:	4b10      	ldr	r3, [pc, #64]	; (800714c <prvCheckTasksWaitingTermination+0x50>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3304      	adds	r3, #4
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe fe21 	bl	8005d5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800711a:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <prvCheckTasksWaitingTermination+0x54>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3b01      	subs	r3, #1
 8007120:	4a0b      	ldr	r2, [pc, #44]	; (8007150 <prvCheckTasksWaitingTermination+0x54>)
 8007122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007124:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <prvCheckTasksWaitingTermination+0x58>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3b01      	subs	r3, #1
 800712a:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <prvCheckTasksWaitingTermination+0x58>)
 800712c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800712e:	f000 fbc5 	bl	80078bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f810 	bl	8007158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <prvCheckTasksWaitingTermination+0x58>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e1      	bne.n	8007104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000c34 	.word	0x20000c34
 8007150:	20000c60 	.word	0x20000c60
 8007154:	20000c48 	.word	0x20000c48

08007158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	334c      	adds	r3, #76	; 0x4c
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fe59 	bl	8007e1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007170:	2b00      	cmp	r3, #0
 8007172:	d108      	bne.n	8007186 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fd33 	bl	8007be4 <vPortFree>
				vPortFree( pxTCB );
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fd30 	bl	8007be4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007184:	e018      	b.n	80071b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800718c:	2b01      	cmp	r3, #1
 800718e:	d103      	bne.n	8007198 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fd27 	bl	8007be4 <vPortFree>
	}
 8007196:	e00f      	b.n	80071b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d00a      	beq.n	80071b8 <prvDeleteTCB+0x60>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	60fb      	str	r3, [r7, #12]
}
 80071b4:	bf00      	nop
 80071b6:	e7fe      	b.n	80071b6 <prvDeleteTCB+0x5e>
	}
 80071b8:	bf00      	nop
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071c6:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <prvResetNextTaskUnblockTime+0x40>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <prvResetNextTaskUnblockTime+0x14>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <prvResetNextTaskUnblockTime+0x16>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d004      	beq.n	80071e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071da:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <prvResetNextTaskUnblockTime+0x44>)
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071e2:	e008      	b.n	80071f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <prvResetNextTaskUnblockTime+0x40>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	4a04      	ldr	r2, [pc, #16]	; (8007204 <prvResetNextTaskUnblockTime+0x44>)
 80071f4:	6013      	str	r3, [r2, #0]
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr
 8007200:	20000c18 	.word	0x20000c18
 8007204:	20000c80 	.word	0x20000c80

08007208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800720e:	4b0b      	ldr	r3, [pc, #44]	; (800723c <xTaskGetSchedulerState+0x34>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d102      	bne.n	800721c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007216:	2301      	movs	r3, #1
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	e008      	b.n	800722e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800721c:	4b08      	ldr	r3, [pc, #32]	; (8007240 <xTaskGetSchedulerState+0x38>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007224:	2302      	movs	r3, #2
 8007226:	607b      	str	r3, [r7, #4]
 8007228:	e001      	b.n	800722e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800722a:	2300      	movs	r3, #0
 800722c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800722e:	687b      	ldr	r3, [r7, #4]
	}
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	20000c6c 	.word	0x20000c6c
 8007240:	20000c88 	.word	0x20000c88

08007244 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007250:	2300      	movs	r3, #0
 8007252:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d06e      	beq.n	8007338 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800725a:	4b3a      	ldr	r3, [pc, #232]	; (8007344 <xTaskPriorityDisinherit+0x100>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	429a      	cmp	r2, r3
 8007262:	d00a      	beq.n	800727a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	60fb      	str	r3, [r7, #12]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	60bb      	str	r3, [r7, #8]
}
 8007294:	bf00      	nop
 8007296:	e7fe      	b.n	8007296 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729c:	1e5a      	subs	r2, r3, #1
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d044      	beq.n	8007338 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d140      	bne.n	8007338 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fd4e 	bl	8005d5c <uxListRemove>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d115      	bne.n	80072f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ca:	491f      	ldr	r1, [pc, #124]	; (8007348 <xTaskPriorityDisinherit+0x104>)
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <xTaskPriorityDisinherit+0xae>
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	2201      	movs	r2, #1
 80072e2:	fa02 f303 	lsl.w	r3, r2, r3
 80072e6:	43da      	mvns	r2, r3
 80072e8:	4b18      	ldr	r3, [pc, #96]	; (800734c <xTaskPriorityDisinherit+0x108>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4013      	ands	r3, r2
 80072ee:	4a17      	ldr	r2, [pc, #92]	; (800734c <xTaskPriorityDisinherit+0x108>)
 80072f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fe:	f1c3 0207 	rsb	r2, r3, #7
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730a:	2201      	movs	r2, #1
 800730c:	409a      	lsls	r2, r3
 800730e:	4b0f      	ldr	r3, [pc, #60]	; (800734c <xTaskPriorityDisinherit+0x108>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4313      	orrs	r3, r2
 8007314:	4a0d      	ldr	r2, [pc, #52]	; (800734c <xTaskPriorityDisinherit+0x108>)
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4a08      	ldr	r2, [pc, #32]	; (8007348 <xTaskPriorityDisinherit+0x104>)
 8007326:	441a      	add	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	3304      	adds	r3, #4
 800732c:	4619      	mov	r1, r3
 800732e:	4610      	mov	r0, r2
 8007330:	f7fe fcb9 	bl	8005ca6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007334:	2301      	movs	r3, #1
 8007336:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007338:	697b      	ldr	r3, [r7, #20]
	}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000b60 	.word	0x20000b60
 8007348:	20000b64 	.word	0x20000b64
 800734c:	20000c68 	.word	0x20000c68

08007350 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800735e:	f000 fa7d 	bl	800785c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007362:	4b29      	ldr	r3, [pc, #164]	; (8007408 <xTaskNotifyWait+0xb8>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d01c      	beq.n	80073aa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007370:	4b25      	ldr	r3, [pc, #148]	; (8007408 <xTaskNotifyWait+0xb8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	43d2      	mvns	r2, r2
 800737c:	400a      	ands	r2, r1
 800737e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007382:	4b21      	ldr	r3, [pc, #132]	; (8007408 <xTaskNotifyWait+0xb8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007392:	2101      	movs	r1, #1
 8007394:	6838      	ldr	r0, [r7, #0]
 8007396:	f000 f90b 	bl	80075b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800739a:	4b1c      	ldr	r3, [pc, #112]	; (800740c <xTaskNotifyWait+0xbc>)
 800739c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80073aa:	f000 fa87 	bl	80078bc <vPortExitCritical>

		taskENTER_CRITICAL();
 80073ae:	f000 fa55 	bl	800785c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d005      	beq.n	80073c4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80073b8:	4b13      	ldr	r3, [pc, #76]	; (8007408 <xTaskNotifyWait+0xb8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80073c4:	4b10      	ldr	r3, [pc, #64]	; (8007408 <xTaskNotifyWait+0xb8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d002      	beq.n	80073d8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	e00a      	b.n	80073ee <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80073d8:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <xTaskNotifyWait+0xb8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	43d2      	mvns	r2, r2
 80073e4:	400a      	ands	r2, r1
 80073e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073ee:	4b06      	ldr	r3, [pc, #24]	; (8007408 <xTaskNotifyWait+0xb8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 80073f8:	f000 fa60 	bl	80078bc <vPortExitCritical>

		return xReturn;
 80073fc:	697b      	ldr	r3, [r7, #20]
	}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000b60 	.word	0x20000b60
 800740c:	e000ed04 	.word	0xe000ed04

08007410 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08e      	sub	sp, #56	; 0x38
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	4613      	mov	r3, r2
 800741e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007420:	2301      	movs	r3, #1
 8007422:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007440:	f000 face 	bl	80079e0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007448:	f3ef 8211 	mrs	r2, BASEPRI
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	623a      	str	r2, [r7, #32]
 800745e:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007460:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007462:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d004      	beq.n	8007474 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800747a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	2202      	movs	r2, #2
 8007482:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	2b04      	cmp	r3, #4
 800748a:	d82f      	bhi.n	80074ec <xTaskGenericNotifyFromISR+0xdc>
 800748c:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <xTaskGenericNotifyFromISR+0x84>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074ed 	.word	0x080074ed
 8007498:	080074a9 	.word	0x080074a9
 800749c:	080074bb 	.word	0x080074bb
 80074a0:	080074cb 	.word	0x080074cb
 80074a4:	080074d5 	.word	0x080074d5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	431a      	orrs	r2, r3
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 80074b8:	e018      	b.n	80074ec <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 80074c8:	e010      	b.n	80074ec <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 80074d2:	e00b      	b.n	80074ec <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80074d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d004      	beq.n	80074e6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80074e4:	e001      	b.n	80074ea <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80074ea:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80074ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d146      	bne.n	8007582 <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	61bb      	str	r3, [r7, #24]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007512:	4b21      	ldr	r3, [pc, #132]	; (8007598 <xTaskGenericNotifyFromISR+0x188>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d11c      	bne.n	8007554 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	3304      	adds	r3, #4
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fc1c 	bl	8005d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	2201      	movs	r2, #1
 800752a:	409a      	lsls	r2, r3
 800752c:	4b1b      	ldr	r3, [pc, #108]	; (800759c <xTaskGenericNotifyFromISR+0x18c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4313      	orrs	r3, r2
 8007532:	4a1a      	ldr	r2, [pc, #104]	; (800759c <xTaskGenericNotifyFromISR+0x18c>)
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4a17      	ldr	r2, [pc, #92]	; (80075a0 <xTaskGenericNotifyFromISR+0x190>)
 8007544:	441a      	add	r2, r3
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	3304      	adds	r3, #4
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f7fe fbaa 	bl	8005ca6 <vListInsertEnd>
 8007552:	e005      	b.n	8007560 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	3318      	adds	r3, #24
 8007558:	4619      	mov	r1, r3
 800755a:	4812      	ldr	r0, [pc, #72]	; (80075a4 <xTaskGenericNotifyFromISR+0x194>)
 800755c:	f7fe fba3 	bl	8005ca6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007564:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <xTaskGenericNotifyFromISR+0x198>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	429a      	cmp	r2, r3
 800756c:	d909      	bls.n	8007582 <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800756e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007576:	2201      	movs	r2, #1
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e002      	b.n	8007582 <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800757c:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <xTaskGenericNotifyFromISR+0x19c>)
 800757e:	2201      	movs	r2, #1
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800758c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007590:	4618      	mov	r0, r3
 8007592:	3738      	adds	r7, #56	; 0x38
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	20000c88 	.word	0x20000c88
 800759c:	20000c68 	.word	0x20000c68
 80075a0:	20000b64 	.word	0x20000b64
 80075a4:	20000c20 	.word	0x20000c20
 80075a8:	20000b60 	.word	0x20000b60
 80075ac:	20000c74 	.word	0x20000c74

080075b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075ba:	4b29      	ldr	r3, [pc, #164]	; (8007660 <prvAddCurrentTaskToDelayedList+0xb0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c0:	4b28      	ldr	r3, [pc, #160]	; (8007664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe fbc8 	bl	8005d5c <uxListRemove>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10b      	bne.n	80075ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80075d2:	4b24      	ldr	r3, [pc, #144]	; (8007664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	2201      	movs	r2, #1
 80075da:	fa02 f303 	lsl.w	r3, r2, r3
 80075de:	43da      	mvns	r2, r3
 80075e0:	4b21      	ldr	r3, [pc, #132]	; (8007668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4013      	ands	r3, r2
 80075e6:	4a20      	ldr	r2, [pc, #128]	; (8007668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f0:	d10a      	bne.n	8007608 <prvAddCurrentTaskToDelayedList+0x58>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d007      	beq.n	8007608 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075f8:	4b1a      	ldr	r3, [pc, #104]	; (8007664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3304      	adds	r3, #4
 80075fe:	4619      	mov	r1, r3
 8007600:	481a      	ldr	r0, [pc, #104]	; (800766c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007602:	f7fe fb50 	bl	8005ca6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007606:	e026      	b.n	8007656 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007610:	4b14      	ldr	r3, [pc, #80]	; (8007664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	429a      	cmp	r2, r3
 800761e:	d209      	bcs.n	8007634 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007620:	4b13      	ldr	r3, [pc, #76]	; (8007670 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3304      	adds	r3, #4
 800762a:	4619      	mov	r1, r3
 800762c:	4610      	mov	r0, r2
 800762e:	f7fe fb5d 	bl	8005cec <vListInsert>
}
 8007632:	e010      	b.n	8007656 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007634:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3304      	adds	r3, #4
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f7fe fb53 	bl	8005cec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007646:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	429a      	cmp	r2, r3
 800764e:	d202      	bcs.n	8007656 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007650:	4a09      	ldr	r2, [pc, #36]	; (8007678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6013      	str	r3, [r2, #0]
}
 8007656:	bf00      	nop
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000c64 	.word	0x20000c64
 8007664:	20000b60 	.word	0x20000b60
 8007668:	20000c68 	.word	0x20000c68
 800766c:	20000c4c 	.word	0x20000c4c
 8007670:	20000c1c 	.word	0x20000c1c
 8007674:	20000c18 	.word	0x20000c18
 8007678:	20000c80 	.word	0x20000c80

0800767c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3b04      	subs	r3, #4
 800768c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3b04      	subs	r3, #4
 800769a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f023 0201 	bic.w	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3b04      	subs	r3, #4
 80076aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076ac:	4a08      	ldr	r2, [pc, #32]	; (80076d0 <pxPortInitialiseStack+0x54>)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3b14      	subs	r3, #20
 80076b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3b20      	subs	r3, #32
 80076c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076c4:	68fb      	ldr	r3, [r7, #12]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bc80      	pop	{r7}
 80076ce:	4770      	bx	lr
 80076d0:	080076d5 	.word	0x080076d5

080076d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80076da:	2300      	movs	r3, #0
 80076dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076de:	4b12      	ldr	r3, [pc, #72]	; (8007728 <prvTaskExitError+0x54>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e6:	d00a      	beq.n	80076fe <prvTaskExitError+0x2a>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	60fb      	str	r3, [r7, #12]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <prvTaskExitError+0x28>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	60bb      	str	r3, [r7, #8]
}
 8007710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007712:	bf00      	nop
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0fc      	beq.n	8007714 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	bc80      	pop	{r7}
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	2000000c 	.word	0x2000000c
 800772c:	00000000 	.word	0x00000000

08007730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <pxCurrentTCBConst2>)
 8007732:	6819      	ldr	r1, [r3, #0]
 8007734:	6808      	ldr	r0, [r1, #0]
 8007736:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800773a:	f380 8809 	msr	PSP, r0
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f04f 0000 	mov.w	r0, #0
 8007746:	f380 8811 	msr	BASEPRI, r0
 800774a:	f04e 0e0d 	orr.w	lr, lr, #13
 800774e:	4770      	bx	lr

08007750 <pxCurrentTCBConst2>:
 8007750:	20000b60 	.word	0x20000b60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop

08007758 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007758:	4806      	ldr	r0, [pc, #24]	; (8007774 <prvPortStartFirstTask+0x1c>)
 800775a:	6800      	ldr	r0, [r0, #0]
 800775c:	6800      	ldr	r0, [r0, #0]
 800775e:	f380 8808 	msr	MSP, r0
 8007762:	b662      	cpsie	i
 8007764:	b661      	cpsie	f
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	df00      	svc	0
 8007770:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007772:	bf00      	nop
 8007774:	e000ed08 	.word	0xe000ed08

08007778 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800777e:	4b32      	ldr	r3, [pc, #200]	; (8007848 <xPortStartScheduler+0xd0>)
 8007780:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	22ff      	movs	r2, #255	; 0xff
 800778e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	4b2a      	ldr	r3, [pc, #168]	; (800784c <xPortStartScheduler+0xd4>)
 80077a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077a6:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <xPortStartScheduler+0xd8>)
 80077a8:	2207      	movs	r2, #7
 80077aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077ac:	e009      	b.n	80077c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80077ae:	4b28      	ldr	r3, [pc, #160]	; (8007850 <xPortStartScheduler+0xd8>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	4a26      	ldr	r2, [pc, #152]	; (8007850 <xPortStartScheduler+0xd8>)
 80077b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ca:	2b80      	cmp	r3, #128	; 0x80
 80077cc:	d0ef      	beq.n	80077ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077ce:	4b20      	ldr	r3, [pc, #128]	; (8007850 <xPortStartScheduler+0xd8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f1c3 0307 	rsb	r3, r3, #7
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d00a      	beq.n	80077f0 <xPortStartScheduler+0x78>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	60bb      	str	r3, [r7, #8]
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077f0:	4b17      	ldr	r3, [pc, #92]	; (8007850 <xPortStartScheduler+0xd8>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	4a16      	ldr	r2, [pc, #88]	; (8007850 <xPortStartScheduler+0xd8>)
 80077f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077fa:	4b15      	ldr	r3, [pc, #84]	; (8007850 <xPortStartScheduler+0xd8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007802:	4a13      	ldr	r2, [pc, #76]	; (8007850 <xPortStartScheduler+0xd8>)
 8007804:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	b2da      	uxtb	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800780e:	4b11      	ldr	r3, [pc, #68]	; (8007854 <xPortStartScheduler+0xdc>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a10      	ldr	r2, [pc, #64]	; (8007854 <xPortStartScheduler+0xdc>)
 8007814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007818:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800781a:	4b0e      	ldr	r3, [pc, #56]	; (8007854 <xPortStartScheduler+0xdc>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a0d      	ldr	r2, [pc, #52]	; (8007854 <xPortStartScheduler+0xdc>)
 8007820:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007824:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007826:	f000 f8b9 	bl	800799c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800782a:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <xPortStartScheduler+0xe0>)
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007830:	f7ff ff92 	bl	8007758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007834:	f7ff fa8e 	bl	8006d54 <vTaskSwitchContext>
	prvTaskExitError();
 8007838:	f7ff ff4c 	bl	80076d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	e000e400 	.word	0xe000e400
 800784c:	20000c8c 	.word	0x20000c8c
 8007850:	20000c90 	.word	0x20000c90
 8007854:	e000ed20 	.word	0xe000ed20
 8007858:	2000000c 	.word	0x2000000c

0800785c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	607b      	str	r3, [r7, #4]
}
 8007874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007876:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <vPortEnterCritical+0x58>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	4a0d      	ldr	r2, [pc, #52]	; (80078b4 <vPortEnterCritical+0x58>)
 800787e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007880:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <vPortEnterCritical+0x58>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d10f      	bne.n	80078a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007888:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <vPortEnterCritical+0x5c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00a      	beq.n	80078a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	603b      	str	r3, [r7, #0]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <vPortEnterCritical+0x4a>
	}
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	2000000c 	.word	0x2000000c
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078c2:	4b11      	ldr	r3, [pc, #68]	; (8007908 <vPortExitCritical+0x4c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <vPortExitCritical+0x24>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	607b      	str	r3, [r7, #4]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078e0:	4b09      	ldr	r3, [pc, #36]	; (8007908 <vPortExitCritical+0x4c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	4a08      	ldr	r2, [pc, #32]	; (8007908 <vPortExitCritical+0x4c>)
 80078e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <vPortExitCritical+0x4c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <vPortExitCritical+0x42>
 80078f2:	2300      	movs	r3, #0
 80078f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	f383 8811 	msr	BASEPRI, r3
}
 80078fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr
 8007908:	2000000c 	.word	0x2000000c
 800790c:	00000000 	.word	0x00000000

08007910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007910:	f3ef 8009 	mrs	r0, PSP
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <pxCurrentTCBConst>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007920:	6010      	str	r0, [r2, #0]
 8007922:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007926:	f04f 0050 	mov.w	r0, #80	; 0x50
 800792a:	f380 8811 	msr	BASEPRI, r0
 800792e:	f7ff fa11 	bl	8006d54 <vTaskSwitchContext>
 8007932:	f04f 0000 	mov.w	r0, #0
 8007936:	f380 8811 	msr	BASEPRI, r0
 800793a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	6808      	ldr	r0, [r1, #0]
 8007942:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007946:	f380 8809 	msr	PSP, r0
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	4770      	bx	lr

08007950 <pxCurrentTCBConst>:
 8007950:	20000b60 	.word	0x20000b60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop

08007958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	607b      	str	r3, [r7, #4]
}
 8007970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007972:	f7ff f931 	bl	8006bd8 <xTaskIncrementTick>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800797c:	4b06      	ldr	r3, [pc, #24]	; (8007998 <SysTick_Handler+0x40>)
 800797e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	2300      	movs	r3, #0
 8007986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f383 8811 	msr	BASEPRI, r3
}
 800798e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079a0:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <vPortSetupTimerInterrupt+0x30>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079a6:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <vPortSetupTimerInterrupt+0x34>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079ac:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <vPortSetupTimerInterrupt+0x38>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a09      	ldr	r2, [pc, #36]	; (80079d8 <vPortSetupTimerInterrupt+0x3c>)
 80079b2:	fba2 2303 	umull	r2, r3, r2, r3
 80079b6:	099b      	lsrs	r3, r3, #6
 80079b8:	4a08      	ldr	r2, [pc, #32]	; (80079dc <vPortSetupTimerInterrupt+0x40>)
 80079ba:	3b01      	subs	r3, #1
 80079bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079be:	4b03      	ldr	r3, [pc, #12]	; (80079cc <vPortSetupTimerInterrupt+0x30>)
 80079c0:	2207      	movs	r2, #7
 80079c2:	601a      	str	r2, [r3, #0]
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bc80      	pop	{r7}
 80079ca:	4770      	bx	lr
 80079cc:	e000e010 	.word	0xe000e010
 80079d0:	e000e018 	.word	0xe000e018
 80079d4:	20000000 	.word	0x20000000
 80079d8:	10624dd3 	.word	0x10624dd3
 80079dc:	e000e014 	.word	0xe000e014

080079e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079e6:	f3ef 8305 	mrs	r3, IPSR
 80079ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b0f      	cmp	r3, #15
 80079f0:	d914      	bls.n	8007a1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079f2:	4a16      	ldr	r2, [pc, #88]	; (8007a4c <vPortValidateInterruptPriority+0x6c>)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079fc:	4b14      	ldr	r3, [pc, #80]	; (8007a50 <vPortValidateInterruptPriority+0x70>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	7afa      	ldrb	r2, [r7, #11]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d20a      	bcs.n	8007a1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	607b      	str	r3, [r7, #4]
}
 8007a18:	bf00      	nop
 8007a1a:	e7fe      	b.n	8007a1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <vPortValidateInterruptPriority+0x74>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a24:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <vPortValidateInterruptPriority+0x78>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d90a      	bls.n	8007a42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	603b      	str	r3, [r7, #0]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <vPortValidateInterruptPriority+0x60>
	}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr
 8007a4c:	e000e3f0 	.word	0xe000e3f0
 8007a50:	20000c8c 	.word	0x20000c8c
 8007a54:	e000ed0c 	.word	0xe000ed0c
 8007a58:	20000c90 	.word	0x20000c90

08007a5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08a      	sub	sp, #40	; 0x28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a68:	f7ff f80c 	bl	8006a84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a6c:	4b58      	ldr	r3, [pc, #352]	; (8007bd0 <pvPortMalloc+0x174>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a74:	f000 f910 	bl	8007c98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a78:	4b56      	ldr	r3, [pc, #344]	; (8007bd4 <pvPortMalloc+0x178>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f040 808e 	bne.w	8007ba2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01d      	beq.n	8007ac8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a8c:	2208      	movs	r2, #8
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d014      	beq.n	8007ac8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f023 0307 	bic.w	r3, r3, #7
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f003 0307 	and.w	r3, r3, #7
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <pvPortMalloc+0x6c>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	617b      	str	r3, [r7, #20]
}
 8007ac4:	bf00      	nop
 8007ac6:	e7fe      	b.n	8007ac6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d069      	beq.n	8007ba2 <pvPortMalloc+0x146>
 8007ace:	4b42      	ldr	r3, [pc, #264]	; (8007bd8 <pvPortMalloc+0x17c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d864      	bhi.n	8007ba2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ad8:	4b40      	ldr	r3, [pc, #256]	; (8007bdc <pvPortMalloc+0x180>)
 8007ada:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007adc:	4b3f      	ldr	r3, [pc, #252]	; (8007bdc <pvPortMalloc+0x180>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ae2:	e004      	b.n	8007aee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d903      	bls.n	8007b00 <pvPortMalloc+0xa4>
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1f1      	bne.n	8007ae4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b00:	4b33      	ldr	r3, [pc, #204]	; (8007bd0 <pvPortMalloc+0x174>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d04b      	beq.n	8007ba2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2208      	movs	r2, #8
 8007b10:	4413      	add	r3, r2
 8007b12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	1ad2      	subs	r2, r2, r3
 8007b24:	2308      	movs	r3, #8
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d91f      	bls.n	8007b6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4413      	add	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <pvPortMalloc+0xf8>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	613b      	str	r3, [r7, #16]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	1ad2      	subs	r2, r2, r3
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b66:	69b8      	ldr	r0, [r7, #24]
 8007b68:	f000 f8f8 	bl	8007d5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b6c:	4b1a      	ldr	r3, [pc, #104]	; (8007bd8 <pvPortMalloc+0x17c>)
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	4a18      	ldr	r2, [pc, #96]	; (8007bd8 <pvPortMalloc+0x17c>)
 8007b78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b7a:	4b17      	ldr	r3, [pc, #92]	; (8007bd8 <pvPortMalloc+0x17c>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4b18      	ldr	r3, [pc, #96]	; (8007be0 <pvPortMalloc+0x184>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d203      	bcs.n	8007b8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <pvPortMalloc+0x17c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a15      	ldr	r2, [pc, #84]	; (8007be0 <pvPortMalloc+0x184>)
 8007b8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <pvPortMalloc+0x178>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ba2:	f7fe ff7d 	bl	8006aa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <pvPortMalloc+0x16a>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	60fb      	str	r3, [r7, #12]
}
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <pvPortMalloc+0x168>
	return pvReturn;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3728      	adds	r7, #40	; 0x28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	2000189c 	.word	0x2000189c
 8007bd4:	200018a8 	.word	0x200018a8
 8007bd8:	200018a0 	.word	0x200018a0
 8007bdc:	20001894 	.word	0x20001894
 8007be0:	200018a4 	.word	0x200018a4

08007be4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d048      	beq.n	8007c88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bf6:	2308      	movs	r3, #8
 8007bf8:	425b      	negs	r3, r3
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <vPortFree+0xac>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <vPortFree+0x44>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60fb      	str	r3, [r7, #12]
}
 8007c24:	bf00      	nop
 8007c26:	e7fe      	b.n	8007c26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00a      	beq.n	8007c46 <vPortFree+0x62>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60bb      	str	r3, [r7, #8]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <vPortFree+0xac>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4013      	ands	r3, r2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d019      	beq.n	8007c88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d115      	bne.n	8007c88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <vPortFree+0xac>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	43db      	mvns	r3, r3
 8007c66:	401a      	ands	r2, r3
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c6c:	f7fe ff0a 	bl	8006a84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <vPortFree+0xb0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4413      	add	r3, r2
 8007c7a:	4a06      	ldr	r2, [pc, #24]	; (8007c94 <vPortFree+0xb0>)
 8007c7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c7e:	6938      	ldr	r0, [r7, #16]
 8007c80:	f000 f86c 	bl	8007d5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c84:	f7fe ff0c 	bl	8006aa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c88:	bf00      	nop
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	200018a8 	.word	0x200018a8
 8007c94:	200018a0 	.word	0x200018a0

08007c98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007ca2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ca4:	4b27      	ldr	r3, [pc, #156]	; (8007d44 <prvHeapInit+0xac>)
 8007ca6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00c      	beq.n	8007ccc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3307      	adds	r3, #7
 8007cb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0307 	bic.w	r3, r3, #7
 8007cbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	4a1f      	ldr	r2, [pc, #124]	; (8007d44 <prvHeapInit+0xac>)
 8007cc8:	4413      	add	r3, r2
 8007cca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cd0:	4a1d      	ldr	r2, [pc, #116]	; (8007d48 <prvHeapInit+0xb0>)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cd6:	4b1c      	ldr	r3, [pc, #112]	; (8007d48 <prvHeapInit+0xb0>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ce4:	2208      	movs	r2, #8
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	1a9b      	subs	r3, r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0307 	bic.w	r3, r3, #7
 8007cf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a15      	ldr	r2, [pc, #84]	; (8007d4c <prvHeapInit+0xb4>)
 8007cf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cfa:	4b14      	ldr	r3, [pc, #80]	; (8007d4c <prvHeapInit+0xb4>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <prvHeapInit+0xb4>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	1ad2      	subs	r2, r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d18:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <prvHeapInit+0xb4>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	4a0a      	ldr	r2, [pc, #40]	; (8007d50 <prvHeapInit+0xb8>)
 8007d26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <prvHeapInit+0xbc>)
 8007d2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d30:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <prvHeapInit+0xc0>)
 8007d32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d36:	601a      	str	r2, [r3, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bc80      	pop	{r7}
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	20000c94 	.word	0x20000c94
 8007d48:	20001894 	.word	0x20001894
 8007d4c:	2000189c 	.word	0x2000189c
 8007d50:	200018a4 	.word	0x200018a4
 8007d54:	200018a0 	.word	0x200018a0
 8007d58:	200018a8 	.word	0x200018a8

08007d5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d64:	4b27      	ldr	r3, [pc, #156]	; (8007e04 <prvInsertBlockIntoFreeList+0xa8>)
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e002      	b.n	8007d70 <prvInsertBlockIntoFreeList+0x14>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d8f7      	bhi.n	8007d6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	4413      	add	r3, r2
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d108      	bne.n	8007d9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	441a      	add	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	441a      	add	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d118      	bne.n	8007de4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	4b14      	ldr	r3, [pc, #80]	; (8007e08 <prvInsertBlockIntoFreeList+0xac>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d00d      	beq.n	8007dda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	441a      	add	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e008      	b.n	8007dec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <prvInsertBlockIntoFreeList+0xac>)
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	e003      	b.n	8007dec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d002      	beq.n	8007dfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr
 8007e04:	20001894 	.word	0x20001894
 8007e08:	2000189c 	.word	0x2000189c

08007e0c <memset>:
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	4402      	add	r2, r0
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d100      	bne.n	8007e16 <memset+0xa>
 8007e14:	4770      	bx	lr
 8007e16:	f803 1b01 	strb.w	r1, [r3], #1
 8007e1a:	e7f9      	b.n	8007e10 <memset+0x4>

08007e1c <_reclaim_reent>:
 8007e1c:	4b29      	ldr	r3, [pc, #164]	; (8007ec4 <_reclaim_reent+0xa8>)
 8007e1e:	b570      	push	{r4, r5, r6, lr}
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4604      	mov	r4, r0
 8007e24:	4283      	cmp	r3, r0
 8007e26:	d04b      	beq.n	8007ec0 <_reclaim_reent+0xa4>
 8007e28:	69c3      	ldr	r3, [r0, #28]
 8007e2a:	b143      	cbz	r3, 8007e3e <_reclaim_reent+0x22>
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d144      	bne.n	8007ebc <_reclaim_reent+0xa0>
 8007e32:	69e3      	ldr	r3, [r4, #28]
 8007e34:	6819      	ldr	r1, [r3, #0]
 8007e36:	b111      	cbz	r1, 8007e3e <_reclaim_reent+0x22>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 f879 	bl	8007f30 <_free_r>
 8007e3e:	6961      	ldr	r1, [r4, #20]
 8007e40:	b111      	cbz	r1, 8007e48 <_reclaim_reent+0x2c>
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 f874 	bl	8007f30 <_free_r>
 8007e48:	69e1      	ldr	r1, [r4, #28]
 8007e4a:	b111      	cbz	r1, 8007e52 <_reclaim_reent+0x36>
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 f86f 	bl	8007f30 <_free_r>
 8007e52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007e54:	b111      	cbz	r1, 8007e5c <_reclaim_reent+0x40>
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 f86a 	bl	8007f30 <_free_r>
 8007e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e5e:	b111      	cbz	r1, 8007e66 <_reclaim_reent+0x4a>
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 f865 	bl	8007f30 <_free_r>
 8007e66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e68:	b111      	cbz	r1, 8007e70 <_reclaim_reent+0x54>
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 f860 	bl	8007f30 <_free_r>
 8007e70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e72:	b111      	cbz	r1, 8007e7a <_reclaim_reent+0x5e>
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 f85b 	bl	8007f30 <_free_r>
 8007e7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007e7c:	b111      	cbz	r1, 8007e84 <_reclaim_reent+0x68>
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 f856 	bl	8007f30 <_free_r>
 8007e84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007e86:	b111      	cbz	r1, 8007e8e <_reclaim_reent+0x72>
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 f851 	bl	8007f30 <_free_r>
 8007e8e:	6a23      	ldr	r3, [r4, #32]
 8007e90:	b1b3      	cbz	r3, 8007ec0 <_reclaim_reent+0xa4>
 8007e92:	4620      	mov	r0, r4
 8007e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e98:	4718      	bx	r3
 8007e9a:	5949      	ldr	r1, [r1, r5]
 8007e9c:	b941      	cbnz	r1, 8007eb0 <_reclaim_reent+0x94>
 8007e9e:	3504      	adds	r5, #4
 8007ea0:	69e3      	ldr	r3, [r4, #28]
 8007ea2:	2d80      	cmp	r5, #128	; 0x80
 8007ea4:	68d9      	ldr	r1, [r3, #12]
 8007ea6:	d1f8      	bne.n	8007e9a <_reclaim_reent+0x7e>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 f841 	bl	8007f30 <_free_r>
 8007eae:	e7c0      	b.n	8007e32 <_reclaim_reent+0x16>
 8007eb0:	680e      	ldr	r6, [r1, #0]
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 f83c 	bl	8007f30 <_free_r>
 8007eb8:	4631      	mov	r1, r6
 8007eba:	e7ef      	b.n	8007e9c <_reclaim_reent+0x80>
 8007ebc:	2500      	movs	r5, #0
 8007ebe:	e7ef      	b.n	8007ea0 <_reclaim_reent+0x84>
 8007ec0:	bd70      	pop	{r4, r5, r6, pc}
 8007ec2:	bf00      	nop
 8007ec4:	2000005c 	.word	0x2000005c

08007ec8 <__libc_init_array>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	2600      	movs	r6, #0
 8007ecc:	4d0c      	ldr	r5, [pc, #48]	; (8007f00 <__libc_init_array+0x38>)
 8007ece:	4c0d      	ldr	r4, [pc, #52]	; (8007f04 <__libc_init_array+0x3c>)
 8007ed0:	1b64      	subs	r4, r4, r5
 8007ed2:	10a4      	asrs	r4, r4, #2
 8007ed4:	42a6      	cmp	r6, r4
 8007ed6:	d109      	bne.n	8007eec <__libc_init_array+0x24>
 8007ed8:	f000 f87e 	bl	8007fd8 <_init>
 8007edc:	2600      	movs	r6, #0
 8007ede:	4d0a      	ldr	r5, [pc, #40]	; (8007f08 <__libc_init_array+0x40>)
 8007ee0:	4c0a      	ldr	r4, [pc, #40]	; (8007f0c <__libc_init_array+0x44>)
 8007ee2:	1b64      	subs	r4, r4, r5
 8007ee4:	10a4      	asrs	r4, r4, #2
 8007ee6:	42a6      	cmp	r6, r4
 8007ee8:	d105      	bne.n	8007ef6 <__libc_init_array+0x2e>
 8007eea:	bd70      	pop	{r4, r5, r6, pc}
 8007eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef0:	4798      	blx	r3
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7ee      	b.n	8007ed4 <__libc_init_array+0xc>
 8007ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efa:	4798      	blx	r3
 8007efc:	3601      	adds	r6, #1
 8007efe:	e7f2      	b.n	8007ee6 <__libc_init_array+0x1e>
 8007f00:	080080b0 	.word	0x080080b0
 8007f04:	080080b0 	.word	0x080080b0
 8007f08:	080080b0 	.word	0x080080b0
 8007f0c:	080080b4 	.word	0x080080b4

08007f10 <__retarget_lock_acquire_recursive>:
 8007f10:	4770      	bx	lr

08007f12 <__retarget_lock_release_recursive>:
 8007f12:	4770      	bx	lr

08007f14 <memcpy>:
 8007f14:	440a      	add	r2, r1
 8007f16:	4291      	cmp	r1, r2
 8007f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f1c:	d100      	bne.n	8007f20 <memcpy+0xc>
 8007f1e:	4770      	bx	lr
 8007f20:	b510      	push	{r4, lr}
 8007f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f26:	4291      	cmp	r1, r2
 8007f28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f2c:	d1f9      	bne.n	8007f22 <memcpy+0xe>
 8007f2e:	bd10      	pop	{r4, pc}

08007f30 <_free_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4605      	mov	r5, r0
 8007f34:	2900      	cmp	r1, #0
 8007f36:	d040      	beq.n	8007fba <_free_r+0x8a>
 8007f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f3c:	1f0c      	subs	r4, r1, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bfb8      	it	lt
 8007f42:	18e4      	addlt	r4, r4, r3
 8007f44:	f000 f83c 	bl	8007fc0 <__malloc_lock>
 8007f48:	4a1c      	ldr	r2, [pc, #112]	; (8007fbc <_free_r+0x8c>)
 8007f4a:	6813      	ldr	r3, [r2, #0]
 8007f4c:	b933      	cbnz	r3, 8007f5c <_free_r+0x2c>
 8007f4e:	6063      	str	r3, [r4, #4]
 8007f50:	6014      	str	r4, [r2, #0]
 8007f52:	4628      	mov	r0, r5
 8007f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f58:	f000 b838 	b.w	8007fcc <__malloc_unlock>
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	d908      	bls.n	8007f72 <_free_r+0x42>
 8007f60:	6820      	ldr	r0, [r4, #0]
 8007f62:	1821      	adds	r1, r4, r0
 8007f64:	428b      	cmp	r3, r1
 8007f66:	bf01      	itttt	eq
 8007f68:	6819      	ldreq	r1, [r3, #0]
 8007f6a:	685b      	ldreq	r3, [r3, #4]
 8007f6c:	1809      	addeq	r1, r1, r0
 8007f6e:	6021      	streq	r1, [r4, #0]
 8007f70:	e7ed      	b.n	8007f4e <_free_r+0x1e>
 8007f72:	461a      	mov	r2, r3
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	b10b      	cbz	r3, 8007f7c <_free_r+0x4c>
 8007f78:	42a3      	cmp	r3, r4
 8007f7a:	d9fa      	bls.n	8007f72 <_free_r+0x42>
 8007f7c:	6811      	ldr	r1, [r2, #0]
 8007f7e:	1850      	adds	r0, r2, r1
 8007f80:	42a0      	cmp	r0, r4
 8007f82:	d10b      	bne.n	8007f9c <_free_r+0x6c>
 8007f84:	6820      	ldr	r0, [r4, #0]
 8007f86:	4401      	add	r1, r0
 8007f88:	1850      	adds	r0, r2, r1
 8007f8a:	4283      	cmp	r3, r0
 8007f8c:	6011      	str	r1, [r2, #0]
 8007f8e:	d1e0      	bne.n	8007f52 <_free_r+0x22>
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	4408      	add	r0, r1
 8007f96:	6010      	str	r0, [r2, #0]
 8007f98:	6053      	str	r3, [r2, #4]
 8007f9a:	e7da      	b.n	8007f52 <_free_r+0x22>
 8007f9c:	d902      	bls.n	8007fa4 <_free_r+0x74>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	602b      	str	r3, [r5, #0]
 8007fa2:	e7d6      	b.n	8007f52 <_free_r+0x22>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	1821      	adds	r1, r4, r0
 8007fa8:	428b      	cmp	r3, r1
 8007faa:	bf01      	itttt	eq
 8007fac:	6819      	ldreq	r1, [r3, #0]
 8007fae:	685b      	ldreq	r3, [r3, #4]
 8007fb0:	1809      	addeq	r1, r1, r0
 8007fb2:	6021      	streq	r1, [r4, #0]
 8007fb4:	6063      	str	r3, [r4, #4]
 8007fb6:	6054      	str	r4, [r2, #4]
 8007fb8:	e7cb      	b.n	8007f52 <_free_r+0x22>
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	200019e8 	.word	0x200019e8

08007fc0 <__malloc_lock>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <__malloc_lock+0x8>)
 8007fc2:	f7ff bfa5 	b.w	8007f10 <__retarget_lock_acquire_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	200019e4 	.word	0x200019e4

08007fcc <__malloc_unlock>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	; (8007fd4 <__malloc_unlock+0x8>)
 8007fce:	f7ff bfa0 	b.w	8007f12 <__retarget_lock_release_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	200019e4 	.word	0x200019e4

08007fd8 <_init>:
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fda:	bf00      	nop
 8007fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fde:	bc08      	pop	{r3}
 8007fe0:	469e      	mov	lr, r3
 8007fe2:	4770      	bx	lr

08007fe4 <_fini>:
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	bf00      	nop
 8007fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fea:	bc08      	pop	{r3}
 8007fec:	469e      	mov	lr, r3
 8007fee:	4770      	bx	lr
