
TestTayGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003114  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b4  080032b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080032b4  080032b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032bc  080032bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000813d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001613  00000000  00000000  000281bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006a8  00000000  00000000  000297d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000527  00000000  00000000  00029e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f3d0  00000000  00000000  0002a39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008a0c  00000000  00000000  0004976f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000be9f8  00000000  00000000  0005217b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001b60  00000000  00000000  00110b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001126d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003284 	.word	0x08003284

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003284 	.word	0x08003284

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b970 	b.w	8000cfc <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460f      	mov	r7, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0xe2>
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	b143      	cbz	r3, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a54:	f1c3 0220 	rsb	r2, r3, #32
 8000a58:	409f      	lsls	r7, r3
 8000a5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	409c      	lsls	r4, r3
 8000a62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a66:	fa1f f58c 	uxth.w	r5, ip
 8000a6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a6e:	0c22      	lsrs	r2, r4, #16
 8000a70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a78:	fb01 f005 	mul.w	r0, r1, r5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a80:	eb1c 0202 	adds.w	r2, ip, r2
 8000a84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a88:	f080 811c 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	f240 8119 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000a92:	3902      	subs	r1, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	b2a4      	uxth	r4, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa6:	fb00 f505 	mul.w	r5, r0, r5
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x90>
 8000aae:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab6:	f080 8107 	bcs.w	8000cc8 <__udivmoddi4+0x294>
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	f240 8104 	bls.w	8000cc8 <__udivmoddi4+0x294>
 8000ac0:	4464      	add	r4, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11e      	cbz	r6, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40dc      	lsrs	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0xbc>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ed 	beq.w	8000cbe <__udivmoddi4+0x28a>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aea:	4608      	mov	r0, r1
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	fab3 f183 	clz	r1, r3
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d149      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d302      	bcc.n	8000b02 <__udivmoddi4+0xce>
 8000afc:	4282      	cmp	r2, r0
 8000afe:	f200 80f8 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b02:	1a84      	subs	r4, r0, r2
 8000b04:	eb65 0203 	sbc.w	r2, r5, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0e2      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	e9c6 4700 	strd	r4, r7, [r6]
 8000b14:	e7df      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b16:	b902      	cbnz	r2, 8000b1a <__udivmoddi4+0xe6>
 8000b18:	deff      	udf	#255	; 0xff
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b34:	fb07 2015 	mls	r0, r7, r5, r2
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b3e:	fb0e f005 	mul.w	r0, lr, r5
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b46:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4290      	cmp	r0, r2
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b56:	4645      	mov	r5, r8
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b60:	fb07 2210 	mls	r2, r7, r0, r2
 8000b64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b80:	4610      	mov	r0, r2
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	e79f      	b.n	8000acc <__udivmoddi4+0x98>
 8000b8c:	f1c1 0720 	rsb	r7, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba2:	40fd      	lsrs	r5, r7
 8000ba4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bae:	fa1f fe8c 	uxth.w	lr, ip
 8000bb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bb6:	0c1c      	lsrs	r4, r3, #16
 8000bb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	b29d      	uxth	r5, r3
 8000be8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bec:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c12:	fba3 9502 	umull	r9, r5, r3, r2
 8000c16:	eba4 040e 	sub.w	r4, r4, lr
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46ae      	mov	lr, r5
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x29c>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x298>
 8000c24:	b156      	cbz	r6, 8000c3c <__udivmoddi4+0x208>
 8000c26:	ebb0 0208 	subs.w	r2, r0, r8
 8000c2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c32:	40ca      	lsrs	r2, r1
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	4317      	orrs	r7, r2
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	f1c3 0120 	rsb	r1, r3, #32
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c50:	fa25 f101 	lsr.w	r1, r5, r1
 8000c54:	409d      	lsls	r5, r3
 8000c56:	432a      	orrs	r2, r5
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1510 	mls	r5, r7, r0, r1
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c72:	428d      	cmp	r5, r1
 8000c74:	fa04 f403 	lsl.w	r4, r4, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x258>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	428d      	cmp	r5, r1
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c94:	fb07 1115 	mls	r1, r7, r5, r1
 8000c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca0:	4291      	cmp	r1, r2
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x282>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cb2:	3d02      	subs	r5, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a52      	subs	r2, r2, r1
 8000cb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0xfc>
 8000cbe:	4631      	mov	r1, r6
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e6e6      	b.n	8000a96 <__udivmoddi4+0x62>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	e6fb      	b.n	8000ac4 <__udivmoddi4+0x90>
 8000ccc:	4548      	cmp	r0, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x258>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3d02      	subs	r5, #2
 8000cee:	4462      	add	r2, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e70a      	b.n	8000b0c <__udivmoddi4+0xd8>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x14e>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <HAL_UART_RxCpltCallback>:
uint8_t DataTayGame[9];

float Xleft,Yleft;
float Xright;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4aa2      	ldr	r2, [pc, #648]	; (8000f98 <HAL_UART_RxCpltCallback+0x298>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	f040 8139 	bne.w	8000f86 <HAL_UART_RxCpltCallback+0x286>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 8000d14:	2209      	movs	r2, #9
 8000d16:	49a1      	ldr	r1, [pc, #644]	; (8000f9c <HAL_UART_RxCpltCallback+0x29c>)
 8000d18:	48a1      	ldr	r0, [pc, #644]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2a0>)
 8000d1a:	f001 fb5c 	bl	80023d6 <HAL_UART_Receive_IT>
		int ViTriData = -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 8; ++i){
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	e00a      	b.n	8000d40 <HAL_UART_RxCpltCallback+0x40>
			if(UARTRX3_Buffer[i] == 0xAA){
 8000d2a:	4a9c      	ldr	r2, [pc, #624]	; (8000f9c <HAL_UART_RxCpltCallback+0x29c>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4413      	add	r3, r2
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2baa      	cmp	r3, #170	; 0xaa
 8000d34:	d101      	bne.n	8000d3a <HAL_UART_RxCpltCallback+0x3a>
				ViTriData = i;
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 8; ++i){
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	ddf1      	ble.n	8000d2a <HAL_UART_RxCpltCallback+0x2a>
			}
		}
		if(ViTriData != -1){
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d4c:	f000 8118 	beq.w	8000f80 <HAL_UART_RxCpltCallback+0x280>
			int cnt = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
			while(cnt < 9){
 8000d54:	e013      	b.n	8000d7e <HAL_UART_RxCpltCallback+0x7e>
				DataTayGame[cnt] = UARTRX3_Buffer[ViTriData];
 8000d56:	4a91      	ldr	r2, [pc, #580]	; (8000f9c <HAL_UART_RxCpltCallback+0x29c>)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	7819      	ldrb	r1, [r3, #0]
 8000d5e:	4a91      	ldr	r2, [pc, #580]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	460a      	mov	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
				if(ViTriData == 9){
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b09      	cmp	r3, #9
 8000d72:	d101      	bne.n	8000d78 <HAL_UART_RxCpltCallback+0x78>
					ViTriData = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
			while(cnt < 9){
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b08      	cmp	r3, #8
 8000d82:	dde8      	ble.n	8000d56 <HAL_UART_RxCpltCallback+0x56>
			}
			GamePad.Status = 1;
 8000d84:	4b88      	ldr	r3, [pc, #544]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]

			GamePad.XLeft = DataTayGame[1];
 8000d8a:	4b86      	ldr	r3, [pc, #536]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000d8c:	785a      	ldrb	r2, [r3, #1]
 8000d8e:	4b86      	ldr	r3, [pc, #536]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000d90:	705a      	strb	r2, [r3, #1]
			GamePad.YLeft = DataTayGame[2];
 8000d92:	4b84      	ldr	r3, [pc, #528]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000d94:	789a      	ldrb	r2, [r3, #2]
 8000d96:	4b84      	ldr	r3, [pc, #528]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000d98:	709a      	strb	r2, [r3, #2]

			GamePad.XRight = DataTayGame[3];
 8000d9a:	4b82      	ldr	r3, [pc, #520]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000d9c:	78da      	ldrb	r2, [r3, #3]
 8000d9e:	4b82      	ldr	r3, [pc, #520]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000da0:	70da      	strb	r2, [r3, #3]
			GamePad.YRight = DataTayGame[4];
 8000da2:	4b80      	ldr	r3, [pc, #512]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000da4:	791a      	ldrb	r2, [r3, #4]
 8000da6:	4b80      	ldr	r3, [pc, #512]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000da8:	711a      	strb	r2, [r3, #4]

			GamePad.Left = (DataTayGame[5] >> 7) & 1;
 8000daa:	4b7e      	ldr	r3, [pc, #504]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000dac:	795b      	ldrb	r3, [r3, #5]
 8000dae:	09db      	lsrs	r3, r3, #7
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b7d      	ldr	r3, [pc, #500]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000db4:	715a      	strb	r2, [r3, #5]
			GamePad.Up = (DataTayGame[5] >> 6) & 1;
 8000db6:	4b7b      	ldr	r3, [pc, #492]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000db8:	795b      	ldrb	r3, [r3, #5]
 8000dba:	099b      	lsrs	r3, r3, #6
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b78      	ldr	r3, [pc, #480]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000dc6:	719a      	strb	r2, [r3, #6]
			GamePad.Right = (DataTayGame[5] >> 5) & 1;
 8000dc8:	4b76      	ldr	r3, [pc, #472]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000dca:	795b      	ldrb	r3, [r3, #5]
 8000dcc:	095b      	lsrs	r3, r3, #5
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b74      	ldr	r3, [pc, #464]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000dd8:	71da      	strb	r2, [r3, #7]
			GamePad.Down = (DataTayGame[5] >> 4) & 1;
 8000dda:	4b72      	ldr	r3, [pc, #456]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000ddc:	795b      	ldrb	r3, [r3, #5]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b6f      	ldr	r3, [pc, #444]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000dea:	721a      	strb	r2, [r3, #8]

			GamePad.Square = (DataTayGame[5] >> 3) & 1;
 8000dec:	4b6d      	ldr	r3, [pc, #436]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	08db      	lsrs	r3, r3, #3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b6b      	ldr	r3, [pc, #428]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000dfc:	725a      	strb	r2, [r3, #9]
			GamePad.Triangle = (DataTayGame[5] >> 2) & 1;
 8000dfe:	4b69      	ldr	r3, [pc, #420]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e00:	795b      	ldrb	r3, [r3, #5]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b66      	ldr	r3, [pc, #408]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000e0e:	729a      	strb	r2, [r3, #10]
			GamePad.Circle = (DataTayGame[5] >> 1) & 1;
 8000e10:	4b64      	ldr	r3, [pc, #400]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e12:	795b      	ldrb	r3, [r3, #5]
 8000e14:	085b      	lsrs	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b62      	ldr	r3, [pc, #392]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000e20:	72da      	strb	r2, [r3, #11]
			GamePad.Cross = DataTayGame[5] & 1;
 8000e22:	4b60      	ldr	r3, [pc, #384]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e24:	795b      	ldrb	r3, [r3, #5]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b5e      	ldr	r3, [pc, #376]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000e2e:	731a      	strb	r2, [r3, #12]

			GamePad.L1 = (DataTayGame[6] >> 7) & 1;
 8000e30:	4b5c      	ldr	r3, [pc, #368]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e32:	799b      	ldrb	r3, [r3, #6]
 8000e34:	09db      	lsrs	r3, r3, #7
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000e3a:	735a      	strb	r2, [r3, #13]
			GamePad.L2 = (DataTayGame[6] >> 6) & 1;
 8000e3c:	4b59      	ldr	r3, [pc, #356]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e3e:	799b      	ldrb	r3, [r3, #6]
 8000e40:	099b      	lsrs	r3, r3, #6
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000e4c:	739a      	strb	r2, [r3, #14]
			GamePad.R1 = (DataTayGame[6] >> 5) & 1;
 8000e4e:	4b55      	ldr	r3, [pc, #340]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e50:	799b      	ldrb	r3, [r3, #6]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b52      	ldr	r3, [pc, #328]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000e5e:	741a      	strb	r2, [r3, #16]
			GamePad.R2 = (DataTayGame[6] >> 4) & 1;
 8000e60:	4b50      	ldr	r3, [pc, #320]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e62:	799b      	ldrb	r3, [r3, #6]
 8000e64:	091b      	lsrs	r3, r3, #4
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000e70:	745a      	strb	r2, [r3, #17]

			GamePad.Touch = (DataTayGame[6] >> 3) & 1;
 8000e72:	4b4c      	ldr	r3, [pc, #304]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e74:	799b      	ldrb	r3, [r3, #6]
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000e82:	74da      	strb	r2, [r3, #19]
			GamePad.Charge = (DataTayGame[6] >> 2) & 1;
 8000e84:	4b47      	ldr	r3, [pc, #284]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e86:	799b      	ldrb	r3, [r3, #6]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000e94:	751a      	strb	r2, [r3, #20]

			GamePad.L3 = (DataTayGame[6] >> 1) & 1;
 8000e96:	4b43      	ldr	r3, [pc, #268]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e98:	799b      	ldrb	r3, [r3, #6]
 8000e9a:	085b      	lsrs	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ea6:	73da      	strb	r2, [r3, #15]
			GamePad.R3 = DataTayGame[6] & 1;
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000eaa:	799b      	ldrb	r3, [r3, #6]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000eb4:	749a      	strb	r2, [r3, #18]

			GamePad.Battery = DataTayGame[7];
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000eb8:	79da      	ldrb	r2, [r3, #7]
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ebc:	755a      	strb	r2, [r3, #21]



			  Xleft = ((GamePad.XLeft-125)/10)*0.3/12;
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ec0:	785b      	ldrb	r3, [r3, #1]
 8000ec2:	3b7d      	subs	r3, #125	; 0x7d
 8000ec4:	4a39      	ldr	r2, [pc, #228]	; (8000fac <HAL_UART_RxCpltCallback+0x2ac>)
 8000ec6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eca:	1092      	asrs	r2, r2, #2
 8000ecc:	17db      	asrs	r3, r3, #31
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff facb 	bl	800046c <__aeabi_i2d>
 8000ed6:	a32e      	add	r3, pc, #184	; (adr r3, 8000f90 <HAL_UART_RxCpltCallback+0x290>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff fb30 	bl	8000540 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000eee:	f7ff fc51 	bl	8000794 <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fd33 	bl	8000964 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a2c      	ldr	r2, [pc, #176]	; (8000fb4 <HAL_UART_RxCpltCallback+0x2b4>)
 8000f02:	6013      	str	r3, [r2, #0]
			  Yleft = ((GamePad.YLeft-125)/10)*0.3/12;
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f06:	789b      	ldrb	r3, [r3, #2]
 8000f08:	3b7d      	subs	r3, #125	; 0x7d
 8000f0a:	4a28      	ldr	r2, [pc, #160]	; (8000fac <HAL_UART_RxCpltCallback+0x2ac>)
 8000f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f10:	1092      	asrs	r2, r2, #2
 8000f12:	17db      	asrs	r3, r3, #31
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff faa8 	bl	800046c <__aeabi_i2d>
 8000f1c:	a31c      	add	r3, pc, #112	; (adr r3, 8000f90 <HAL_UART_RxCpltCallback+0x290>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fb0d 	bl	8000540 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000f34:	f7ff fc2e 	bl	8000794 <__aeabi_ddiv>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fd10 	bl	8000964 <__aeabi_d2f>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8000f48:	6013      	str	r3, [r2, #0]
			  Xright =((GamePad.XRight-120)/10)*30/12;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f4c:	78db      	ldrb	r3, [r3, #3]
 8000f4e:	3b78      	subs	r3, #120	; 0x78
 8000f50:	4a16      	ldr	r2, [pc, #88]	; (8000fac <HAL_UART_RxCpltCallback+0x2ac>)
 8000f52:	fb82 1203 	smull	r1, r2, r2, r3
 8000f56:	1092      	asrs	r2, r2, #2
 8000f58:	17db      	asrs	r3, r3, #31
 8000f5a:	1ad2      	subs	r2, r2, r3
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	1a9b      	subs	r3, r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <HAL_UART_RxCpltCallback+0x2bc>)
 8000f66:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6a:	1052      	asrs	r2, r2, #1
 8000f6c:	17db      	asrs	r3, r3, #31
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
		}
		else{
			GamePad.Status = 0;
		}
	}
}
 8000f7e:	e002      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x286>
			GamePad.Status = 0;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	33333333 	.word	0x33333333
 8000f94:	3fd33333 	.word	0x3fd33333
 8000f98:	40004800 	.word	0x40004800
 8000f9c:	20000084 	.word	0x20000084
 8000fa0:	20000028 	.word	0x20000028
 8000fa4:	20000090 	.word	0x20000090
 8000fa8:	2000006c 	.word	0x2000006c
 8000fac:	66666667 	.word	0x66666667
 8000fb0:	40280000 	.word	0x40280000
 8000fb4:	2000009c 	.word	0x2000009c
 8000fb8:	200000a0 	.word	0x200000a0
 8000fbc:	2aaaaaab 	.word	0x2aaaaaab
 8000fc0:	200000a4 	.word	0x200000a4

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 f9ae 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f80e 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 f894 	bl	80010fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fd4:	f000 f868 	bl	80010a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 8000fd8:	2209      	movs	r2, #9
 8000fda:	4902      	ldr	r1, [pc, #8]	; (8000fe4 <main+0x20>)
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <main+0x24>)
 8000fde:	f001 f9fa 	bl	80023d6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <main+0x1e>
 8000fe4:	20000084 	.word	0x20000084
 8000fe8:	20000028 	.word	0x20000028

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	2230      	movs	r2, #48	; 0x30
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 f916 	bl	800322c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <SystemClock_Config+0xb4>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <SystemClock_Config+0xb4>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <SystemClock_Config+0xb4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <SystemClock_Config+0xb8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <SystemClock_Config+0xb8>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <SystemClock_Config+0xb8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104c:	2301      	movs	r3, #1
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001050:	2310      	movs	r3, #16
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001054:	2300      	movs	r3, #0
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 0320 	add.w	r3, r7, #32
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fd15 	bl	8001a8c <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001068:	f000 f870 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	230f      	movs	r3, #15
 800106e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f000 ff78 	bl	8001f7c <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001092:	f000 f85b 	bl	800114c <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3750      	adds	r7, #80	; 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000

080010a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_USART3_UART_Init+0x4c>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <MX_USART3_UART_Init+0x50>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_USART3_UART_Init+0x4c>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_USART3_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_USART3_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_USART3_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_USART3_UART_Init+0x4c>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_USART3_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_USART3_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_USART3_UART_Init+0x4c>)
 80010e0:	f001 f92c 	bl	800233c <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010ea:	f000 f82f 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000028 	.word	0x20000028
 80010f8:	40004800 	.word	0x40004800

080010fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_GPIO_Init+0x4c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <MX_GPIO_Init+0x4c>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_GPIO_Init+0x4c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_GPIO_Init+0x4c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <MX_GPIO_Init+0x4c>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_GPIO_Init+0x4c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	e7fe      	b.n	8001154 <Error_Handler+0x8>
	...

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_MspInit+0x4c>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_MspInit+0x4c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_UART_MspInit+0x94>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d134      	bne.n	8001234 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001202:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001214:	2307      	movs	r3, #7
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <HAL_UART_MspInit+0x9c>)
 8001220:	f000 fa98 	bl	8001754 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2027      	movs	r0, #39	; 0x27
 800122a:	f000 f9ca 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800122e:	2027      	movs	r0, #39	; 0x27
 8001230:	f000 f9e3 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40004800 	.word	0x40004800
 8001240:	40023800 	.word	0x40023800
 8001244:	40020400 	.word	0x40020400

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f89a 	bl	80013cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <USART3_IRQHandler+0x10>)
 80012a2:	f001 f8c9 	bl	8002438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000028 	.word	0x20000028

080012b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <SystemInit+0x20>)
 80012b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <SystemInit+0x20>)
 80012bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800130c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012da:	490e      	ldr	r1, [pc, #56]	; (8001314 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f0:	4c0b      	ldr	r4, [pc, #44]	; (8001320 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012fe:	f7ff ffd7 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001302:	f001 ff9b 	bl	800323c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001306:	f7ff fe5d 	bl	8000fc4 <main>
  bx  lr    
 800130a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800130c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001314:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001318:	080032c4 	.word	0x080032c4
  ldr r2, =_sbss
 800131c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001320:	200000ac 	.word	0x200000ac

08001324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <ADC_IRQHandler>
	...

08001328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <HAL_Init+0x40>)
 8001332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001336:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_Init+0x40>)
 800133e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001342:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_Init+0x40>)
 800134a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f92b 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001356:	200f      	movs	r0, #15
 8001358:	f000 f808 	bl	800136c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800135c:	f7ff fefc 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023c00 	.word	0x40023c00

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x54>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_InitTick+0x58>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	fbb3 f3f1 	udiv	r3, r3, r1
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f943 	bl	8001616 <HAL_SYSTICK_Config>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e00e      	b.n	80013b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d80a      	bhi.n	80013b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f000 f90b 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_InitTick+0x5c>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000000 	.word	0x20000000
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000004 	.word	0x20000004

080013cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x20>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_IncTick+0x24>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000008 	.word	0x20000008
 80013f0:	200000a8 	.word	0x200000a8

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_GetTick+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	200000a8 	.word	0x200000a8

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	; (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff8e 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff29 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff3e 	bl	8001454 <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff8e 	bl	8001500 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5d 	bl	80014ac <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff31 	bl	8001470 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff feda 	bl	80013f4 <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d008      	beq.n	8001660 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e052      	b.n	8001706 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0216 	bic.w	r2, r2, #22
 800166e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800167e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <HAL_DMA_Abort+0x62>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0208 	bic.w	r2, r2, #8
 800169e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b0:	e013      	b.n	80016da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016b2:	f7ff fe9f 	bl	80013f4 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b05      	cmp	r3, #5
 80016be:	d90c      	bls.n	80016da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2220      	movs	r2, #32
 80016c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2203      	movs	r2, #3
 80016ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e015      	b.n	8001706 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1e4      	bne.n	80016b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	223f      	movs	r2, #63	; 0x3f
 80016ee:	409a      	lsls	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d004      	beq.n	800172c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e00c      	b.n	8001746 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2205      	movs	r2, #5
 8001730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	e16b      	b.n	8001a48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001770:	2201      	movs	r2, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	f040 815a 	bne.w	8001a42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d005      	beq.n	80017a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d130      	bne.n	8001808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 0201 	and.w	r2, r3, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b03      	cmp	r3, #3
 8001812:	d017      	beq.n	8001844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d123      	bne.n	8001898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	69b9      	ldr	r1, [r7, #24]
 8001894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80b4 	beq.w	8001a42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <HAL_GPIO_Init+0x30c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a5f      	ldr	r2, [pc, #380]	; (8001a60 <HAL_GPIO_Init+0x30c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b5d      	ldr	r3, [pc, #372]	; (8001a60 <HAL_GPIO_Init+0x30c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f6:	4a5b      	ldr	r2, [pc, #364]	; (8001a64 <HAL_GPIO_Init+0x310>)
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_GPIO_Init+0x314>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d02b      	beq.n	800197a <HAL_GPIO_Init+0x226>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <HAL_GPIO_Init+0x318>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d025      	beq.n	8001976 <HAL_GPIO_Init+0x222>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a50      	ldr	r2, [pc, #320]	; (8001a70 <HAL_GPIO_Init+0x31c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01f      	beq.n	8001972 <HAL_GPIO_Init+0x21e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4f      	ldr	r2, [pc, #316]	; (8001a74 <HAL_GPIO_Init+0x320>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d019      	beq.n	800196e <HAL_GPIO_Init+0x21a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4e      	ldr	r2, [pc, #312]	; (8001a78 <HAL_GPIO_Init+0x324>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0x216>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4d      	ldr	r2, [pc, #308]	; (8001a7c <HAL_GPIO_Init+0x328>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00d      	beq.n	8001966 <HAL_GPIO_Init+0x212>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <HAL_GPIO_Init+0x32c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x20e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_GPIO_Init+0x330>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_GPIO_Init+0x20a>
 800195a:	2307      	movs	r3, #7
 800195c:	e00e      	b.n	800197c <HAL_GPIO_Init+0x228>
 800195e:	2308      	movs	r3, #8
 8001960:	e00c      	b.n	800197c <HAL_GPIO_Init+0x228>
 8001962:	2306      	movs	r3, #6
 8001964:	e00a      	b.n	800197c <HAL_GPIO_Init+0x228>
 8001966:	2305      	movs	r3, #5
 8001968:	e008      	b.n	800197c <HAL_GPIO_Init+0x228>
 800196a:	2304      	movs	r3, #4
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x228>
 800196e:	2303      	movs	r3, #3
 8001970:	e004      	b.n	800197c <HAL_GPIO_Init+0x228>
 8001972:	2302      	movs	r3, #2
 8001974:	e002      	b.n	800197c <HAL_GPIO_Init+0x228>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x228>
 800197a:	2300      	movs	r3, #0
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f002 0203 	and.w	r2, r2, #3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4093      	lsls	r3, r2
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800198c:	4935      	ldr	r1, [pc, #212]	; (8001a64 <HAL_GPIO_Init+0x310>)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_GPIO_Init+0x334>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019be:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <HAL_GPIO_Init+0x334>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <HAL_GPIO_Init+0x334>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e8:	4a27      	ldr	r2, [pc, #156]	; (8001a88 <HAL_GPIO_Init+0x334>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_GPIO_Init+0x334>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <HAL_GPIO_Init+0x334>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_GPIO_Init+0x334>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <HAL_GPIO_Init+0x334>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3301      	adds	r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b0f      	cmp	r3, #15
 8001a4c:	f67f ae90 	bls.w	8001770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40013800 	.word	0x40013800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020c00 	.word	0x40020c00
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40021400 	.word	0x40021400
 8001a80:	40021800 	.word	0x40021800
 8001a84:	40021c00 	.word	0x40021c00
 8001a88:	40013c00 	.word	0x40013c00

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e267      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d075      	beq.n	8001b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aaa:	4b88      	ldr	r3, [pc, #544]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d00c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	4b85      	ldr	r3, [pc, #532]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d112      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac2:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ace:	d10b      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	4b7e      	ldr	r3, [pc, #504]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d05b      	beq.n	8001b94 <HAL_RCC_OscConfig+0x108>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d157      	bne.n	8001b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e242      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x74>
 8001af2:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a75      	ldr	r2, [pc, #468]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xb0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x98>
 8001b0a:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a6f      	ldr	r2, [pc, #444]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b6d      	ldr	r3, [pc, #436]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6c      	ldr	r2, [pc, #432]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xb0>
 8001b24:	4b69      	ldr	r3, [pc, #420]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a68      	ldr	r2, [pc, #416]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b66      	ldr	r3, [pc, #408]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a65      	ldr	r2, [pc, #404]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fc56 	bl	80013f4 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fc52 	bl	80013f4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e207      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b5b      	ldr	r3, [pc, #364]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xc0>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fc42 	bl	80013f4 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fc3e 	bl	80013f4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1f3      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0xe8>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d063      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bae:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bba:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x152>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1c7      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4937      	ldr	r1, [pc, #220]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	e03a      	b.n	8001c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_RCC_OscConfig+0x244>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff fbf7 	bl	80013f4 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fbf3 	bl	80013f4 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1a8      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4925      	ldr	r1, [pc, #148]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_RCC_OscConfig+0x244>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff fbd6 	bl	80013f4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fbd2 	bl	80013f4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e187      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d036      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d016      	beq.n	8001cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_RCC_OscConfig+0x248>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff fbb6 	bl	80013f4 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fbb2 	bl	80013f4 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e167      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x200>
 8001caa:	e01b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_OscConfig+0x248>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fb9f 	bl	80013f4 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	e00e      	b.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cba:	f7ff fb9b 	bl	80013f4 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d907      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e150      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	42470000 	.word	0x42470000
 8001cd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	4b88      	ldr	r3, [pc, #544]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ea      	bne.n	8001cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8097 	beq.w	8001e20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf6:	4b81      	ldr	r3, [pc, #516]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10f      	bne.n	8001d22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b7d      	ldr	r3, [pc, #500]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a7c      	ldr	r2, [pc, #496]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b7a      	ldr	r3, [pc, #488]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b77      	ldr	r3, [pc, #476]	; (8001f00 <HAL_RCC_OscConfig+0x474>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b74      	ldr	r3, [pc, #464]	; (8001f00 <HAL_RCC_OscConfig+0x474>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a73      	ldr	r2, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x474>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fb5b 	bl	80013f4 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff fb57 	bl	80013f4 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e10c      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_OscConfig+0x474>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x2ea>
 8001d68:	4b64      	ldr	r3, [pc, #400]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a63      	ldr	r2, [pc, #396]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	e01c      	b.n	8001db0 <HAL_RCC_OscConfig+0x324>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x30c>
 8001d7e:	4b5f      	ldr	r3, [pc, #380]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	4a5e      	ldr	r2, [pc, #376]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8a:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	4a5b      	ldr	r2, [pc, #364]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6713      	str	r3, [r2, #112]	; 0x70
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0x324>
 8001d98:	4b58      	ldr	r3, [pc, #352]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4a57      	ldr	r2, [pc, #348]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	6713      	str	r3, [r2, #112]	; 0x70
 8001da4:	4b55      	ldr	r3, [pc, #340]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	4a54      	ldr	r2, [pc, #336]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001daa:	f023 0304 	bic.w	r3, r3, #4
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d015      	beq.n	8001de4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff fb1c 	bl	80013f4 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fb18 	bl	80013f4 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0cb      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd6:	4b49      	ldr	r3, [pc, #292]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0ee      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x334>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7ff fb06 	bl	80013f4 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7ff fb02 	bl	80013f4 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e0b5      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e02:	4b3e      	ldr	r3, [pc, #248]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ee      	bne.n	8001dec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d105      	bne.n	8001e20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e14:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	4a38      	ldr	r2, [pc, #224]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a1 	beq.w	8001f6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e2a:	4b34      	ldr	r3, [pc, #208]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d05c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d141      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_RCC_OscConfig+0x478>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fad6 	bl	80013f4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff fad2 	bl	80013f4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e087      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b27      	ldr	r3, [pc, #156]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	3b01      	subs	r3, #1
 8001e84:	041b      	lsls	r3, r3, #16
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	061b      	lsls	r3, r3, #24
 8001e8e:	491b      	ldr	r1, [pc, #108]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_RCC_OscConfig+0x478>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff faab 	bl	80013f4 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff faa7 	bl	80013f4 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e05c      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x416>
 8001ec0:	e054      	b.n	8001f6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_OscConfig+0x478>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fa94 	bl	80013f4 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff fa90 	bl	80013f4 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e045      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_OscConfig+0x470>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x444>
 8001eee:	e03d      	b.n	8001f6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e038      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40007000 	.word	0x40007000
 8001f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x4ec>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d028      	beq.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d121      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11a      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d111      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	3b01      	subs	r3, #1
 8001f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0cc      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b68      	ldr	r3, [pc, #416]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d90c      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b65      	ldr	r3, [pc, #404]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b63      	ldr	r3, [pc, #396]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b8      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a58      	ldr	r2, [pc, #352]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a52      	ldr	r2, [pc, #328]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b50      	ldr	r3, [pc, #320]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	494d      	ldr	r1, [pc, #308]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d044      	beq.n	800209c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d119      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e07f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d003      	beq.n	800203a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002036:	2b03      	cmp	r3, #3
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203a:	4b3f      	ldr	r3, [pc, #252]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204a:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e067      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205a:	4b37      	ldr	r3, [pc, #220]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f023 0203 	bic.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4934      	ldr	r1, [pc, #208]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800206c:	f7ff f9c2 	bl	80013f4 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	e00a      	b.n	800208a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002074:	f7ff f9be 	bl	80013f4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e04f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 020c 	and.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	429a      	cmp	r2, r3
 800209a:	d1eb      	bne.n	8002074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d20c      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e032      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4916      	ldr	r1, [pc, #88]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	490e      	ldr	r1, [pc, #56]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002102:	f000 f821 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002106:	4602      	mov	r2, r0
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	490a      	ldr	r1, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	5ccb      	ldrb	r3, [r1, r3]
 8002116:	fa22 f303 	lsr.w	r3, r2, r3
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f922 	bl	800136c <HAL_InitTick>

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023c00 	.word	0x40023c00
 8002138:	40023800 	.word	0x40023800
 800213c:	0800329c 	.word	0x0800329c
 8002140:	20000000 	.word	0x20000000
 8002144:	20000004 	.word	0x20000004

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800214c:	b090      	sub	sp, #64	; 0x40
 800214e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
 8002154:	2300      	movs	r3, #0
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002158:	2300      	movs	r3, #0
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d00d      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x40>
 800216c:	2b08      	cmp	r3, #8
 800216e:	f200 80a1 	bhi.w	80022b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x34>
 8002176:	2b04      	cmp	r3, #4
 8002178:	d003      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x3a>
 800217a:	e09b      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_GetSysClockFreq+0x184>)
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002180:	e09b      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002182:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002186:	e098      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002188:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002192:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d028      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	099b      	lsrs	r3, r3, #6
 80021a4:	2200      	movs	r2, #0
 80021a6:	623b      	str	r3, [r7, #32]
 80021a8:	627a      	str	r2, [r7, #36]	; 0x24
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021b0:	2100      	movs	r1, #0
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021b4:	fb03 f201 	mul.w	r2, r3, r1
 80021b8:	2300      	movs	r3, #0
 80021ba:	fb00 f303 	mul.w	r3, r0, r3
 80021be:	4413      	add	r3, r2
 80021c0:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021c2:	fba0 1202 	umull	r1, r2, r0, r2
 80021c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021c8:	460a      	mov	r2, r1
 80021ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80021cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ce:	4413      	add	r3, r2
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d4:	2200      	movs	r2, #0
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	61fa      	str	r2, [r7, #28]
 80021da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021e2:	f7fe fc0f 	bl	8000a04 <__aeabi_uldivmod>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4613      	mov	r3, r2
 80021ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ee:	e053      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	2200      	movs	r2, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	617a      	str	r2, [r7, #20]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002202:	f04f 0b00 	mov.w	fp, #0
 8002206:	4652      	mov	r2, sl
 8002208:	465b      	mov	r3, fp
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	0159      	lsls	r1, r3, #5
 8002214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002218:	0150      	lsls	r0, r2, #5
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	ebb2 080a 	subs.w	r8, r2, sl
 8002222:	eb63 090b 	sbc.w	r9, r3, fp
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002232:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002236:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800223a:	ebb2 0408 	subs.w	r4, r2, r8
 800223e:	eb63 0509 	sbc.w	r5, r3, r9
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	00eb      	lsls	r3, r5, #3
 800224c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002250:	00e2      	lsls	r2, r4, #3
 8002252:	4614      	mov	r4, r2
 8002254:	461d      	mov	r5, r3
 8002256:	eb14 030a 	adds.w	r3, r4, sl
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	eb45 030b 	adc.w	r3, r5, fp
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800226e:	4629      	mov	r1, r5
 8002270:	028b      	lsls	r3, r1, #10
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002278:	4621      	mov	r1, r4
 800227a:	028a      	lsls	r2, r1, #10
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	2200      	movs	r2, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	60fa      	str	r2, [r7, #12]
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fe fbba 	bl	8000a04 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	3301      	adds	r3, #1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80022a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetSysClockFreq+0x184>)
 80022b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3740      	adds	r7, #64	; 0x40
 80022c0:	46bd      	mov	sp, r7
 80022c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	017d7840 	.word	0x017d7840

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	0a9b      	lsrs	r3, r3, #10
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4903      	ldr	r1, [pc, #12]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	080032ac 	.word	0x080032ac

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff ffdc 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0b5b      	lsrs	r3, r3, #13
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	080032ac 	.word	0x080032ac

0800233c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e03f      	b.n	80023ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe ff20 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2224      	movs	r2, #36	; 0x24
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800237e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fcdf 	bl	8002d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	4613      	mov	r3, r2
 80023e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d11d      	bne.n	800242c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <HAL_UART_Receive_IT+0x26>
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e016      	b.n	800242e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_UART_Receive_IT+0x38>
 800240a:	2302      	movs	r3, #2
 800240c:	e00f      	b.n	800242e <HAL_UART_Receive_IT+0x58>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	461a      	mov	r2, r3
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fab6 	bl	8002994 <UART_Start_Receive_IT>
 8002428:	4603      	mov	r3, r0
 800242a:	e000      	b.n	800242e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0ba      	sub	sp, #232	; 0xe8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fb99 	bl	8002bce <UART_Receive_IT>
      return;
 800249c:	e256      	b.n	800294c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800249e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80de 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
 80024a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80d1 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
 80024ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
 80024f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
 8002516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f043 0204 	orr.w	r2, r3, #4
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d011      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f043 0208 	orr.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 81ed 	beq.w	8002942 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
 8002574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fb24 	bl	8002bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_UART_IRQHandler+0x17a>
 80025aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d04f      	beq.n	8002652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa2c 	bl	8002a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d141      	bne.n	800264a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800260a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1d9      	bne.n	80025c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	4a7d      	ldr	r2, [pc, #500]	; (8002814 <HAL_UART_IRQHandler+0x3dc>)
 8002620:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f871 	bl	800170e <HAL_DMA_Abort_IT>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800263c:	4610      	mov	r0, r2
 800263e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	e00e      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f990 	bl	8002968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e00a      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f98c 	bl	8002968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e006      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f988 	bl	8002968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800265e:	e170      	b.n	8002942 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	bf00      	nop
    return;
 8002662:	e16e      	b.n	8002942 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 814a 	bne.w	8002902 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8143 	beq.w	8002902 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 813c 	beq.w	8002902 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	f040 80b4 	bne.w	8002818 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8140 	beq.w	8002946 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ce:	429a      	cmp	r2, r3
 80026d0:	f080 8139 	bcs.w	8002946 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	f000 8088 	beq.w	80027fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1d9      	bne.n	80026ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800275e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800276c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e1      	bne.n	8002736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800279c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e3      	bne.n	8002772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80027de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e3      	bne.n	80027b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe ff1a 	bl	800162e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002802:	b29b      	uxth	r3, r3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	b29b      	uxth	r3, r3
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8b6 	bl	800297c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002810:	e099      	b.n	8002946 <HAL_UART_IRQHandler+0x50e>
 8002812:	bf00      	nop
 8002814:	08002ad7 	.word	0x08002ad7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002820:	b29b      	uxth	r3, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 808b 	beq.w	800294a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8086 	beq.w	800294a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	e853 3f00 	ldrex	r3, [r3]
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002862:	647a      	str	r2, [r7, #68]	; 0x44
 8002864:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800286a:	e841 2300 	strex	r3, r2, [r1]
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e3      	bne.n	800283e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3314      	adds	r3, #20
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	e853 3f00 	ldrex	r3, [r3]
 8002884:	623b      	str	r3, [r7, #32]
   return(result);
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3314      	adds	r3, #20
 8002896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800289a:	633a      	str	r2, [r7, #48]	; 0x30
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a2:	e841 2300 	strex	r3, r2, [r1]
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1e3      	bne.n	8002876 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	e853 3f00 	ldrex	r3, [r3]
 80028ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0310 	bic.w	r3, r3, #16
 80028d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028e0:	61fa      	str	r2, [r7, #28]
 80028e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	e841 2300 	strex	r3, r2, [r1]
 80028ec:	617b      	str	r3, [r7, #20]
   return(result);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e3      	bne.n	80028bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f83e 	bl	800297c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002900:	e023      	b.n	800294a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_UART_IRQHandler+0x4ea>
 800290e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8ef 	bl	8002afe <UART_Transmit_IT>
    return;
 8002920:	e014      	b.n	800294c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00e      	beq.n	800294c <HAL_UART_IRQHandler+0x514>
 800292e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f92f 	bl	8002b9e <UART_EndTransmit_IT>
    return;
 8002940:	e004      	b.n	800294c <HAL_UART_IRQHandler+0x514>
    return;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <HAL_UART_IRQHandler+0x514>
      return;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <HAL_UART_IRQHandler+0x514>
      return;
 800294a:	bf00      	nop
  }
}
 800294c:	37e8      	adds	r7, #232	; 0xe8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop

08002954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2222      	movs	r2, #34	; 0x22
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0220 	orr.w	r2, r2, #32
 8002a00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b095      	sub	sp, #84	; 0x54
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a38:	643a      	str	r2, [r7, #64]	; 0x40
 8002a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e5      	bne.n	8002a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3314      	adds	r3, #20
 8002a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3314      	adds	r3, #20
 8002a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e5      	bne.n	8002a4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d119      	bne.n	8002abc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f023 0310 	bic.w	r3, r3, #16
 8002a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aa8:	61ba      	str	r2, [r7, #24]
 8002aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aac:	6979      	ldr	r1, [r7, #20]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	e841 2300 	strex	r3, r2, [r1]
 8002ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e5      	bne.n	8002a88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002aca:	bf00      	nop
 8002acc:	3754      	adds	r7, #84	; 0x54
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7ff ff39 	bl	8002968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b21      	cmp	r3, #33	; 0x21
 8002b10:	d13e      	bne.n	8002b90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1a:	d114      	bne.n	8002b46 <UART_Transmit_IT+0x48>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d110      	bne.n	8002b46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	1c9a      	adds	r2, r3, #2
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	621a      	str	r2, [r3, #32]
 8002b44:	e008      	b.n	8002b58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	1c59      	adds	r1, r3, #1
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6211      	str	r1, [r2, #32]
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4619      	mov	r1, r3
 8002b66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10f      	bne.n	8002b8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff fec8 	bl	8002954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08c      	sub	sp, #48	; 0x30
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b22      	cmp	r3, #34	; 0x22
 8002be0:	f040 80ab 	bne.w	8002d3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bec:	d117      	bne.n	8002c1e <UART_Receive_IT+0x50>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d113      	bne.n	8002c1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	1c9a      	adds	r2, r3, #2
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c1c:	e026      	b.n	8002c6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c30:	d007      	beq.n	8002c42 <UART_Receive_IT+0x74>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <UART_Receive_IT+0x82>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e008      	b.n	8002c62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d15a      	bne.n	8002d36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0220 	bic.w	r2, r2, #32
 8002c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d135      	bne.n	8002d2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f023 0310 	bic.w	r3, r3, #16
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	330c      	adds	r3, #12
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	623a      	str	r2, [r7, #32]
 8002ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	69f9      	ldr	r1, [r7, #28]
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e5      	bne.n	8002cc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d10a      	bne.n	8002d1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d22:	4619      	mov	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fe29 	bl	800297c <HAL_UARTEx_RxEventCallback>
 8002d2a:	e002      	b.n	8002d32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fd ffe7 	bl	8000d00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e002      	b.n	8002d3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3730      	adds	r7, #48	; 0x30
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b0c0      	sub	sp, #256	; 0x100
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	68d9      	ldr	r1, [r3, #12]
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	ea40 0301 	orr.w	r3, r0, r1
 8002d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d9c:	f021 010c 	bic.w	r1, r1, #12
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002daa:	430b      	orrs	r3, r1
 8002dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbe:	6999      	ldr	r1, [r3, #24]
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	ea40 0301 	orr.w	r3, r0, r1
 8002dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b8f      	ldr	r3, [pc, #572]	; (8003010 <UART_SetConfig+0x2cc>)
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d005      	beq.n	8002de4 <UART_SetConfig+0xa0>
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b8d      	ldr	r3, [pc, #564]	; (8003014 <UART_SetConfig+0x2d0>)
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d104      	bne.n	8002dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002de4:	f7ff fa96 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8002de8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dec:	e003      	b.n	8002df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dee:	f7ff fa7d 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002df2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e00:	f040 810c 	bne.w	800301c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e16:	4622      	mov	r2, r4
 8002e18:	462b      	mov	r3, r5
 8002e1a:	1891      	adds	r1, r2, r2
 8002e1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e1e:	415b      	adcs	r3, r3
 8002e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e26:	4621      	mov	r1, r4
 8002e28:	eb12 0801 	adds.w	r8, r2, r1
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	eb43 0901 	adc.w	r9, r3, r1
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e46:	4690      	mov	r8, r2
 8002e48:	4699      	mov	r9, r3
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	eb18 0303 	adds.w	r3, r8, r3
 8002e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e54:	462b      	mov	r3, r5
 8002e56:	eb49 0303 	adc.w	r3, r9, r3
 8002e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e72:	460b      	mov	r3, r1
 8002e74:	18db      	adds	r3, r3, r3
 8002e76:	653b      	str	r3, [r7, #80]	; 0x50
 8002e78:	4613      	mov	r3, r2
 8002e7a:	eb42 0303 	adc.w	r3, r2, r3
 8002e7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e88:	f7fd fdbc 	bl	8000a04 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4b61      	ldr	r3, [pc, #388]	; (8003018 <UART_SetConfig+0x2d4>)
 8002e92:	fba3 2302 	umull	r2, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	011c      	lsls	r4, r3, #4
 8002e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	1891      	adds	r1, r2, r2
 8002eb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002edc:	4692      	mov	sl, r2
 8002ede:	469b      	mov	fp, r3
 8002ee0:	4643      	mov	r3, r8
 8002ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eea:	464b      	mov	r3, r9
 8002eec:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	18db      	adds	r3, r3, r3
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f0e:	4613      	mov	r3, r2
 8002f10:	eb42 0303 	adc.w	r3, r2, r3
 8002f14:	647b      	str	r3, [r7, #68]	; 0x44
 8002f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f1e:	f7fd fd71 	bl	8000a04 <__aeabi_uldivmod>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <UART_SetConfig+0x2d4>)
 8002f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2264      	movs	r2, #100	; 0x64
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	1acb      	subs	r3, r1, r3
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <UART_SetConfig+0x2d4>)
 8002f40:	fba3 2302 	umull	r2, r3, r3, r2
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f4c:	441c      	add	r4, r3
 8002f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	1891      	adds	r1, r2, r2
 8002f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f68:	415b      	adcs	r3, r3
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f70:	4641      	mov	r1, r8
 8002f72:	1851      	adds	r1, r2, r1
 8002f74:	6339      	str	r1, [r7, #48]	; 0x30
 8002f76:	4649      	mov	r1, r9
 8002f78:	414b      	adcs	r3, r1
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f88:	4659      	mov	r1, fp
 8002f8a:	00cb      	lsls	r3, r1, #3
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f92:	4651      	mov	r1, sl
 8002f94:	00ca      	lsls	r2, r1, #3
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	189b      	adds	r3, r3, r2
 8002fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	eb42 0303 	adc.w	r3, r2, r3
 8002fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	18db      	adds	r3, r3, r3
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fca:	4613      	mov	r3, r2
 8002fcc:	eb42 0303 	adc.w	r3, r2, r3
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fda:	f7fd fd13 	bl	8000a04 <__aeabi_uldivmod>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <UART_SetConfig+0x2d4>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2164      	movs	r1, #100	; 0x64
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	3332      	adds	r3, #50	; 0x32
 8002ff6:	4a08      	ldr	r2, [pc, #32]	; (8003018 <UART_SetConfig+0x2d4>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	f003 0207 	and.w	r2, r3, #7
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4422      	add	r2, r4
 800300a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800300c:	e106      	b.n	800321c <UART_SetConfig+0x4d8>
 800300e:	bf00      	nop
 8003010:	40011000 	.word	0x40011000
 8003014:	40011400 	.word	0x40011400
 8003018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800301c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003020:	2200      	movs	r2, #0
 8003022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003026:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800302a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800302e:	4642      	mov	r2, r8
 8003030:	464b      	mov	r3, r9
 8003032:	1891      	adds	r1, r2, r2
 8003034:	6239      	str	r1, [r7, #32]
 8003036:	415b      	adcs	r3, r3
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800303e:	4641      	mov	r1, r8
 8003040:	1854      	adds	r4, r2, r1
 8003042:	4649      	mov	r1, r9
 8003044:	eb43 0501 	adc.w	r5, r3, r1
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	00eb      	lsls	r3, r5, #3
 8003052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003056:	00e2      	lsls	r2, r4, #3
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	4643      	mov	r3, r8
 800305e:	18e3      	adds	r3, r4, r3
 8003060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003064:	464b      	mov	r3, r9
 8003066:	eb45 0303 	adc.w	r3, r5, r3
 800306a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800307a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800308a:	4629      	mov	r1, r5
 800308c:	008b      	lsls	r3, r1, #2
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003094:	4621      	mov	r1, r4
 8003096:	008a      	lsls	r2, r1, #2
 8003098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800309c:	f7fd fcb2 	bl	8000a04 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4b60      	ldr	r3, [pc, #384]	; (8003228 <UART_SetConfig+0x4e4>)
 80030a6:	fba3 2302 	umull	r2, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	011c      	lsls	r4, r3, #4
 80030ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030c0:	4642      	mov	r2, r8
 80030c2:	464b      	mov	r3, r9
 80030c4:	1891      	adds	r1, r2, r2
 80030c6:	61b9      	str	r1, [r7, #24]
 80030c8:	415b      	adcs	r3, r3
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d0:	4641      	mov	r1, r8
 80030d2:	1851      	adds	r1, r2, r1
 80030d4:	6139      	str	r1, [r7, #16]
 80030d6:	4649      	mov	r1, r9
 80030d8:	414b      	adcs	r3, r1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030e8:	4659      	mov	r1, fp
 80030ea:	00cb      	lsls	r3, r1, #3
 80030ec:	4651      	mov	r1, sl
 80030ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f2:	4651      	mov	r1, sl
 80030f4:	00ca      	lsls	r2, r1, #3
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	4642      	mov	r2, r8
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003104:	464b      	mov	r3, r9
 8003106:	460a      	mov	r2, r1
 8003108:	eb42 0303 	adc.w	r3, r2, r3
 800310c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	67bb      	str	r3, [r7, #120]	; 0x78
 800311a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003128:	4649      	mov	r1, r9
 800312a:	008b      	lsls	r3, r1, #2
 800312c:	4641      	mov	r1, r8
 800312e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003132:	4641      	mov	r1, r8
 8003134:	008a      	lsls	r2, r1, #2
 8003136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800313a:	f7fd fc63 	bl	8000a04 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4611      	mov	r1, r2
 8003144:	4b38      	ldr	r3, [pc, #224]	; (8003228 <UART_SetConfig+0x4e4>)
 8003146:	fba3 2301 	umull	r2, r3, r3, r1
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2264      	movs	r2, #100	; 0x64
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	1acb      	subs	r3, r1, r3
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	3332      	adds	r3, #50	; 0x32
 8003158:	4a33      	ldr	r2, [pc, #204]	; (8003228 <UART_SetConfig+0x4e4>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003164:	441c      	add	r4, r3
 8003166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316a:	2200      	movs	r2, #0
 800316c:	673b      	str	r3, [r7, #112]	; 0x70
 800316e:	677a      	str	r2, [r7, #116]	; 0x74
 8003170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	1891      	adds	r1, r2, r2
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	415b      	adcs	r3, r3
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003184:	4641      	mov	r1, r8
 8003186:	1851      	adds	r1, r2, r1
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	4649      	mov	r1, r9
 800318c:	414b      	adcs	r3, r1
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800319c:	4659      	mov	r1, fp
 800319e:	00cb      	lsls	r3, r1, #3
 80031a0:	4651      	mov	r1, sl
 80031a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a6:	4651      	mov	r1, sl
 80031a8:	00ca      	lsls	r2, r1, #3
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	4642      	mov	r2, r8
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80031b6:	464b      	mov	r3, r9
 80031b8:	460a      	mov	r2, r1
 80031ba:	eb42 0303 	adc.w	r3, r2, r3
 80031be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	663b      	str	r3, [r7, #96]	; 0x60
 80031ca:	667a      	str	r2, [r7, #100]	; 0x64
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031d8:	4649      	mov	r1, r9
 80031da:	008b      	lsls	r3, r1, #2
 80031dc:	4641      	mov	r1, r8
 80031de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e2:	4641      	mov	r1, r8
 80031e4:	008a      	lsls	r2, r1, #2
 80031e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031ea:	f7fd fc0b 	bl	8000a04 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <UART_SetConfig+0x4e4>)
 80031f4:	fba3 1302 	umull	r1, r3, r3, r2
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	2164      	movs	r1, #100	; 0x64
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	3332      	adds	r3, #50	; 0x32
 8003206:	4a08      	ldr	r2, [pc, #32]	; (8003228 <UART_SetConfig+0x4e4>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	f003 020f 	and.w	r2, r3, #15
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4422      	add	r2, r4
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	bf00      	nop
 800321e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003222:	46bd      	mov	sp, r7
 8003224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003228:	51eb851f 	.word	0x51eb851f

0800322c <memset>:
 800322c:	4402      	add	r2, r0
 800322e:	4603      	mov	r3, r0
 8003230:	4293      	cmp	r3, r2
 8003232:	d100      	bne.n	8003236 <memset+0xa>
 8003234:	4770      	bx	lr
 8003236:	f803 1b01 	strb.w	r1, [r3], #1
 800323a:	e7f9      	b.n	8003230 <memset+0x4>

0800323c <__libc_init_array>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	4d0d      	ldr	r5, [pc, #52]	; (8003274 <__libc_init_array+0x38>)
 8003240:	4c0d      	ldr	r4, [pc, #52]	; (8003278 <__libc_init_array+0x3c>)
 8003242:	1b64      	subs	r4, r4, r5
 8003244:	10a4      	asrs	r4, r4, #2
 8003246:	2600      	movs	r6, #0
 8003248:	42a6      	cmp	r6, r4
 800324a:	d109      	bne.n	8003260 <__libc_init_array+0x24>
 800324c:	4d0b      	ldr	r5, [pc, #44]	; (800327c <__libc_init_array+0x40>)
 800324e:	4c0c      	ldr	r4, [pc, #48]	; (8003280 <__libc_init_array+0x44>)
 8003250:	f000 f818 	bl	8003284 <_init>
 8003254:	1b64      	subs	r4, r4, r5
 8003256:	10a4      	asrs	r4, r4, #2
 8003258:	2600      	movs	r6, #0
 800325a:	42a6      	cmp	r6, r4
 800325c:	d105      	bne.n	800326a <__libc_init_array+0x2e>
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	f855 3b04 	ldr.w	r3, [r5], #4
 8003264:	4798      	blx	r3
 8003266:	3601      	adds	r6, #1
 8003268:	e7ee      	b.n	8003248 <__libc_init_array+0xc>
 800326a:	f855 3b04 	ldr.w	r3, [r5], #4
 800326e:	4798      	blx	r3
 8003270:	3601      	adds	r6, #1
 8003272:	e7f2      	b.n	800325a <__libc_init_array+0x1e>
 8003274:	080032bc 	.word	0x080032bc
 8003278:	080032bc 	.word	0x080032bc
 800327c:	080032bc 	.word	0x080032bc
 8003280:	080032c0 	.word	0x080032c0

08003284 <_init>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr

08003290 <_fini>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	bf00      	nop
 8003294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003296:	bc08      	pop	{r3}
 8003298:	469e      	mov	lr, r3
 800329a:	4770      	bx	lr
