
TestTayGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002664  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002804  08002804  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002804  08002804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800280c  0800280c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002810  08002810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000070  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008136  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001603  00000000  00000000  000281b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006b0  00000000  00000000  000297b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000051d  00000000  00000000  00029e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f3d0  00000000  00000000  0002a385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000088fe  00000000  00000000  00049755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000be9ee  00000000  00000000  00052053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001a64  00000000  00000000  00110a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001124a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027d4 	.word	0x080027d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080027d4 	.word	0x080027d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_UART_RxCpltCallback>:
uint8_t DataTayGame[9];

float Xleft,Yleft;
float Xright;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <HAL_UART_RxCpltCallback+0x24>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d104      	bne.n	80004e0 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 80004d6:	2209      	movs	r2, #9
 80004d8:	4904      	ldr	r1, [pc, #16]	; (80004ec <HAL_UART_RxCpltCallback+0x28>)
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <HAL_UART_RxCpltCallback+0x2c>)
 80004dc:	f001 fa2d 	bl	800193a <HAL_UART_Receive_IT>
	}
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40004800 	.word	0x40004800
 80004ec:	2000006c 	.word	0x2000006c
 80004f0:	20000028 	.word	0x20000028

080004f4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	__NOP();
 80004fc:	bf00      	nop
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 f9bc 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f80e 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f894 	bl	8000644 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800051c:	f000 f868 	bl	80005f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 8000520:	2209      	movs	r2, #9
 8000522:	4902      	ldr	r1, [pc, #8]	; (800052c <main+0x20>)
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <main+0x24>)
 8000526:	f001 fa08 	bl	800193a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052a:	e7fe      	b.n	800052a <main+0x1e>
 800052c:	2000006c 	.word	0x2000006c
 8000530:	20000028 	.word	0x20000028

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f002 f91a 	bl	800277c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xb4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xb4>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xb4>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <SystemClock_Config+0xb8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <SystemClock_Config+0xb8>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <SystemClock_Config+0xb8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fd23 	bl	8000ff0 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005b0:	f000 f87e 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 ff86 	bl	80014e0 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005da:	f000 f869 	bl	80006b0 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART3_UART_Init+0x4c>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <MX_USART3_UART_Init+0x50>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_USART3_UART_Init+0x4c>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART3_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART3_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART3_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART3_UART_Init+0x4c>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART3_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART3_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_USART3_UART_Init+0x4c>)
 8000628:	f001 f93a 	bl	80018a0 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000632:	f000 f83d 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028
 8000640:	40004800 	.word	0x40004800

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_GPIO_Init+0x68>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <MX_GPIO_Init+0x68>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_GPIO_Init+0x68>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_GPIO_Init+0x68>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MX_GPIO_Init+0x68>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_GPIO_Init+0x68>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_GPIO_Init+0x68>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <MX_GPIO_Init+0x68>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_GPIO_Init+0x68>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HAL_MspInit+0x4c>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <HAL_MspInit+0x4c>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x4c>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x4c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a1d      	ldr	r2, [pc, #116]	; (80007a0 <HAL_UART_MspInit+0x94>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d134      	bne.n	8000798 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_UART_MspInit+0x98>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000766:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000778:	2307      	movs	r3, #7
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <HAL_UART_MspInit+0x9c>)
 8000784:	f000 fa98 	bl	8000cb8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	2027      	movs	r0, #39	; 0x27
 800078e:	f000 f9ca 	bl	8000b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000792:	2027      	movs	r0, #39	; 0x27
 8000794:	f000 f9e3 	bl	8000b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	; 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40004800 	.word	0x40004800
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f000 f89a 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <USART3_IRQHandler+0x10>)
 8000806:	f001 f8c9 	bl	800199c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000028 	.word	0x20000028

08000814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <SystemInit+0x20>)
 800081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <SystemInit+0x20>)
 8000820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800083e:	490e      	ldr	r1, [pc, #56]	; (8000878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000854:	4c0b      	ldr	r4, [pc, #44]	; (8000884 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000862:	f7ff ffd7 	bl	8000814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000866:	f001 ff91 	bl	800278c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086a:	f7ff fe4f 	bl	800050c <main>
  bx  lr    
 800086e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800087c:	08002814 	.word	0x08002814
  ldr r2, =_sbss
 8000880:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000884:	2000007c 	.word	0x2000007c

08000888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_Init+0x40>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <HAL_Init+0x40>)
 8000896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800089a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <HAL_Init+0x40>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_Init+0x40>)
 80008a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_Init+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <HAL_Init+0x40>)
 80008ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f92b 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 f808 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c0:	f7ff fefc 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023c00 	.word	0x40023c00

080008d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x54>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x58>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f943 	bl	8000b7a <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00e      	b.n	800091c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d80a      	bhi.n	800091a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f000 f90b 	bl	8000b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <HAL_InitTick+0x5c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000000 	.word	0x20000000
 8000928:	20000008 	.word	0x20000008
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	20000078 	.word	0x20000078

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000078 	.word	0x20000078

08000970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <__NVIC_GetPriorityGrouping+0x18>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	f003 0307 	and.w	r3, r3, #7
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db0b      	blt.n	80009fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	f003 021f 	and.w	r2, r3, #31
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <__NVIC_EnableIRQ+0x38>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	095b      	lsrs	r3, r3, #5
 80009f4:	2001      	movs	r0, #1
 80009f6:	fa00 f202 	lsl.w	r2, r0, r2
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000adc:	d301      	bcc.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00f      	b.n	8000b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <SysTick_Config+0x40>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	210f      	movs	r1, #15
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f7ff ff8e 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SysTick_Config+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SysTick_Config+0x40>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff29 	bl	8000970 <__NVIC_SetPriorityGrouping>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff3e 	bl	80009b8 <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff8e 	bl	8000a64 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5d 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff31 	bl	80009d4 <__NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ffa2 	bl	8000acc <SysTick_Config>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff feda 	bl	8000958 <HAL_GetTick>
 8000ba4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d008      	beq.n	8000bc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e052      	b.n	8000c6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 0216 	bic.w	r2, r2, #22
 8000bd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	695a      	ldr	r2, [r3, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000be2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d103      	bne.n	8000bf4 <HAL_DMA_Abort+0x62>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d007      	beq.n	8000c04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f022 0208 	bic.w	r2, r2, #8
 8000c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 0201 	bic.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c14:	e013      	b.n	8000c3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c16:	f7ff fe9f 	bl	8000958 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b05      	cmp	r3, #5
 8000c22:	d90c      	bls.n	8000c3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2220      	movs	r2, #32
 8000c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e015      	b.n	8000c6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1e4      	bne.n	8000c16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c50:	223f      	movs	r2, #63	; 0x3f
 8000c52:	409a      	lsls	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d004      	beq.n	8000c90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e00c      	b.n	8000caa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2205      	movs	r2, #5
 8000c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 0201 	bic.w	r2, r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e16b      	b.n	8000fac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 815a 	bne.w	8000fa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d005      	beq.n	8000d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d130      	bne.n	8000d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 0201 	and.w	r2, r3, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d017      	beq.n	8000da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80b4 	beq.w	8000fa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b60      	ldr	r3, [pc, #384]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a5f      	ldr	r2, [pc, #380]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b5d      	ldr	r3, [pc, #372]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5a:	4a5b      	ldr	r2, [pc, #364]	; (8000fc8 <HAL_GPIO_Init+0x310>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a52      	ldr	r2, [pc, #328]	; (8000fcc <HAL_GPIO_Init+0x314>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d02b      	beq.n	8000ede <HAL_GPIO_Init+0x226>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <HAL_GPIO_Init+0x318>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x222>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <HAL_GPIO_Init+0x31c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x21e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4e      	ldr	r2, [pc, #312]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4d      	ldr	r2, [pc, #308]	; (8000fe0 <HAL_GPIO_Init+0x328>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	; (8000fe4 <HAL_GPIO_Init+0x32c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4b      	ldr	r2, [pc, #300]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x20a>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e00e      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	e00c      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	e00a      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e008      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	f002 0203 	and.w	r2, r2, #3
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef0:	4935      	ldr	r1, [pc, #212]	; (8000fc8 <HAL_GPIO_Init+0x310>)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efe:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f22:	4a32      	ldr	r2, [pc, #200]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f4c:	4a27      	ldr	r2, [pc, #156]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	f67f ae90 	bls.w	8000cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40021400 	.word	0x40021400
 8000fe4:	40021800 	.word	0x40021800
 8000fe8:	40021c00 	.word	0x40021c00
 8000fec:	40013c00 	.word	0x40013c00

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e267      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d075      	beq.n	80010fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100e:	4b88      	ldr	r3, [pc, #544]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b04      	cmp	r3, #4
 8001018:	d00c      	beq.n	8001034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101a:	4b85      	ldr	r3, [pc, #532]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001022:	2b08      	cmp	r3, #8
 8001024:	d112      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001026:	4b82      	ldr	r3, [pc, #520]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001032:	d10b      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	4b7e      	ldr	r3, [pc, #504]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d05b      	beq.n	80010f8 <HAL_RCC_OscConfig+0x108>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d157      	bne.n	80010f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e242      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001054:	d106      	bne.n	8001064 <HAL_RCC_OscConfig+0x74>
 8001056:	4b76      	ldr	r3, [pc, #472]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a75      	ldr	r2, [pc, #468]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800105c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e01d      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x98>
 800106e:	4b70      	ldr	r3, [pc, #448]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a6f      	ldr	r2, [pc, #444]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b6d      	ldr	r3, [pc, #436]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a6c      	ldr	r2, [pc, #432]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e00b      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
 8001088:	4b69      	ldr	r3, [pc, #420]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a68      	ldr	r2, [pc, #416]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800108e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b66      	ldr	r3, [pc, #408]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a65      	ldr	r2, [pc, #404]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800109a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d013      	beq.n	80010d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fc56 	bl	8000958 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fc52 	bl	8000958 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e207      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0xc0>
 80010ce:	e014      	b.n	80010fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fc42 	bl	8000958 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fc3e 	bl	8000958 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e1f3      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	4b51      	ldr	r3, [pc, #324]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0xe8>
 80010f6:	e000      	b.n	80010fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d063      	beq.n	80011ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001106:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d11c      	bne.n	8001158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111e:	4b44      	ldr	r3, [pc, #272]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d116      	bne.n	8001158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_RCC_OscConfig+0x152>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d001      	beq.n	8001142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e1c7      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4937      	ldr	r1, [pc, #220]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001152:	4313      	orrs	r3, r2
 8001154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001156:	e03a      	b.n	80011ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d020      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001160:	4b34      	ldr	r3, [pc, #208]	; (8001234 <HAL_RCC_OscConfig+0x244>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fbf7 	bl	8000958 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116e:	f7ff fbf3 	bl	8000958 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e1a8      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4925      	ldr	r1, [pc, #148]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <HAL_RCC_OscConfig+0x244>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fbd6 	bl	8000958 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fbd2 	bl	8000958 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e187      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d036      	beq.n	8001248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d016      	beq.n	8001210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_RCC_OscConfig+0x248>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fbb6 	bl	8000958 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fbb2 	bl	8000958 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e167      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x200>
 800120e:	e01b      	b.n	8001248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_RCC_OscConfig+0x248>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fb9f 	bl	8000958 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	e00e      	b.n	800123c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121e:	f7ff fb9b 	bl	8000958 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d907      	bls.n	800123c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e150      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
 8001230:	40023800 	.word	0x40023800
 8001234:	42470000 	.word	0x42470000
 8001238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123c:	4b88      	ldr	r3, [pc, #544]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800123e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ea      	bne.n	800121e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 8097 	beq.w	8001384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125a:	4b81      	ldr	r3, [pc, #516]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10f      	bne.n	8001286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a7c      	ldr	r2, [pc, #496]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001282:	2301      	movs	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	4b77      	ldr	r3, [pc, #476]	; (8001464 <HAL_RCC_OscConfig+0x474>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d118      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <HAL_RCC_OscConfig+0x474>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a73      	ldr	r2, [pc, #460]	; (8001464 <HAL_RCC_OscConfig+0x474>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129e:	f7ff fb5b 	bl	8000958 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff fb57 	bl	8000958 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e10c      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <HAL_RCC_OscConfig+0x474>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x2ea>
 80012cc:	4b64      	ldr	r3, [pc, #400]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d0:	4a63      	ldr	r2, [pc, #396]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6713      	str	r3, [r2, #112]	; 0x70
 80012d8:	e01c      	b.n	8001314 <HAL_RCC_OscConfig+0x324>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x30c>
 80012e2:	4b5f      	ldr	r3, [pc, #380]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e6:	4a5e      	ldr	r2, [pc, #376]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6713      	str	r3, [r2, #112]	; 0x70
 80012ee:	4b5c      	ldr	r3, [pc, #368]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6713      	str	r3, [r2, #112]	; 0x70
 80012fa:	e00b      	b.n	8001314 <HAL_RCC_OscConfig+0x324>
 80012fc:	4b58      	ldr	r3, [pc, #352]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	4a57      	ldr	r2, [pc, #348]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	6713      	str	r3, [r2, #112]	; 0x70
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800130a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800130e:	f023 0304 	bic.w	r3, r3, #4
 8001312:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d015      	beq.n	8001348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff fb1c 	bl	8000958 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001324:	f7ff fb18 	bl	8000958 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e0cb      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133a:	4b49      	ldr	r3, [pc, #292]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800133c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0ee      	beq.n	8001324 <HAL_RCC_OscConfig+0x334>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001348:	f7ff fb06 	bl	8000958 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134e:	e00a      	b.n	8001366 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001350:	f7ff fb02 	bl	8000958 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f241 3288 	movw	r2, #5000	; 0x1388
 800135e:	4293      	cmp	r3, r2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e0b5      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001366:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ee      	bne.n	8001350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d105      	bne.n	8001384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001378:	4b39      	ldr	r3, [pc, #228]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a38      	ldr	r2, [pc, #224]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800137e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80a1 	beq.w	80014d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b08      	cmp	r3, #8
 8001398:	d05c      	beq.n	8001454 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d141      	bne.n	8001426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <HAL_RCC_OscConfig+0x478>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fad6 	bl	8000958 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b0:	f7ff fad2 	bl	8000958 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e087      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c2:	4b27      	ldr	r3, [pc, #156]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69da      	ldr	r2, [r3, #28]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	019b      	lsls	r3, r3, #6
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	085b      	lsrs	r3, r3, #1
 80013e6:	3b01      	subs	r3, #1
 80013e8:	041b      	lsls	r3, r3, #16
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_RCC_OscConfig+0x478>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff faab 	bl	8000958 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff faa7 	bl	8000958 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e05c      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x416>
 8001424:	e054      	b.n	80014d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_RCC_OscConfig+0x478>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fa94 	bl	8000958 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fa90 	bl	8000958 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e045      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x444>
 8001452:	e03d      	b.n	80014d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d107      	bne.n	800146c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e038      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000
 8001468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_RCC_OscConfig+0x4ec>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d028      	beq.n	80014cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d121      	bne.n	80014cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d11a      	bne.n	80014cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800149c:	4013      	ands	r3, r2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d111      	bne.n	80014cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d107      	bne.n	80014cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0cc      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d90c      	bls.n	800151c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b63      	ldr	r3, [pc, #396]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0b8      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800153e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a52      	ldr	r2, [pc, #328]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001558:	4b50      	ldr	r3, [pc, #320]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	494d      	ldr	r1, [pc, #308]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d044      	beq.n	8001600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d119      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e07f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d003      	beq.n	800159e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159a:	2b03      	cmp	r3, #3
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e06f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e067      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4934      	ldr	r1, [pc, #208]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff f9c2 	bl	8000958 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff f9be 	bl	8000958 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e04f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 020c 	and.w	r2, r3, #12
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1eb      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d20c      	bcs.n	8001628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e032      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4916      	ldr	r1, [pc, #88]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	490e      	ldr	r1, [pc, #56]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001666:	f000 f821 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 800166a:	4602      	mov	r2, r0
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	490a      	ldr	r1, [pc, #40]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	5ccb      	ldrb	r3, [r1, r3]
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f922 	bl	80008d0 <HAL_InitTick>

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00
 800169c:	40023800 	.word	0x40023800
 80016a0:	080027ec 	.word	0x080027ec
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016b0:	b090      	sub	sp, #64	; 0x40
 80016b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
 80016b8:	2300      	movs	r3, #0
 80016ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016c4:	4b59      	ldr	r3, [pc, #356]	; (800182c <HAL_RCC_GetSysClockFreq+0x180>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d00d      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x40>
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	f200 80a1 	bhi.w	8001818 <HAL_RCC_GetSysClockFreq+0x16c>
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x34>
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d003      	beq.n	80016e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80016de:	e09b      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_GetSysClockFreq+0x184>)
 80016e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016e4:	e09b      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016e6:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_GetSysClockFreq+0x188>)
 80016e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016ea:	e098      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ec:	4b4f      	ldr	r3, [pc, #316]	; (800182c <HAL_RCC_GetSysClockFreq+0x180>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016f6:	4b4d      	ldr	r3, [pc, #308]	; (800182c <HAL_RCC_GetSysClockFreq+0x180>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d028      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <HAL_RCC_GetSysClockFreq+0x180>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	099b      	lsrs	r3, r3, #6
 8001708:	2200      	movs	r2, #0
 800170a:	623b      	str	r3, [r7, #32]
 800170c:	627a      	str	r2, [r7, #36]	; 0x24
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001714:	2100      	movs	r1, #0
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_GetSysClockFreq+0x188>)
 8001718:	fb03 f201 	mul.w	r2, r3, r1
 800171c:	2300      	movs	r3, #0
 800171e:	fb00 f303 	mul.w	r3, r0, r3
 8001722:	4413      	add	r3, r2
 8001724:	4a43      	ldr	r2, [pc, #268]	; (8001834 <HAL_RCC_GetSysClockFreq+0x188>)
 8001726:	fba0 1202 	umull	r1, r2, r0, r2
 800172a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800172c:	460a      	mov	r2, r1
 800172e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001732:	4413      	add	r3, r2
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001738:	2200      	movs	r2, #0
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	61fa      	str	r2, [r7, #28]
 800173e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001742:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001746:	f7fe fd3f 	bl	80001c8 <__aeabi_uldivmod>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4613      	mov	r3, r2
 8001750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001752:	e053      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <HAL_RCC_GetSysClockFreq+0x180>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	099b      	lsrs	r3, r3, #6
 800175a:	2200      	movs	r2, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	617a      	str	r2, [r7, #20]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001766:	f04f 0b00 	mov.w	fp, #0
 800176a:	4652      	mov	r2, sl
 800176c:	465b      	mov	r3, fp
 800176e:	f04f 0000 	mov.w	r0, #0
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	0159      	lsls	r1, r3, #5
 8001778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800177c:	0150      	lsls	r0, r2, #5
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	ebb2 080a 	subs.w	r8, r2, sl
 8001786:	eb63 090b 	sbc.w	r9, r3, fp
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001796:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800179a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800179e:	ebb2 0408 	subs.w	r4, r2, r8
 80017a2:	eb63 0509 	sbc.w	r5, r3, r9
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	00eb      	lsls	r3, r5, #3
 80017b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017b4:	00e2      	lsls	r2, r4, #3
 80017b6:	4614      	mov	r4, r2
 80017b8:	461d      	mov	r5, r3
 80017ba:	eb14 030a 	adds.w	r3, r4, sl
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	eb45 030b 	adc.w	r3, r5, fp
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017d2:	4629      	mov	r1, r5
 80017d4:	028b      	lsls	r3, r1, #10
 80017d6:	4621      	mov	r1, r4
 80017d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017dc:	4621      	mov	r1, r4
 80017de:	028a      	lsls	r2, r1, #10
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e6:	2200      	movs	r2, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	60fa      	str	r2, [r7, #12]
 80017ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017f0:	f7fe fcea 	bl	80001c8 <__aeabi_uldivmod>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4613      	mov	r3, r2
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_GetSysClockFreq+0x180>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	3301      	adds	r3, #1
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800180c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001816:	e002      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_RCC_GetSysClockFreq+0x184>)
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800181c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001820:	4618      	mov	r0, r3
 8001822:	3740      	adds	r7, #64	; 0x40
 8001824:	46bd      	mov	sp, r7
 8001826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	00f42400 	.word	0x00f42400
 8001834:	017d7840 	.word	0x017d7840

08001838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_RCC_GetHCLKFreq+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000000 	.word	0x20000000

08001850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001854:	f7ff fff0 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 8001858:	4602      	mov	r2, r0
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	0a9b      	lsrs	r3, r3, #10
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	4903      	ldr	r1, [pc, #12]	; (8001874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001866:	5ccb      	ldrb	r3, [r1, r3]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	080027fc 	.word	0x080027fc

08001878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800187c:	f7ff ffdc 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 8001880:	4602      	mov	r2, r0
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	0b5b      	lsrs	r3, r3, #13
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	4903      	ldr	r1, [pc, #12]	; (800189c <HAL_RCC_GetPCLK2Freq+0x24>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	080027fc 	.word	0x080027fc

080018a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e03f      	b.n	8001932 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7fe ff20 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2224      	movs	r2, #36	; 0x24
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 fcd5 	bl	8002294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2220      	movs	r2, #32
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	4613      	mov	r3, r2
 8001946:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b20      	cmp	r3, #32
 8001952:	d11d      	bne.n	8001990 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_UART_Receive_IT+0x26>
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e016      	b.n	8001992 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_UART_Receive_IT+0x38>
 800196e:	2302      	movs	r3, #2
 8001970:	e00f      	b.n	8001992 <HAL_UART_Receive_IT+0x58>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	461a      	mov	r2, r3
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 faac 	bl	8001ee4 <UART_Start_Receive_IT>
 800198c:	4603      	mov	r3, r0
 800198e:	e000      	b.n	8001992 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001990:	2302      	movs	r3, #2
  }
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0ba      	sub	sp, #232	; 0xe8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80019ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80019da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10f      	bne.n	8001a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_UART_IRQHandler+0x66>
 80019ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fb8f 	bl	800211e <UART_Receive_IT>
      return;
 8001a00:	e256      	b.n	8001eb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80de 	beq.w	8001bc8 <HAL_UART_IRQHandler+0x22c>
 8001a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80d1 	beq.w	8001bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_UART_IRQHandler+0xae>
 8001a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_UART_IRQHandler+0xd2>
 8001a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f043 0202 	orr.w	r2, r3, #2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00b      	beq.n	8001a92 <HAL_UART_IRQHandler+0xf6>
 8001a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f043 0204 	orr.w	r2, r3, #4
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d011      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x126>
 8001a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d105      	bne.n	8001ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f043 0208 	orr.w	r2, r3, #8
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 81ed 	beq.w	8001ea6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_UART_IRQHandler+0x14e>
 8001ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fb1a 	bl	800211e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	2b40      	cmp	r3, #64	; 0x40
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d103      	bne.n	8001b16 <HAL_UART_IRQHandler+0x17a>
 8001b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d04f      	beq.n	8001bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fa22 	bl	8001f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b26:	2b40      	cmp	r3, #64	; 0x40
 8001b28:	d141      	bne.n	8001bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3314      	adds	r3, #20
 8001b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b38:	e853 3f00 	ldrex	r3, [r3]
 8001b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3314      	adds	r3, #20
 8001b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b66:	e841 2300 	strex	r3, r2, [r1]
 8001b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1d9      	bne.n	8001b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d013      	beq.n	8001ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	4a7d      	ldr	r2, [pc, #500]	; (8001d78 <HAL_UART_IRQHandler+0x3dc>)
 8001b84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f871 	bl	8000c72 <HAL_DMA_Abort_IT>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d016      	beq.n	8001bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ba4:	e00e      	b.n	8001bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe fca4 	bl	80004f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bac:	e00a      	b.n	8001bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fca0 	bl	80004f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb4:	e006      	b.n	8001bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fc9c 	bl	80004f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001bc2:	e170      	b.n	8001ea6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc4:	bf00      	nop
    return;
 8001bc6:	e16e      	b.n	8001ea6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	f040 814a 	bne.w	8001e66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8143 	beq.w	8001e66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 813c 	beq.w	8001e66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0e:	2b40      	cmp	r3, #64	; 0x40
 8001c10:	f040 80b4 	bne.w	8001d7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8140 	beq.w	8001eaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001c32:	429a      	cmp	r2, r3
 8001c34:	f080 8139 	bcs.w	8001eaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c4a:	f000 8088 	beq.w	8001d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	330c      	adds	r3, #12
 8001c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c5c:	e853 3f00 	ldrex	r3, [r3]
 8001c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	330c      	adds	r3, #12
 8001c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c8a:	e841 2300 	strex	r3, r2, [r1]
 8001c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1d9      	bne.n	8001c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3314      	adds	r3, #20
 8001ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca4:	e853 3f00 	ldrex	r3, [r3]
 8001ca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3314      	adds	r3, #20
 8001cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001cca:	e841 2300 	strex	r3, r2, [r1]
 8001cce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1e1      	bne.n	8001c9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3314      	adds	r3, #20
 8001cdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ce0:	e853 3f00 	ldrex	r3, [r3]
 8001ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3314      	adds	r3, #20
 8001cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d02:	e841 2300 	strex	r3, r2, [r1]
 8001d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1e3      	bne.n	8001cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	330c      	adds	r3, #12
 8001d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d26:	e853 3f00 	ldrex	r3, [r3]
 8001d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d2e:	f023 0310 	bic.w	r3, r3, #16
 8001d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	330c      	adds	r3, #12
 8001d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001d40:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d48:	e841 2300 	strex	r3, r2, [r1]
 8001d4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e3      	bne.n	8001d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe ff1a 	bl	8000b92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8ac 	bl	8001ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d74:	e099      	b.n	8001eaa <HAL_UART_IRQHandler+0x50e>
 8001d76:	bf00      	nop
 8001d78:	08002027 	.word	0x08002027
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 808b 	beq.w	8001eae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8086 	beq.w	8001eae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	330c      	adds	r3, #12
 8001da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dac:	e853 3f00 	ldrex	r3, [r3]
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	330c      	adds	r3, #12
 8001dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8001dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dce:	e841 2300 	strex	r3, r2, [r1]
 8001dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1e3      	bne.n	8001da2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3314      	adds	r3, #20
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	e853 3f00 	ldrex	r3, [r3]
 8001de8:	623b      	str	r3, [r7, #32]
   return(result);
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3314      	adds	r3, #20
 8001dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e06:	e841 2300 	strex	r3, r2, [r1]
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1e3      	bne.n	8001dda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	330c      	adds	r3, #12
 8001e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	e853 3f00 	ldrex	r3, [r3]
 8001e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0310 	bic.w	r3, r3, #16
 8001e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	330c      	adds	r3, #12
 8001e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e44:	61fa      	str	r2, [r7, #28]
 8001e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e48:	69b9      	ldr	r1, [r7, #24]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	e841 2300 	strex	r3, r2, [r1]
 8001e50:	617b      	str	r3, [r7, #20]
   return(result);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e3      	bne.n	8001e20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f834 	bl	8001ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001e64:	e023      	b.n	8001eae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_UART_IRQHandler+0x4ea>
 8001e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8e5 	bl	800204e <UART_Transmit_IT>
    return;
 8001e84:	e014      	b.n	8001eb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00e      	beq.n	8001eb0 <HAL_UART_IRQHandler+0x514>
 8001e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f925 	bl	80020ee <UART_EndTransmit_IT>
    return;
 8001ea4:	e004      	b.n	8001eb0 <HAL_UART_IRQHandler+0x514>
    return;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8001eae:	bf00      	nop
  }
}
 8001eb0:	37e8      	adds	r7, #232	; 0xe8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop

08001eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	88fa      	ldrh	r2, [r7, #6]
 8001efc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	88fa      	ldrh	r2, [r7, #6]
 8001f02:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2222      	movs	r2, #34	; 0x22
 8001f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0220 	orr.w	r2, r2, #32
 8001f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b095      	sub	sp, #84	; 0x54
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f72:	e853 3f00 	ldrex	r3, [r3]
 8001f76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	330c      	adds	r3, #12
 8001f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f88:	643a      	str	r2, [r7, #64]	; 0x40
 8001f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f90:	e841 2300 	strex	r3, r2, [r1]
 8001f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e5      	bne.n	8001f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	e853 3f00 	ldrex	r3, [r3]
 8001faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3314      	adds	r3, #20
 8001fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc4:	e841 2300 	strex	r3, r2, [r1]
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e5      	bne.n	8001f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d119      	bne.n	800200c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	330c      	adds	r3, #12
 8001fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	e853 3f00 	ldrex	r3, [r3]
 8001fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f023 0310 	bic.w	r3, r3, #16
 8001fee:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	330c      	adds	r3, #12
 8001ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ff8:	61ba      	str	r2, [r7, #24]
 8001ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffc:	6979      	ldr	r1, [r7, #20]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	e841 2300 	strex	r3, r2, [r1]
 8002004:	613b      	str	r3, [r7, #16]
   return(result);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e5      	bne.n	8001fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800201a:	bf00      	nop
 800201c:	3754      	adds	r7, #84	; 0x54
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f7fe fa57 	bl	80004f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b21      	cmp	r3, #33	; 0x21
 8002060:	d13e      	bne.n	80020e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206a:	d114      	bne.n	8002096 <UART_Transmit_IT+0x48>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d110      	bne.n	8002096 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002088:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	1c9a      	adds	r2, r3, #2
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	621a      	str	r2, [r3, #32]
 8002094:	e008      	b.n	80020a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	1c59      	adds	r1, r3, #1
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6211      	str	r1, [r2, #32]
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4619      	mov	r1, r3
 80020b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10f      	bne.n	80020dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	e000      	b.n	80020e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80020e0:	2302      	movs	r3, #2
  }
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fed2 	bl	8001eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b08c      	sub	sp, #48	; 0x30
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b22      	cmp	r3, #34	; 0x22
 8002130:	f040 80ab 	bne.w	800228a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213c:	d117      	bne.n	800216e <UART_Receive_IT+0x50>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d113      	bne.n	800216e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215c:	b29a      	uxth	r2, r3
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	1c9a      	adds	r2, r3, #2
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
 800216c:	e026      	b.n	80021bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002180:	d007      	beq.n	8002192 <UART_Receive_IT+0x74>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10a      	bne.n	80021a0 <UART_Receive_IT+0x82>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e008      	b.n	80021b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4619      	mov	r1, r3
 80021ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d15a      	bne.n	8002286 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0220 	bic.w	r2, r2, #32
 80021de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	2b01      	cmp	r3, #1
 800220e:	d135      	bne.n	800227c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	330c      	adds	r3, #12
 800221c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	613b      	str	r3, [r7, #16]
   return(result);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f023 0310 	bic.w	r3, r3, #16
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	330c      	adds	r3, #12
 8002234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002236:	623a      	str	r2, [r7, #32]
 8002238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223a:	69f9      	ldr	r1, [r7, #28]
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	e841 2300 	strex	r3, r2, [r1]
 8002242:	61bb      	str	r3, [r7, #24]
   return(result);
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e5      	bne.n	8002216 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b10      	cmp	r3, #16
 8002256:	d10a      	bne.n	800226e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002272:	4619      	mov	r1, r3
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff fe29 	bl	8001ecc <HAL_UARTEx_RxEventCallback>
 800227a:	e002      	b.n	8002282 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7fe f921 	bl	80004c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e002      	b.n	800228c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800228a:	2302      	movs	r3, #2
  }
}
 800228c:	4618      	mov	r0, r3
 800228e:	3730      	adds	r7, #48	; 0x30
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002298:	b0c0      	sub	sp, #256	; 0x100
 800229a:	af00      	add	r7, sp, #0
 800229c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b0:	68d9      	ldr	r1, [r3, #12]
 80022b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	ea40 0301 	orr.w	r3, r0, r1
 80022bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80022ec:	f021 010c 	bic.w	r1, r1, #12
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022fa:	430b      	orrs	r3, r1
 80022fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800230a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230e:	6999      	ldr	r1, [r3, #24]
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	ea40 0301 	orr.w	r3, r0, r1
 800231a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <UART_SetConfig+0x2cc>)
 8002324:	429a      	cmp	r2, r3
 8002326:	d005      	beq.n	8002334 <UART_SetConfig+0xa0>
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4b8d      	ldr	r3, [pc, #564]	; (8002564 <UART_SetConfig+0x2d0>)
 8002330:	429a      	cmp	r2, r3
 8002332:	d104      	bne.n	800233e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002334:	f7ff faa0 	bl	8001878 <HAL_RCC_GetPCLK2Freq>
 8002338:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800233c:	e003      	b.n	8002346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800233e:	f7ff fa87 	bl	8001850 <HAL_RCC_GetPCLK1Freq>
 8002342:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002350:	f040 810c 	bne.w	800256c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002358:	2200      	movs	r2, #0
 800235a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800235e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002366:	4622      	mov	r2, r4
 8002368:	462b      	mov	r3, r5
 800236a:	1891      	adds	r1, r2, r2
 800236c:	65b9      	str	r1, [r7, #88]	; 0x58
 800236e:	415b      	adcs	r3, r3
 8002370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002376:	4621      	mov	r1, r4
 8002378:	eb12 0801 	adds.w	r8, r2, r1
 800237c:	4629      	mov	r1, r5
 800237e:	eb43 0901 	adc.w	r9, r3, r1
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800238e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002396:	4690      	mov	r8, r2
 8002398:	4699      	mov	r9, r3
 800239a:	4623      	mov	r3, r4
 800239c:	eb18 0303 	adds.w	r3, r8, r3
 80023a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023a4:	462b      	mov	r3, r5
 80023a6:	eb49 0303 	adc.w	r3, r9, r3
 80023aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023c2:	460b      	mov	r3, r1
 80023c4:	18db      	adds	r3, r3, r3
 80023c6:	653b      	str	r3, [r7, #80]	; 0x50
 80023c8:	4613      	mov	r3, r2
 80023ca:	eb42 0303 	adc.w	r3, r2, r3
 80023ce:	657b      	str	r3, [r7, #84]	; 0x54
 80023d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80023d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80023d8:	f7fd fef6 	bl	80001c8 <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4b61      	ldr	r3, [pc, #388]	; (8002568 <UART_SetConfig+0x2d4>)
 80023e2:	fba3 2302 	umull	r2, r3, r3, r2
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	011c      	lsls	r4, r3, #4
 80023ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ee:	2200      	movs	r2, #0
 80023f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80023fc:	4642      	mov	r2, r8
 80023fe:	464b      	mov	r3, r9
 8002400:	1891      	adds	r1, r2, r2
 8002402:	64b9      	str	r1, [r7, #72]	; 0x48
 8002404:	415b      	adcs	r3, r3
 8002406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800240c:	4641      	mov	r1, r8
 800240e:	eb12 0a01 	adds.w	sl, r2, r1
 8002412:	4649      	mov	r1, r9
 8002414:	eb43 0b01 	adc.w	fp, r3, r1
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800242c:	4692      	mov	sl, r2
 800242e:	469b      	mov	fp, r3
 8002430:	4643      	mov	r3, r8
 8002432:	eb1a 0303 	adds.w	r3, sl, r3
 8002436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800243a:	464b      	mov	r3, r9
 800243c:	eb4b 0303 	adc.w	r3, fp, r3
 8002440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002450:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002458:	460b      	mov	r3, r1
 800245a:	18db      	adds	r3, r3, r3
 800245c:	643b      	str	r3, [r7, #64]	; 0x40
 800245e:	4613      	mov	r3, r2
 8002460:	eb42 0303 	adc.w	r3, r2, r3
 8002464:	647b      	str	r3, [r7, #68]	; 0x44
 8002466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800246a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800246e:	f7fd feab 	bl	80001c8 <__aeabi_uldivmod>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4611      	mov	r1, r2
 8002478:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <UART_SetConfig+0x2d4>)
 800247a:	fba3 2301 	umull	r2, r3, r3, r1
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2264      	movs	r2, #100	; 0x64
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	1acb      	subs	r3, r1, r3
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800248e:	4b36      	ldr	r3, [pc, #216]	; (8002568 <UART_SetConfig+0x2d4>)
 8002490:	fba3 2302 	umull	r2, r3, r3, r2
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800249c:	441c      	add	r4, r3
 800249e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a2:	2200      	movs	r2, #0
 80024a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024b0:	4642      	mov	r2, r8
 80024b2:	464b      	mov	r3, r9
 80024b4:	1891      	adds	r1, r2, r2
 80024b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80024b8:	415b      	adcs	r3, r3
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024c0:	4641      	mov	r1, r8
 80024c2:	1851      	adds	r1, r2, r1
 80024c4:	6339      	str	r1, [r7, #48]	; 0x30
 80024c6:	4649      	mov	r1, r9
 80024c8:	414b      	adcs	r3, r1
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80024d8:	4659      	mov	r1, fp
 80024da:	00cb      	lsls	r3, r1, #3
 80024dc:	4651      	mov	r1, sl
 80024de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024e2:	4651      	mov	r1, sl
 80024e4:	00ca      	lsls	r2, r1, #3
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	4642      	mov	r2, r8
 80024ee:	189b      	adds	r3, r3, r2
 80024f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024f4:	464b      	mov	r3, r9
 80024f6:	460a      	mov	r2, r1
 80024f8:	eb42 0303 	adc.w	r3, r2, r3
 80024fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800250c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002514:	460b      	mov	r3, r1
 8002516:	18db      	adds	r3, r3, r3
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
 800251a:	4613      	mov	r3, r2
 800251c:	eb42 0303 	adc.w	r3, r2, r3
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800252a:	f7fd fe4d 	bl	80001c8 <__aeabi_uldivmod>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <UART_SetConfig+0x2d4>)
 8002534:	fba3 1302 	umull	r1, r3, r3, r2
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	2164      	movs	r1, #100	; 0x64
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	3332      	adds	r3, #50	; 0x32
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <UART_SetConfig+0x2d4>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	f003 0207 	and.w	r2, r3, #7
 8002552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4422      	add	r2, r4
 800255a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800255c:	e106      	b.n	800276c <UART_SetConfig+0x4d8>
 800255e:	bf00      	nop
 8002560:	40011000 	.word	0x40011000
 8002564:	40011400 	.word	0x40011400
 8002568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800256c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002570:	2200      	movs	r2, #0
 8002572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002576:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800257a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800257e:	4642      	mov	r2, r8
 8002580:	464b      	mov	r3, r9
 8002582:	1891      	adds	r1, r2, r2
 8002584:	6239      	str	r1, [r7, #32]
 8002586:	415b      	adcs	r3, r3
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
 800258a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800258e:	4641      	mov	r1, r8
 8002590:	1854      	adds	r4, r2, r1
 8002592:	4649      	mov	r1, r9
 8002594:	eb43 0501 	adc.w	r5, r3, r1
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	00eb      	lsls	r3, r5, #3
 80025a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025a6:	00e2      	lsls	r2, r4, #3
 80025a8:	4614      	mov	r4, r2
 80025aa:	461d      	mov	r5, r3
 80025ac:	4643      	mov	r3, r8
 80025ae:	18e3      	adds	r3, r4, r3
 80025b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025b4:	464b      	mov	r3, r9
 80025b6:	eb45 0303 	adc.w	r3, r5, r3
 80025ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025da:	4629      	mov	r1, r5
 80025dc:	008b      	lsls	r3, r1, #2
 80025de:	4621      	mov	r1, r4
 80025e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025e4:	4621      	mov	r1, r4
 80025e6:	008a      	lsls	r2, r1, #2
 80025e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80025ec:	f7fd fdec 	bl	80001c8 <__aeabi_uldivmod>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4b60      	ldr	r3, [pc, #384]	; (8002778 <UART_SetConfig+0x4e4>)
 80025f6:	fba3 2302 	umull	r2, r3, r3, r2
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	011c      	lsls	r4, r3, #4
 80025fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002608:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800260c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	1891      	adds	r1, r2, r2
 8002616:	61b9      	str	r1, [r7, #24]
 8002618:	415b      	adcs	r3, r3
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002620:	4641      	mov	r1, r8
 8002622:	1851      	adds	r1, r2, r1
 8002624:	6139      	str	r1, [r7, #16]
 8002626:	4649      	mov	r1, r9
 8002628:	414b      	adcs	r3, r1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002638:	4659      	mov	r1, fp
 800263a:	00cb      	lsls	r3, r1, #3
 800263c:	4651      	mov	r1, sl
 800263e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002642:	4651      	mov	r1, sl
 8002644:	00ca      	lsls	r2, r1, #3
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	4603      	mov	r3, r0
 800264c:	4642      	mov	r2, r8
 800264e:	189b      	adds	r3, r3, r2
 8002650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002654:	464b      	mov	r3, r9
 8002656:	460a      	mov	r2, r1
 8002658:	eb42 0303 	adc.w	r3, r2, r3
 800265c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	67bb      	str	r3, [r7, #120]	; 0x78
 800266a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002678:	4649      	mov	r1, r9
 800267a:	008b      	lsls	r3, r1, #2
 800267c:	4641      	mov	r1, r8
 800267e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002682:	4641      	mov	r1, r8
 8002684:	008a      	lsls	r2, r1, #2
 8002686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800268a:	f7fd fd9d 	bl	80001c8 <__aeabi_uldivmod>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4611      	mov	r1, r2
 8002694:	4b38      	ldr	r3, [pc, #224]	; (8002778 <UART_SetConfig+0x4e4>)
 8002696:	fba3 2301 	umull	r2, r3, r3, r1
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2264      	movs	r2, #100	; 0x64
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	1acb      	subs	r3, r1, r3
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	3332      	adds	r3, #50	; 0x32
 80026a8:	4a33      	ldr	r2, [pc, #204]	; (8002778 <UART_SetConfig+0x4e4>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b4:	441c      	add	r4, r3
 80026b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ba:	2200      	movs	r2, #0
 80026bc:	673b      	str	r3, [r7, #112]	; 0x70
 80026be:	677a      	str	r2, [r7, #116]	; 0x74
 80026c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026c4:	4642      	mov	r2, r8
 80026c6:	464b      	mov	r3, r9
 80026c8:	1891      	adds	r1, r2, r2
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	415b      	adcs	r3, r3
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d4:	4641      	mov	r1, r8
 80026d6:	1851      	adds	r1, r2, r1
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	4649      	mov	r1, r9
 80026dc:	414b      	adcs	r3, r1
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026ec:	4659      	mov	r1, fp
 80026ee:	00cb      	lsls	r3, r1, #3
 80026f0:	4651      	mov	r1, sl
 80026f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f6:	4651      	mov	r1, sl
 80026f8:	00ca      	lsls	r2, r1, #3
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	4642      	mov	r2, r8
 8002702:	189b      	adds	r3, r3, r2
 8002704:	66bb      	str	r3, [r7, #104]	; 0x68
 8002706:	464b      	mov	r3, r9
 8002708:	460a      	mov	r2, r1
 800270a:	eb42 0303 	adc.w	r3, r2, r3
 800270e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	663b      	str	r3, [r7, #96]	; 0x60
 800271a:	667a      	str	r2, [r7, #100]	; 0x64
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002728:	4649      	mov	r1, r9
 800272a:	008b      	lsls	r3, r1, #2
 800272c:	4641      	mov	r1, r8
 800272e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002732:	4641      	mov	r1, r8
 8002734:	008a      	lsls	r2, r1, #2
 8002736:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800273a:	f7fd fd45 	bl	80001c8 <__aeabi_uldivmod>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <UART_SetConfig+0x4e4>)
 8002744:	fba3 1302 	umull	r1, r3, r3, r2
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	2164      	movs	r1, #100	; 0x64
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	3332      	adds	r3, #50	; 0x32
 8002756:	4a08      	ldr	r2, [pc, #32]	; (8002778 <UART_SetConfig+0x4e4>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	f003 020f 	and.w	r2, r3, #15
 8002762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4422      	add	r2, r4
 800276a:	609a      	str	r2, [r3, #8]
}
 800276c:	bf00      	nop
 800276e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002772:	46bd      	mov	sp, r7
 8002774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002778:	51eb851f 	.word	0x51eb851f

0800277c <memset>:
 800277c:	4402      	add	r2, r0
 800277e:	4603      	mov	r3, r0
 8002780:	4293      	cmp	r3, r2
 8002782:	d100      	bne.n	8002786 <memset+0xa>
 8002784:	4770      	bx	lr
 8002786:	f803 1b01 	strb.w	r1, [r3], #1
 800278a:	e7f9      	b.n	8002780 <memset+0x4>

0800278c <__libc_init_array>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	4d0d      	ldr	r5, [pc, #52]	; (80027c4 <__libc_init_array+0x38>)
 8002790:	4c0d      	ldr	r4, [pc, #52]	; (80027c8 <__libc_init_array+0x3c>)
 8002792:	1b64      	subs	r4, r4, r5
 8002794:	10a4      	asrs	r4, r4, #2
 8002796:	2600      	movs	r6, #0
 8002798:	42a6      	cmp	r6, r4
 800279a:	d109      	bne.n	80027b0 <__libc_init_array+0x24>
 800279c:	4d0b      	ldr	r5, [pc, #44]	; (80027cc <__libc_init_array+0x40>)
 800279e:	4c0c      	ldr	r4, [pc, #48]	; (80027d0 <__libc_init_array+0x44>)
 80027a0:	f000 f818 	bl	80027d4 <_init>
 80027a4:	1b64      	subs	r4, r4, r5
 80027a6:	10a4      	asrs	r4, r4, #2
 80027a8:	2600      	movs	r6, #0
 80027aa:	42a6      	cmp	r6, r4
 80027ac:	d105      	bne.n	80027ba <__libc_init_array+0x2e>
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
 80027b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b4:	4798      	blx	r3
 80027b6:	3601      	adds	r6, #1
 80027b8:	e7ee      	b.n	8002798 <__libc_init_array+0xc>
 80027ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80027be:	4798      	blx	r3
 80027c0:	3601      	adds	r6, #1
 80027c2:	e7f2      	b.n	80027aa <__libc_init_array+0x1e>
 80027c4:	0800280c 	.word	0x0800280c
 80027c8:	0800280c 	.word	0x0800280c
 80027cc:	0800280c 	.word	0x0800280c
 80027d0:	08002810 	.word	0x08002810

080027d4 <_init>:
 80027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d6:	bf00      	nop
 80027d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027da:	bc08      	pop	{r3}
 80027dc:	469e      	mov	lr, r3
 80027de:	4770      	bx	lr

080027e0 <_fini>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr
